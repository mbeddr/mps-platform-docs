{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"(?!MPS)[\\s\\-/#:]"},"docs":[{"location":"","text":"This website collects practical knowledge about MPS and popular MPS platforms. It\u2019s written mainly in the form of a Q&A. It contains questions and answers for MPS2 MPS and the following platforms: MPS -extensions mbeddr IETS3 Click on one of the buttons to go directly to one of the documentations. You can open links starting with http://127.0.0.1 with the builtin HTTP support plugin . Platform specific instructions are marked when possible. Long answers are collapsed by default. If you have any suggestions, please write a comment at the bottom of the page or open an issue on GitHub. Latest version: MPS 2021.3.1 Minimum version in doc : MPS 2021.1.4 If you aren\u2019t already a member, consider joining MPS on Slack . A Twitter user \u201c6 hours of debugging can save you 5 minutes of reading documentation.\u201d","title":"Home"},{"location":"about/editing_this_guide/","text":"Editing this guide \u00b6 This guide uses MkDocs + Material for MkDocs . The markdown version is Python-Markdown . This page contains the reference for the material theme. Install extra MkDocs plugins in build.gradle + mkdocs.yml. If you are using IntelliJ for editing, it is recommended to install the plugin Grazie Professional for spell checking. Editing \u00b6 The first header should be # . Inserted images with Markdown, not HTML: ![description](url){width=\"600px\"} . Set the with to 600px or 300px, depending on how big or small the image is footnotes syntax The target=_blank attribute and an icon for external links gets automatically added to links. The following symbols must be escaped: $ is &#36; because it collides with inline Latex blocks. Trees can be created with the terminal command tree . It supports the -I parameter for excluding folders. Extensions \u00b6 Besides the Material extensions, the project used the following Pymdown extensions: pymdownx.betterem : different emphasis handling pymdownx.inlinehilite : inline code highlighting; example: #!js var test = 0; pymdownx.magiclink : linkafies URLs pymdownx.smartsymbols : inserts commonly used Unicode characters via ASCII representations. pymdownx.superfences : extension to Markdown fences pymdownx.details : collapsible elements pymdownx.highlight pymdownx.snippets : include other Markdown or HTML snippets into the current Markdown file pymdownx.keys : simplifies inserting key inputs; example: Ctrl + Alt + Del pymdownx.caret : superscript text via caret pymdownx.mark : enables marking words pymdownx.tilde : subscript text via tilde pymdownx.emoji : support for custom Emojis. Some example icons are in MPS Icons . pymdownx.tasklist : support for lists with checkboxes mk_in_html : support for markdown in HTML pymdownx.magiclink : additional link related features mdx-spanner :enables rowspan and colspan in markdown tables Macros \u00b6 The plugin mkdocs-macros-plugin is activated. You can add variables to the extra section of mkdocs.yml (example: mps_latest ) and use the available macros: contribution_by(github_username) question_by(github_username) answer_by(github_username) mps_url(identifier) image_popup() iets3() mbeddr() mbeddr_platform() mps_extensions() mps Look through main. py to see how they are implemented. The identifier can start with one of the following special identifiers: @openapi @mps @baselang @mpsutil @itemis @mbeddr @iets3 The special identifiers get translated to the corresponding package names. Only the last part of the identifier has to be the correct name. The identifier can reference classes, interfaces, concept, and interface declarations in baselanguage, mps-extensions, mbeddr, and iets3. The rest of the identifier only helps to find the correct node and doesn\u2019t have to be exact. Example: @mps.ClassConcept will find jetbrains.mps.baseLanguage.structure.ClassConcept . When the wrong node is selected, enter more parts of the full qualified name of the node. Diagrams \u00b6 Kroki enables support for diagrams ( examples ). It supports the following diagrams: BlockDiag BlockDiag (simple block diagrams) SeqDiag (simple sequence diagrams) ActDiag (simple activity diagrams) NwDiag (simple network diagrams) PacketDiag (packet header diagrams) RackDiag (rack diagrams) BPMN Bytefield C4 (with PlantUML) Ditaa Erd Excalidraw GraphViz Mermaid Nomnoml Pikchr PlantUML Structurizr SvgBob UMLet Vega Vega-Lite WaveDrom They can be embedded by creating a code block and the text kroki-[diagramtype] . The following sections contain ideas for diagrams. blockdiag \u00b6 Diagram 1 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 blockdiag { orientation = portrait R -> A R -> B B -> C C -> E B -> D D -> F F -> E D -> G A <- C B -> D } Diagram 2 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 blockdiag { default_node_color = 'yellow' if [shape=\"roundedbox\", color='white'] condition [numbered = 1, shape=\"roundedbox\", description=\"the condition\"] true_block [numbered = 1, shape=\"roundedbox\"] false_block [numbered = 0-1, shape=\"roundedbox\"] if -> condition if -> true_block if -> false_block } SeqDiag \u00b6 Diagram Code 1 2 3 4 5 6 7 seqdiag { MPS -> Clipboard [label = \"Copy Node Reference as URL\"] Clipboard -> Browser [label = \"Paste URL\"] http_server [label=\"MPS HTTP Server\"] Browser -> http_server [label = \"Send request\"] http_server -> MPS [label = \"Open Node\"] } ActDiag \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 actdiag { createConcept -> createEditor -> createNodes lane language { label = \"Language\" createConcept [label = \"Create concept\"] createEditor [label = \"Create editor\"] } lane solution { label =\"Solution\" createNodes [label = \"Create nodes\"] } } Graphviz \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 digraph finite_state_machine { rankdir=LR; planning -> analysis analysis -> design design -> implementation ti [label=\"testing & integration\"] implementation -> ti ti -> maintenance maintenance -> planning } Ditaa \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 +--------+ | | | User | | | +--------+ ^ request | v +-------------+ | | | Kroki | | |---+ +-------------+ | ^ ^ | inflate | | | v +---------+ +-------------+ | | | Ditaa | | |----+ +-------------+ | ^ | process | | +-------+ mermaid.js \u00b6 Diagram Code 1 2 3 4 5 graph TD; A-->B; A-->C; B-->D; C-->D; nomnoml \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [Pirate|eyeCount: Int|raid();pillage()| [beard]--[parrot] [beard]-:>[foul mouth] ] [<table>mischief | bawl | sing || yell | drink] [<abstract>Marauder]<:--[Pirate] [Pirate]- 0..7[mischief] [jollyness]->[Pirate] [jollyness]->[rum] [jollyness]->[singing] [Pirate]-> *[rum|tastiness: Int|swig()] [Pirate]->[singing] [singing]<->[rum] [<start>st]->[<state>plunder] [plunder]->[<choice>more loot] [more loot]->[st] [more loot] no ->[<end>e] [<actor>Sailor] - [<usecase>shiver me;timbers] plantUML \u00b6 Diagram 1 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml Diagram 2 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs BPMN \u00b6 Diagram Code ``` <?xml version=\u201d1.0\u201d encoding=\u201dUTF-8\u201d?> OrderReceivedEvent _6-652 _6-674 CalmCustomerTask _6-463 _6-514 _6-565 _6-616 _6-630 _6-630 _6-691 _6-693 _6-691 _6-746 _6-748 _6-748 _6-746 _6-693 _6-632 _6-632 _6-634 _6-634 _6-636 _6-636 _6-125 _6-125 _6-178 _6-178 _6-420 _6-420 _6-430 _6-422 _6-424 _6-422 _6-428 _6-424 _6-426 _6-426 _6-430 _6-428 _6-434 _6-434 _6-436 _6-436 < di :waypoint x=\u201d834\u201d y=\u201d111\u201d### plantUML Diagram 1 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml Diagram 2 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs BPMN \u00b6 Diagram Codexml version=\"1.0\" encoding=\"UTF-8\"?> <semantic:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:semantic=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" id=\"_1275940932088\" targetNamespace=\"http://www.trisotech.com/definitions/_1275940932088\" exporter=\"Camunda Modeler\" exporterVersion=\"1.16.0\"> <semantic:message id=\"_1275940932310\" /> <semantic:message id=\"_1275940932433\" /> <semantic:process id=\"_6-1\" isExecutable=\"false\"> <semantic:laneSet id=\"ls_6-438\"> <semantic:lane id=\"_6-650\" name=\"clerk\"> <semantic:flowNodeRef>OrderReceivedEvent</semantic:flowNodeRef> <semantic:flowNodeRef>_6-652</semantic:flowNodeRef> <semantic:flowNodeRef>_6-674</semantic:flowNodeRef> <semantic:flowNodeRef>CalmCustomerTask</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-446\" name=\"pizza chef\"> <semantic:flowNodeRef>_6-463</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-448\" name=\"delivery boy\"> <semantic:flowNodeRef>_6-514</semantic:flowNodeRef> <semantic:flowNodeRef>_6-565</semantic:flowNodeRef> <semantic:flowNodeRef>_6-616</semantic:flowNodeRef> </semantic:lane> </semantic:laneSet> <semantic:startEvent id=\"OrderReceivedEvent\" name=\"Order received\"> <semantic:outgoing>_6-630</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932310\" /> </semantic:startEvent> <semantic:parallelGateway id=\"_6-652\" name=\"\"> <semantic:incoming>_6-630</semantic:incoming> <semantic:outgoing>_6-691</semantic:outgoing> <semantic:outgoing>_6-693</semantic:outgoing> </semantic:parallelGateway> <semantic:intermediateCatchEvent id=\"_6-674\" name=\"\u201ewhere is my pizza?\u201c\"> <semantic:incoming>_6-691</semantic:incoming> <semantic:incoming>_6-746</semantic:incoming> <semantic:outgoing>_6-748</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932433\" /> </semantic:intermediateCatchEvent> <semantic:task id=\"CalmCustomerTask\" name=\"Calm customer\"> <semantic:incoming>_6-748</semantic:incoming> <semantic:outgoing>_6-746</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-463\" name=\"Bake the pizza\"> <semantic:incoming>_6-693</semantic:incoming> <semantic:outgoing>_6-632</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-514\" name=\"Deliver the pizza\"> <semantic:incoming>_6-632</semantic:incoming> <semantic:outgoing>_6-634</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-565\" name=\"Receive payment\"> <semantic:incoming>_6-634</semantic:incoming> <semantic:outgoing>_6-636</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-616\" name=\"\"> <semantic:incoming>_6-636</semantic:incoming> <semantic:terminateEventDefinition /> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-630\" name=\"\" sourceRef=\"OrderReceivedEvent\" targetRef=\"_6-652\" /> <semantic:sequenceFlow id=\"_6-632\" name=\"\" sourceRef=\"_6-463\" targetRef=\"_6-514\" /> <semantic:sequenceFlow id=\"_6-634\" name=\"\" sourceRef=\"_6-514\" targetRef=\"_6-565\" /> <semantic:sequenceFlow id=\"_6-636\" name=\"\" sourceRef=\"_6-565\" targetRef=\"_6-616\" /> <semantic:sequenceFlow id=\"_6-691\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-693\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-463\" /> <semantic:sequenceFlow id=\"_6-746\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-748\" name=\"\" sourceRef=\"_6-674\" targetRef=\"CalmCustomerTask\" /> </semantic:process> <semantic:message id=\"_1275940932198\" /> <semantic:process id=\"_6-2\" isExecutable=\"false\"> <semantic:startEvent id=\"_6-61\" name=\"Hungry for pizza\"> <semantic:outgoing>_6-125</semantic:outgoing> </semantic:startEvent> <semantic:task id=\"SelectAPizzaTask\" name=\"Select a pizza\"> <semantic:incoming>_6-125</semantic:incoming> <semantic:outgoing>_6-178</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-127\" name=\"Order a pizza\"> <semantic:incoming>_6-178</semantic:incoming> <semantic:outgoing>_6-420</semantic:outgoing> </semantic:task> <semantic:eventBasedGateway id=\"_6-180\" name=\"\"> <semantic:incoming>_6-420</semantic:incoming> <semantic:incoming>_6-430</semantic:incoming> <semantic:outgoing>_6-422</semantic:outgoing> <semantic:outgoing>_6-424</semantic:outgoing> </semantic:eventBasedGateway> <semantic:intermediateCatchEvent id=\"_6-202\" name=\"pizza received\"> <semantic:incoming>_6-422</semantic:incoming> <semantic:outgoing>_6-428</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932198\" /> </semantic:intermediateCatchEvent> <semantic:intermediateCatchEvent id=\"_6-219\" name=\"60 minutes\"> <semantic:incoming>_6-424</semantic:incoming> <semantic:outgoing>_6-426</semantic:outgoing> <semantic:timerEventDefinition> <semantic:timeDate /> </semantic:timerEventDefinition> </semantic:intermediateCatchEvent> <semantic:task id=\"_6-236\" name=\"Ask for the pizza\"> <semantic:incoming>_6-426</semantic:incoming> <semantic:outgoing>_6-430</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-304\" name=\"Pay the pizza\"> <semantic:incoming>_6-428</semantic:incoming> <semantic:outgoing>_6-434</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-355\" name=\"Eat the pizza\"> <semantic:incoming>_6-434</semantic:incoming> <semantic:outgoing>_6-436</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-406\" name=\"Hunger satisfied\"> <semantic:incoming>_6-436</semantic:incoming> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-125\" name=\"\" sourceRef=\"_6-61\" targetRef=\"SelectAPizzaTask\" /> <semantic:sequenceFlow id=\"_6-178\" name=\"\" sourceRef=\"SelectAPizzaTask\" targetRef=\"_6-127\" /> <semantic:sequenceFlow id=\"_6-420\" name=\"\" sourceRef=\"_6-127\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-422\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-202\" /> <semantic:sequenceFlow id=\"_6-424\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-219\" /> <semantic:sequenceFlow id=\"_6-426\" name=\"\" sourceRef=\"_6-219\" targetRef=\"_6-236\" /> <semantic:sequenceFlow id=\"_6-428\" name=\"\" sourceRef=\"_6-202\" targetRef=\"_6-304\" /> <semantic:sequenceFlow id=\"_6-430\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-434\" name=\"\" sourceRef=\"_6-304\" targetRef=\"_6-355\" /> <semantic:sequenceFlow id=\"_6-436\" name=\"\" sourceRef=\"_6-355\" targetRef=\"_6-406\" /> </semantic:process> <semantic:collaboration id=\"C1275940932557\"> <semantic:participant id=\"_6-53\" name=\"Pizza Customer\" processRef=\"_6-2\" /> <semantic:participant id=\"_6-438\" name=\"Pizza vendor\" processRef=\"_6-1\" /> <semantic:messageFlow id=\"_6-638\" name=\"pizza order\" sourceRef=\"_6-127\" targetRef=\"OrderReceivedEvent\" /> <semantic:messageFlow id=\"_6-642\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-674\" /> <semantic:messageFlow id=\"_6-646\" name=\"receipt\" sourceRef=\"_6-565\" targetRef=\"_6-304\" /> <semantic:messageFlow id=\"_6-648\" name=\"money\" sourceRef=\"_6-304\" targetRef=\"_6-565\" /> <semantic:messageFlow id=\"_6-640\" name=\"pizza\" sourceRef=\"_6-514\" targetRef=\"_6-202\" /> <semantic:messageFlow id=\"_6-750\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-236\" /> </semantic:collaboration> <bpmndi:BPMNDiagram id=\"Trisotech.Visio-_6\" name=\"Untitled Diagram\" documentation=\"\" resolution=\"96.00000267028808\"> <bpmndi:BPMNPlane bpmnElement=\"C1275940932557\"> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-53\" bpmnElement=\"_6-53\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"12\" width=\"1044\" height=\"294\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-438\" bpmnElement=\"_6-438\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"372\" width=\"905\" height=\"337\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-650\" bpmnElement=\"_6-650\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"372\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-446\" bpmnElement=\"_6-446\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"486\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-448\" bpmnElement=\"_6-448\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"600\" width=\"875\" height=\"109\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_OrderReceivedEvent\" bpmnElement=\"OrderReceivedEvent\"> <dc:Bounds x=\"79\" y=\"405\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-652\" bpmnElement=\"_6-652\"> <dc:Bounds x=\"140\" y=\"399\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-674\" bpmnElement=\"_6-674\"> <dc:Bounds x=\"218\" y=\"404\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_CalmCustomerTask\" bpmnElement=\"CalmCustomerTask\"> <dc:Bounds x=\"286\" y=\"386\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-463\" bpmnElement=\"_6-463\"> <dc:Bounds x=\"252\" y=\"521\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-514\" bpmnElement=\"_6-514\"> <dc:Bounds x=\"464\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-565\" bpmnElement=\"_6-565\"> <dc:Bounds x=\"603\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-616\" bpmnElement=\"_6-616\"> <dc:Bounds x=\"722\" y=\"647\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-61\" bpmnElement=\"_6-61\"> <dc:Bounds x=\"66\" y=\"96\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-74\" bpmnElement=\"SelectAPizzaTask\"> <dc:Bounds x=\"145\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-127\" bpmnElement=\"_6-127\"> <dc:Bounds x=\"265\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-180\" bpmnElement=\"_6-180\"> <dc:Bounds x=\"378\" y=\"90\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-202\" bpmnElement=\"_6-202\"> <dc:Bounds x=\"647\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-219\" bpmnElement=\"_6-219\"> <dc:Bounds x=\"448\" y=\"184\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-236\" bpmnElement=\"_6-236\"> <dc:Bounds x=\"517\" y=\"166\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-304\" bpmnElement=\"_6-304\"> <dc:Bounds x=\"726\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-355\" bpmnElement=\"_6-355\"> <dc:Bounds x=\"834\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-406\" bpmnElement=\"_6-406\"> <dc:Bounds x=\"956\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-640\" bpmnElement=\"_6-640\"> <di:waypoint x=\"506\" y=\"629\" /> <di:waypoint x=\"506\" y=\"384\" /> <di:waypoint x=\"663\" y=\"384\" /> <di:waypoint x=\"663\" y=\"127\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-630\" bpmnElement=\"_6-630\"> <di:waypoint x=\"109\" y=\"420\" /> <di:waypoint x=\"140\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-691\" bpmnElement=\"_6-691\"> <di:waypoint x=\"182\" y=\"420\" /> <di:waypoint x=\"200\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-648\" bpmnElement=\"_6-648\"> <di:waypoint x=\"754\" y=\"145\" /> <di:waypoint x=\"754\" y=\"408\" /> <di:waypoint x=\"630\" y=\"408\" /> <di:waypoint x=\"631\" y=\"629\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-422\" bpmnElement=\"_6-422\"> <di:waypoint x=\"420\" y=\"111\" /> <di:waypoint x=\"438\" y=\"111\" /> <di:waypoint x=\"647\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-646\" bpmnElement=\"_6-646\" messageVisibleKind=\"non_initiating\"> <di:waypoint x=\"658\" y=\"629\" /> <di:waypoint x=\"658\" y=\"432\" /> <di:waypoint x=\"782\" y=\"432\" /> <di:waypoint x=\"782\" y=\"145\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-428\" bpmnElement=\"_6-428\"> <di:waypoint x=\"679\" y=\"111\" /> <di:waypoint x=\"726\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-748\" bpmnElement=\"_6-748\"> <di:waypoint x=\"250\" y=\"420\" /> <di:waypoint x=\"268\" y=\"420\" /> <di:waypoint x=\"286\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-420\" bpmnElement=\"_6-420\"> <di:waypoint x=\"348\" y=\"111\" /> <di:waypoint x=\"366\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-636\" bpmnElement=\"_6-636\"> <di:waypoint x=\"686\" y=\"663\" /> <di:waypoint x=\"704\" y=\"663\" /> <di:waypoint x=\"722\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-750\" bpmnElement=\"_6-750\"> <di:waypoint x=\"328\" y=\"386\" /> <di:waypoint x=\"328\" y=\"348\" /> <di:waypoint x=\"572\" y=\"348\" /> <di:waypoint x=\"572\" y=\"234\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-436\" bpmnElement=\"_6-436\"> <di:waypoint x=\"918\" y=\"111\" /> <di:waypoint x=\"936\" y=\"111\" /> <di:waypoint x=\"956\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-632\" bpmnElement=\"_6-632\"> <di:waypoint x=\"335\" y=\"555\" /> <di:waypoint x=\"353\" y=\"555\" /> <di:waypoint x=\"353\" y=\"663\" /> <di:waypoint x=\"464\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-634\" bpmnElement=\"_6-634\"> <di:waypoint x=\"548\" y=\"663\" /> <di:waypoint x=\"603\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-125\" bpmnElement=\"_6-125\"> <di:waypoint x=\"96\" y=\"111\" /> <di:waypoint x=\"114\" y=\"111\" /> <di:waypoint x=\"145\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-430\" bpmnElement=\"_6-430\"> <di:waypoint x=\"600\" y=\"200\" /> <di:waypoint x=\"618\" y=\"200\" /> <di:waypoint x=\"618\" y=\"252\" /> <di:waypoint x=\"576\" y=\"252\" /> <di:waypoint x=\"549\" y=\"252\" /> <di:waypoint x=\"360\" y=\"252\" /> <di:waypoint x=\"360\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-642\" bpmnElement=\"_6-642\"> <di:waypoint x=\"545\" y=\"234\" /> <di:waypoint x=\"545\" y=\"324\" /> <di:waypoint x=\"234\" y=\"324\" /> <di:waypoint x=\"234\" y=\"404\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-424\" bpmnElement=\"_6-424\"> <di:waypoint x=\"399\" y=\"132\" /> <di:waypoint x=\"399\" y=\"200\" /> <di:waypoint x=\"448\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-638\" bpmnElement=\"_6-638\"> <di:waypoint x=\"306\" y=\"145\" /> <di:waypoint x=\"306\" y=\"252\" /> <di:waypoint x=\"94\" y=\"252\" /> <di:waypoint x=\"94\" y=\"405\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-426\" bpmnElement=\"_6-426\"> <di:waypoint x=\"480\" y=\"200\" /> <di:waypoint x=\"498\" y=\"200\" /> <di:waypoint x=\"517\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-693\" bpmnElement=\"_6-693\"> <di:waypoint x=\"161\" y=\"441\" /> <di:waypoint x=\"161\" y=\"556\" /> <di:waypoint x=\"252\" y=\"555\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-178\" bpmnElement=\"_6-178\"> <di:waypoint x=\"228\" y=\"111\" /> <di:waypoint x=\"265\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-746\" bpmnElement=\"_6-746\"> <di:waypoint x=\"370\" y=\"420\" /> <di:waypoint x=\"386\" y=\"420\" /> <di:waypoint x=\"386\" y=\"474\" /> <di:waypoint x=\"191\" y=\"474\" /> <di:waypoint x=\"191\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-434\" bpmnElement=\"_6-434\"> <di:waypoint x=\"810\" y=\"111\" /> <di:waypoint x=\"834\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions> ``` /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions>","title":"Editing this guide"},{"location":"about/editing_this_guide/#editing-this-guide","text":"This guide uses MkDocs + Material for MkDocs . The markdown version is Python-Markdown . This page contains the reference for the material theme. Install extra MkDocs plugins in build.gradle + mkdocs.yml. If you are using IntelliJ for editing, it is recommended to install the plugin Grazie Professional for spell checking.","title":"Editing this guide"},{"location":"about/editing_this_guide/#editing","text":"The first header should be # . Inserted images with Markdown, not HTML: ![description](url){width=\"600px\"} . Set the with to 600px or 300px, depending on how big or small the image is footnotes syntax The target=_blank attribute and an icon for external links gets automatically added to links. The following symbols must be escaped: $ is &#36; because it collides with inline Latex blocks. Trees can be created with the terminal command tree . It supports the -I parameter for excluding folders.","title":"Editing"},{"location":"about/editing_this_guide/#extensions","text":"Besides the Material extensions, the project used the following Pymdown extensions: pymdownx.betterem : different emphasis handling pymdownx.inlinehilite : inline code highlighting; example: #!js var test = 0; pymdownx.magiclink : linkafies URLs pymdownx.smartsymbols : inserts commonly used Unicode characters via ASCII representations. pymdownx.superfences : extension to Markdown fences pymdownx.details : collapsible elements pymdownx.highlight pymdownx.snippets : include other Markdown or HTML snippets into the current Markdown file pymdownx.keys : simplifies inserting key inputs; example: Ctrl + Alt + Del pymdownx.caret : superscript text via caret pymdownx.mark : enables marking words pymdownx.tilde : subscript text via tilde pymdownx.emoji : support for custom Emojis. Some example icons are in MPS Icons . pymdownx.tasklist : support for lists with checkboxes mk_in_html : support for markdown in HTML pymdownx.magiclink : additional link related features mdx-spanner :enables rowspan and colspan in markdown tables","title":"Extensions"},{"location":"about/editing_this_guide/#macros","text":"The plugin mkdocs-macros-plugin is activated. You can add variables to the extra section of mkdocs.yml (example: mps_latest ) and use the available macros: contribution_by(github_username) question_by(github_username) answer_by(github_username) mps_url(identifier) image_popup() iets3() mbeddr() mbeddr_platform() mps_extensions() mps Look through main. py to see how they are implemented. The identifier can start with one of the following special identifiers: @openapi @mps @baselang @mpsutil @itemis @mbeddr @iets3 The special identifiers get translated to the corresponding package names. Only the last part of the identifier has to be the correct name. The identifier can reference classes, interfaces, concept, and interface declarations in baselanguage, mps-extensions, mbeddr, and iets3. The rest of the identifier only helps to find the correct node and doesn\u2019t have to be exact. Example: @mps.ClassConcept will find jetbrains.mps.baseLanguage.structure.ClassConcept . When the wrong node is selected, enter more parts of the full qualified name of the node.","title":"Macros"},{"location":"about/editing_this_guide/#diagrams","text":"Kroki enables support for diagrams ( examples ). It supports the following diagrams: BlockDiag BlockDiag (simple block diagrams) SeqDiag (simple sequence diagrams) ActDiag (simple activity diagrams) NwDiag (simple network diagrams) PacketDiag (packet header diagrams) RackDiag (rack diagrams) BPMN Bytefield C4 (with PlantUML) Ditaa Erd Excalidraw GraphViz Mermaid Nomnoml Pikchr PlantUML Structurizr SvgBob UMLet Vega Vega-Lite WaveDrom They can be embedded by creating a code block and the text kroki-[diagramtype] . The following sections contain ideas for diagrams.","title":"Diagrams"},{"location":"about/editing_this_guide/#blockdiag","text":"","title":"blockdiag"},{"location":"about/editing_this_guide/#diagram-1","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 blockdiag { orientation = portrait R -> A R -> B B -> C C -> E B -> D D -> F F -> E D -> G A <- C B -> D }","title":"Diagram 1"},{"location":"about/editing_this_guide/#diagram-2","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 blockdiag { default_node_color = 'yellow' if [shape=\"roundedbox\", color='white'] condition [numbered = 1, shape=\"roundedbox\", description=\"the condition\"] true_block [numbered = 1, shape=\"roundedbox\"] false_block [numbered = 0-1, shape=\"roundedbox\"] if -> condition if -> true_block if -> false_block }","title":"Diagram 2"},{"location":"about/editing_this_guide/#seqdiag","text":"Diagram Code 1 2 3 4 5 6 7 seqdiag { MPS -> Clipboard [label = \"Copy Node Reference as URL\"] Clipboard -> Browser [label = \"Paste URL\"] http_server [label=\"MPS HTTP Server\"] Browser -> http_server [label = \"Send request\"] http_server -> MPS [label = \"Open Node\"] }","title":"SeqDiag"},{"location":"about/editing_this_guide/#actdiag","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 actdiag { createConcept -> createEditor -> createNodes lane language { label = \"Language\" createConcept [label = \"Create concept\"] createEditor [label = \"Create editor\"] } lane solution { label =\"Solution\" createNodes [label = \"Create nodes\"] } }","title":"ActDiag"},{"location":"about/editing_this_guide/#graphviz","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 digraph finite_state_machine { rankdir=LR; planning -> analysis analysis -> design design -> implementation ti [label=\"testing & integration\"] implementation -> ti ti -> maintenance maintenance -> planning }","title":"Graphviz"},{"location":"about/editing_this_guide/#ditaa","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 +--------+ | | | User | | | +--------+ ^ request | v +-------------+ | | | Kroki | | |---+ +-------------+ | ^ ^ | inflate | | | v +---------+ +-------------+ | | | Ditaa | | |----+ +-------------+ | ^ | process | | +-------+","title":"Ditaa"},{"location":"about/editing_this_guide/#mermaidjs","text":"Diagram Code 1 2 3 4 5 graph TD; A-->B; A-->C; B-->D; C-->D;","title":"mermaid.js"},{"location":"about/editing_this_guide/#nomnoml","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [Pirate|eyeCount: Int|raid();pillage()| [beard]--[parrot] [beard]-:>[foul mouth] ] [<table>mischief | bawl | sing || yell | drink] [<abstract>Marauder]<:--[Pirate] [Pirate]- 0..7[mischief] [jollyness]->[Pirate] [jollyness]->[rum] [jollyness]->[singing] [Pirate]-> *[rum|tastiness: Int|swig()] [Pirate]->[singing] [singing]<->[rum] [<start>st]->[<state>plunder] [plunder]->[<choice>more loot] [more loot]->[st] [more loot] no ->[<end>e] [<actor>Sailor] - [<usecase>shiver me;timbers]","title":"nomnoml"},{"location":"about/editing_this_guide/#plantuml","text":"","title":"plantUML"},{"location":"about/editing_this_guide/#diagram-1_1","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml","title":"Diagram 1"},{"location":"about/editing_this_guide/#diagram-2_1","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs","title":"Diagram 2"},{"location":"about/editing_this_guide/#bpmn","text":"Diagram Code ``` <?xml version=\u201d1.0\u201d encoding=\u201dUTF-8\u201d?> OrderReceivedEvent _6-652 _6-674 CalmCustomerTask _6-463 _6-514 _6-565 _6-616 _6-630 _6-630 _6-691 _6-693 _6-691 _6-746 _6-748 _6-748 _6-746 _6-693 _6-632 _6-632 _6-634 _6-634 _6-636 _6-636 _6-125 _6-125 _6-178 _6-178 _6-420 _6-420 _6-430 _6-422 _6-424 _6-422 _6-428 _6-424 _6-426 _6-426 _6-430 _6-428 _6-434 _6-434 _6-436 _6-436 < di :waypoint x=\u201d834\u201d y=\u201d111\u201d### plantUML","title":"BPMN"},{"location":"about/editing_this_guide/#diagram-1_2","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml","title":"Diagram 1"},{"location":"about/editing_this_guide/#diagram-2_2","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs","title":"Diagram 2"},{"location":"about/editing_this_guide/#bpmn_1","text":"Diagram Codexml version=\"1.0\" encoding=\"UTF-8\"?> <semantic:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:semantic=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" id=\"_1275940932088\" targetNamespace=\"http://www.trisotech.com/definitions/_1275940932088\" exporter=\"Camunda Modeler\" exporterVersion=\"1.16.0\"> <semantic:message id=\"_1275940932310\" /> <semantic:message id=\"_1275940932433\" /> <semantic:process id=\"_6-1\" isExecutable=\"false\"> <semantic:laneSet id=\"ls_6-438\"> <semantic:lane id=\"_6-650\" name=\"clerk\"> <semantic:flowNodeRef>OrderReceivedEvent</semantic:flowNodeRef> <semantic:flowNodeRef>_6-652</semantic:flowNodeRef> <semantic:flowNodeRef>_6-674</semantic:flowNodeRef> <semantic:flowNodeRef>CalmCustomerTask</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-446\" name=\"pizza chef\"> <semantic:flowNodeRef>_6-463</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-448\" name=\"delivery boy\"> <semantic:flowNodeRef>_6-514</semantic:flowNodeRef> <semantic:flowNodeRef>_6-565</semantic:flowNodeRef> <semantic:flowNodeRef>_6-616</semantic:flowNodeRef> </semantic:lane> </semantic:laneSet> <semantic:startEvent id=\"OrderReceivedEvent\" name=\"Order received\"> <semantic:outgoing>_6-630</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932310\" /> </semantic:startEvent> <semantic:parallelGateway id=\"_6-652\" name=\"\"> <semantic:incoming>_6-630</semantic:incoming> <semantic:outgoing>_6-691</semantic:outgoing> <semantic:outgoing>_6-693</semantic:outgoing> </semantic:parallelGateway> <semantic:intermediateCatchEvent id=\"_6-674\" name=\"\u201ewhere is my pizza?\u201c\"> <semantic:incoming>_6-691</semantic:incoming> <semantic:incoming>_6-746</semantic:incoming> <semantic:outgoing>_6-748</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932433\" /> </semantic:intermediateCatchEvent> <semantic:task id=\"CalmCustomerTask\" name=\"Calm customer\"> <semantic:incoming>_6-748</semantic:incoming> <semantic:outgoing>_6-746</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-463\" name=\"Bake the pizza\"> <semantic:incoming>_6-693</semantic:incoming> <semantic:outgoing>_6-632</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-514\" name=\"Deliver the pizza\"> <semantic:incoming>_6-632</semantic:incoming> <semantic:outgoing>_6-634</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-565\" name=\"Receive payment\"> <semantic:incoming>_6-634</semantic:incoming> <semantic:outgoing>_6-636</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-616\" name=\"\"> <semantic:incoming>_6-636</semantic:incoming> <semantic:terminateEventDefinition /> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-630\" name=\"\" sourceRef=\"OrderReceivedEvent\" targetRef=\"_6-652\" /> <semantic:sequenceFlow id=\"_6-632\" name=\"\" sourceRef=\"_6-463\" targetRef=\"_6-514\" /> <semantic:sequenceFlow id=\"_6-634\" name=\"\" sourceRef=\"_6-514\" targetRef=\"_6-565\" /> <semantic:sequenceFlow id=\"_6-636\" name=\"\" sourceRef=\"_6-565\" targetRef=\"_6-616\" /> <semantic:sequenceFlow id=\"_6-691\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-693\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-463\" /> <semantic:sequenceFlow id=\"_6-746\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-748\" name=\"\" sourceRef=\"_6-674\" targetRef=\"CalmCustomerTask\" /> </semantic:process> <semantic:message id=\"_1275940932198\" /> <semantic:process id=\"_6-2\" isExecutable=\"false\"> <semantic:startEvent id=\"_6-61\" name=\"Hungry for pizza\"> <semantic:outgoing>_6-125</semantic:outgoing> </semantic:startEvent> <semantic:task id=\"SelectAPizzaTask\" name=\"Select a pizza\"> <semantic:incoming>_6-125</semantic:incoming> <semantic:outgoing>_6-178</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-127\" name=\"Order a pizza\"> <semantic:incoming>_6-178</semantic:incoming> <semantic:outgoing>_6-420</semantic:outgoing> </semantic:task> <semantic:eventBasedGateway id=\"_6-180\" name=\"\"> <semantic:incoming>_6-420</semantic:incoming> <semantic:incoming>_6-430</semantic:incoming> <semantic:outgoing>_6-422</semantic:outgoing> <semantic:outgoing>_6-424</semantic:outgoing> </semantic:eventBasedGateway> <semantic:intermediateCatchEvent id=\"_6-202\" name=\"pizza received\"> <semantic:incoming>_6-422</semantic:incoming> <semantic:outgoing>_6-428</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932198\" /> </semantic:intermediateCatchEvent> <semantic:intermediateCatchEvent id=\"_6-219\" name=\"60 minutes\"> <semantic:incoming>_6-424</semantic:incoming> <semantic:outgoing>_6-426</semantic:outgoing> <semantic:timerEventDefinition> <semantic:timeDate /> </semantic:timerEventDefinition> </semantic:intermediateCatchEvent> <semantic:task id=\"_6-236\" name=\"Ask for the pizza\"> <semantic:incoming>_6-426</semantic:incoming> <semantic:outgoing>_6-430</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-304\" name=\"Pay the pizza\"> <semantic:incoming>_6-428</semantic:incoming> <semantic:outgoing>_6-434</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-355\" name=\"Eat the pizza\"> <semantic:incoming>_6-434</semantic:incoming> <semantic:outgoing>_6-436</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-406\" name=\"Hunger satisfied\"> <semantic:incoming>_6-436</semantic:incoming> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-125\" name=\"\" sourceRef=\"_6-61\" targetRef=\"SelectAPizzaTask\" /> <semantic:sequenceFlow id=\"_6-178\" name=\"\" sourceRef=\"SelectAPizzaTask\" targetRef=\"_6-127\" /> <semantic:sequenceFlow id=\"_6-420\" name=\"\" sourceRef=\"_6-127\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-422\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-202\" /> <semantic:sequenceFlow id=\"_6-424\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-219\" /> <semantic:sequenceFlow id=\"_6-426\" name=\"\" sourceRef=\"_6-219\" targetRef=\"_6-236\" /> <semantic:sequenceFlow id=\"_6-428\" name=\"\" sourceRef=\"_6-202\" targetRef=\"_6-304\" /> <semantic:sequenceFlow id=\"_6-430\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-434\" name=\"\" sourceRef=\"_6-304\" targetRef=\"_6-355\" /> <semantic:sequenceFlow id=\"_6-436\" name=\"\" sourceRef=\"_6-355\" targetRef=\"_6-406\" /> </semantic:process> <semantic:collaboration id=\"C1275940932557\"> <semantic:participant id=\"_6-53\" name=\"Pizza Customer\" processRef=\"_6-2\" /> <semantic:participant id=\"_6-438\" name=\"Pizza vendor\" processRef=\"_6-1\" /> <semantic:messageFlow id=\"_6-638\" name=\"pizza order\" sourceRef=\"_6-127\" targetRef=\"OrderReceivedEvent\" /> <semantic:messageFlow id=\"_6-642\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-674\" /> <semantic:messageFlow id=\"_6-646\" name=\"receipt\" sourceRef=\"_6-565\" targetRef=\"_6-304\" /> <semantic:messageFlow id=\"_6-648\" name=\"money\" sourceRef=\"_6-304\" targetRef=\"_6-565\" /> <semantic:messageFlow id=\"_6-640\" name=\"pizza\" sourceRef=\"_6-514\" targetRef=\"_6-202\" /> <semantic:messageFlow id=\"_6-750\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-236\" /> </semantic:collaboration> <bpmndi:BPMNDiagram id=\"Trisotech.Visio-_6\" name=\"Untitled Diagram\" documentation=\"\" resolution=\"96.00000267028808\"> <bpmndi:BPMNPlane bpmnElement=\"C1275940932557\"> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-53\" bpmnElement=\"_6-53\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"12\" width=\"1044\" height=\"294\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-438\" bpmnElement=\"_6-438\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"372\" width=\"905\" height=\"337\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-650\" bpmnElement=\"_6-650\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"372\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-446\" bpmnElement=\"_6-446\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"486\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-448\" bpmnElement=\"_6-448\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"600\" width=\"875\" height=\"109\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_OrderReceivedEvent\" bpmnElement=\"OrderReceivedEvent\"> <dc:Bounds x=\"79\" y=\"405\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-652\" bpmnElement=\"_6-652\"> <dc:Bounds x=\"140\" y=\"399\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-674\" bpmnElement=\"_6-674\"> <dc:Bounds x=\"218\" y=\"404\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_CalmCustomerTask\" bpmnElement=\"CalmCustomerTask\"> <dc:Bounds x=\"286\" y=\"386\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-463\" bpmnElement=\"_6-463\"> <dc:Bounds x=\"252\" y=\"521\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-514\" bpmnElement=\"_6-514\"> <dc:Bounds x=\"464\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-565\" bpmnElement=\"_6-565\"> <dc:Bounds x=\"603\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-616\" bpmnElement=\"_6-616\"> <dc:Bounds x=\"722\" y=\"647\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-61\" bpmnElement=\"_6-61\"> <dc:Bounds x=\"66\" y=\"96\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-74\" bpmnElement=\"SelectAPizzaTask\"> <dc:Bounds x=\"145\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-127\" bpmnElement=\"_6-127\"> <dc:Bounds x=\"265\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-180\" bpmnElement=\"_6-180\"> <dc:Bounds x=\"378\" y=\"90\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-202\" bpmnElement=\"_6-202\"> <dc:Bounds x=\"647\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-219\" bpmnElement=\"_6-219\"> <dc:Bounds x=\"448\" y=\"184\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-236\" bpmnElement=\"_6-236\"> <dc:Bounds x=\"517\" y=\"166\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-304\" bpmnElement=\"_6-304\"> <dc:Bounds x=\"726\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-355\" bpmnElement=\"_6-355\"> <dc:Bounds x=\"834\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-406\" bpmnElement=\"_6-406\"> <dc:Bounds x=\"956\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-640\" bpmnElement=\"_6-640\"> <di:waypoint x=\"506\" y=\"629\" /> <di:waypoint x=\"506\" y=\"384\" /> <di:waypoint x=\"663\" y=\"384\" /> <di:waypoint x=\"663\" y=\"127\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-630\" bpmnElement=\"_6-630\"> <di:waypoint x=\"109\" y=\"420\" /> <di:waypoint x=\"140\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-691\" bpmnElement=\"_6-691\"> <di:waypoint x=\"182\" y=\"420\" /> <di:waypoint x=\"200\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-648\" bpmnElement=\"_6-648\"> <di:waypoint x=\"754\" y=\"145\" /> <di:waypoint x=\"754\" y=\"408\" /> <di:waypoint x=\"630\" y=\"408\" /> <di:waypoint x=\"631\" y=\"629\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-422\" bpmnElement=\"_6-422\"> <di:waypoint x=\"420\" y=\"111\" /> <di:waypoint x=\"438\" y=\"111\" /> <di:waypoint x=\"647\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-646\" bpmnElement=\"_6-646\" messageVisibleKind=\"non_initiating\"> <di:waypoint x=\"658\" y=\"629\" /> <di:waypoint x=\"658\" y=\"432\" /> <di:waypoint x=\"782\" y=\"432\" /> <di:waypoint x=\"782\" y=\"145\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-428\" bpmnElement=\"_6-428\"> <di:waypoint x=\"679\" y=\"111\" /> <di:waypoint x=\"726\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-748\" bpmnElement=\"_6-748\"> <di:waypoint x=\"250\" y=\"420\" /> <di:waypoint x=\"268\" y=\"420\" /> <di:waypoint x=\"286\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-420\" bpmnElement=\"_6-420\"> <di:waypoint x=\"348\" y=\"111\" /> <di:waypoint x=\"366\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-636\" bpmnElement=\"_6-636\"> <di:waypoint x=\"686\" y=\"663\" /> <di:waypoint x=\"704\" y=\"663\" /> <di:waypoint x=\"722\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-750\" bpmnElement=\"_6-750\"> <di:waypoint x=\"328\" y=\"386\" /> <di:waypoint x=\"328\" y=\"348\" /> <di:waypoint x=\"572\" y=\"348\" /> <di:waypoint x=\"572\" y=\"234\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-436\" bpmnElement=\"_6-436\"> <di:waypoint x=\"918\" y=\"111\" /> <di:waypoint x=\"936\" y=\"111\" /> <di:waypoint x=\"956\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-632\" bpmnElement=\"_6-632\"> <di:waypoint x=\"335\" y=\"555\" /> <di:waypoint x=\"353\" y=\"555\" /> <di:waypoint x=\"353\" y=\"663\" /> <di:waypoint x=\"464\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-634\" bpmnElement=\"_6-634\"> <di:waypoint x=\"548\" y=\"663\" /> <di:waypoint x=\"603\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-125\" bpmnElement=\"_6-125\"> <di:waypoint x=\"96\" y=\"111\" /> <di:waypoint x=\"114\" y=\"111\" /> <di:waypoint x=\"145\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-430\" bpmnElement=\"_6-430\"> <di:waypoint x=\"600\" y=\"200\" /> <di:waypoint x=\"618\" y=\"200\" /> <di:waypoint x=\"618\" y=\"252\" /> <di:waypoint x=\"576\" y=\"252\" /> <di:waypoint x=\"549\" y=\"252\" /> <di:waypoint x=\"360\" y=\"252\" /> <di:waypoint x=\"360\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-642\" bpmnElement=\"_6-642\"> <di:waypoint x=\"545\" y=\"234\" /> <di:waypoint x=\"545\" y=\"324\" /> <di:waypoint x=\"234\" y=\"324\" /> <di:waypoint x=\"234\" y=\"404\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-424\" bpmnElement=\"_6-424\"> <di:waypoint x=\"399\" y=\"132\" /> <di:waypoint x=\"399\" y=\"200\" /> <di:waypoint x=\"448\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-638\" bpmnElement=\"_6-638\"> <di:waypoint x=\"306\" y=\"145\" /> <di:waypoint x=\"306\" y=\"252\" /> <di:waypoint x=\"94\" y=\"252\" /> <di:waypoint x=\"94\" y=\"405\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-426\" bpmnElement=\"_6-426\"> <di:waypoint x=\"480\" y=\"200\" /> <di:waypoint x=\"498\" y=\"200\" /> <di:waypoint x=\"517\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-693\" bpmnElement=\"_6-693\"> <di:waypoint x=\"161\" y=\"441\" /> <di:waypoint x=\"161\" y=\"556\" /> <di:waypoint x=\"252\" y=\"555\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-178\" bpmnElement=\"_6-178\"> <di:waypoint x=\"228\" y=\"111\" /> <di:waypoint x=\"265\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-746\" bpmnElement=\"_6-746\"> <di:waypoint x=\"370\" y=\"420\" /> <di:waypoint x=\"386\" y=\"420\" /> <di:waypoint x=\"386\" y=\"474\" /> <di:waypoint x=\"191\" y=\"474\" /> <di:waypoint x=\"191\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-434\" bpmnElement=\"_6-434\"> <di:waypoint x=\"810\" y=\"111\" /> <di:waypoint x=\"834\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions> ``` /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions>","title":"BPMN"},{"location":"about/new_pages/","text":"This page lists all new pages since August 2022. November 2022 \u00b6 Platform essentials: MPS utilities October 2022 \u00b6 Reference: Issue trackers September 2022 \u00b6 What happens on MPS startup (2021.1.4) August 2022 \u00b6 platform essentials: platform build scripts Reference: Gitignore file Reference: Core languages Home: Visual guide Reference: MPS extension points Platform essentials: Common concepts and interfaces Platform essentials: Contributing Platform essentials: Building mbeddr locally Platform essentials: Interpreters MPS internal: Writing MPS plugins with Kotlin Reference: Tips for OS maintainers MPS internal: IntelliJ integration MPS internal: JCEF MPS internal: Navigating the MPS sources","title":"New pages"},{"location":"about/new_pages/#november-2022","text":"Platform essentials: MPS utilities","title":"November 2022"},{"location":"about/new_pages/#october-2022","text":"Reference: Issue trackers","title":"October 2022"},{"location":"about/new_pages/#september-2022","text":"What happens on MPS startup (2021.1.4)","title":"September 2022"},{"location":"about/new_pages/#august-2022","text":"platform essentials: platform build scripts Reference: Gitignore file Reference: Core languages Home: Visual guide Reference: MPS extension points Platform essentials: Common concepts and interfaces Platform essentials: Contributing Platform essentials: Building mbeddr locally Platform essentials: Interpreters MPS internal: Writing MPS plugins with Kotlin Reference: Tips for OS maintainers MPS internal: IntelliJ integration MPS internal: JCEF MPS internal: Navigating the MPS sources","title":"August 2022"},{"location":"about/original_authors/","text":"Original authors \u00b6 This site includes documents and contributions from different sites. If you have contributed content and aren\u2019t listed on this page, please add yourself. This repository includes knowledge of the following people (and probably more) in alphabetical order: @abstraktor ( internal knowledge base ) @AlexeiQ ( mbeddr wiki , internal knowledge base ) @arimer ( internal knowledge base ) @coolya ( mbeddr wiki , internal knowledge base ) @dbinkele (internal knowledge base) @DomenikP ( mbeddr wiki ) @enikao ( mbeddr wiki ) @hbaechmann (internal knowledge base) @itnef (internal project) @JanMosigItemis ( mbeddr wiki ) @joao-silveira ( answered questions ) @jonaskraemer (internal knowledge base) @joswarmer ( mbeddr wiki ) @kbirken ( mbeddr wiki ) @krinara86 ( mbeddr wiki ) @markusvoelter ( mbeddr wiki ) @sergej-koscejev ( mbeddr wiki , answered questions ) @slisson ( answers to many questions , internal knowledge base ) @szabta89 ( mbeddr wiki ) @till-f ( mbeddr wiki ) @wsafonov (internal knowledge base, answered questions)","title":"Original authors"},{"location":"about/original_authors/#original-authors","text":"This site includes documents and contributions from different sites. If you have contributed content and aren\u2019t listed on this page, please add yourself. This repository includes knowledge of the following people (and probably more) in alphabetical order: @abstraktor ( internal knowledge base ) @AlexeiQ ( mbeddr wiki , internal knowledge base ) @arimer ( internal knowledge base ) @coolya ( mbeddr wiki , internal knowledge base ) @dbinkele (internal knowledge base) @DomenikP ( mbeddr wiki ) @enikao ( mbeddr wiki ) @hbaechmann (internal knowledge base) @itnef (internal project) @JanMosigItemis ( mbeddr wiki ) @joao-silveira ( answered questions ) @jonaskraemer (internal knowledge base) @joswarmer ( mbeddr wiki ) @kbirken ( mbeddr wiki ) @krinara86 ( mbeddr wiki ) @markusvoelter ( mbeddr wiki ) @sergej-koscejev ( mbeddr wiki , answered questions ) @slisson ( answers to many questions , internal knowledge base ) @szabta89 ( mbeddr wiki ) @till-f ( mbeddr wiki ) @wsafonov (internal knowledge base, answered questions)","title":"Original authors"},{"location":"aspects/actions/","text":"Action aspect \u00b6 The action aspect defines node factories and copy/paste related handlers. Are node factories used when calling new node ? No. More information can be found in Editor Actions | MPS . Where can you find all key mappings for the editor? Windows and mac shortcuts for editor actions can be found in MPSEditorActions.xml . Why is a custom action map not executed on a CellModel_Collection ? In MPS I have the possiblity to reference an action map from a editor collection cell. However it seems like my defined actions are never executed when the editor is used. Why is this so and how to fix it? Reason for the Problem In general the applied actions should be invoked and executed. However depending on the content of the collection cells, MPS might generate some default actions which will override your custom actions. Example You have a read only model access cell inside the collection cell: In this case the internal MPS generator for CellModel_ReadOnlyModelAccessor will automatically generate and register some default actions like delete/backspace which in the end will prohibit your custom action to be applied. Solution You can use the cell explorer ( Language Debug \u2192 Show Cell in Explorer ) to see which actions are defined for a cell. Deactivate the automatically applied action with the help of custom editor cells( CellModel_CustomFactory ). You can use CellModel_CustomFactory to wrap the cells in your collection which generate unwanted actions and deactivate them. contributed by: @arimer","title":"Actions"},{"location":"aspects/actions/#action-aspect","text":"The action aspect defines node factories and copy/paste related handlers. Are node factories used when calling new node ? No. More information can be found in Editor Actions | MPS . Where can you find all key mappings for the editor? Windows and mac shortcuts for editor actions can be found in MPSEditorActions.xml . Why is a custom action map not executed on a CellModel_Collection ? In MPS I have the possiblity to reference an action map from a editor collection cell. However it seems like my defined actions are never executed when the editor is used. Why is this so and how to fix it? Reason for the Problem In general the applied actions should be invoked and executed. However depending on the content of the collection cells, MPS might generate some default actions which will override your custom actions. Example You have a read only model access cell inside the collection cell: In this case the internal MPS generator for CellModel_ReadOnlyModelAccessor will automatically generate and register some default actions like delete/backspace which in the end will prohibit your custom action to be applied. Solution You can use the cell explorer ( Language Debug \u2192 Show Cell in Explorer ) to see which actions are defined for a cell. Deactivate the automatically applied action with the help of custom editor cells( CellModel_CustomFactory ). You can use CellModel_CustomFactory to wrap the cells in your collection which generate unwanted actions and deactivate them. contributed by: @arimer","title":"Action aspect"},{"location":"aspects/behavior/","text":"Behavior aspect \u00b6 The behavior aspect can be use for defining methods for the concepts of the language. General \u00b6 Can you use asynchronous code in behaviour methods such as calling external tools? Be careful when doing so. Make sure to not mix concurrent locking aspects such as write and read actions with behaviour code. It should always be assumed that you have the correct lock in this methods. Move the code concerning the concurrent access for example into a background task. More information can be found in Progress indicators | MPS . Where can you save temporary information about nodes? Consider saving temporay data about nodes in annotations and user objects ( node/.putUserObject , node/.getUserObject ) instead of introducing properties. You can store and access Java-Objects in SNode::putUserObject() as key-value pairs)where you normally could not access them in the MPS context, e.g. storing it as node member and access it in an editor, a checking-rule or anything else. This approach is difficult to trace and maintain and should only be used in exceptional cases. For the generator consult the section Transferring User Data of the generator documentation . How to mark a constructor-created child optional? (created by a light quotation) Example: Solutions: Initialize it with null in the light quotation. Create it without light quotation. Allow the child to be optional ( [0..1] ). How can you delete a child node from a node where the child\u2019s concept no longer exists and the parent node\u2019s child link is no longer defined? 1 2 3 node . getChildren (). where ( \u2026 ). foreach { it => it . delete } Why does the virtual method have isVirtual=false ? Given there is a virtual behavior method getPresentation . When I override getPresentation in a subconcept then I see it displays the overriding method to be virtual. Yet, I see that methodDeclNode.isVirtual is null . Why is that? Note that isVirtual and isVirtual() on a method have different semantics. 1 2 3 public boolean isVirtual () { return this . isVirtual || this . overridenMethod != null ; } The editor shows that a method is virtual when isVirtual() is true. As a result, overriding methods of virtual methods are not necessarily having isVirtual=true , but will still display virtual . The rationale behind may be that if a method is overriding another one, both of them must be virtual. This is needed so that the runtime will find out which of the two implementations to call. So we may read the isVirtual more precisely as \u201eis explicitly virtual\u201d, and isVirtual() as \u201cis effectively virtual\u201d. contributed by: @abstraktor Initialization \u00b6 How do you initialize a node? How can I ensure that all created node will have a non-null HTMLDescription ? Using a node factory The node factory will be called when The code completion menu is invoked to create such a node or to replace another one. add new initialized , set new initialized , or replace new initialized is called. Such a node is created as a root from the context menu in the project view. The node factory is not called when using quotations <Car()> . viewing the node in the editor. adding it as a root with model.add root(<Car()>) . adding it as a root with model.add new root(Car) . Using a behavior constructor Using a behavior constructor will only partially achieve this. Note that it will only be called when creating nodes with add new initialized() , set new initialized() and similar methods from j.m.lang.actions and j.m.lang.smodel . creating a node with new node<Car>() . Using a quotation will not call this constructor. Using a property getter You could use an initialized variable and use a combination of property getters and setters. This would work only for properties though, not for children or references, and requires quotations to also set the initialized value if trying to override the default. Furthermore, your quotations will still be marked. Usage Can you access the parent in the constructor? No, it doesn\u2019t work because the node is not attached yet ( Concept constructors | MPS ). Use for example a node factory to access the parent instead. How can you query the context in a node constructor? Does anyone know a way to find the contextExpression from the node constructor? Use a node factories instead of constructors and make use of the enclosingNode parameter. Constructors are invoked always when creating a node. Node factories are invoked only by the editor and by the new initialized ... expression. Note: Node factories are invoked in the inverse order of constructors. MPS will first invoke the specific node factory and the more generic ones if the exist. Is there a way to call the constructor of a super concept inside the constructor of a subconcept? Something like: java constructor { superConcept() } concept / MyConcept / . new initialized instance () provides this behaviour. Bugs/missing features \u00b6 How can you use generic return types? 1 No, it is not possible ( MPS -22502 ). Can you use a more specific return type while overriding a behavior method? No, it is not possible ( MPS -27720 ). Can you use variable arguments (varArgs) in behavior methods? No, it is not possible ( MPS -31056 ). Can you enter a throws clause in behavior methods? No, it is not possible ( MPS -22306 ). MPS forum - Generics for return type of behavior method \u21a9","title":"Behavior"},{"location":"aspects/behavior/#behavior-aspect","text":"The behavior aspect can be use for defining methods for the concepts of the language.","title":"Behavior aspect"},{"location":"aspects/behavior/#general","text":"Can you use asynchronous code in behaviour methods such as calling external tools? Be careful when doing so. Make sure to not mix concurrent locking aspects such as write and read actions with behaviour code. It should always be assumed that you have the correct lock in this methods. Move the code concerning the concurrent access for example into a background task. More information can be found in Progress indicators | MPS . Where can you save temporary information about nodes? Consider saving temporay data about nodes in annotations and user objects ( node/.putUserObject , node/.getUserObject ) instead of introducing properties. You can store and access Java-Objects in SNode::putUserObject() as key-value pairs)where you normally could not access them in the MPS context, e.g. storing it as node member and access it in an editor, a checking-rule or anything else. This approach is difficult to trace and maintain and should only be used in exceptional cases. For the generator consult the section Transferring User Data of the generator documentation . How to mark a constructor-created child optional? (created by a light quotation) Example: Solutions: Initialize it with null in the light quotation. Create it without light quotation. Allow the child to be optional ( [0..1] ). How can you delete a child node from a node where the child\u2019s concept no longer exists and the parent node\u2019s child link is no longer defined? 1 2 3 node . getChildren (). where ( \u2026 ). foreach { it => it . delete } Why does the virtual method have isVirtual=false ? Given there is a virtual behavior method getPresentation . When I override getPresentation in a subconcept then I see it displays the overriding method to be virtual. Yet, I see that methodDeclNode.isVirtual is null . Why is that? Note that isVirtual and isVirtual() on a method have different semantics. 1 2 3 public boolean isVirtual () { return this . isVirtual || this . overridenMethod != null ; } The editor shows that a method is virtual when isVirtual() is true. As a result, overriding methods of virtual methods are not necessarily having isVirtual=true , but will still display virtual . The rationale behind may be that if a method is overriding another one, both of them must be virtual. This is needed so that the runtime will find out which of the two implementations to call. So we may read the isVirtual more precisely as \u201eis explicitly virtual\u201d, and isVirtual() as \u201cis effectively virtual\u201d. contributed by: @abstraktor","title":"General"},{"location":"aspects/behavior/#initialization","text":"How do you initialize a node? How can I ensure that all created node will have a non-null HTMLDescription ? Using a node factory The node factory will be called when The code completion menu is invoked to create such a node or to replace another one. add new initialized , set new initialized , or replace new initialized is called. Such a node is created as a root from the context menu in the project view. The node factory is not called when using quotations <Car()> . viewing the node in the editor. adding it as a root with model.add root(<Car()>) . adding it as a root with model.add new root(Car) . Using a behavior constructor Using a behavior constructor will only partially achieve this. Note that it will only be called when creating nodes with add new initialized() , set new initialized() and similar methods from j.m.lang.actions and j.m.lang.smodel . creating a node with new node<Car>() . Using a quotation will not call this constructor. Using a property getter You could use an initialized variable and use a combination of property getters and setters. This would work only for properties though, not for children or references, and requires quotations to also set the initialized value if trying to override the default. Furthermore, your quotations will still be marked. Usage Can you access the parent in the constructor? No, it doesn\u2019t work because the node is not attached yet ( Concept constructors | MPS ). Use for example a node factory to access the parent instead. How can you query the context in a node constructor? Does anyone know a way to find the contextExpression from the node constructor? Use a node factories instead of constructors and make use of the enclosingNode parameter. Constructors are invoked always when creating a node. Node factories are invoked only by the editor and by the new initialized ... expression. Note: Node factories are invoked in the inverse order of constructors. MPS will first invoke the specific node factory and the more generic ones if the exist. Is there a way to call the constructor of a super concept inside the constructor of a subconcept? Something like: java constructor { superConcept() } concept / MyConcept / . new initialized instance () provides this behaviour.","title":"Initialization"},{"location":"aspects/behavior/#bugsmissing-features","text":"How can you use generic return types? 1 No, it is not possible ( MPS -22502 ). Can you use a more specific return type while overriding a behavior method? No, it is not possible ( MPS -27720 ). Can you use variable arguments (varArgs) in behavior methods? No, it is not possible ( MPS -31056 ). Can you enter a throws clause in behavior methods? No, it is not possible ( MPS -22306 ). MPS forum - Generics for return type of behavior method \u21a9","title":"Bugs/missing features"},{"location":"aspects/constraints/","text":"Constraints aspect \u00b6 The constraints aspect defines constraints for the concepts of the language. General \u00b6 How do you hide inapplicable operands in dot expressions? Specific Languages blog: Dot expressions: hiding inapplicable operands Are there any useful helper classes? ModelConstraints : This class can be used to calculate the constraint/scope of a specific concept/node programmatically. Properties \u00b6 How can you set default values for properties? Use the language com.mbeddr.mpsutil.propertydefault from mbeddr platform . The property value isn\u2019t valid. Specific Languages Blog: Invalid property values References \u00b6 How can you emulate references? Specific Languages blog: Pseudo-references: emulating references Scopes \u00b6 What\u2019s the best way to wrap a list of nodes into a Scope ? I have a list of nodes and want to wrap them into a scope How do you do that? You\u2019re probably looking for ListScope . forResolvableElements ( sequence < node <>> elements ) . forResolvableElements creates list scopes and also implements getName(child) like forNamedElements, yet returning the resolveInfo if the node is an IResolveInfo , the name if it is an INamedConcept or else calls getPresentation () . forNamedElements I\u2019m unsure about the use-case of ListScope . forNamedElements ( sequence < node <>> elements ) , but it behaves unexpected in some cases: Note that elements with a blank name are not part of the scope created by ListScope.forNamedElements(sequence<node<>> elements) . They\u2019ll get silently omitted. Note that elements that are not an instance of INamedConcept , will make forNamedElements throw an exception. contributed by: @abstraktor How can you combine scopes? Use the class CompositeScope . What\u2019s the difference between parent scope and super.getScope ? parent scope asks of your node or up in the hierarchy for the scope until it finds a scope provider. super.getScope will use the implementation from the super concept.","title":"Constraints"},{"location":"aspects/constraints/#constraints-aspect","text":"The constraints aspect defines constraints for the concepts of the language.","title":"Constraints aspect"},{"location":"aspects/constraints/#general","text":"How do you hide inapplicable operands in dot expressions? Specific Languages blog: Dot expressions: hiding inapplicable operands Are there any useful helper classes? ModelConstraints : This class can be used to calculate the constraint/scope of a specific concept/node programmatically.","title":"General"},{"location":"aspects/constraints/#properties","text":"How can you set default values for properties? Use the language com.mbeddr.mpsutil.propertydefault from mbeddr platform . The property value isn\u2019t valid. Specific Languages Blog: Invalid property values","title":"Properties"},{"location":"aspects/constraints/#references","text":"How can you emulate references? Specific Languages blog: Pseudo-references: emulating references","title":"References"},{"location":"aspects/constraints/#scopes","text":"What\u2019s the best way to wrap a list of nodes into a Scope ? I have a list of nodes and want to wrap them into a scope How do you do that? You\u2019re probably looking for ListScope . forResolvableElements ( sequence < node <>> elements ) . forResolvableElements creates list scopes and also implements getName(child) like forNamedElements, yet returning the resolveInfo if the node is an IResolveInfo , the name if it is an INamedConcept or else calls getPresentation () . forNamedElements I\u2019m unsure about the use-case of ListScope . forNamedElements ( sequence < node <>> elements ) , but it behaves unexpected in some cases: Note that elements with a blank name are not part of the scope created by ListScope.forNamedElements(sequence<node<>> elements) . They\u2019ll get silently omitted. Note that elements that are not an instance of INamedConcept , will make forNamedElements throw an exception. contributed by: @abstraktor How can you combine scopes? Use the class CompositeScope . What\u2019s the difference between parent scope and super.getScope ? parent scope asks of your node or up in the hierarchy for the scope until it finds a scope provider. super.getScope will use the implementation from the super concept.","title":"Scopes"},{"location":"aspects/dataflow/","text":"Dataflow aspect \u00b6 A language\u2019s data flow aspect allows you to find unreachable statements, detect unused assignments, or check whether a variable might not be initialized before it\u2019s read. \u2014 MPS documentation Where can you find good examples to understand how dataflow works? Have a look at the data flow builders of jetbrains.mps.baselanguage . You can also search for usages of DataFlowBuilderDeclaration in general.","title":"Dataflow"},{"location":"aspects/dataflow/#dataflow-aspect","text":"A language\u2019s data flow aspect allows you to find unreachable statements, detect unused assignments, or check whether a variable might not be initialized before it\u2019s read. \u2014 MPS documentation Where can you find good examples to understand how dataflow works? Have a look at the data flow builders of jetbrains.mps.baselanguage . You can also search for usages of DataFlowBuilderDeclaration in general.","title":"Dataflow aspect"},{"location":"aspects/documentation/","text":"Generator aspect \u00b6 This aspect is contributed by the language com.mbeddr. doc in mbeddr . It allows to define a documentation node which can be exported to xhtml, latex and markdown. New targets can be implemented easily. When you invoke the intention Add Reference to Documented Concept while defining a new section as part of a chapter, the documention for this concept will be shown in the Documentation tool at the bottom part of the screen. The documentation for the language is provided as a PDF: The mbeddr Documentation Language How do you export the documentation? Click make or rebuild in the menu of the model that contains the documentation. A new folder doc_gen will get generated. Should you write documentation? Is this aspect necessary? Yes, code is not always self documenting. You have the following possibilities for writing documention: JavaDoc 1 the intention Document com.mbeddr.documentation com.mbeddr. doc the short description property of concepts DocumentedNodeAnnotation How can you show the documentation of a concept in the documentation tool? Take a look at the doc .aspect project in mbeddr . There is a node attribute that can be attached on pieces of a document to bind the document to some concept or node. There is also an example project which demonstrates the usage. answered by: @szabta89 Is there a way to resolve references to embedded images (screenshots) across different documents? This is enabled by adding the document to the depends on section. Use javadoc liberally \u21a9","title":"Documentation"},{"location":"aspects/documentation/#generator-aspect","text":"This aspect is contributed by the language com.mbeddr. doc in mbeddr . It allows to define a documentation node which can be exported to xhtml, latex and markdown. New targets can be implemented easily. When you invoke the intention Add Reference to Documented Concept while defining a new section as part of a chapter, the documention for this concept will be shown in the Documentation tool at the bottom part of the screen. The documentation for the language is provided as a PDF: The mbeddr Documentation Language How do you export the documentation? Click make or rebuild in the menu of the model that contains the documentation. A new folder doc_gen will get generated. Should you write documentation? Is this aspect necessary? Yes, code is not always self documenting. You have the following possibilities for writing documention: JavaDoc 1 the intention Document com.mbeddr.documentation com.mbeddr. doc the short description property of concepts DocumentedNodeAnnotation How can you show the documentation of a concept in the documentation tool? Take a look at the doc .aspect project in mbeddr . There is a node attribute that can be attached on pieces of a document to bind the document to some concept or node. There is also an example project which demonstrates the usage. answered by: @szabta89 Is there a way to resolve references to embedded images (screenshots) across different documents? This is enabled by adding the document to the depends on section. Use javadoc liberally \u21a9","title":"Generator aspect"},{"location":"aspects/editor/","text":"Editor aspect \u00b6 The editor aspect defines the projectional editor of a concept. General \u00b6 What happens when you press F5 in the editor? Specific Languages Blog: F5 in editor How can you delete non-existing children, references, or properties from a node? Switch to the reflective editor and remove the offending parts. There is also an enhancement script that can remove properties. Is there a way to prevent users from adding and removing elements in a list in the MPS editor? The elements in the list should still be editable, but adding/removing shouldn\u2019t be allowed? There are 2 solutions: Use a querylist with empty insert/delete handlers. Create an action map/inline action cell with empty blocks for the actions INSERT and INSERT_BEFORE . I\u2019ve set a color of type java.awt.Color in a style property query but the color is different when using the darcula theme. The return type of those functions indicate that they return type is java.awt.Color but the generator maps these colors to theme-dependent colors . The only avoid to avoid this mappings is to use custom factories. More info about theme-dependent colors can be found here . Menus \u00b6 Explain the different menu related terms. Menu definitions have two flavours named and +default+ and can be defined in transformation or substitute menus. Default substitutions will replace the default menu that MPS shows. Shortcut: Ctrl + Space or Cmd + Space Default menu Transformation menus define UI actions that will be shown in various locations. The menu is defined as a list of sections. Each section contains a list of menu parts for a set of locations. At runtime the menu parts and locations are used to generate the content of the completion menu. The contents of the completion menu are called menu items. Parameterized actions allow to calculate a list of elements of a specific type to be shown in the completion menu. They calculate all elements for the substitution menu and have an influence on the node creation. Moreover, they definesthe selection where the cursor should be placed. How do you find out where a substitute menu entry is coming from? Use the Menu Trace Tool window. More information can be found in Menu Trace Tool Window | MPS . How can you add smart references using the transformation menus? F1RE Blog: Adding smart references using transformation menus What\u2019s the best way to improve the autocomplete description of concepts? As you can see in the screenshot, the concepts of both opening braces are indistinguishable. By changing the short description in the concept structure, I can change the description. What\u2019s the best format to improve these descriptions? Is this way the correct/best one to change the autocomplete concept description? asked by: @aquapp In general, it\u2019s up to the users and specific context to decide what makes sense to put to the description text. Usually it should provide additional semantic information to those not familiar with the language to help them to pick up the right concept from the code completion menu. The short description in the concept is the original, simple way to provide static description in the code completion menu. You can also add your own substitute action in the substitute menu of the concept (editor aspect) to get full control over the code completion menu and to be able to generate the text dynamically based on the context. answered by: @wsafonov Languages \u00b6 I need a specific graphical notation/feature for the editor. Have a look at the full extension list from MPS -extensions . I need hyperlinks. Use the language com.mbeddr.mpsutil.hyperlink from mbeddr platform . How do you create clickable links? Specific Languages Blog: Creating clickable URL links in the editor Specific Languages Blog: More clickable URL links How can you include non-child relations in the editor?. Use the language com.mbeddr.mpsutil.editor.querylist from MPS -extensions . Editor declaration \u00b6 Is there a disadvantage by using the indent layout instead of the indent cell mode? No. There used to be performance issues with bigger models that were fixed in MPS 2021.1 . How do you use an empty text for empty cells? Specific Languages Blog: Use empty text for empty cells Explain all cell related variables. A cell takes up a specific amount of space in the editor component (width and height). padding-left/right/top/bottom: a floating point number, which specifies the padding of a text cell, i.e. how much space will be between cell\u2019s text and cell\u2019s left and right sides, respectively. inset: representation of the borders of an element. It specifies the space that an element must leave at each of its edges. baseline: the line upon which most letters sit. ascent: the recommended distance above the baseline for singled spaced text. descent: the recommended distance below the baseline for singled spaced text. height: ascent + descent gap: space between cells in a collection. There is a left and right gap. How can you set editor hints? you can set hints via editorContext . getEditorComponent (). getUpdater () explicit hints for nodes initial hints globally; they behave similar to pushed hints. via right-click: push editor hints and select a specific one. via an EditorHintToggleAction (e.g. in action declarations) They are not visible in the push Editor hints menu. If you need the same behavior e.g. in intentions, you can use code from there (via ConceptEditorHintSettingsComponent.HintsState ) Explicit hints for nodes and hints via EditorHintToggleAction . The usage of ConceptEditorHintSettingsComponent.HintsState is not so obvious. How do you set the cursor to the first editable cell? (A) What it looks like after creation (B) Initial situation with cursor at (1) : pressing Enter leads to (C) The problem is, that in (C) the cursor is at (2) , right before a read-only cell and thus editing or moving to the next cell is not possible. I would like the cursor to jump to the first editable cell, which is at position (3) . Structure of the new node in (C) : Editor of the new node in (C) : Usually, you would set the attracts focus property of the cell, where the cursor should be positioned, to attractsFocus or FirstEditableCell . But, since ( C.2 and C.3 ) are error cells, the default behaviour is to set the cursor in front of the first error cell, which is (C.2) . Therefore, change the first part of your editor to a querylist cell (A) , which references the \u201cmember\u201d in the cell properties (B) and set the read-only property on the querylist. contributed by: @aquapp Is it possible to access the selected value of one swing component from inside another swing component? Yes: Is it possible to access the selected value of one swing component from inside another swing component? | MPS forum How can you access an icon stored in a concept? Create a new custom cell : 1 2 3 4 5 6 7 8 new AbstractCellProvider () { @Override public EditorCell createEditorCell ( EditorContext p1 ) { EditorCell_Image . createImageCell ( context , node , { EditorContext context , SNode node => GlobalIconManager . getInstance (). getIconFor ( concept ); }); } }; How can you paint the background of certain editor cells with a different color based on analysis of the model? with the help of a conditional editor by using the class NodeHighlightManager : 1 2 3 4 NodeHighlightManager highlightManager = this . editorComponent . getHighlightManager (); EditorMessageOwner messageOwner = this . editorComponent . getHighlightMessagesOwner (); (...) highlightManager . mark ((( SNode ) ref ), HighlightConstants . INSTANCES_COLOR , \"usage\" , messageOwner ); The second approach has a better performance, because the highlighter runs asynchronously and not during the editor rebuild. How can you hide a custom cell in the editor? ( show if property) Custom cells expect only a cell provider in the inspector, but don\u2019t offer the possibility to specify other attributes to set e.g. \u201cshow if\u201d. How can I hide a custom cell under a specific condition? ( MPS -33195 ) The meta model actually allows to specify the show if property and other attributes on a custom cell and the generator will generate the correct code for it. It is just not included in the editor for the inspector. You can use the reflective editor to specify the condition. Since these attributes are hidden and you need this knowledge to find them, the alternative for a better visibility is to surround the custom cell with a collection and set the show if property on the collection. contributed by: @aquapp Open API \u00b6 How can you open the inspector programmatically? 1 editorContext . openInspector () Specific Languages Blog: Opening Inspector automatically Specific Languages Blog: Opening Inspector automatically: Selection listeners Specific Languages Blog: Opening Inspector automatically: Editor extensions How can you open the editor for a node programmatically? 1 NavigationSupport . getInstance (). openNode () How can you override an arbitrary editor? Use the language de.slisson.mps.conditionalEditor from MPS -extensions . How can you get the font of an editor? 1 jetbrains . mps . nodeEditor . EditorSettings # getDefaultEditorFont () How can you subscribe to editor changes? Add a tool that subscribes to editor changes | MPS forum . How do you get the text of an EditorCell programmatically? 1 EditorCell . renderText (). getText () How can you find out if an editor cell is readonly? 1 ReadOnlyUtil . isCellsReadOnlyInEditor ( this . editorComponent , new singleton < EditorCell > ( editorCell )) How do you get an editor for a node as a swing component? 1 2 3 HeadlessEditorComponent component = new HeadlessEditorComponent ( # project . getRepository ()); component . editNode ( node ); return component ; How do you get a Project instance for an ActionEvent ? 1 2 3 4 5 button . addActionListener ( new ActionListener () { public void actionPerformed ( ActionEvent e ) { Project mpsProject = UiUtils . getMpsProjectFromActionEvent ( e ); } } How to you get the selection/ selected node in the editor? 1 editorComponent . getSelectionManager (). getSelection () / editorContext . getSelectedNode () How can you select a node in the editor? 1 2 3 editorContext . getSelectionManager (). setSelection / pushSelection // or editorContext . getNodeEditorComponent (). selectNode () How to get the current MPS project from within the editor? Specific Languages Blog: How to get the current MPS project from within the editor How do you find all open editors? Specific Languages Blog: Finding all open editors How do you programmatically collapse editor cells? 1 2 3 4 EditorCell_Collection . fold () / unfold () // You can check if is foldable by calling: EditorCell_Collection . isFoldable () Is there a callback/hook when an editor tab closes? When closing an editor tab, MPS removes the highlighting from all nodes in the editor. I.e., when an editor is opened again for the same root node all highlighting is gone. In my code, I want to react on this editor-close event. Is there are way to implement a callback or hook which is called when an editor tab is closed? You can register an EditorComponentCreateListener , that also receives an editorComponentDisposed event ( example ). Is there a utility class related to editor hints? Yes, there is in mbeddr : EditorHintHelper . Bugs \u00b6 Highlighting of constraint errors in inspector doesn\u2019t work. Known bug ( MPS -32350 ). Pressing F5 helps. MPS forum - hierarchical tree structure and editing \u21a9","title":"Editor"},{"location":"aspects/editor/#editor-aspect","text":"The editor aspect defines the projectional editor of a concept.","title":"Editor aspect"},{"location":"aspects/editor/#general","text":"What happens when you press F5 in the editor? Specific Languages Blog: F5 in editor How can you delete non-existing children, references, or properties from a node? Switch to the reflective editor and remove the offending parts. There is also an enhancement script that can remove properties. Is there a way to prevent users from adding and removing elements in a list in the MPS editor? The elements in the list should still be editable, but adding/removing shouldn\u2019t be allowed? There are 2 solutions: Use a querylist with empty insert/delete handlers. Create an action map/inline action cell with empty blocks for the actions INSERT and INSERT_BEFORE . I\u2019ve set a color of type java.awt.Color in a style property query but the color is different when using the darcula theme. The return type of those functions indicate that they return type is java.awt.Color but the generator maps these colors to theme-dependent colors . The only avoid to avoid this mappings is to use custom factories. More info about theme-dependent colors can be found here .","title":"General"},{"location":"aspects/editor/#menus","text":"Explain the different menu related terms. Menu definitions have two flavours named and +default+ and can be defined in transformation or substitute menus. Default substitutions will replace the default menu that MPS shows. Shortcut: Ctrl + Space or Cmd + Space Default menu Transformation menus define UI actions that will be shown in various locations. The menu is defined as a list of sections. Each section contains a list of menu parts for a set of locations. At runtime the menu parts and locations are used to generate the content of the completion menu. The contents of the completion menu are called menu items. Parameterized actions allow to calculate a list of elements of a specific type to be shown in the completion menu. They calculate all elements for the substitution menu and have an influence on the node creation. Moreover, they definesthe selection where the cursor should be placed. How do you find out where a substitute menu entry is coming from? Use the Menu Trace Tool window. More information can be found in Menu Trace Tool Window | MPS . How can you add smart references using the transformation menus? F1RE Blog: Adding smart references using transformation menus What\u2019s the best way to improve the autocomplete description of concepts? As you can see in the screenshot, the concepts of both opening braces are indistinguishable. By changing the short description in the concept structure, I can change the description. What\u2019s the best format to improve these descriptions? Is this way the correct/best one to change the autocomplete concept description? asked by: @aquapp In general, it\u2019s up to the users and specific context to decide what makes sense to put to the description text. Usually it should provide additional semantic information to those not familiar with the language to help them to pick up the right concept from the code completion menu. The short description in the concept is the original, simple way to provide static description in the code completion menu. You can also add your own substitute action in the substitute menu of the concept (editor aspect) to get full control over the code completion menu and to be able to generate the text dynamically based on the context. answered by: @wsafonov","title":"Menus"},{"location":"aspects/editor/#languages","text":"I need a specific graphical notation/feature for the editor. Have a look at the full extension list from MPS -extensions . I need hyperlinks. Use the language com.mbeddr.mpsutil.hyperlink from mbeddr platform . How do you create clickable links? Specific Languages Blog: Creating clickable URL links in the editor Specific Languages Blog: More clickable URL links How can you include non-child relations in the editor?. Use the language com.mbeddr.mpsutil.editor.querylist from MPS -extensions .","title":"Languages"},{"location":"aspects/editor/#editor-declaration","text":"Is there a disadvantage by using the indent layout instead of the indent cell mode? No. There used to be performance issues with bigger models that were fixed in MPS 2021.1 . How do you use an empty text for empty cells? Specific Languages Blog: Use empty text for empty cells Explain all cell related variables. A cell takes up a specific amount of space in the editor component (width and height). padding-left/right/top/bottom: a floating point number, which specifies the padding of a text cell, i.e. how much space will be between cell\u2019s text and cell\u2019s left and right sides, respectively. inset: representation of the borders of an element. It specifies the space that an element must leave at each of its edges. baseline: the line upon which most letters sit. ascent: the recommended distance above the baseline for singled spaced text. descent: the recommended distance below the baseline for singled spaced text. height: ascent + descent gap: space between cells in a collection. There is a left and right gap. How can you set editor hints? you can set hints via editorContext . getEditorComponent (). getUpdater () explicit hints for nodes initial hints globally; they behave similar to pushed hints. via right-click: push editor hints and select a specific one. via an EditorHintToggleAction (e.g. in action declarations) They are not visible in the push Editor hints menu. If you need the same behavior e.g. in intentions, you can use code from there (via ConceptEditorHintSettingsComponent.HintsState ) Explicit hints for nodes and hints via EditorHintToggleAction . The usage of ConceptEditorHintSettingsComponent.HintsState is not so obvious. How do you set the cursor to the first editable cell? (A) What it looks like after creation (B) Initial situation with cursor at (1) : pressing Enter leads to (C) The problem is, that in (C) the cursor is at (2) , right before a read-only cell and thus editing or moving to the next cell is not possible. I would like the cursor to jump to the first editable cell, which is at position (3) . Structure of the new node in (C) : Editor of the new node in (C) : Usually, you would set the attracts focus property of the cell, where the cursor should be positioned, to attractsFocus or FirstEditableCell . But, since ( C.2 and C.3 ) are error cells, the default behaviour is to set the cursor in front of the first error cell, which is (C.2) . Therefore, change the first part of your editor to a querylist cell (A) , which references the \u201cmember\u201d in the cell properties (B) and set the read-only property on the querylist. contributed by: @aquapp Is it possible to access the selected value of one swing component from inside another swing component? Yes: Is it possible to access the selected value of one swing component from inside another swing component? | MPS forum How can you access an icon stored in a concept? Create a new custom cell : 1 2 3 4 5 6 7 8 new AbstractCellProvider () { @Override public EditorCell createEditorCell ( EditorContext p1 ) { EditorCell_Image . createImageCell ( context , node , { EditorContext context , SNode node => GlobalIconManager . getInstance (). getIconFor ( concept ); }); } }; How can you paint the background of certain editor cells with a different color based on analysis of the model? with the help of a conditional editor by using the class NodeHighlightManager : 1 2 3 4 NodeHighlightManager highlightManager = this . editorComponent . getHighlightManager (); EditorMessageOwner messageOwner = this . editorComponent . getHighlightMessagesOwner (); (...) highlightManager . mark ((( SNode ) ref ), HighlightConstants . INSTANCES_COLOR , \"usage\" , messageOwner ); The second approach has a better performance, because the highlighter runs asynchronously and not during the editor rebuild. How can you hide a custom cell in the editor? ( show if property) Custom cells expect only a cell provider in the inspector, but don\u2019t offer the possibility to specify other attributes to set e.g. \u201cshow if\u201d. How can I hide a custom cell under a specific condition? ( MPS -33195 ) The meta model actually allows to specify the show if property and other attributes on a custom cell and the generator will generate the correct code for it. It is just not included in the editor for the inspector. You can use the reflective editor to specify the condition. Since these attributes are hidden and you need this knowledge to find them, the alternative for a better visibility is to surround the custom cell with a collection and set the show if property on the collection. contributed by: @aquapp","title":"Editor declaration"},{"location":"aspects/editor/#open-api","text":"How can you open the inspector programmatically? 1 editorContext . openInspector () Specific Languages Blog: Opening Inspector automatically Specific Languages Blog: Opening Inspector automatically: Selection listeners Specific Languages Blog: Opening Inspector automatically: Editor extensions How can you open the editor for a node programmatically? 1 NavigationSupport . getInstance (). openNode () How can you override an arbitrary editor? Use the language de.slisson.mps.conditionalEditor from MPS -extensions . How can you get the font of an editor? 1 jetbrains . mps . nodeEditor . EditorSettings # getDefaultEditorFont () How can you subscribe to editor changes? Add a tool that subscribes to editor changes | MPS forum . How do you get the text of an EditorCell programmatically? 1 EditorCell . renderText (). getText () How can you find out if an editor cell is readonly? 1 ReadOnlyUtil . isCellsReadOnlyInEditor ( this . editorComponent , new singleton < EditorCell > ( editorCell )) How do you get an editor for a node as a swing component? 1 2 3 HeadlessEditorComponent component = new HeadlessEditorComponent ( # project . getRepository ()); component . editNode ( node ); return component ; How do you get a Project instance for an ActionEvent ? 1 2 3 4 5 button . addActionListener ( new ActionListener () { public void actionPerformed ( ActionEvent e ) { Project mpsProject = UiUtils . getMpsProjectFromActionEvent ( e ); } } How to you get the selection/ selected node in the editor? 1 editorComponent . getSelectionManager (). getSelection () / editorContext . getSelectedNode () How can you select a node in the editor? 1 2 3 editorContext . getSelectionManager (). setSelection / pushSelection // or editorContext . getNodeEditorComponent (). selectNode () How to get the current MPS project from within the editor? Specific Languages Blog: How to get the current MPS project from within the editor How do you find all open editors? Specific Languages Blog: Finding all open editors How do you programmatically collapse editor cells? 1 2 3 4 EditorCell_Collection . fold () / unfold () // You can check if is foldable by calling: EditorCell_Collection . isFoldable () Is there a callback/hook when an editor tab closes? When closing an editor tab, MPS removes the highlighting from all nodes in the editor. I.e., when an editor is opened again for the same root node all highlighting is gone. In my code, I want to react on this editor-close event. Is there are way to implement a callback or hook which is called when an editor tab is closed? You can register an EditorComponentCreateListener , that also receives an editorComponentDisposed event ( example ). Is there a utility class related to editor hints? Yes, there is in mbeddr : EditorHintHelper .","title":"Open API"},{"location":"aspects/editor/#bugs","text":"Highlighting of constraint errors in inspector doesn\u2019t work. Known bug ( MPS -32350 ). Pressing F5 helps. MPS forum - hierarchical tree structure and editing \u21a9","title":"Bugs"},{"location":"aspects/feedback/","text":"Feedback aspect \u00b6 The feedback aspect defines custom messages to show to the user when an error or a warning is detected in the model. Can I override error messages? Yes, in this aspect: Feedback - MPS .","title":"Feedback"},{"location":"aspects/feedback/#feedback-aspect","text":"The feedback aspect defines custom messages to show to the user when an error or a warning is detected in the model. Can I override error messages? Yes, in this aspect: Feedback - MPS .","title":"Feedback aspect"},{"location":"aspects/findusages/","text":"FindUsages aspect \u00b6 Custom finders for discovering related nodes can be implemented in this aspect. I click Find usages in the context menu of a node, and it doesn\u2019t find anything. The standard search scope is the project. Try to expand it to global in the find usages settings. Also check that you are using the correcting finders in the Finders section of the settings. I want to execute Find usages more than once, but the result tab gets overridden. Select the option Open in new tab in the section View of the Find usages preferences or pin the result tabs by right-clicking and selecting Pin Tab . How to restrict the scope of a Finder execution? I am using this finder and would like to restrict the scope from global , to lets say project . How do I do this? You can pass any FindUsages Scope implementation to the expression, for instance the ProjectScope : 1 SearchResults results = execute finders ( NodeUsages , node , new ProjectScope ( project ), < default > );","title":"Find Usages"},{"location":"aspects/findusages/#findusages-aspect","text":"Custom finders for discovering related nodes can be implemented in this aspect. I click Find usages in the context menu of a node, and it doesn\u2019t find anything. The standard search scope is the project. Try to expand it to global in the find usages settings. Also check that you are using the correcting finders in the Finders section of the settings. I want to execute Find usages more than once, but the result tab gets overridden. Select the option Open in new tab in the section View of the Find usages preferences or pin the result tabs by right-clicking and selecting Pin Tab . How to restrict the scope of a Finder execution? I am using this finder and would like to restrict the scope from global , to lets say project . How do I do this? You can pass any FindUsages Scope implementation to the expression, for instance the ProjectScope : 1 SearchResults results = execute finders ( NodeUsages , node , new ProjectScope ( project ), < default > );","title":"FindUsages aspect"},{"location":"aspects/generator/","text":"Generator aspect \u00b6 Generator is a part of language specification that defines the denotational semantics for the concepts in the language. \u2014 MPS documentation General \u00b6 Are there any best practices for generators? coolya: Maintainable MPS Generators Can you invoke the generator from an external tool? 2 Yes, it can be run from Ant. How can you copy the output to another location? Use the @CopyOutcome annotation. How do I obtain a temporary model? Use the class TemporaryModels . Which variable names aren\u2019t available because they are used in the generator? Underlined variables are specific variables that are available. Console: ConsoleContext context , ConsoleStream console Constraint: Scope: ReferenceConstraintsContext _context Typesystem: all rules: IsApplicable2Status status , TypeCheckingContext typeCheckingContext comparison rule: SNode node1 , SNode node2 , inequation replacement rule custom condition: SNode subtype , SNode supertype , rule: SNode subtype , SNode supertype , EquationInfo equationInfo , TypeCheckingContext typeCheckingContext , boolean inequalityIsWeak , boolean inequalityIsLessThan substitute type rule: SNode originalType Generator: mapping configuration: CreateRootRuleContext _context Editor: General: SNode myNode How does the IDE collect generators to engage on a model? Specific Languages Blog: How MPS collects generators to engage on a model genplan (in devkit) vs. generator priorities? The genplan is applied instead of the generator priorities. If your generator should be applied in a model using a genplan, your generator has to be part of the genplan. When developing a language, which is used within an aspect, e.g. typesystem, the MPS aspect\u2019s genplan can block the generator. How can you use generated classes which implement an extension-point? Let \\(L_A\\) be a language which offers an extension-point over class \\(E\\) . Then it is quite simple to provide a static implementation for extension-point for \\(E\\) for example in another language. What if we have want map a concept \\(Q\\) of \\(B\\) to that extension-point? We want to be able to generated Code \\(C\\) from a oncept instance of \\(Q\\) which is a subclass of \\(E\\) , such that we can use it for the extension-point over class \\(E\\) . Create the extension point in the plugin aspect of language \\(L_A\\) . In generator main you need to create two root mapping rules for \\(Q\\) (which is ModelMerge in our case). map_ModelMerge maps \\(Q\\) to a class which extends \\(E\\) (here ConceptMergeSpec ). map_ModelMerge_extension will generate an extension for \\(Q\\) . It is a extension RootMapping which can be selected from the intention. The code for the Reference-Macro in the figure above should look like this. Make sure you have jetbrains.mps. lang .extension included as language in the plugin. Now create a solution, not a sandbox. Set Solution Kind in the properties to Other . Afterwards create a model named plugin (not optional). Add an instance of \\(Q\\) to your model plugin and build it. Looking now at your last transient model, there must be 3 artifacts related to \\(Q\\) : 1.the generated class 2.the generated extension 3.an ExtensionDescriptor which provides all found extensions Now you should be able to locate your extension with a code fragment like this: 1 2 3 foreach obj in extensionPoint / ModelMergeExt / . objects { System . out . println ( \"---> extension \" + obj ); } contributed by: @dbinkele Where should you put classes that you need on the user side and in the generator? Move the classes to a solution and add that solution as a runtime solution to the language (in the module properties). Can you access the output model in a property macro? In reference macros in generators, I can use the provided \u201coutputNode\u201d parameter as an entry point into the output model of the current transformation and e.g. use this to find the root node my generated reference will be contained in. Can I do something similar in property macros? For those, there obviously is no \u201coutputNode\u201d. I\u2019d still like to find, for example, the Node in my output model that my generated property belongs to. Is there a way to do that? asked by: @jonaskraemer You can try to use the post-processing function of a $MAP_SRC$ macro. Which generation plan is used: the one of the custom generation facet or from any of the used devkits? Custom generation facet: if there is a GP defined, this plan is used. Devkits: first, MPS looks if any devkit specifies a GP . The first devKit with an associated plan is consulted, if any, and no further lookup is done. If there are no devkits with associated plans, MPS checks the facets of the devkit modules if any is an GP provider. The first found facet serves as a provider. How to generate XY \u00b6 What can be generated? Have a look at the language repository . You might also find other languages on GitHub. In general there doesn\u2019t have to be an existing language. Any text can be generated with TextGen or Plaintextgen from MPS -extensions . It\u2019s also possible to generate code from an action or pre/post-processing script in the generator by using an existing Java library such as Apache Poi. A tutorial for example for excel can be found here . I want to create multi outputs for a language. 1 Use a dummy concept or a generation plan with a fork. This quesion is also answered in the generator cookbook . How can you generate latex files? The mbeddr documentation language can do this. Have a look at the documentation . How can you generate some text? Use the textgen aspect or use mps-plaintextgen from MPS -extensions . Can you use an alternative approach to generating code? You can interpret your models instead. Use mbeddr.mpsutil.interpreter from mbeddr platform . Should you use generation plans or generator priorities? Have a look at the motivation for generation plans in the official documentation . Generation plans should be used when the generation order is simple. How do you generate language X from MPS ? Specific Languages blog: How do I generate language XY from MPS ? How can you make sure that a generator B can use the output of a generator A? Define priorities or a fixed genplan for \\(B\\) (and maybe \\(A\\) ) If you can\u2019t run / don\u2019t want to run both generators in the same \u201cphase\u201d, configure them to run one after each other. Solution 1 : Define a \\(MM\\) (structure) (INFO-NODE) in \\(A\\) where you accumulate all required information and pass for all other generators. Configure \\(A\\) to remove INFO-NODE if not required (separate mapping configuration). Solution 2 : Define an annotation and store all req . infos there Configure \\(A\\) to drop annotation if not required (separate mapping configuration), Solution 3 : Use user objects to store required information as part of the real AST nodes. User objects are volatile children/properties which are not persisted but survive several generation phases. Use com.mbeddr.mpsutil.genutil to achieve this. Solution 4 : Define a fixed genplan with checkpoints. Organize the whole generation process manually. How to generate large strings? Given I am writing a generator and it generates a java string for a string property. That property holds a string of more than 64000 characters and the java compiler gives me a constant string too long error. What can I do? This is how it looks like so far: Option 1 : Extract into a separate file Of course it would be better to not fill the java file too much and instead generate the string into a file that gets loaded at this place. Option 2 : Split and join again The restriction only applies to the size of string literals. However, at runtime, it is allowed to have larger strings. So that we can split it into a concatenation that gets assembled at runtime then: Here we use the Guiva classes Joiner and Splitter from MPS.Core/google.common.base and java.util.Arrays . We use the splitter at generation time to split it into parts of maximal 50000 characters. Then we map it onto an arbitrary node that has a string property, as $LOOP$ requires a node In the property macro inside the loop, we simply pull that property out of the node again (the inspector of this is not visible in the screenshot) It is just a coincidence that we create nodes of the same concept and use the same property for the loop content, than for the outside context node. You may light-quote anything of type string here. contributed by: @abstraktor Open API \u00b6 How can you preview the generated text programmatically? Use the MPS action TextPreviewModel or call the methods in TextGeneratorEngine if you want to use the text generator. How do you get the output path for a solution? To get an IFile , call SModelOperations . getOutputLocation ( model ) . To get an string, call ProjectPathUtil . getGeneratorOutputPath ( module . getModuleDescriptor ()) . You have to first cast the module to an AbstractModule. How can I check if a model requires generation programmatically? The project view shows generation required if a model has been changed. What is the source of this information, and how reliable is it? (regarding the 2 nd part of the question: sometimes the text in the project view is not up to date, but pressing F5 fixes it. Is it just the UI that is not updated when the underlying state changes, or is the state itself not updated properly until F5 is pressed?) ModelGenerationStatusManager provides a corresponding API. This is how to use it: 1 2 3 4 MPSProject project = /* ... */ ; SModel model = /* ... */ ; ModelGenerationStatusManager statusManager = project . getComponent ( ModelGenerationStatusManager . class ); if ( statusManager . generationRequired ( model )) { /* ... */ } Unfortunately, it does\u2019nt seem to be reliable, e.g. when changing something in the model, the API behaves correctly in the first place. But after executing the Synchronize action, MPS for some reason believes that generation is not required any more (even though the change would have an effect on the output and Synchronize doesn\u2019t execute the generation). This odd behavior can also be seen in the project view (note: this might be outdated information). contributed by: @till-f How can you react to changed generated files? 1 2 3 4 5 new GenStatusUpdater ( # project ). getStatusManager (). addGenerationStatusListener ( new ModelGenerationStatusListener () { void generatedFilesChanged ( Collection < SModel > models ) { // do something } ); Troubleshooting \u00b6 MPS can\u2019t resolve the import XY. 3 The solution that contains the class has to be added as a runtime solution (see here ). Why are root nodes generated more than once? Have you used one of your root nodes as a child of another node? It will still act as a root node in this case. No output location for XY. Make sure that the Java facet is enabled in the properties of the language or solution. This error can often be seen when opening an old MPS project. How do I debug generators? Specific Languages Blog: Debugging generators The generated code has no debug symbols. Locate the build solution in MPS that is building your languages and adjust the java settings: java options <project default> generate debug info false generate no warnings false fork false compiler <default compiler> java compliance level 1.8 java compiler options <no additional options> copy resources false Then set generate debug info to true. If no java options exist in your build solution, simply add one in the project structure. How can you debug the differences of generation between command line and MPS ? Given I have an MPS project and it compiles well in my MPS . When I run the same in a command line then I see a compile error. How can I debug this? The issue behind this kind of issues usually lies in one of these three things: Issue Area 1 : Settings (inplace, threading) Try turning off Apply transformations in place in your MPS settings under Build, Execution, Deployment \u2192 Generator \u2192 General , as this is unset in the command line (note, that this setting doesn\u2019t appear in the search): Also, disabling the build in parallel threads may help. Issue Area 2 : Dependencies A second issue may originate from the separate type of class loading and dependency loading in the command line. Issue Area 3 : Generation plans The command line build runs the generator plans that are included in the devkits of a model, or that are explicitly added to the generator facet+tab of a module. If your code starts the build for an explicit generation plan other than that, consider if a different plan could be the culprit. (Remember, right-clicking a model and Show Generation Plan to see if all looks as expected). Remark 1: Inplace transformations are on or off depending on your build script, same applied to parallel generation. On the command line if nothing specified it defaults to 4 threads. The biggest difference is that in the command line build not project is opened, which means anything that tried to access the project including virtual files will fail. Remark 2: One potential source of problems could be packaging of languages and generators. Because in the command line build generators might need to be loaded from packaged jars, any issues with that packaging could affect the generation. For example, as it currently may happen due to MPS -32026 that whole generator models with templates are not loaded and therefore not applied during the generation in the command line. contributed by: @abstraktor MPS forum - I want to export multiple languages from MPS \u21a9 MPS forum - Is it possible to export a DSL compiler created with MPS and use it independently \u21a9 MPS forum - Generator error: uncaught exception ?no classifier? \u21a9","title":"Generator"},{"location":"aspects/generator/#generator-aspect","text":"Generator is a part of language specification that defines the denotational semantics for the concepts in the language. \u2014 MPS documentation","title":"Generator aspect"},{"location":"aspects/generator/#general","text":"Are there any best practices for generators? coolya: Maintainable MPS Generators Can you invoke the generator from an external tool? 2 Yes, it can be run from Ant. How can you copy the output to another location? Use the @CopyOutcome annotation. How do I obtain a temporary model? Use the class TemporaryModels . Which variable names aren\u2019t available because they are used in the generator? Underlined variables are specific variables that are available. Console: ConsoleContext context , ConsoleStream console Constraint: Scope: ReferenceConstraintsContext _context Typesystem: all rules: IsApplicable2Status status , TypeCheckingContext typeCheckingContext comparison rule: SNode node1 , SNode node2 , inequation replacement rule custom condition: SNode subtype , SNode supertype , rule: SNode subtype , SNode supertype , EquationInfo equationInfo , TypeCheckingContext typeCheckingContext , boolean inequalityIsWeak , boolean inequalityIsLessThan substitute type rule: SNode originalType Generator: mapping configuration: CreateRootRuleContext _context Editor: General: SNode myNode How does the IDE collect generators to engage on a model? Specific Languages Blog: How MPS collects generators to engage on a model genplan (in devkit) vs. generator priorities? The genplan is applied instead of the generator priorities. If your generator should be applied in a model using a genplan, your generator has to be part of the genplan. When developing a language, which is used within an aspect, e.g. typesystem, the MPS aspect\u2019s genplan can block the generator. How can you use generated classes which implement an extension-point? Let \\(L_A\\) be a language which offers an extension-point over class \\(E\\) . Then it is quite simple to provide a static implementation for extension-point for \\(E\\) for example in another language. What if we have want map a concept \\(Q\\) of \\(B\\) to that extension-point? We want to be able to generated Code \\(C\\) from a oncept instance of \\(Q\\) which is a subclass of \\(E\\) , such that we can use it for the extension-point over class \\(E\\) . Create the extension point in the plugin aspect of language \\(L_A\\) . In generator main you need to create two root mapping rules for \\(Q\\) (which is ModelMerge in our case). map_ModelMerge maps \\(Q\\) to a class which extends \\(E\\) (here ConceptMergeSpec ). map_ModelMerge_extension will generate an extension for \\(Q\\) . It is a extension RootMapping which can be selected from the intention. The code for the Reference-Macro in the figure above should look like this. Make sure you have jetbrains.mps. lang .extension included as language in the plugin. Now create a solution, not a sandbox. Set Solution Kind in the properties to Other . Afterwards create a model named plugin (not optional). Add an instance of \\(Q\\) to your model plugin and build it. Looking now at your last transient model, there must be 3 artifacts related to \\(Q\\) : 1.the generated class 2.the generated extension 3.an ExtensionDescriptor which provides all found extensions Now you should be able to locate your extension with a code fragment like this: 1 2 3 foreach obj in extensionPoint / ModelMergeExt / . objects { System . out . println ( \"---> extension \" + obj ); } contributed by: @dbinkele Where should you put classes that you need on the user side and in the generator? Move the classes to a solution and add that solution as a runtime solution to the language (in the module properties). Can you access the output model in a property macro? In reference macros in generators, I can use the provided \u201coutputNode\u201d parameter as an entry point into the output model of the current transformation and e.g. use this to find the root node my generated reference will be contained in. Can I do something similar in property macros? For those, there obviously is no \u201coutputNode\u201d. I\u2019d still like to find, for example, the Node in my output model that my generated property belongs to. Is there a way to do that? asked by: @jonaskraemer You can try to use the post-processing function of a $MAP_SRC$ macro. Which generation plan is used: the one of the custom generation facet or from any of the used devkits? Custom generation facet: if there is a GP defined, this plan is used. Devkits: first, MPS looks if any devkit specifies a GP . The first devKit with an associated plan is consulted, if any, and no further lookup is done. If there are no devkits with associated plans, MPS checks the facets of the devkit modules if any is an GP provider. The first found facet serves as a provider.","title":"General"},{"location":"aspects/generator/#how-to-generate-xy","text":"What can be generated? Have a look at the language repository . You might also find other languages on GitHub. In general there doesn\u2019t have to be an existing language. Any text can be generated with TextGen or Plaintextgen from MPS -extensions . It\u2019s also possible to generate code from an action or pre/post-processing script in the generator by using an existing Java library such as Apache Poi. A tutorial for example for excel can be found here . I want to create multi outputs for a language. 1 Use a dummy concept or a generation plan with a fork. This quesion is also answered in the generator cookbook . How can you generate latex files? The mbeddr documentation language can do this. Have a look at the documentation . How can you generate some text? Use the textgen aspect or use mps-plaintextgen from MPS -extensions . Can you use an alternative approach to generating code? You can interpret your models instead. Use mbeddr.mpsutil.interpreter from mbeddr platform . Should you use generation plans or generator priorities? Have a look at the motivation for generation plans in the official documentation . Generation plans should be used when the generation order is simple. How do you generate language X from MPS ? Specific Languages blog: How do I generate language XY from MPS ? How can you make sure that a generator B can use the output of a generator A? Define priorities or a fixed genplan for \\(B\\) (and maybe \\(A\\) ) If you can\u2019t run / don\u2019t want to run both generators in the same \u201cphase\u201d, configure them to run one after each other. Solution 1 : Define a \\(MM\\) (structure) (INFO-NODE) in \\(A\\) where you accumulate all required information and pass for all other generators. Configure \\(A\\) to remove INFO-NODE if not required (separate mapping configuration). Solution 2 : Define an annotation and store all req . infos there Configure \\(A\\) to drop annotation if not required (separate mapping configuration), Solution 3 : Use user objects to store required information as part of the real AST nodes. User objects are volatile children/properties which are not persisted but survive several generation phases. Use com.mbeddr.mpsutil.genutil to achieve this. Solution 4 : Define a fixed genplan with checkpoints. Organize the whole generation process manually. How to generate large strings? Given I am writing a generator and it generates a java string for a string property. That property holds a string of more than 64000 characters and the java compiler gives me a constant string too long error. What can I do? This is how it looks like so far: Option 1 : Extract into a separate file Of course it would be better to not fill the java file too much and instead generate the string into a file that gets loaded at this place. Option 2 : Split and join again The restriction only applies to the size of string literals. However, at runtime, it is allowed to have larger strings. So that we can split it into a concatenation that gets assembled at runtime then: Here we use the Guiva classes Joiner and Splitter from MPS.Core/google.common.base and java.util.Arrays . We use the splitter at generation time to split it into parts of maximal 50000 characters. Then we map it onto an arbitrary node that has a string property, as $LOOP$ requires a node In the property macro inside the loop, we simply pull that property out of the node again (the inspector of this is not visible in the screenshot) It is just a coincidence that we create nodes of the same concept and use the same property for the loop content, than for the outside context node. You may light-quote anything of type string here. contributed by: @abstraktor","title":"How to generate XY"},{"location":"aspects/generator/#open-api","text":"How can you preview the generated text programmatically? Use the MPS action TextPreviewModel or call the methods in TextGeneratorEngine if you want to use the text generator. How do you get the output path for a solution? To get an IFile , call SModelOperations . getOutputLocation ( model ) . To get an string, call ProjectPathUtil . getGeneratorOutputPath ( module . getModuleDescriptor ()) . You have to first cast the module to an AbstractModule. How can I check if a model requires generation programmatically? The project view shows generation required if a model has been changed. What is the source of this information, and how reliable is it? (regarding the 2 nd part of the question: sometimes the text in the project view is not up to date, but pressing F5 fixes it. Is it just the UI that is not updated when the underlying state changes, or is the state itself not updated properly until F5 is pressed?) ModelGenerationStatusManager provides a corresponding API. This is how to use it: 1 2 3 4 MPSProject project = /* ... */ ; SModel model = /* ... */ ; ModelGenerationStatusManager statusManager = project . getComponent ( ModelGenerationStatusManager . class ); if ( statusManager . generationRequired ( model )) { /* ... */ } Unfortunately, it does\u2019nt seem to be reliable, e.g. when changing something in the model, the API behaves correctly in the first place. But after executing the Synchronize action, MPS for some reason believes that generation is not required any more (even though the change would have an effect on the output and Synchronize doesn\u2019t execute the generation). This odd behavior can also be seen in the project view (note: this might be outdated information). contributed by: @till-f How can you react to changed generated files? 1 2 3 4 5 new GenStatusUpdater ( # project ). getStatusManager (). addGenerationStatusListener ( new ModelGenerationStatusListener () { void generatedFilesChanged ( Collection < SModel > models ) { // do something } );","title":"Open API"},{"location":"aspects/generator/#troubleshooting","text":"MPS can\u2019t resolve the import XY. 3 The solution that contains the class has to be added as a runtime solution (see here ). Why are root nodes generated more than once? Have you used one of your root nodes as a child of another node? It will still act as a root node in this case. No output location for XY. Make sure that the Java facet is enabled in the properties of the language or solution. This error can often be seen when opening an old MPS project. How do I debug generators? Specific Languages Blog: Debugging generators The generated code has no debug symbols. Locate the build solution in MPS that is building your languages and adjust the java settings: java options <project default> generate debug info false generate no warnings false fork false compiler <default compiler> java compliance level 1.8 java compiler options <no additional options> copy resources false Then set generate debug info to true. If no java options exist in your build solution, simply add one in the project structure. How can you debug the differences of generation between command line and MPS ? Given I have an MPS project and it compiles well in my MPS . When I run the same in a command line then I see a compile error. How can I debug this? The issue behind this kind of issues usually lies in one of these three things: Issue Area 1 : Settings (inplace, threading) Try turning off Apply transformations in place in your MPS settings under Build, Execution, Deployment \u2192 Generator \u2192 General , as this is unset in the command line (note, that this setting doesn\u2019t appear in the search): Also, disabling the build in parallel threads may help. Issue Area 2 : Dependencies A second issue may originate from the separate type of class loading and dependency loading in the command line. Issue Area 3 : Generation plans The command line build runs the generator plans that are included in the devkits of a model, or that are explicitly added to the generator facet+tab of a module. If your code starts the build for an explicit generation plan other than that, consider if a different plan could be the culprit. (Remember, right-clicking a model and Show Generation Plan to see if all looks as expected). Remark 1: Inplace transformations are on or off depending on your build script, same applied to parallel generation. On the command line if nothing specified it defaults to 4 threads. The biggest difference is that in the command line build not project is opened, which means anything that tried to access the project including virtual files will fail. Remark 2: One potential source of problems could be packaging of languages and generators. Because in the command line build generators might need to be loaded from packaged jars, any issues with that packaging could affect the generation. For example, as it currently may happen due to MPS -32026 that whole generator models with templates are not loaded and therefore not applied during the generation in the command line. contributed by: @abstraktor MPS forum - I want to export multiple languages from MPS \u21a9 MPS forum - Is it possible to export a DSL compiler created with MPS and use it independently \u21a9 MPS forum - Generator error: uncaught exception ?no classifier? \u21a9","title":"Troubleshooting"},{"location":"aspects/intentions/","text":"Intentions aspect \u00b6 Intentions provide fast access to the most used operations with syntactical constructions of a language. \u2014 MPS documentation How can you go to the declaration of an intention when you open the intention menu? Select the intention and click the arrow/press right arrow key \u2192 Go to intention declaration . How do you execute an action as an intention? Add the action to the action group ActionsAsIntentions . How can you group intentions and give them names? Use com.mbeddr.mpsutil.intentions from MPS -extensions . Alternatively, you can split the description into multiple literals. The first literal will then be used to group intentions. I need to get all available intentions for a node. 1 IntentionsManager . getInstance (). getAvailableIntentions (); How can you make intentions visible? Specific Languages blog: Making intentions visible How can you show a submenu in the intention menu? Specific Languages blog: Showing a submenu in the intentions menu An Intention isn\u2019t visible, although it should be. What can you do? Intention X should be visible on Concept Y. However, when I select an instance of Y, it is not listed in the intention menu. What can I do? Make sure the language that declares the intention is in Used Languages of the model: - Check if the intention applies to the concept you want it to apply to. (Maybe *visible on child nodes* is not set). - Check if the *isApplicable* condition evaluated to true (try to avoid adding `System.err.our` prints to the model). contributed by: @coolya Failed to evaluate isApplicable for XY. Starting from 2021.1.4 JetBrains made a change to the isApplicable method of intentions ( commits ). After the changes they regenerated all the intentions in the project. This change also affects 2020.3.6. The exception happens, for example, when languages compiled with 2021.1.3 and 2021.1.4 are used together.","title":"Intentions"},{"location":"aspects/intentions/#intentions-aspect","text":"Intentions provide fast access to the most used operations with syntactical constructions of a language. \u2014 MPS documentation How can you go to the declaration of an intention when you open the intention menu? Select the intention and click the arrow/press right arrow key \u2192 Go to intention declaration . How do you execute an action as an intention? Add the action to the action group ActionsAsIntentions . How can you group intentions and give them names? Use com.mbeddr.mpsutil.intentions from MPS -extensions . Alternatively, you can split the description into multiple literals. The first literal will then be used to group intentions. I need to get all available intentions for a node. 1 IntentionsManager . getInstance (). getAvailableIntentions (); How can you make intentions visible? Specific Languages blog: Making intentions visible How can you show a submenu in the intention menu? Specific Languages blog: Showing a submenu in the intentions menu An Intention isn\u2019t visible, although it should be. What can you do? Intention X should be visible on Concept Y. However, when I select an instance of Y, it is not listed in the intention menu. What can I do? Make sure the language that declares the intention is in Used Languages of the model: - Check if the intention applies to the concept you want it to apply to. (Maybe *visible on child nodes* is not set). - Check if the *isApplicable* condition evaluated to true (try to avoid adding `System.err.our` prints to the model). contributed by: @coolya Failed to evaluate isApplicable for XY. Starting from 2021.1.4 JetBrains made a change to the isApplicable method of intentions ( commits ). After the changes they regenerated all the intentions in the project. This change also affects 2020.3.6. The exception happens, for example, when languages compiled with 2021.1.3 and 2021.1.4 are used together.","title":"Intentions aspect"},{"location":"aspects/listener/","text":"Listener aspect \u00b6 This aspects allows to create listeners that can react to changes in the model. It can react to different events such as adding and removing children or value changes of properties. How do you react to change in the model? Use com.mbeddr.mpsutil.modellisteners from mbeddr platform . Is there a way to listen to changes in any descendant? Add a single change listener to BaseConcept . You still need to define your logic for every kind of a change (property, reference, child\u2026) separately there. Are they executed synchronously or asynchronously? They are executed synchronously.","title":"Listener"},{"location":"aspects/listener/#listener-aspect","text":"This aspects allows to create listeners that can react to changes in the model. It can react to different events such as adding and removing children or value changes of properties. How do you react to change in the model? Use com.mbeddr.mpsutil.modellisteners from mbeddr platform . Is there a way to listen to changes in any descendant? Add a single change listener to BaseConcept . You still need to define your logic for every kind of a change (property, reference, child\u2026) separately there. Are they executed synchronously or asynchronously? They are executed synchronously.","title":"Listener aspect"},{"location":"aspects/migration/","text":"Migration aspect \u00b6 To nicely support language evolution, migrations automatically upgrade client code to use the latest version of a language or multiple languages. \u2014 MPS documentation General \u00b6 What are the best practises? 1 Have a look at this answer . I want to migrate an MPS project that\u2019s many years old. How do you do that? First of all make sure that you don\u2019t skip too many MPS versions, otherwise the migration won\u2019t succeed. For old projects you have to edit the module files manually because the structure slightly changed. Open the .mpl files in an text editor and change all occurences of <language id=\"%ID\" fqName=\"%FQNAME\" version=\"%VERSION\" /> into <language slang=\"l:%ID:%FQNAME\" version=\"%VERSION\" /> . The next step is to start the migration assistant. It will fail because it can\u2019t find migrations for some language versions. For example: jetbrains.mps. lang .editor only has a migration starting with version 7.You have to find all occurences of this language in your project with an terxt editor and change the attribute version to 7. Then run the migration assistant again and hope that everything works. Some concepts cannot be migrated automatically such as the substitute and transformation menues. There will also be other issues that have to be fixed manually. I want to replace a node A with another node B where A and B share the same super concept. Use the class RefactoringRuntime . This class can be use to set/unset property or replace nodes with other ones. Example: RefactoringRuntime.replaceWithNewConcept(old, concept/ComponentConfigRef/) Are there any best practises about feature branches and language migrations? languageengineering.io: MPS , Feature Branches and Language Migrations: DOs and DON\u2019Ts How can you detect that migrations are running? I have code that needs to know if migrations are currently executed e.g. modelisteners that update the model when a change by the user appears. I would like to detect when migrations are executed to prevent this code from executing in the middle of a migration to prevent manipulating the model in an incomplete state during the migration. PersistenceRegistry . getInstance (). isFastSearch () returns false while migrations are running. You can check it in the model lister: 1 2 3 4 5 6 model listener for MyNode { child added in role values ( instance , child ) -> void { // don't run as part of migrations. if ( ! PersistenceRegistry . getInstance (). isFastSearch ()) { return ; } } } contributed by: @abstraktor How can you find all references to a specified root node and change these references, so they point to another root node? Search through the methods in RefactoringRuntime . Example with finders: 1 2 3 4 5 6 7 SearchResults < node <>> results = execute finders ( NodeUsages , node , unspecified scope , < default > ); foreach result in results . getSearchResults () { node <> resultObject = result . getObject (); sequence < reference > references = resultObject . references . where ({ ~ it => it . target : eq : node ; }); references . forEach ({ ~ it => resultObject / . setReferenceTarget ( it . link , reuseact ); }); } Troubleshooting \u00b6 When creating root nodes as part of language migration via java model.add root(someRoot) , it throws the exception UnsupportedOperationException . Make sure that the affected model is not a non-editable model. MPS forum - Migration scripts: the best practice \u21a9","title":"Migration"},{"location":"aspects/migration/#migration-aspect","text":"To nicely support language evolution, migrations automatically upgrade client code to use the latest version of a language or multiple languages. \u2014 MPS documentation","title":"Migration aspect"},{"location":"aspects/migration/#general","text":"What are the best practises? 1 Have a look at this answer . I want to migrate an MPS project that\u2019s many years old. How do you do that? First of all make sure that you don\u2019t skip too many MPS versions, otherwise the migration won\u2019t succeed. For old projects you have to edit the module files manually because the structure slightly changed. Open the .mpl files in an text editor and change all occurences of <language id=\"%ID\" fqName=\"%FQNAME\" version=\"%VERSION\" /> into <language slang=\"l:%ID:%FQNAME\" version=\"%VERSION\" /> . The next step is to start the migration assistant. It will fail because it can\u2019t find migrations for some language versions. For example: jetbrains.mps. lang .editor only has a migration starting with version 7.You have to find all occurences of this language in your project with an terxt editor and change the attribute version to 7. Then run the migration assistant again and hope that everything works. Some concepts cannot be migrated automatically such as the substitute and transformation menues. There will also be other issues that have to be fixed manually. I want to replace a node A with another node B where A and B share the same super concept. Use the class RefactoringRuntime . This class can be use to set/unset property or replace nodes with other ones. Example: RefactoringRuntime.replaceWithNewConcept(old, concept/ComponentConfigRef/) Are there any best practises about feature branches and language migrations? languageengineering.io: MPS , Feature Branches and Language Migrations: DOs and DON\u2019Ts How can you detect that migrations are running? I have code that needs to know if migrations are currently executed e.g. modelisteners that update the model when a change by the user appears. I would like to detect when migrations are executed to prevent this code from executing in the middle of a migration to prevent manipulating the model in an incomplete state during the migration. PersistenceRegistry . getInstance (). isFastSearch () returns false while migrations are running. You can check it in the model lister: 1 2 3 4 5 6 model listener for MyNode { child added in role values ( instance , child ) -> void { // don't run as part of migrations. if ( ! PersistenceRegistry . getInstance (). isFastSearch ()) { return ; } } } contributed by: @abstraktor How can you find all references to a specified root node and change these references, so they point to another root node? Search through the methods in RefactoringRuntime . Example with finders: 1 2 3 4 5 6 7 SearchResults < node <>> results = execute finders ( NodeUsages , node , unspecified scope , < default > ); foreach result in results . getSearchResults () { node <> resultObject = result . getObject (); sequence < reference > references = resultObject . references . where ({ ~ it => it . target : eq : node ; }); references . forEach ({ ~ it => resultObject / . setReferenceTarget ( it . link , reuseact ); }); }","title":"General"},{"location":"aspects/migration/#troubleshooting","text":"When creating root nodes as part of language migration via java model.add root(someRoot) , it throws the exception UnsupportedOperationException . Make sure that the affected model is not a non-editable model. MPS forum - Migration scripts: the best practice \u21a9","title":"Troubleshooting"},{"location":"aspects/plugin/","text":"Plugin aspect \u00b6 Plugins are a way to integrate your code with the MPS IDE functionality. \u2014 MPS documentation General \u00b6 Should you use this aspect? No. You should use plugin solutions instead. How do facets work? Red rectangles: marker facets Do not define dependencies on other facets. They are known to the MPS make process and are available for user. You can define where you own facet should fit in and decide if you require some facet. Usage: Targets act as filters working on a stream of data delivered to them. The data flowing along targets is called resources . Resources are represented as Java interfaces and tuples. How do I move a solution? Given I have a project with a test solution open and the solution is stored in code/com.my/solutions/com.my.solution.to.move , which is the wrong place. It should be code/com.my/test/com.my.solution.to.move instead. I want to move the solution in the filesystem to its correct place. How can I move the solution without breaking the project? Move code/com.my/solutions/com.my.solution.to.move to code/com.my.project/test/com.my.project.solution.to.move . Close the MPS project and reopen it (no need to restart MPS ). Add back the .msd files as follows: On the workspace root node, right-click and open Project Paths ( Alt + Enter ). Click on the red, old solution file and on - . Click on + and select the new location of this .msd file. Open your build script for CI tests and update the solution path in the project structure. contributed by: @abstraktor How to you guide the user through cleaning up after deleting a referenced node? Given I have a concept Ball and I have a reference BallRef . When I have a Ball node and I have BallRef s to it all over my model. When I delete the ball then I have a lot of dangling references. How may I get guidance in cleaning up these dangling references? You can show a balloon that says for example: 1 2 Deleting ball has left some dangling references _Show_, _Ignore_ When clicking show , it will open a usage search for the deleted node using ConsoleUtil . show . This is implemented with a modellistener in a quite generic fashion. Here are a few insights: Make sure to not show the node in the searched for part of the window. VCS will try to highlight it and run into an NPE ( MPS 2019.3) Consider cut and paste, or moving elements: these operations yield a removal event as well. Hide the balloon again, once the node gets added again. contributed by: @abstraktor How can you make sure that the IDE loads a jar exactly once and then never again? I have a .jar that depends on a native libray (.dll/.so/\u2026). To use it in an MPS plugin I have a stubs solution for it. Unfortunately, without further ado, MPS tries to reload the jar in some cases (e.g. after a rebuild). This will fail, because the JVM does not allow reloading of native libraries. How can I avoid this problem? To prevent that MPS will ever (re-)load .jars / stubs of a solution, you can check the facet \u201cIDEA Plugin\u201d in the \u201cFacets\u201d tab of the solution properties. This will show another tab where you have to set the Plugin ID `com.intellij. Now we just have to ensure that the .jars can be found at runtime (i.e. they must be on the classpath). The simplest approach would be to put them into the lib directory of the application (e.g. MPS installation / your product RCP ). contributed by: @till-f How can you use an IntelliJ icon for an action? I want to use one of the icons shipped with IntelliJ for my own action ( jetbrains.mps.lang.plugin.structure.ActionDeclaration ). How can I reference the icon? (note: this question might be deprecated for newer MPS versions) You can use IconLoader.getIcon(...) in the reflective editor. Right-click the editor for the icon, use show reflective editor and enter the expression as shown in the screenshot: contributed by: @till-f How to use a projection mode switcher to alter an editor component? I have a concept editor in which I use an EditorComponent \\(A\\) . Using the projection menu entry, I would like to switch to another editor component \\(B\\) upon activation. First \\(B\\) must override \\(A\\) and the applicable concept also must not differ. Then for \\(B\\) in applicable in context we must provide a concept editor context hint . This hint must also be referenced from a Projection Mode Switcher . Afterwards you will find a new entry in the Projection menu. Hint when used with Grammar Cells: you have to disable component inlining which can be activated by an intention at the position where the include of \\(A\\) happens. Also in any editor component that inherits from \\(A\\) and \\(A\\) itself we cannot use Grammar Cells. contributed by: @dbinkele Languages/features \u00b6 I want to merge models. Use the language de.itemis.mps.modelmerger from MPS -extensions . I want to verify the structure of a node. Use the language de.slisson.mps.structurecheck from MPS -extensions . I want to store different states/versions of a node inside the model. Use the language de.itemis.mps.nodeversioning from MPS -extensions . Open API \u00b6 How do you create a new SContainmentLink for a non-existent role? 1 . Create it through MetaAdapterFactory . How to you check if a model is a generator model, a test model etc.? Call the corresponding method in SModelStereotype . How do you add imports to a model? Use the class ModelImportHelper and call addImport . How can you open an MPS Editor Tab programmatically? 1 EditorContext . getEditorPanelManager (). openEditor ( node ); Is it possible to associate an MPS -Aspect with more than one node? 1 IConceptAspect . getBaseConceptCollection (); Troubleshooting \u00b6 A reference to a key in an action context parameter is out of search scope. You need to add a dependency to MPSCommonDataKeys . This class extends PlatformDataKeys and this class extends CommonDataKeys . An action isn\u2019t visible. You have to add it to an ActionGroup that can be attached to differenct places such as the context menu or the build menu. All of the action context parameters that are marked as required have to be available and the isApplicable block must return true for an action to be visible. For debugging purposes you can set always visible to true to check if your action is registered at all. You also need to have a standalone descriptor in your model for it to work. Additionaly, the solution kind should be set to Other in the Java tab of the solution properties ( Plugin | MPS ). How to create new SContainmentLink for a non-existent role? \u21a9","title":"Plugin"},{"location":"aspects/plugin/#plugin-aspect","text":"Plugins are a way to integrate your code with the MPS IDE functionality. \u2014 MPS documentation","title":"Plugin aspect"},{"location":"aspects/plugin/#general","text":"Should you use this aspect? No. You should use plugin solutions instead. How do facets work? Red rectangles: marker facets Do not define dependencies on other facets. They are known to the MPS make process and are available for user. You can define where you own facet should fit in and decide if you require some facet. Usage: Targets act as filters working on a stream of data delivered to them. The data flowing along targets is called resources . Resources are represented as Java interfaces and tuples. How do I move a solution? Given I have a project with a test solution open and the solution is stored in code/com.my/solutions/com.my.solution.to.move , which is the wrong place. It should be code/com.my/test/com.my.solution.to.move instead. I want to move the solution in the filesystem to its correct place. How can I move the solution without breaking the project? Move code/com.my/solutions/com.my.solution.to.move to code/com.my.project/test/com.my.project.solution.to.move . Close the MPS project and reopen it (no need to restart MPS ). Add back the .msd files as follows: On the workspace root node, right-click and open Project Paths ( Alt + Enter ). Click on the red, old solution file and on - . Click on + and select the new location of this .msd file. Open your build script for CI tests and update the solution path in the project structure. contributed by: @abstraktor How to you guide the user through cleaning up after deleting a referenced node? Given I have a concept Ball and I have a reference BallRef . When I have a Ball node and I have BallRef s to it all over my model. When I delete the ball then I have a lot of dangling references. How may I get guidance in cleaning up these dangling references? You can show a balloon that says for example: 1 2 Deleting ball has left some dangling references _Show_, _Ignore_ When clicking show , it will open a usage search for the deleted node using ConsoleUtil . show . This is implemented with a modellistener in a quite generic fashion. Here are a few insights: Make sure to not show the node in the searched for part of the window. VCS will try to highlight it and run into an NPE ( MPS 2019.3) Consider cut and paste, or moving elements: these operations yield a removal event as well. Hide the balloon again, once the node gets added again. contributed by: @abstraktor How can you make sure that the IDE loads a jar exactly once and then never again? I have a .jar that depends on a native libray (.dll/.so/\u2026). To use it in an MPS plugin I have a stubs solution for it. Unfortunately, without further ado, MPS tries to reload the jar in some cases (e.g. after a rebuild). This will fail, because the JVM does not allow reloading of native libraries. How can I avoid this problem? To prevent that MPS will ever (re-)load .jars / stubs of a solution, you can check the facet \u201cIDEA Plugin\u201d in the \u201cFacets\u201d tab of the solution properties. This will show another tab where you have to set the Plugin ID `com.intellij. Now we just have to ensure that the .jars can be found at runtime (i.e. they must be on the classpath). The simplest approach would be to put them into the lib directory of the application (e.g. MPS installation / your product RCP ). contributed by: @till-f How can you use an IntelliJ icon for an action? I want to use one of the icons shipped with IntelliJ for my own action ( jetbrains.mps.lang.plugin.structure.ActionDeclaration ). How can I reference the icon? (note: this question might be deprecated for newer MPS versions) You can use IconLoader.getIcon(...) in the reflective editor. Right-click the editor for the icon, use show reflective editor and enter the expression as shown in the screenshot: contributed by: @till-f How to use a projection mode switcher to alter an editor component? I have a concept editor in which I use an EditorComponent \\(A\\) . Using the projection menu entry, I would like to switch to another editor component \\(B\\) upon activation. First \\(B\\) must override \\(A\\) and the applicable concept also must not differ. Then for \\(B\\) in applicable in context we must provide a concept editor context hint . This hint must also be referenced from a Projection Mode Switcher . Afterwards you will find a new entry in the Projection menu. Hint when used with Grammar Cells: you have to disable component inlining which can be activated by an intention at the position where the include of \\(A\\) happens. Also in any editor component that inherits from \\(A\\) and \\(A\\) itself we cannot use Grammar Cells. contributed by: @dbinkele","title":"General"},{"location":"aspects/plugin/#languagesfeatures","text":"I want to merge models. Use the language de.itemis.mps.modelmerger from MPS -extensions . I want to verify the structure of a node. Use the language de.slisson.mps.structurecheck from MPS -extensions . I want to store different states/versions of a node inside the model. Use the language de.itemis.mps.nodeversioning from MPS -extensions .","title":"Languages/features"},{"location":"aspects/plugin/#open-api","text":"How do you create a new SContainmentLink for a non-existent role? 1 . Create it through MetaAdapterFactory . How to you check if a model is a generator model, a test model etc.? Call the corresponding method in SModelStereotype . How do you add imports to a model? Use the class ModelImportHelper and call addImport . How can you open an MPS Editor Tab programmatically? 1 EditorContext . getEditorPanelManager (). openEditor ( node ); Is it possible to associate an MPS -Aspect with more than one node? 1 IConceptAspect . getBaseConceptCollection ();","title":"Open API"},{"location":"aspects/plugin/#troubleshooting","text":"A reference to a key in an action context parameter is out of search scope. You need to add a dependency to MPSCommonDataKeys . This class extends PlatformDataKeys and this class extends CommonDataKeys . An action isn\u2019t visible. You have to add it to an ActionGroup that can be attached to differenct places such as the context menu or the build menu. All of the action context parameters that are marked as required have to be available and the isApplicable block must return true for an action to be visible. For debugging purposes you can set always visible to true to check if your action is registered at all. You also need to have a standalone descriptor in your model for it to work. Additionaly, the solution kind should be set to Other in the Java tab of the solution properties ( Plugin | MPS ). How to create new SContainmentLink for a non-existent role? \u21a9","title":"Troubleshooting"},{"location":"aspects/polyfun/","text":"Polyfun aspect \u00b6 This aspect allows to declare polymorphic functions and is part of Shadow Models in MPS -extensions . You can declare a function that can have different implementations per language. To get a better understanding, have a look at the corresponding sandbox. Is there a handler which the IDE calls when it loads a language? I have a language \\(K\\) with some languages extending \\(K\\) named \\(A\\) , \\(B\\) and \\(C\\) . \\(K\\) needs to access some behavior implemented by \\(A\\) , \\(B\\) or \\(C\\) , depending on which of these are deployed. In order to do that, I implemented a registry where \\(A\\) , \\(B\\) , and \\(C\\) can register and which \\(K\\) uses to retrieve a common interface with a specific implementation by \\(A\\) , \\(B\\) or \\(C\\) . The question remains: How can \\(A\\) , \\(B\\) and \\(C\\) register their implementation at the registry? Is there maybe better mechanism I should use here? The language de.q60.mps.polymorphicfunctions allows you to do that. It provides a new language aspect where you can declare a function in one language and multiple implementations in other languages. It supports polymorphic dispatch and even priority rules in case there are multiple applicable implementations. answered by: @slisson Alternative Typically you would implement this by using the extension point mechanism: language \\(K\\) defines an extension point \\(EP\\) (inside of its plugin aspect) with an interface \\(EPI\\) for the extension implementors. language \\(A\\) , \\(B\\) and \\(C\\) contribute extensions for the EP with specific implementations of the \\(EPI\\) interface (also inside of the plugin aspect). language \\(K\\) provides a facade for querying current extensions registered for the \\(EP\\) and implements an approriate strategy for handling multiple implementors of \\(EPI\\) contributed by different extensions from languages \\(A\\) , \\(B\\) and \\(C\\) : by returning the implementor from the first extension, if your scenario expects only one deployed language with a specific implementation. by picking up one of the implementors from multiple extensions using some criteria, like a priority. by combining/chaining multiple implementors according to your specific logic. Because the facade would typically implement some simple caching of the resulting \\(EPI\\) implementation (to not query the \\(EP\\) every time the functionality is required), this would mean that you might need to implement some additional mechanism to allow for dynamical reload/reset of the current \\(EPI\\) implementation during the development, when a new extension is created and tested. answered by: @wsafonov","title":"Polyfun"},{"location":"aspects/polyfun/#polyfun-aspect","text":"This aspect allows to declare polymorphic functions and is part of Shadow Models in MPS -extensions . You can declare a function that can have different implementations per language. To get a better understanding, have a look at the corresponding sandbox. Is there a handler which the IDE calls when it loads a language? I have a language \\(K\\) with some languages extending \\(K\\) named \\(A\\) , \\(B\\) and \\(C\\) . \\(K\\) needs to access some behavior implemented by \\(A\\) , \\(B\\) or \\(C\\) , depending on which of these are deployed. In order to do that, I implemented a registry where \\(A\\) , \\(B\\) , and \\(C\\) can register and which \\(K\\) uses to retrieve a common interface with a specific implementation by \\(A\\) , \\(B\\) or \\(C\\) . The question remains: How can \\(A\\) , \\(B\\) and \\(C\\) register their implementation at the registry? Is there maybe better mechanism I should use here? The language de.q60.mps.polymorphicfunctions allows you to do that. It provides a new language aspect where you can declare a function in one language and multiple implementations in other languages. It supports polymorphic dispatch and even priority rules in case there are multiple applicable implementations. answered by: @slisson Alternative Typically you would implement this by using the extension point mechanism: language \\(K\\) defines an extension point \\(EP\\) (inside of its plugin aspect) with an interface \\(EPI\\) for the extension implementors. language \\(A\\) , \\(B\\) and \\(C\\) contribute extensions for the EP with specific implementations of the \\(EPI\\) interface (also inside of the plugin aspect). language \\(K\\) provides a facade for querying current extensions registered for the \\(EP\\) and implements an approriate strategy for handling multiple implementors of \\(EPI\\) contributed by different extensions from languages \\(A\\) , \\(B\\) and \\(C\\) : by returning the implementor from the first extension, if your scenario expects only one deployed language with a specific implementation. by picking up one of the implementors from multiple extensions using some criteria, like a priority. by combining/chaining multiple implementors according to your specific logic. Because the facade would typically implement some simple caching of the resulting \\(EPI\\) implementation (to not query the \\(EP\\) every time the functionality is required), this would mean that you might need to implement some additional mechanism to allow for dynamical reload/reset of the current \\(EPI\\) implementation during the development, when a new extension is created and tested. answered by: @wsafonov","title":"Polyfun aspect"},{"location":"aspects/refactorings/","text":"Refactorings aspect \u00b6 Simple refactorings can be written using the jetbrains.mps. lang .refactoring language. \u2014 MPS documentation Is this aspect widely used? No, even in MPS languages there are just a few use cases. Can you change the concept of a node while keeping all properties, references, and children? Yes, call RefactoringRuntime.replaceWithNewConcept with your node and new concept als parameters. In this class there are also some othere useful methods such as changePropertyInstance(node, oldProp, newProp) and changeReferenceLinkInstances(node, oldLink, newLink) . Specific Languages Blog: Changing the concept of a node","title":"Refactorings"},{"location":"aspects/refactorings/#refactorings-aspect","text":"Simple refactorings can be written using the jetbrains.mps. lang .refactoring language. \u2014 MPS documentation Is this aspect widely used? No, even in MPS languages there are just a few use cases. Can you change the concept of a node while keeping all properties, references, and children? Yes, call RefactoringRuntime.replaceWithNewConcept with your node and new concept als parameters. In this class there are also some othere useful methods such as changePropertyInstance(node, oldProp, newProp) and changeReferenceLinkInstances(node, oldLink, newLink) . Specific Languages Blog: Changing the concept of a node","title":"Refactorings aspect"},{"location":"aspects/scripts/","text":"Scripts aspect \u00b6 The scripts aspect lets you perform changes to your models in batches. \u2014 MPS documentation Are enhancement scripts executed as part of the migration process? No, they are not.","title":"Scripts"},{"location":"aspects/scripts/#scripts-aspect","text":"The scripts aspect lets you perform changes to your models in batches. \u2014 MPS documentation Are enhancement scripts executed as part of the migration process? No, they are not.","title":"Scripts aspect"},{"location":"aspects/structure/","text":"Structure aspect \u00b6 The structure aspect contains all the concept and interface declarations of a language. Concepts \u00b6 How can you create an MPS concept declaration programmatically? Specific Languages blog: Create a MPS concept declaration programmatically Concept XY wasn\u2019t found in the language. Specific Languages blog: Concept not found How do you find examples of MPS concepts? Specific Languages blog: Finding examples of MPS concepts When a concept extends another concept/implements some interfaces, which method is called when they are defined in more than one concepts/interfaces? The used algorithm is a a variant of C3 linearization ( source ). When the concept doesn\u2019t implement the method itself, first the implemented interfaces are recursively considered in declaration order, then the extended concept. You can try it yourself, for example for the concept ClassConcept : 1 2 3 BehaviorRegistryImpl r = ( BehaviorRegistryImpl ) ConceptRegistry . getInstance (). getBehaviorRegistry (); BHDescriptor d = r . getBHDescriptor ( concept / ClassConcept / ); # print r . getMRO (). calcLinearization ( _SAbstractConcept . wrap ( concept / ClassConcept / )); If you want to call a specific type () implementation, you have to just cast the node to the corresponding concept and then call the method e.g. myNode as MyITypeable . type () How can you get the short node ID from the node ID and vice versa? Short one: new IdEncoder (). toText ( node . getNodeId ()) Long one: new IdEncoder (). parseNodeId ( nodeId ) Interfaces \u00b6 The concept implements ISuppressErrors but errors are still shown for the node. You have to implement IDontApplyTypesystemRules and ISkipConstraintsChecking . More information can be found in Suppressing Errors | MPS . What\u2019s IMainClass used for? It allows to execute baselanguage code. An example can be found in Shapes tutorial - Running the code . Properties \u00b6 How do you use a list of string properties? Wrap your property into a new concept and use a child collection: Can properties be overridden? No, more info can be found in MPS -17143 . How to get the name of a concept property? The easiest way to do this is via PropertyIdRefExpression . Then you can directly reference the property in question like this: property/MyConcept : myProperty/.getName() Whit this implementation, every changes in the property names are always calculated properly. contributed by: @abstraktor References \u00b6 How do you get the previous label of a reference? 1 2 3 (( SReference ) node . getReference ( link )). getResolveInfo () ` // or node . reference < ref > . resolveInfo Can you use the resolve info to fix a broken reference? 1 ResolverComponent . getInstance (). resolve (...) How can you find broken references on the console? 1 2 3 # instances < scope = global > ( BaseConcept ). where ({ ~ it => it . references . any ({ ~ it => it . target == null ; }); })","title":"Structure"},{"location":"aspects/structure/#structure-aspect","text":"The structure aspect contains all the concept and interface declarations of a language.","title":"Structure aspect"},{"location":"aspects/structure/#concepts","text":"How can you create an MPS concept declaration programmatically? Specific Languages blog: Create a MPS concept declaration programmatically Concept XY wasn\u2019t found in the language. Specific Languages blog: Concept not found How do you find examples of MPS concepts? Specific Languages blog: Finding examples of MPS concepts When a concept extends another concept/implements some interfaces, which method is called when they are defined in more than one concepts/interfaces? The used algorithm is a a variant of C3 linearization ( source ). When the concept doesn\u2019t implement the method itself, first the implemented interfaces are recursively considered in declaration order, then the extended concept. You can try it yourself, for example for the concept ClassConcept : 1 2 3 BehaviorRegistryImpl r = ( BehaviorRegistryImpl ) ConceptRegistry . getInstance (). getBehaviorRegistry (); BHDescriptor d = r . getBHDescriptor ( concept / ClassConcept / ); # print r . getMRO (). calcLinearization ( _SAbstractConcept . wrap ( concept / ClassConcept / )); If you want to call a specific type () implementation, you have to just cast the node to the corresponding concept and then call the method e.g. myNode as MyITypeable . type () How can you get the short node ID from the node ID and vice versa? Short one: new IdEncoder (). toText ( node . getNodeId ()) Long one: new IdEncoder (). parseNodeId ( nodeId )","title":"Concepts"},{"location":"aspects/structure/#interfaces","text":"The concept implements ISuppressErrors but errors are still shown for the node. You have to implement IDontApplyTypesystemRules and ISkipConstraintsChecking . More information can be found in Suppressing Errors | MPS . What\u2019s IMainClass used for? It allows to execute baselanguage code. An example can be found in Shapes tutorial - Running the code .","title":"Interfaces"},{"location":"aspects/structure/#properties","text":"How do you use a list of string properties? Wrap your property into a new concept and use a child collection: Can properties be overridden? No, more info can be found in MPS -17143 . How to get the name of a concept property? The easiest way to do this is via PropertyIdRefExpression . Then you can directly reference the property in question like this: property/MyConcept : myProperty/.getName() Whit this implementation, every changes in the property names are always calculated properly. contributed by: @abstraktor","title":"Properties"},{"location":"aspects/structure/#references","text":"How do you get the previous label of a reference? 1 2 3 (( SReference ) node . getReference ( link )). getResolveInfo () ` // or node . reference < ref > . resolveInfo Can you use the resolve info to fix a broken reference? 1 ResolverComponent . getInstance (). resolve (...) How can you find broken references on the console? 1 2 3 # instances < scope = global > ( BaseConcept ). where ({ ~ it => it . references . any ({ ~ it => it . target == null ; }); })","title":"References"},{"location":"aspects/test/","text":"Test aspect \u00b6 Testing is an essential part of language designer\u2019s work. \u2014 MPS documentation General \u00b6 Can you add an annotation to skip tests the way it normally works with JUnit? No, it isn\u2019t supported. You have to comment out the test case. The only statement that supports this behaviour is the assert statement of KernelF ( AssertTestItem ). What\u2019s the TestInfo node used for? Specific Languages Blog: How to create a TestInfo node for your tests How do node tests work? Specific Languages Blog: How do node tests work? How to know if some MPS code is inside a test? Given I am writing some code in MPS that is supposed to run only if we\u2019re not running tests. How can I detect if I\u2019m running a test? Don\u2019t. Consider mocking something out instead or ensuring that you are testing on a low-enough level. here are two options, if you really need to to this: 1 2 3 4 5 // true if running tests from inside the MPS process or from command line jetbrains . mps . RuntimeFlags . getTestMode (). isInsideTestEnvironment () // true if running tests from command line only jetbrains . mps . RuntimeFlags . isTestMode () contributed by: @abstraktor How do I access the current project inside a node test case? There is a project expression that should be used? Why does the node ID change during a node test? Given I have a node test case. My test case has a check node called data and my test case has a a test test1 which prints the node ID of data My test case has a a test test2 which prints the node id of data . When I run the test test1 and test2 print different node IDs. Why is that? Terms used: check-node for these fixture nodes that you enter into the test case under nodes test case for the root node, the chunk that contains the tests tests for the test methods of which we have test1 and test2 Each test case runs on its own copy of its model. MPS tries to keep tests reproducible and isolated even when being run in-process. For that, MPS copies the whole model into a temporary model. Modifications of one test case will then be invisible to the next test case, since it will work on a new temporary model. This prevents test-cases from interacting. Running tests in a separate model ensures that they will never modify the original model (as long as you don\u2019t explicitly start acting on other models). Check-nodes per test A test-case may have multiple tests though. MPS also isolates single tests within the same test case. For that, the check-nodes are copied once for each test. Each test may then act on their own copy. 1 2 // there is one data node in the model for each test assert 2 equals data . model . nodes ( Data ). size All tests of a test-case share their referenced nodes To save memory though, these check-nodes all lie in the same model for each test case. References to other nodes outside the test case will only need to be copied once and be shared by all tests of that test case. As a result, the IDs of check-nodes change and the IDs of non-check-nodes are the same as in the original model. 1 2 // nodes in this model that are not check-nodes of this test case will only be there once assert 1 equals dataRef . model . nodes ( Chunk ). size ; Consequently, multiple tests of the same test case are not fully isolated. In the following example, both tests assert and do the same, yet test3 passes while test4 fails. The data element is now located in a separate chunk outside the testcase and the check-node is a reference to it. As a result, test4 is running red because test3 already modified the referenced node. Kinds of tests I checked this behavior in-depth for node tests. I think it is similar for editor tests. I am sure that this does not apply to baseLang-tests since they don\u2019t prepare a temporary model for you. Practical effects of this \u00b6 These are some rules of thumb that result from that: The tests of a test-case may interact, so you should inline all modified nodes into the testcase to be check-nodes . Whenever you modify many nodes in the model, consider writing a migration and migration test instead. Remember that the console and each test will output separate IDs for the conceptually same node. And they will change from run to run. Especially when stepping through tests, it is easy to be confused by that and draw false conclusions Whenever your code queries for the nodes of a model, be ready to see duplicates for each test (as in the dataRef example). You may test this by asserting that something is included or excluded instead of asserting true equality of the expected and actual lists. Another source for duplicates is if the test model imports itself. If you need full power on the temporary model, consider writing a baseLanguage test and creating your repository and model by hand. jetbrains.mps.smodel.TestModelFactory allows to do that, e.g. the ModelListenerTest uses that TestModelFactory. It is unfortunately not available as stubs, so that you\u2019ll need to copy it to your project contributed by: @abstraktor How to test \u00b6 How to set up a generator smoke test? I would like to write a generator smoke test. Therefor, I have some solutions with models (regular one, not @test models) which are build from command line and the generators invoked are generating some .c files. In addition, I also have a @test model in the same solution with some unit tests which checks if the output directories of these models contain any generated files. I don\u2019t invoke the generation of the models programatically but rely on the ant task which is generating the solution. Unfortunately this setup always leads to broken tests. It seems like the unit tests are executed before the models (which are build during CI run) and though the test fails. asked by: @arimer When the tests work fine when run from within the IDE , then the problem is most probably that when your tests are executed, they are running from the jars and not the sources. The generator output location points into the jar file that the tests are executed from and not to the real source location. You could change the packaging to include the source_gen folder for you specific test solution. This can be done the following way in the default layout of your build model: In this case you would need to detect if you are running from sources or from jar in CI and the change the location where you look for the generated files. This can be done by calculation a solution relative path for the test solution containing the packed sources. 1 2 3 4 5 6 7 8 9 10 11 12 13 //case running from .jar if ( module instanceof AbstractModule && (( AbstractModule ) module ). getModuleSourceDir () != null ) { AbstractModule s = (( AbstractModule ) module ); if ( s . isPackaged () && s . getModuleSourceDir (). getBundleHome () != null ) { IFile bundleHome = s . getModuleSourceDir (). getBundleHome (); return bundleHome . getFileSystem (). getFile ( bundleHome . getPath () + \"!\" + path ); } // case: running from sources IFile relativePath = s . getModuleSourceDir (). getDescendant ( path ); return relativePath ; } The easier solution is to place the tests in separate solution and then invoke the make process for the solution that contains your input programmatically, so you can assert over the output. An example implementation how the make process is invoked can be found in the mbeddr-c part . answered by: @coolya How to write editor tests for context assistants? I need to unit tests context assistants , ideally with an EditorTestCase, but it is not supported out of the box, any idea? This snippet allows to automatically test context assistant in the code section of the EditorTestCase : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Context assistants takes some time to popup,otherwise getActiveAssistant returns null Thread . sleep ( 3000 ); ContextAssistantManager contextAssistantManager = editor component . getEditorContext (). getContextAssistantManager (); final ContextAssistantController controller = (( ContextAssistantController ) contextAssistantManager . getActiveAssistant ()); foreach menuItem in contextAssistantManager . getActiveMenuItems () { if ( \"Item Name\" : eq : (( ActionItemBase ) menuItem ). getLabelText ( \"\" )) { // Execute it in a BaseEditorTestBody context final Project project = _this . [ Project ] < no instance > . getProject (); _this . [ void ] < no instance > . runUndoableInEDTAndWait ( new Runnable () { @Override public void run () { project . getModelAccess (). executeCommand ({ => controller . executeActionItem (( ActionItemBase ) menuItem ); }); } }); } } Note: - \u201cItem Name\u201d must be replaced with the name of the item as shown in the editor - \u201c_this\u201d is a concept from internalBaseLanguage DSL . contributed by: @cmoine How to name checking errors with dynamic messages? When I make the error text dynamic: Then my error is named UnnamedError and I have a hard time selecting the right one: How do I name errors with dynamic messages? Go to your error statement in your checking rule. Import the language jetbrains.mps. lang .test . Run the intention Add Message Annotation . Type a nice name. Note that this does not work for errors that result from constraints . contributed by: @abstraktor What\u2019s the best way to test the contents of the code completion/substitution menu for a given cursor position using a NodesTestCase or an EditorTestCase ? Example for an EditorTestCase : 1 2 3 4 SubstituteInfo si = ( editor component . getSelectedCell ()). getSubstituteInfo (); list < SubstituteAction > actions = si . getMatchingActions ( \"\" , false ); assert actions . size == 4 ; assert actions . any ({ it => it . getMatchingText (). equals ( \"something\" ); }); Troubleshooting \u00b6 Tests aren\u2019t running at all. A test info node has to be added to the model of the tests, so that the tests can find the path of the project. The project path also has to be set in this node. Make sure that variables that are used in this path are set in Preferences \u2192 Appearance & Behavior \u2192 Path Variables ( TestInfo | MPS ). Tests have a long warm up time and run slowly. When running the tests from a run configuration, enable Execute in the same process in the configuration settings. Also check the box Allow parallel run ( Running the tests | MPS ). Why does the test execution fail with \u201cTest project \u2018$\u2026\u2019 is not opened. Aborted\u201d? This is happening because the used variable in the TestInfo is not set. Go to File \u2192 Settings \u2192 Path Variables and create an entry for your variable, with a path to the project location on your hard drive. java. lang .IllegalStateException: The showAndGet() method is for modal dialogs only. One of the reason why this message pops up is that a dialog should be displayed in a headless environment like a build server. There is no way to avoid this exception than not showing the dialog. According to the IntelliJ documentation in can also happen when the dialog is not shown on the EDT thread or the dialog is not modal.","title":"Test"},{"location":"aspects/test/#test-aspect","text":"Testing is an essential part of language designer\u2019s work. \u2014 MPS documentation","title":"Test aspect"},{"location":"aspects/test/#general","text":"Can you add an annotation to skip tests the way it normally works with JUnit? No, it isn\u2019t supported. You have to comment out the test case. The only statement that supports this behaviour is the assert statement of KernelF ( AssertTestItem ). What\u2019s the TestInfo node used for? Specific Languages Blog: How to create a TestInfo node for your tests How do node tests work? Specific Languages Blog: How do node tests work? How to know if some MPS code is inside a test? Given I am writing some code in MPS that is supposed to run only if we\u2019re not running tests. How can I detect if I\u2019m running a test? Don\u2019t. Consider mocking something out instead or ensuring that you are testing on a low-enough level. here are two options, if you really need to to this: 1 2 3 4 5 // true if running tests from inside the MPS process or from command line jetbrains . mps . RuntimeFlags . getTestMode (). isInsideTestEnvironment () // true if running tests from command line only jetbrains . mps . RuntimeFlags . isTestMode () contributed by: @abstraktor How do I access the current project inside a node test case? There is a project expression that should be used? Why does the node ID change during a node test? Given I have a node test case. My test case has a check node called data and my test case has a a test test1 which prints the node ID of data My test case has a a test test2 which prints the node id of data . When I run the test test1 and test2 print different node IDs. Why is that? Terms used: check-node for these fixture nodes that you enter into the test case under nodes test case for the root node, the chunk that contains the tests tests for the test methods of which we have test1 and test2 Each test case runs on its own copy of its model. MPS tries to keep tests reproducible and isolated even when being run in-process. For that, MPS copies the whole model into a temporary model. Modifications of one test case will then be invisible to the next test case, since it will work on a new temporary model. This prevents test-cases from interacting. Running tests in a separate model ensures that they will never modify the original model (as long as you don\u2019t explicitly start acting on other models). Check-nodes per test A test-case may have multiple tests though. MPS also isolates single tests within the same test case. For that, the check-nodes are copied once for each test. Each test may then act on their own copy. 1 2 // there is one data node in the model for each test assert 2 equals data . model . nodes ( Data ). size All tests of a test-case share their referenced nodes To save memory though, these check-nodes all lie in the same model for each test case. References to other nodes outside the test case will only need to be copied once and be shared by all tests of that test case. As a result, the IDs of check-nodes change and the IDs of non-check-nodes are the same as in the original model. 1 2 // nodes in this model that are not check-nodes of this test case will only be there once assert 1 equals dataRef . model . nodes ( Chunk ). size ; Consequently, multiple tests of the same test case are not fully isolated. In the following example, both tests assert and do the same, yet test3 passes while test4 fails. The data element is now located in a separate chunk outside the testcase and the check-node is a reference to it. As a result, test4 is running red because test3 already modified the referenced node. Kinds of tests I checked this behavior in-depth for node tests. I think it is similar for editor tests. I am sure that this does not apply to baseLang-tests since they don\u2019t prepare a temporary model for you.","title":"General"},{"location":"aspects/test/#practical-effects-of-this","text":"These are some rules of thumb that result from that: The tests of a test-case may interact, so you should inline all modified nodes into the testcase to be check-nodes . Whenever you modify many nodes in the model, consider writing a migration and migration test instead. Remember that the console and each test will output separate IDs for the conceptually same node. And they will change from run to run. Especially when stepping through tests, it is easy to be confused by that and draw false conclusions Whenever your code queries for the nodes of a model, be ready to see duplicates for each test (as in the dataRef example). You may test this by asserting that something is included or excluded instead of asserting true equality of the expected and actual lists. Another source for duplicates is if the test model imports itself. If you need full power on the temporary model, consider writing a baseLanguage test and creating your repository and model by hand. jetbrains.mps.smodel.TestModelFactory allows to do that, e.g. the ModelListenerTest uses that TestModelFactory. It is unfortunately not available as stubs, so that you\u2019ll need to copy it to your project contributed by: @abstraktor","title":"Practical effects of this"},{"location":"aspects/test/#how-to-test","text":"How to set up a generator smoke test? I would like to write a generator smoke test. Therefor, I have some solutions with models (regular one, not @test models) which are build from command line and the generators invoked are generating some .c files. In addition, I also have a @test model in the same solution with some unit tests which checks if the output directories of these models contain any generated files. I don\u2019t invoke the generation of the models programatically but rely on the ant task which is generating the solution. Unfortunately this setup always leads to broken tests. It seems like the unit tests are executed before the models (which are build during CI run) and though the test fails. asked by: @arimer When the tests work fine when run from within the IDE , then the problem is most probably that when your tests are executed, they are running from the jars and not the sources. The generator output location points into the jar file that the tests are executed from and not to the real source location. You could change the packaging to include the source_gen folder for you specific test solution. This can be done the following way in the default layout of your build model: In this case you would need to detect if you are running from sources or from jar in CI and the change the location where you look for the generated files. This can be done by calculation a solution relative path for the test solution containing the packed sources. 1 2 3 4 5 6 7 8 9 10 11 12 13 //case running from .jar if ( module instanceof AbstractModule && (( AbstractModule ) module ). getModuleSourceDir () != null ) { AbstractModule s = (( AbstractModule ) module ); if ( s . isPackaged () && s . getModuleSourceDir (). getBundleHome () != null ) { IFile bundleHome = s . getModuleSourceDir (). getBundleHome (); return bundleHome . getFileSystem (). getFile ( bundleHome . getPath () + \"!\" + path ); } // case: running from sources IFile relativePath = s . getModuleSourceDir (). getDescendant ( path ); return relativePath ; } The easier solution is to place the tests in separate solution and then invoke the make process for the solution that contains your input programmatically, so you can assert over the output. An example implementation how the make process is invoked can be found in the mbeddr-c part . answered by: @coolya How to write editor tests for context assistants? I need to unit tests context assistants , ideally with an EditorTestCase, but it is not supported out of the box, any idea? This snippet allows to automatically test context assistant in the code section of the EditorTestCase : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Context assistants takes some time to popup,otherwise getActiveAssistant returns null Thread . sleep ( 3000 ); ContextAssistantManager contextAssistantManager = editor component . getEditorContext (). getContextAssistantManager (); final ContextAssistantController controller = (( ContextAssistantController ) contextAssistantManager . getActiveAssistant ()); foreach menuItem in contextAssistantManager . getActiveMenuItems () { if ( \"Item Name\" : eq : (( ActionItemBase ) menuItem ). getLabelText ( \"\" )) { // Execute it in a BaseEditorTestBody context final Project project = _this . [ Project ] < no instance > . getProject (); _this . [ void ] < no instance > . runUndoableInEDTAndWait ( new Runnable () { @Override public void run () { project . getModelAccess (). executeCommand ({ => controller . executeActionItem (( ActionItemBase ) menuItem ); }); } }); } } Note: - \u201cItem Name\u201d must be replaced with the name of the item as shown in the editor - \u201c_this\u201d is a concept from internalBaseLanguage DSL . contributed by: @cmoine How to name checking errors with dynamic messages? When I make the error text dynamic: Then my error is named UnnamedError and I have a hard time selecting the right one: How do I name errors with dynamic messages? Go to your error statement in your checking rule. Import the language jetbrains.mps. lang .test . Run the intention Add Message Annotation . Type a nice name. Note that this does not work for errors that result from constraints . contributed by: @abstraktor What\u2019s the best way to test the contents of the code completion/substitution menu for a given cursor position using a NodesTestCase or an EditorTestCase ? Example for an EditorTestCase : 1 2 3 4 SubstituteInfo si = ( editor component . getSelectedCell ()). getSubstituteInfo (); list < SubstituteAction > actions = si . getMatchingActions ( \"\" , false ); assert actions . size == 4 ; assert actions . any ({ it => it . getMatchingText (). equals ( \"something\" ); });","title":"How to test"},{"location":"aspects/test/#troubleshooting","text":"Tests aren\u2019t running at all. A test info node has to be added to the model of the tests, so that the tests can find the path of the project. The project path also has to be set in this node. Make sure that variables that are used in this path are set in Preferences \u2192 Appearance & Behavior \u2192 Path Variables ( TestInfo | MPS ). Tests have a long warm up time and run slowly. When running the tests from a run configuration, enable Execute in the same process in the configuration settings. Also check the box Allow parallel run ( Running the tests | MPS ). Why does the test execution fail with \u201cTest project \u2018$\u2026\u2019 is not opened. Aborted\u201d? This is happening because the used variable in the TestInfo is not set. Go to File \u2192 Settings \u2192 Path Variables and create an entry for your variable, with a path to the project location on your hard drive. java. lang .IllegalStateException: The showAndGet() method is for modal dialogs only. One of the reason why this message pops up is that a dialog should be displayed in a headless environment like a build server. There is no way to avoid this exception than not showing the dialog. According to the IntelliJ documentation in can also happen when the dialog is not shown on the EDT thread or the dialog is not modal.","title":"Troubleshooting"},{"location":"aspects/textgen/","text":"TextGen aspect \u00b6 The TextGen language aspect defines a model to text transformation. \u2014 MPS documentation How do you get the TextGen for a node? Use the class TextGeneratorEngine . It only works for root nodes such as ClassConcept and returns null when there is no text output. Can you also generate the text from the generator aspect? Use the language com.dslfoundry.plaintextgen from MPS -extensions . Can I implement TextGen for another language? I would like to implement a textgen for language A in a separate language B. Concretely, I need a different textgen for some of the KernelF concepts. When I try to do this, I get a compile error, because it looks like the generated descriptor does not include \u201cinherited\u201d concepts: 1 2 3 4 5 6 7 8 9 10 11 12 public TextGenDescriptor getDescriptor ( @NotNull SAbstractConcept concept ) { switch ( myIndex . index ( concept )) { case LanguageConceptSwitch . Component : return new Component_TextGen (); case LanguageConceptSwitch . Contract : return new Contract_TextGen (); case LanguageConceptSwitch . EmptyContent : return new EmptyContent_TextGen (); case LanguageConceptSwitch . Library : return new Library_TextGen (); case LanguageConceptSwitch . Port : return new Port_TextGen (); Is it not possible to \u201coverride the textgen\u201d this way? asked by: @markusvoelter It\u2019s not possible this way. So far the two ways I found to make this happen are: Extend the original language (A. ex ) and create subconcepts of all the concepts you need to specialise the textgen. You will then need to do M2M transformation to replace the extended concepts. You can do this in a very generic way by using a scrip the generator that searches for all node of concepts that are extended in A. ex and replaces them by using the RefactoringRuntime.replaceWithNewConcept method. Create annotations that override the text gen of the concepts and attache them in a generator. Then MPS will first call the text gen of the annotation and you can override it there. There is MPS -22092 which describes this request. answered by: @coolya","title":"TextGen"},{"location":"aspects/textgen/#textgen-aspect","text":"The TextGen language aspect defines a model to text transformation. \u2014 MPS documentation How do you get the TextGen for a node? Use the class TextGeneratorEngine . It only works for root nodes such as ClassConcept and returns null when there is no text output. Can you also generate the text from the generator aspect? Use the language com.dslfoundry.plaintextgen from MPS -extensions . Can I implement TextGen for another language? I would like to implement a textgen for language A in a separate language B. Concretely, I need a different textgen for some of the KernelF concepts. When I try to do this, I get a compile error, because it looks like the generated descriptor does not include \u201cinherited\u201d concepts: 1 2 3 4 5 6 7 8 9 10 11 12 public TextGenDescriptor getDescriptor ( @NotNull SAbstractConcept concept ) { switch ( myIndex . index ( concept )) { case LanguageConceptSwitch . Component : return new Component_TextGen (); case LanguageConceptSwitch . Contract : return new Contract_TextGen (); case LanguageConceptSwitch . EmptyContent : return new EmptyContent_TextGen (); case LanguageConceptSwitch . Library : return new Library_TextGen (); case LanguageConceptSwitch . Port : return new Port_TextGen (); Is it not possible to \u201coverride the textgen\u201d this way? asked by: @markusvoelter It\u2019s not possible this way. So far the two ways I found to make this happen are: Extend the original language (A. ex ) and create subconcepts of all the concepts you need to specialise the textgen. You will then need to do M2M transformation to replace the extended concepts. You can do this in a very generic way by using a scrip the generator that searches for all node of concepts that are extended in A. ex and replaces them by using the RefactoringRuntime.replaceWithNewConcept method. Create annotations that override the text gen of the concepts and attache them in a generator. Then MPS will first call the text gen of the annotation and you can override it there. There is MPS -22092 which describes this request. answered by: @coolya","title":"TextGen aspect"},{"location":"aspects/transformations/","text":"Transformations aspect \u00b6 This language is part of Shadow Models in MPS -extensions . Consult the documentation for more information. What\u2019s a fork? It can group a list of rules which can be applied. If there are nodes in the output where one of the transformations would again be applicable, nothing will happen unless you enable the fixpoint mode. When you use the transform keyword it will just copy the input and all its descendants. If any input concept matches a transformation rule parameter in the auto apply part, it will transform the input according to the matched transformation. What does the transform statement do? It has the same meaning as a COPY_SRC macro in MPS and it will just copy the input node and apply a rule.","title":"Transformations"},{"location":"aspects/transformations/#transformations-aspect","text":"This language is part of Shadow Models in MPS -extensions . Consult the documentation for more information. What\u2019s a fork? It can group a list of rules which can be applied. If there are nodes in the output where one of the transformations would again be applicable, nothing will happen unless you enable the fixpoint mode. When you use the transform keyword it will just copy the input and all its descendants. If any input concept matches a transformation rule parameter in the auto apply part, it will transform the input according to the matched transformation. What does the transform statement do? It has the same meaning as a COPY_SRC macro in MPS and it will just copy the input node and apply a rule.","title":"Transformations aspect"},{"location":"aspects/typesystem/","text":"Typstem aspect \u00b6 A type system is part of a language definition assigning types to the nodes in the models written using the language. The type system language is also used to check certain constraints on nodes and their types. \u2014 MPS documentation Type system rules aren\u2019t executing. Turn off the power save mode . Also make sure that the languages that contains the rules is used. Make sure that under Tool \u2192 Model Checker the typesystem checks are enabled. Some rules are only checked when Check model is invoked. In this case the option do not apply on the fly is set to true in a checking rule. Are comparison rules often used? No, they are rarely used (not many results across various code bases). How do you learn more about MPS CodeRules? This is kind of a new typesystem bases on constraints. Visit JetBrains/mps-coderules for more information. There is also a blog post about this project. The new MPS implementation of the Kotlin language uses CodeRules. More information can be found in JetBrains/mps-kotlin-typesystem . There is also a free course about it on stepik . Type system vs constraints? Specific Languages blog: Type system vs constraints Subtyping vs inheritance? Specific Languages blog: Subtyping vs inheritance How can you speed up model checks? Specific Languages blog: Speeding up model checks with Scope Cache How do you build a language extension for checking rules? I built a baselanguage extension which can be used in a checking rule (i.e., in the typesystem aspect of another language) buut the new language\u2019s generator isn\u2019t engaged during the generation of some checking rule using the extension (generation plan says: \u201cNOT IN THE PLAN\u201d). The generator of the new language must have a dependency to the baseLanguage generator with the scope set to Extends . contributed by: @kbirken When and why should you copy a type in an inference rule? I\u2019ve seen basically the same code, where one time the type is copied and another time it\u2019s just used (without the copy). When should we copy the type and why? 1 2 3 4 5 6 7 8 9 inference rule typeof_Member { applicable for concept = Member as member applicable always overrides false do { typeof ( member ) : == : member . type . copy ; } } The type should only be copied if you want to use it in another type as a child. In the example it should be fine to simply use member.type . But let\u2019s say you have a SetType concept in your language that contains an innerType as a child. If you want to construct an instance of that concept, you would write code like this: 1 2 3 node < SetType > result = new node < SetType > ; result . innerType = member . type . copy ; typeof ( member ) : == : result If you omit the .copy in the code, you would attempt to \u201chijack\u201d the member.type node from the member and break the model. MPS will complain. contributed by: @sergej-koscejev How do you suppress errors? Given I have a piece of embedded demonstration code and don\u2019t want it to show warnings (e.g. on unused variables). How can I do that? Make your node implement ISuppressErrors . If you don\u2019t override any methods of it, it will suppress all constraint, typesystem and cardinality errors and warnings. You may override #suppress(node<>) to only suppress the errors of certain subnodes. You may override #suppress(NodeReportItem) to only suppress certain errors. Overriding this will take precedence of overriding #suppress(node<>) . Xou should implement only one of them or manually call #suppress(node<>) from #suppress(NodeReportItem) . If there are nested nodes that implement ISuppressErrors , the error will be suppressed if any of them returns true. You may debug such by copying the errornode to the console (e.g. nodeRef@50283 ) and running this line: 1 2 3 > nodeRef @ 50283. ancestors < concept = ISuppressErrors > . select ({ ~ it => [ it , it . suppress ( nodeRef @ 50283 ) ] ; }); [[ dummy , false ] , [< no name >[ LiteralProgramFragment ] : dummy (): void , false ] , [ Demo1 , true ]] The result is the path from that node to the top and will tell you which node is suppressing that error. The concept IAntisuppressErrors also plays a role there, although it is deprecated (implement the suppress method instead). contributed by: @abstraktor Is there an elegant way to express inference rules on lists? If you want to calculate the common type of more than one node you can use a type system variable for that. Example: 1 2 3 4 5 6 7 var x ; foreach it in self . items { infer x : >= : typeof ( it ) } typeof ( self ) : == : operation type ( self , x , null ); Given that you really need the operation type in the end. You most probably need to change the implementation of the rules contributing to the operation type to only use \u201cone side\u201d. If the type of the expression is simply the type of the variable x you can omit it. answered by: @coolya What\u2019s Helgins? It\u2019s the old name of the typesystem. The name is nowadays not used anymore. How is the relation between null and other types? Null is a subtype of every reference type in baselanguage/Java but not of primitive types. What is variance? Detailed explanation: StackOverflow answer Covariance and Contravariance in Java It is about the relationship between types and subtypes, about type conversion and to decide whether a method is overwritten or overloaded. Simple explanation: covariance subtypes are allowed instead of a type examples: method return type, parameter type, variable assignment contravariance : supertypes are allowed instead of a type parameter of function types Invariance : neither covariance nor contravariance examples: generics (e.g List<String> is not a subtype of List<Object> ) For overriden methods, the signature has to be the same (name + parameters), the return type can be a subtype of the original return type: 1 2 3 4 5 6 7 8 9 10 11 12 class MyCollection { Iterator iterator () { null ; } } class MyList extends MyCollection { @Override * package * ListIterator iterator () { null ; } } The class MyList is allowed to specify a different return type ( ListIterator ). What\u2019s autoboxing in Base Language/Java? For some cases there is an automatic conversion between primitive types and reference types called autoboxing/unboxing . 1 2 Integer z1 = 1 ; int z2 = new Integer ( 1 ); Autoboxing doesn\u2019t apply to array types and the type checker behaves differently in Java (J) and baselanguage (B) : 1 2 3 4 5 6 Integer [] a = new int [] { 1 , 2 }; // disallowed in both Integer z = 1 ; // allowed in both Integer [] b = { 1 }; // allowed in J, disallowed in B int [] c = { new Integer ( 1 )}; // allowed in J, disallowed in B int [] d = new Integer [] { new Integer ( 1 )}; // disallowed in both Object d = new int [] { 1 }; // allowed in both","title":"Typesystem"},{"location":"aspects/typesystem/#typstem-aspect","text":"A type system is part of a language definition assigning types to the nodes in the models written using the language. The type system language is also used to check certain constraints on nodes and their types. \u2014 MPS documentation Type system rules aren\u2019t executing. Turn off the power save mode . Also make sure that the languages that contains the rules is used. Make sure that under Tool \u2192 Model Checker the typesystem checks are enabled. Some rules are only checked when Check model is invoked. In this case the option do not apply on the fly is set to true in a checking rule. Are comparison rules often used? No, they are rarely used (not many results across various code bases). How do you learn more about MPS CodeRules? This is kind of a new typesystem bases on constraints. Visit JetBrains/mps-coderules for more information. There is also a blog post about this project. The new MPS implementation of the Kotlin language uses CodeRules. More information can be found in JetBrains/mps-kotlin-typesystem . There is also a free course about it on stepik . Type system vs constraints? Specific Languages blog: Type system vs constraints Subtyping vs inheritance? Specific Languages blog: Subtyping vs inheritance How can you speed up model checks? Specific Languages blog: Speeding up model checks with Scope Cache How do you build a language extension for checking rules? I built a baselanguage extension which can be used in a checking rule (i.e., in the typesystem aspect of another language) buut the new language\u2019s generator isn\u2019t engaged during the generation of some checking rule using the extension (generation plan says: \u201cNOT IN THE PLAN\u201d). The generator of the new language must have a dependency to the baseLanguage generator with the scope set to Extends . contributed by: @kbirken When and why should you copy a type in an inference rule? I\u2019ve seen basically the same code, where one time the type is copied and another time it\u2019s just used (without the copy). When should we copy the type and why? 1 2 3 4 5 6 7 8 9 inference rule typeof_Member { applicable for concept = Member as member applicable always overrides false do { typeof ( member ) : == : member . type . copy ; } } The type should only be copied if you want to use it in another type as a child. In the example it should be fine to simply use member.type . But let\u2019s say you have a SetType concept in your language that contains an innerType as a child. If you want to construct an instance of that concept, you would write code like this: 1 2 3 node < SetType > result = new node < SetType > ; result . innerType = member . type . copy ; typeof ( member ) : == : result If you omit the .copy in the code, you would attempt to \u201chijack\u201d the member.type node from the member and break the model. MPS will complain. contributed by: @sergej-koscejev How do you suppress errors? Given I have a piece of embedded demonstration code and don\u2019t want it to show warnings (e.g. on unused variables). How can I do that? Make your node implement ISuppressErrors . If you don\u2019t override any methods of it, it will suppress all constraint, typesystem and cardinality errors and warnings. You may override #suppress(node<>) to only suppress the errors of certain subnodes. You may override #suppress(NodeReportItem) to only suppress certain errors. Overriding this will take precedence of overriding #suppress(node<>) . Xou should implement only one of them or manually call #suppress(node<>) from #suppress(NodeReportItem) . If there are nested nodes that implement ISuppressErrors , the error will be suppressed if any of them returns true. You may debug such by copying the errornode to the console (e.g. nodeRef@50283 ) and running this line: 1 2 3 > nodeRef @ 50283. ancestors < concept = ISuppressErrors > . select ({ ~ it => [ it , it . suppress ( nodeRef @ 50283 ) ] ; }); [[ dummy , false ] , [< no name >[ LiteralProgramFragment ] : dummy (): void , false ] , [ Demo1 , true ]] The result is the path from that node to the top and will tell you which node is suppressing that error. The concept IAntisuppressErrors also plays a role there, although it is deprecated (implement the suppress method instead). contributed by: @abstraktor Is there an elegant way to express inference rules on lists? If you want to calculate the common type of more than one node you can use a type system variable for that. Example: 1 2 3 4 5 6 7 var x ; foreach it in self . items { infer x : >= : typeof ( it ) } typeof ( self ) : == : operation type ( self , x , null ); Given that you really need the operation type in the end. You most probably need to change the implementation of the rules contributing to the operation type to only use \u201cone side\u201d. If the type of the expression is simply the type of the variable x you can omit it. answered by: @coolya What\u2019s Helgins? It\u2019s the old name of the typesystem. The name is nowadays not used anymore. How is the relation between null and other types? Null is a subtype of every reference type in baselanguage/Java but not of primitive types. What is variance? Detailed explanation: StackOverflow answer Covariance and Contravariance in Java It is about the relationship between types and subtypes, about type conversion and to decide whether a method is overwritten or overloaded. Simple explanation: covariance subtypes are allowed instead of a type examples: method return type, parameter type, variable assignment contravariance : supertypes are allowed instead of a type parameter of function types Invariance : neither covariance nor contravariance examples: generics (e.g List<String> is not a subtype of List<Object> ) For overriden methods, the signature has to be the same (name + parameters), the return type can be a subtype of the original return type: 1 2 3 4 5 6 7 8 9 10 11 12 class MyCollection { Iterator iterator () { null ; } } class MyList extends MyCollection { @Override * package * ListIterator iterator () { null ; } } The class MyList is allowed to specify a different return type ( ListIterator ). What\u2019s autoboxing in Base Language/Java? For some cases there is an automatic conversion between primitive types and reference types called autoboxing/unboxing . 1 2 Integer z1 = 1 ; int z2 = new Integer ( 1 ); Autoboxing doesn\u2019t apply to array types and the type checker behaves differently in Java (J) and baselanguage (B) : 1 2 3 4 5 6 Integer [] a = new int [] { 1 , 2 }; // disallowed in both Integer z = 1 ; // allowed in both Integer [] b = { 1 }; // allowed in J, disallowed in B int [] c = { new Integer ( 1 )}; // allowed in J, disallowed in B int [] d = new Integer [] { new Integer ( 1 )}; // disallowed in both Object d = new int [] { 1 }; // allowed in both","title":"Typstem aspect"},{"location":"aspects/vcs/","text":"VCS aspect \u00b6 The VCS merge aspect language aspect defines strategies to automatically resolve merge conflicts for nodes, their children, references and properties. \u2014 MPS documentation I pulled some changes or did some other VCS related stuff and strange errors appear or changes aren\u2019t visible. There might be a bug related to caching or VCS in general. Invalidating the cache or restarting the project might help. There are quite some bugs in VCS . How do you avoid merge conflicts? Specific Languages blog: Avoiding merge conflicts","title":"VCS"},{"location":"aspects/vcs/#vcs-aspect","text":"The VCS merge aspect language aspect defines strategies to automatically resolve merge conflicts for nodes, their children, references and properties. \u2014 MPS documentation I pulled some changes or did some other VCS related stuff and strange errors appear or changes aren\u2019t visible. There might be a bug related to caching or VCS in general. Invalidating the cache or restarting the project might help. There are quite some bugs in VCS . How do you avoid merge conflicts? Specific Languages blog: Avoiding merge conflicts","title":"VCS aspect"},{"location":"aspects/virtualinterfaces/","text":"Virtual Interfaces aspect \u00b6 This aspect allows declaring virtual interfaces and is part of Shadow Models in MPS -extensions . To get a better understanding, have a look at the corresponding sandbox.","title":"Virtual Interfaces"},{"location":"aspects/virtualinterfaces/#virtual-interfaces-aspect","text":"This aspect allows declaring virtual interfaces and is part of Shadow Models in MPS -extensions . To get a better understanding, have a look at the corresponding sandbox.","title":"Virtual Interfaces aspect"},{"location":"build/","text":"Build language \u00b6 How can you override the build directory name build to something different? You can do it when you invoke Ant by passing -Dbuild.dir = otherDir . Dependencies on a module not visible from the current build project. Specific Languages blog: Build script error: \u201cDependency on a module not visible from current build project\u201d Build script error: unsatisfied dependency. Specific Languages blog: Build script error: \u201cUnsatisfied dependency\u201d Build script error: can\u2019t find used language in dependencies. Specific Languages blog: Build script error: \u201cCannot find used language in dependencies\u201d Can\u2019t find extended language in dependencies. Check this answer . How do you build an MPS project with maven? Specific Languages blog: Building MPS projects using Maven - a sample How can you find out the supported MPS version of a project? Search the readme for this information. If the project uses a gradle script, you can most likely find this information in the file build.gradle (for example in this line in mps-extension). For older MPS projects there is no waying of finding out the version. What do you need to put into the .gitignore file? Have a look at this .gitignore file. Why is it possible to successfully build models with missing imports? Specific Languages blog: Why can I successfully build models with missing imports? X errors before generation. Specific Languages blog: 3358 errors before generation How do you clean the generated files in MPS ? Possible solutions: Specific Languages Blog: mpsclean When using a build script, have a dedicated clean task ( gradle example ). The files from operation from the MPS build model, changes the access permissions of the copied over files. As a workaround you can use Buildlayout_Filemode or unzip the files using Gradle. MPS build script \u00b6 The build-language is one of the oldest parts of MPS , designed to generate the ant files in an easier way, but it isn\u2019t refactored until today. The generator of the build language has to find out what, for example, \u201csolution needs baselanguage\u201d means at runtime-level. To execute code from the solution, the JVM needs the baselanguage.jar on the classpath. The more dependencies the solution has, the more complex becomes the generated ant file, because the generator has to consider all these transitive dependencies. The generator needs to know what artefact a module generates and how the generated artefact/module is used at runtime. Therefore, the jars must be on the classpath. The modules in the mps-groups in the MPS build script contain information from the serialized descriptors (.msd files, .mpl files, \u2026). The Reload all modules from disk intention loads them explicitly. The descriptor files aren\u2019t read before generation, so that you should always verify before you push if your MPS build scripts are up-to-date. For every dependency added to a module or a changed reexport flag, this intention has to be triggered by hand. Problem: the current implementation of the build-language isn\u2019t extensible, because it always looks into the original model. The main part of the ant file generation is the dependency analysis (for the modules), and for this it needs to access the original model for some technical reasons. These limit you to languages which are provided by MPS . You can\u2019t use your own patterns, for example, you can\u2019t write an extension which picks all modules from a folder, generates an intellij-plugin out of them and stores the result in a zip file and generates all the code required for the command-line build. But this isn\u2019t possible because of the build-language-inherent dependency analysis mechanism. The code generator of the build language has to verify for dependencies like jars in stub-models, jars at runtime etc., but the error messages aren\u2019t well-designed. For example, you have a jar file xyz.jar entered as java runtime dependency of the language abc. Instead of something like \u201cyou have to enter xyz.jar to your build layout plugin-123, cause language abc specifies it as java runtime dependency\u201d you get for example \u201cjar stub library should be extracted into build-script: ${my.project}/very/long/path/lib/xyz.jar \u201d, which isn\u2019t helpful. Many problems the generator finds could also be found by the model checker, but the checks are done at generation time and implemented as \u201cgencontext.show error\u201d in the generator. Generated ant scripts ( build.xml ) \u00b6 The mps build scripts are generated to ant scripts, which then generate the modules. The ant script starts a headless- MPS with all required dependencies, puts jars on the classpath and does some further magic. Tasks can be passed to the ant script like the \u201cgenerate\u201d task. Modules have several models with dependencies. For example, for a language, the behavior uses the structure aspect; the type-system uses the behavior aspect etc. which can result in complex dependencies between these models. These have to be considered when the models are generated and compiled. The order is derived by the code generator of the build language and results in an execution plan where the \u201ccompile units\u201d are grouped in \u201cchunks\u201d. Chunks with bootstrap-dependencies are explicitly marked, which means all modules in the chunk have to be compiled at the same time. MPS consists of hundreds of jar files which must be on the classpath for the code generation and compilation, which leads to giant ant scripts (with some thousand lines). Even simple mps build scripts, which only use BaseLanguage result into big ant scripts. The build layout in the MPS build script defines how your modules are packaged e.g. as zip containing multiple plugins, as simple plugin-folder, as lib -folder with a flat list of jars, etc. The ant script needs to know where the local MPS is installed and where your modules and dependencies are located. This is usually done using folder macros in the mps build script which are generated as \u201cproperties\u2019\u2018 in the ant script. This makes the build independent of your local machine and the ant script can be executed on the CI or any other machine. The Headless- MPS , which is started by the ant script, behaves differently in some cases compared to an IDE - MPS . For example, circular dependencies can be resolved in the IDE by just applying Make Project multiple times, which doesn\u2019t work on the command line and thus also fails on the CI. Dependencies which are visible in the IDE aren\u2019t always visible in the MPS build script/ ant script and can result in failing builds. MPS holds one big global repository, where all modules are loaded into the modules pool (project libraries, global libraries, \u2026). In the IDE everything\u2019s always visible and wrong dependencies can be resolved but on the command line the build can fail, because the referenced model isn\u2019t loaded. The build language generator doesn\u2019t check the nodes for e.g. references out of scope (like the model-checker does), it only looks into meta-data/model-properties and relies on that information.","title":"Build"},{"location":"build/#build-language","text":"How can you override the build directory name build to something different? You can do it when you invoke Ant by passing -Dbuild.dir = otherDir . Dependencies on a module not visible from the current build project. Specific Languages blog: Build script error: \u201cDependency on a module not visible from current build project\u201d Build script error: unsatisfied dependency. Specific Languages blog: Build script error: \u201cUnsatisfied dependency\u201d Build script error: can\u2019t find used language in dependencies. Specific Languages blog: Build script error: \u201cCannot find used language in dependencies\u201d Can\u2019t find extended language in dependencies. Check this answer . How do you build an MPS project with maven? Specific Languages blog: Building MPS projects using Maven - a sample How can you find out the supported MPS version of a project? Search the readme for this information. If the project uses a gradle script, you can most likely find this information in the file build.gradle (for example in this line in mps-extension). For older MPS projects there is no waying of finding out the version. What do you need to put into the .gitignore file? Have a look at this .gitignore file. Why is it possible to successfully build models with missing imports? Specific Languages blog: Why can I successfully build models with missing imports? X errors before generation. Specific Languages blog: 3358 errors before generation How do you clean the generated files in MPS ? Possible solutions: Specific Languages Blog: mpsclean When using a build script, have a dedicated clean task ( gradle example ). The files from operation from the MPS build model, changes the access permissions of the copied over files. As a workaround you can use Buildlayout_Filemode or unzip the files using Gradle.","title":"Build language"},{"location":"build/#mps-build-script","text":"The build-language is one of the oldest parts of MPS , designed to generate the ant files in an easier way, but it isn\u2019t refactored until today. The generator of the build language has to find out what, for example, \u201csolution needs baselanguage\u201d means at runtime-level. To execute code from the solution, the JVM needs the baselanguage.jar on the classpath. The more dependencies the solution has, the more complex becomes the generated ant file, because the generator has to consider all these transitive dependencies. The generator needs to know what artefact a module generates and how the generated artefact/module is used at runtime. Therefore, the jars must be on the classpath. The modules in the mps-groups in the MPS build script contain information from the serialized descriptors (.msd files, .mpl files, \u2026). The Reload all modules from disk intention loads them explicitly. The descriptor files aren\u2019t read before generation, so that you should always verify before you push if your MPS build scripts are up-to-date. For every dependency added to a module or a changed reexport flag, this intention has to be triggered by hand. Problem: the current implementation of the build-language isn\u2019t extensible, because it always looks into the original model. The main part of the ant file generation is the dependency analysis (for the modules), and for this it needs to access the original model for some technical reasons. These limit you to languages which are provided by MPS . You can\u2019t use your own patterns, for example, you can\u2019t write an extension which picks all modules from a folder, generates an intellij-plugin out of them and stores the result in a zip file and generates all the code required for the command-line build. But this isn\u2019t possible because of the build-language-inherent dependency analysis mechanism. The code generator of the build language has to verify for dependencies like jars in stub-models, jars at runtime etc., but the error messages aren\u2019t well-designed. For example, you have a jar file xyz.jar entered as java runtime dependency of the language abc. Instead of something like \u201cyou have to enter xyz.jar to your build layout plugin-123, cause language abc specifies it as java runtime dependency\u201d you get for example \u201cjar stub library should be extracted into build-script: ${my.project}/very/long/path/lib/xyz.jar \u201d, which isn\u2019t helpful. Many problems the generator finds could also be found by the model checker, but the checks are done at generation time and implemented as \u201cgencontext.show error\u201d in the generator.","title":"MPS build script"},{"location":"build/#generated-ant-scripts-buildxml","text":"The mps build scripts are generated to ant scripts, which then generate the modules. The ant script starts a headless- MPS with all required dependencies, puts jars on the classpath and does some further magic. Tasks can be passed to the ant script like the \u201cgenerate\u201d task. Modules have several models with dependencies. For example, for a language, the behavior uses the structure aspect; the type-system uses the behavior aspect etc. which can result in complex dependencies between these models. These have to be considered when the models are generated and compiled. The order is derived by the code generator of the build language and results in an execution plan where the \u201ccompile units\u201d are grouped in \u201cchunks\u201d. Chunks with bootstrap-dependencies are explicitly marked, which means all modules in the chunk have to be compiled at the same time. MPS consists of hundreds of jar files which must be on the classpath for the code generation and compilation, which leads to giant ant scripts (with some thousand lines). Even simple mps build scripts, which only use BaseLanguage result into big ant scripts. The build layout in the MPS build script defines how your modules are packaged e.g. as zip containing multiple plugins, as simple plugin-folder, as lib -folder with a flat list of jars, etc. The ant script needs to know where the local MPS is installed and where your modules and dependencies are located. This is usually done using folder macros in the mps build script which are generated as \u201cproperties\u2019\u2018 in the ant script. This makes the build independent of your local machine and the ant script can be executed on the CI or any other machine. The Headless- MPS , which is started by the ant script, behaves differently in some cases compared to an IDE - MPS . For example, circular dependencies can be resolved in the IDE by just applying Make Project multiple times, which doesn\u2019t work on the command line and thus also fails on the CI. Dependencies which are visible in the IDE aren\u2019t always visible in the MPS build script/ ant script and can result in failing builds. MPS holds one big global repository, where all modules are loaded into the modules pool (project libraries, global libraries, \u2026). In the IDE everything\u2019s always visible and wrong dependencies can be resolved but on the command line the build can fail, because the referenced model isn\u2019t loaded. The build language generator doesn\u2019t check the nodes for e.g. references out of scope (like the model-checker does), it only looks into meta-data/model-properties and relies on that information.","title":"Generated ant scripts (build.xml)"},{"location":"build/ci/","text":"Continuous integration \u00b6 How to attach debugger to a CI build on GitHub actions? Note: GitHub actions can be run locally with act . The plan is to first teach the build to open up a reachable SSH connection, and then tunnel a local port onto it so that we can connect IntelliJ to it. Sign up with ngrok and get your authtoken Since build agents usually are not reachable from the web, we\u2019ll need someone to bridge the build agents\u2019 firewalls. A common solution for that seems to be https://ngrok.com/ which requires a free signup. I tried tmate as well, but that doesn\u2019t support port forwarding. Open ssh from your .github/workflows/build.yml Lucky us, there are prepared GitHub actions that start up sshd with ngrok. I used debug-via-ssh . All we need to give it is our ngrok authtoken from above, and our public ssh key of the key that we want to use to get into the machine. Given we already have .github/workflows/build.yml , I added a step right before the failing step: 1 2 3 4 5 6 7 # \u2026 - name: Start SSH session uses: luchihoratiu/debug-via-ssh@main with: NGROK_AUTH_TOKEN: 2343953890afgaegaewgi\u00f6oio2332\u00e4\u00e4\u00e4 SSH_PASS: ssh-rsa AAAJOAKJFLJWKLJLEKJLEFKJLFEKJLK\u2026JAOIFJOFA bkruck@itemis.com # \u2026 Since this is a private repository, I was fine with directly pasting my authtoken and public SSH key into it directly (I didn\u2019t have permissions to add secrets to the repo ). After the whole session, I reset my ngrok auth token. Another note worth mentioning is, that we trust the author of the action and ngrok here to not man-in-the-middle us here. Tell MPS to wait for us Now we can run the GitHub build and see that ngrok is stopping the build at the desired location, being ready for us to connect. In the endpoints list , our agent should be listed with a domain name and port. Taking the two, we can now ssh into it: 1 2 # SSH through ngrok onto the build machine, already forwarding local 5020 to the remote machine ssh -L 5020:localhost:5020 -p11720 runner@4.tcp.ngrok.io If you are asked for a password, fix the casing of -p . If still asked for a password, check which user is running the build. On GitHub, that user seems to be called runner right now. Even though he has sudo rights. We now want to teach MPS to open the debug ports and wait for us to connect before running any tests. On CLI, this doesn\u2019t work with .vmoptions files, but instead, we\u2019re running the tests from an ant-file in this project. Since the allScripts generation was already performed, we only need to open the ant-file and add a jvm argument. I like to open build/myProject/build-tests.xml with vim and then execute the following search-expression: %s/<\\/jvmargs>/ <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/>\\r <\\/jvmargs>/g . In other terms: Look for </jvmargs> and add <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/> right in front of it. The suspend=y will tell java to not start doing anything before we are connected, while teh address=5020 tells it to be welcoming us on port 5020. 1 2 3 4 5 6 7 8 9 10 --- build/myProject/build-tests.xml 2021-09-17 21:15:50.000000000 +0200 +++ build/myProject/build-tests.xml.before 2021-09-17 21:32:09.000000000 +0200 @@ -342,7 +342,6 @@ <jvmargs> <arg value=\"-ea\" /> <arg value=\"-Xmx3072m\" /> - <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5020\" /> </jvmargs> <macro name=\"mps_home\" path=\"${mps_home}\" /> <macro name=\"myProject.home\" path=\"${myProject.home}\" /> Run the tests from within SSH Since I don\u2019t know how to move ngrok into the background while proceeding the build, I just ran the next github action by hand: 1 2 3 4 5 $ cd worker/myProject $ ./gradlew testLanguages \u2026 \u2026 Listening for transport dt_socket at address: 5020 We should now see the command line MPS start up and say that it is waiting for us on 5020 . Connect with your local IntelliJ Assuming, that you have the MPS sources checked out, opened it in IntelliJ and added the sources of your project as a module, we should be ready to connect now: Just start a remote debugging session on port 5020. It will forward the requests over SSH to the agent machine. Once connected, you\u2019ll be able to set breakpoints (for example, I set an Exception breakpoint for StackOverflowError ), and then proceed the build to run into the break point. Cleanup After you found your issue and everything is shiny, remember to remove the step from your github workflow again and reset your ngrok auth token. The build fails with exit code 137 Specific Languages blog: Exit code 137 Docker \u00b6 mbeddr , MPS -extensions , IETS3 Docker is a linux container technology that the platform projects use a lot. You can think of it as a lightweight virtual machine. Besides the container runtime, Docker also includes the tools required to build preconfigured images that are then executed in the container. These images are built from a Dockerfile. Essentially, everything in the infrastructure is provisioning using docker from the teamcity frontend over the database to the build agent. For the building agent, this approach allows us to keep the building agents consistent with their installed software and their versions. The Dockerfile for our general purpose agents can be found at GitHub. The docker image build from the docker file is published to docker hub, hosting service for images, and then used in our build server. The complete docker configuration for our build server is hosted on GitLab. It also included the scripts that download/update the docker image and run the agent. Since our teamcity setup uses multiple containers, a separate container for the database or the webserver that handles the encrypted connection, we are using docker-compose as an orchestration tool.","title":"CI"},{"location":"build/ci/#continuous-integration","text":"How to attach debugger to a CI build on GitHub actions? Note: GitHub actions can be run locally with act . The plan is to first teach the build to open up a reachable SSH connection, and then tunnel a local port onto it so that we can connect IntelliJ to it. Sign up with ngrok and get your authtoken Since build agents usually are not reachable from the web, we\u2019ll need someone to bridge the build agents\u2019 firewalls. A common solution for that seems to be https://ngrok.com/ which requires a free signup. I tried tmate as well, but that doesn\u2019t support port forwarding. Open ssh from your .github/workflows/build.yml Lucky us, there are prepared GitHub actions that start up sshd with ngrok. I used debug-via-ssh . All we need to give it is our ngrok authtoken from above, and our public ssh key of the key that we want to use to get into the machine. Given we already have .github/workflows/build.yml , I added a step right before the failing step: 1 2 3 4 5 6 7 # \u2026 - name: Start SSH session uses: luchihoratiu/debug-via-ssh@main with: NGROK_AUTH_TOKEN: 2343953890afgaegaewgi\u00f6oio2332\u00e4\u00e4\u00e4 SSH_PASS: ssh-rsa AAAJOAKJFLJWKLJLEKJLEFKJLFEKJLK\u2026JAOIFJOFA bkruck@itemis.com # \u2026 Since this is a private repository, I was fine with directly pasting my authtoken and public SSH key into it directly (I didn\u2019t have permissions to add secrets to the repo ). After the whole session, I reset my ngrok auth token. Another note worth mentioning is, that we trust the author of the action and ngrok here to not man-in-the-middle us here. Tell MPS to wait for us Now we can run the GitHub build and see that ngrok is stopping the build at the desired location, being ready for us to connect. In the endpoints list , our agent should be listed with a domain name and port. Taking the two, we can now ssh into it: 1 2 # SSH through ngrok onto the build machine, already forwarding local 5020 to the remote machine ssh -L 5020:localhost:5020 -p11720 runner@4.tcp.ngrok.io If you are asked for a password, fix the casing of -p . If still asked for a password, check which user is running the build. On GitHub, that user seems to be called runner right now. Even though he has sudo rights. We now want to teach MPS to open the debug ports and wait for us to connect before running any tests. On CLI, this doesn\u2019t work with .vmoptions files, but instead, we\u2019re running the tests from an ant-file in this project. Since the allScripts generation was already performed, we only need to open the ant-file and add a jvm argument. I like to open build/myProject/build-tests.xml with vim and then execute the following search-expression: %s/<\\/jvmargs>/ <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/>\\r <\\/jvmargs>/g . In other terms: Look for </jvmargs> and add <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/> right in front of it. The suspend=y will tell java to not start doing anything before we are connected, while teh address=5020 tells it to be welcoming us on port 5020. 1 2 3 4 5 6 7 8 9 10 --- build/myProject/build-tests.xml 2021-09-17 21:15:50.000000000 +0200 +++ build/myProject/build-tests.xml.before 2021-09-17 21:32:09.000000000 +0200 @@ -342,7 +342,6 @@ <jvmargs> <arg value=\"-ea\" /> <arg value=\"-Xmx3072m\" /> - <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5020\" /> </jvmargs> <macro name=\"mps_home\" path=\"${mps_home}\" /> <macro name=\"myProject.home\" path=\"${myProject.home}\" /> Run the tests from within SSH Since I don\u2019t know how to move ngrok into the background while proceeding the build, I just ran the next github action by hand: 1 2 3 4 5 $ cd worker/myProject $ ./gradlew testLanguages \u2026 \u2026 Listening for transport dt_socket at address: 5020 We should now see the command line MPS start up and say that it is waiting for us on 5020 . Connect with your local IntelliJ Assuming, that you have the MPS sources checked out, opened it in IntelliJ and added the sources of your project as a module, we should be ready to connect now: Just start a remote debugging session on port 5020. It will forward the requests over SSH to the agent machine. Once connected, you\u2019ll be able to set breakpoints (for example, I set an Exception breakpoint for StackOverflowError ), and then proceed the build to run into the break point. Cleanup After you found your issue and everything is shiny, remember to remove the step from your github workflow again and reset your ngrok auth token. The build fails with exit code 137 Specific Languages blog: Exit code 137","title":"Continuous integration"},{"location":"build/ci/#docker","text":"mbeddr , MPS -extensions , IETS3 Docker is a linux container technology that the platform projects use a lot. You can think of it as a lightweight virtual machine. Besides the container runtime, Docker also includes the tools required to build preconfigured images that are then executed in the container. These images are built from a Dockerfile. Essentially, everything in the infrastructure is provisioning using docker from the teamcity frontend over the database to the build agent. For the building agent, this approach allows us to keep the building agents consistent with their installed software and their versions. The Dockerfile for our general purpose agents can be found at GitHub. The docker image build from the docker file is published to docker hub, hosting service for images, and then used in our build server. The complete docker configuration for our build server is hosted on GitLab. It also included the scripts that download/update the docker image and run the agent. Since our teamcity setup uses multiple containers, a separate container for the database or the webserver that handles the encrypted connection, we are using docker-compose as an orchestration tool.","title":"Docker"},{"location":"build/command_line_tool/","text":"Basic code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class CommandLineTool { public static void main ( string [] args ) throws Exception { final string projectPath = YOUR_PATH /* (1) Get project path, for example, from args or system properties */ ; final EnvironmentConfig config = EnvironmentConfig . emptyConfig () . withDefaultPlugins () . withBootstrapLibraries (); config . addPlugin ( \"http-support\" , \"jetbrains.mps.ide.httpsupport\" ); final IdeaEnvironment env = new IdeaEnvironment ( config ); env . init (); final Project project = env . openProject ( new File ( projectPath )); Throwable thrown = null ; try { doSomething (); // 2 } catch ( Exception e ) { thrown = e ; } finally { env . dispose (); } if ( thrown != null ) { System . err . println ( \"ERROR:\" ); thrown . printStackTrace (); System . exit ( 1 ); } else { // You need `System.exit` even in a successful case to stop threads that MPS plugins may be leaving behind. System . exit ( 0 ); } } } What can you do with the project (at point 2)? Here is how you invoke a static method foo() on class Bar in module Baz : 1 2 3 4 5 6 7 8 9 class InvokeMethod { void execute () { ModuleRepositoryFacade facade = new ModuleRepositoryFacade ( project ); ReloadableModule module = ( ReloadableModule ) ( facade . getModule ( module - reference / Baz / )); Class <?> classToInvoke = module . getClass ( \"some-package.Bar\" ); Method methodToInvoke = classToInvoke . getMethod ( \"foo\" ); methodToInvoke . invoke ( null ); } } Why all the reflection tricks and why not call the class directly instead? The answer is that when MPS is initialized and a project is opened, it sets up classloaders, putts on the classpath any dependencies that module Baz might have, so that you don\u2019t have to specify them ourselves. We still need to have on the classpath the initial set of JARs to run our class and start MPS . Here is how you would run our tool from Gradle: 1 2 3 4 5 task runCommandLineTool ( type: JavaExec ) { main = 'CommandLineTool' classpath file ( 'solutions/commandline/classes_gen' ) // Location of CommandLineTool.class classpath fileTree ( \"$mps_home/lib\" ) // $mps_home points to the MPS installation } You can also add MPS to the gradle dependencies block: 1 2 3 4 5 dependencies { testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2' implementation fileTree ( \"$mps_home/lib\" ) }","title":"Creating a command line tool"},{"location":"build/git/","text":"Git \u00b6 How do you compare Git branches? Have a look at this guide . How should you configure Git? Generated files should not be checked into Git (\u2018classes_gen\u2019, \u2018source_gen\u2019) unless the output of generators should be checked. Example from mps-extensions : .gitignore .gitattributes . Is there a hook in MPS that will be called when switching branches? Register a BranchChangeListener in an application or project plugin. Example: 1 ProjectHelper . toIdeaProject ( # project ). getMessageBus (). connect (). subscribe ( BranchChangeListener . VCS_BRANCH_CHANGED , new MyListener ()). How can you find the Git commit that deleted a concept? Assuming the concept is called Foo , search with Git Log in the corresponding structure model: git log -SFoo -- path/to/structure.mps General \u00b6 Git cheat sheet git-tips Flight rules for Git (trouleshooting) On undoing, fixing, or removing commits in git git-extras (extra git commands) Commit Often, Perfect Later, Publish Once: Git Best Practices GitHub publishing checklist \u00b6 Ready to use templates Template #1 Template #2 Necessary files/text README. md LICENSE description in about section of GitHub repository More extensive checklists Open Source Check List Am I ready to Open Source This?","title":"Git"},{"location":"build/git/#git","text":"How do you compare Git branches? Have a look at this guide . How should you configure Git? Generated files should not be checked into Git (\u2018classes_gen\u2019, \u2018source_gen\u2019) unless the output of generators should be checked. Example from mps-extensions : .gitignore .gitattributes . Is there a hook in MPS that will be called when switching branches? Register a BranchChangeListener in an application or project plugin. Example: 1 ProjectHelper . toIdeaProject ( # project ). getMessageBus (). connect (). subscribe ( BranchChangeListener . VCS_BRANCH_CHANGED , new MyListener ()). How can you find the Git commit that deleted a concept? Assuming the concept is called Foo , search with Git Log in the corresponding structure model: git log -SFoo -- path/to/structure.mps","title":"Git"},{"location":"build/git/#general","text":"Git cheat sheet git-tips Flight rules for Git (trouleshooting) On undoing, fixing, or removing commits in git git-extras (extra git commands) Commit Often, Perfect Later, Publish Once: Git Best Practices","title":"General"},{"location":"build/git/#github-publishing-checklist","text":"Ready to use templates Template #1 Template #2 Necessary files/text README. md LICENSE description in about section of GitHub repository More extensive checklists Open Source Check List Am I ready to Open Source This?","title":"GitHub publishing checklist"},{"location":"build/gradle/","text":"Documentation for Gradle can be found on gradle.org . The used features of the Groovy languages are explained in A Groovy Build Script Primer . Questions \u00b6 How do you set up a gradle build for an MPS project? There is a gist for a minimal build . There is a mps-gradle-plugin . For more complex projects look at build scripts of big projects such as MPS -extensions . I don\u2019t understand the dependencies between Gradle tasks. Read the Gradle documentation about authoring tasks . For visualizing task graphs to understand a task\u2019s dependencies, use the Gradle plugin gradle-taskinfo . Is there a Gradle plugin for downloading things? Yes, gradle-download-task . Is there a Gradle plugin for making HTTP requests? Yes, gradle-http-plugin . The gradle build fails with exception: incremental build fails during generation on no changed models Run git clean -xdf and rebuild everything ( MPS -33541 .) How can you fetch dependencies using Gradle? Specific Languages blog: Fetching dependencies with Gradle How to get dependencies from private GitHub repositories within a GitHub action? Follow the default way for GitHub packages access, as described in GitHub Actions . It might simply work if the other private repository is part of the same organization. If not, ensure the GITHUB_TOKEN permissions are correct: Permissions for the GITHUB_TOKEN Depending on the organizational settings, it might be impossible to obtain the artifact via the generic GITHUB_TOKEN . In this case you need to create a new personal access token (PAT). Next, add this token as a secret to the project (e.g. as PRIVATE_REPO_ACCESS_ACTOR and PRIVATE_REPO_ACCESS_TOKEN ): Granting additional permissions Make sure that this secret is not in an environment but generally available. Also add the username. Even though no username is required for token access, an error will occur if you leave it empty. Make sure you authorize the PAT for the SSO org (warning: this resets when changing permissions!) Next you need to access this special token in your workflow yaml file, e.g: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 name : Build and Test Languages [ ... ] # Obtain tokens and secrets from GitHub repository secrets env : GITHUB_ACTOR : ${{ github.actor }} GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} PRIVATE_ACTOR : ${{ secrets.PRIVATE_REPO_ACCESS_ACTOR }} PRIVATE_TOKEN : ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }} [ ... ] jobs : buildAndTest : [ ... ] - name : Build with Gradle uses : gradle/gradle-build-action@v1.3.3 with : arguments : buildLanguages Within your gradle file you can then access these variables via: build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 [ ... ] repositories { val gpr_user : String? by extra val gpr_token : String? by extra val githubUsername = System . getenv ( \"GITHUB_ACTOR\" ) ?: gpr_user val githubToken = System . getenv ( \"GITHUB_TOKEN\" ) ?: gpr_token if ( githubUsername == null || githubUsername == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_ACTOR ) or via gradle properties (gpr_user) for auth towards Github packages\" ) } if ( githubToken == null || githubToken == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_TOKEN ) or via gradle properties (gpr_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com//mbeddr/mbeddr.core\" ) credentials { username = githubUsername password = githubToken } } val private_user : String? by extra val private_token : String? by extra val privateUsername = System . getenv ( \"PRIVATE_ACTOR\" ) ?: private_user val privateToken = System . getenv ( \"PRIVATE_TOKEN\" ) ?: private_token if ( privateUsername == null || privateUsername == \"\" ) { throw GradleException ( \"No private credentials found via envrionment variable (\\ $ PRIVATE_ACTOR ) or via gradle properties (private_user) for auth towards Github packages\" ) } if ( privateToken == null || privateToken == \"\" ) { throw GradleException ( \"No credentials found via environment variable (\\ $ PRIVATE_TOKEN ) or via gradle properties (private_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com/ORGANIZATION/PRIVATE-PROJECT/\" ) credentials { username = privateUsername password = privateToken } } [ ... ] You can locally set the token by adding the following entries to your gradle.properties file (assuming your token has the correct access rights for the repositories): gpr_user=XXX gpr_token=YYY private_user=XXX private_token=YYY contributed by: @nkoester How to run a Gradle task from java code? Using the Gradle wrapper or the Gradle tooling API as described in this StackOverflow answer . Gradle Tips \u00b6 Item Description closures The closure does it (delay) {} which will delay the value propagation to execution instead of configuration time. buildAll scripts This is the meta build script (platforms only). This build model is generated and its artifact (ant-xml task) is committed to the gradle repo . project properties can be defined as ext .myPropName passed through: - P myPop_name from CL can be access like variables in the build project can be checked if the are set or not System properties passed through -D from CL are available in the gradle build file though norma java mechanism: System.getProperty(); Project properties can be specified as system properties. They need to be prefixed with org.gradle.project.NAME gradle.properties are by default project properties if they are prefixed with systemProp. they are system properties configurations are also separated in the same way as dependencies Gradle Wrapper ( gradlew/gradlew.bat ) \u00b6 The gradle wrapper script downloads gradle in the specified version, independent of your local installed gradle, and then starts the downloaded gradle. It consists of a small java program (located under ./gradle/wrapper/gradle-wrapper.jar ), an init-file which contains the gradle version ( ./gradle/wrapper/gradle-wrapper.properties ) and start scripts for Windows, Mac and Linux ( ./gradlew and ./gradlew.bat ). Why do we use gradle? Gradle build scripts have the advantage that you write code instead of XML, like it\u2019s the case using Maven or Ant. We use gradle to download MPS and the dependencies in the correct version and put them in the right place, generate the Ant scripts from the mps build scripts using a build-allScripts.xml Ant scripts and then start Ant with correct parameters (where is MPS on disc, where are the dependencies on disc, \u2026). This is easier than doing it with and directly. For defining the gradle scripts you can use groove ( build.gradle ) or kotlin ( build.gradle.kts ), both can do the same. Groovy is enough for smaller building scripts, but it\u2019s dynamically typed and thus fails late when the gradle task is executed. Kotlin provides type-checking and the auto-completion works better compared to groovy (with Intellij); this makes it easier to use with complex scripts. Dependencies \u00b6 Dependencies inside the buildScript{\u2026} block \u00b6 are placed on the classpath of the build script itself (for the current gradle file which will also be compiled (like java)) To be able to compile the build script into bytecode, its dependencies need to be resolved Dependencies outside the buildScript{\u2026} block \u00b6 are project dependencies these dependencies are added to the project code\u2019s classpath example: Gson is used inside a gradle project and needs to be on the classpath of the project to be able to compile the project. If the dependency in only used in the buildscript (i.e. only from the build.gradle file) then it should be in a buildscript { } block. Dependencies used in both project code and build scripts will effectively need to be listed twice. A good explanation of gradle configurations can be found in Gradle Configurations Explained: What is the difference between API and Implementation? | medium.com . Creating a gradle plugin \u00b6 There are three choices: build script buildSrc project standalone project Standalone project \u00b6 define all dependencies in gradle file create a properties file in the resource folder with the same name as the plugin id example: org.samples.greeting.properties in src/main/resources/META-INF/gradle-plugins/ plugin IDs full qualified identifiers, similar to Java packages Use pattern component/company/plugin-name examples com.github.[name].[plugin-name] com.github.[arimer].[migration-checker]","title":"Gradle"},{"location":"build/gradle/#questions","text":"How do you set up a gradle build for an MPS project? There is a gist for a minimal build . There is a mps-gradle-plugin . For more complex projects look at build scripts of big projects such as MPS -extensions . I don\u2019t understand the dependencies between Gradle tasks. Read the Gradle documentation about authoring tasks . For visualizing task graphs to understand a task\u2019s dependencies, use the Gradle plugin gradle-taskinfo . Is there a Gradle plugin for downloading things? Yes, gradle-download-task . Is there a Gradle plugin for making HTTP requests? Yes, gradle-http-plugin . The gradle build fails with exception: incremental build fails during generation on no changed models Run git clean -xdf and rebuild everything ( MPS -33541 .) How can you fetch dependencies using Gradle? Specific Languages blog: Fetching dependencies with Gradle How to get dependencies from private GitHub repositories within a GitHub action? Follow the default way for GitHub packages access, as described in GitHub Actions . It might simply work if the other private repository is part of the same organization. If not, ensure the GITHUB_TOKEN permissions are correct: Permissions for the GITHUB_TOKEN Depending on the organizational settings, it might be impossible to obtain the artifact via the generic GITHUB_TOKEN . In this case you need to create a new personal access token (PAT). Next, add this token as a secret to the project (e.g. as PRIVATE_REPO_ACCESS_ACTOR and PRIVATE_REPO_ACCESS_TOKEN ): Granting additional permissions Make sure that this secret is not in an environment but generally available. Also add the username. Even though no username is required for token access, an error will occur if you leave it empty. Make sure you authorize the PAT for the SSO org (warning: this resets when changing permissions!) Next you need to access this special token in your workflow yaml file, e.g: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 name : Build and Test Languages [ ... ] # Obtain tokens and secrets from GitHub repository secrets env : GITHUB_ACTOR : ${{ github.actor }} GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} PRIVATE_ACTOR : ${{ secrets.PRIVATE_REPO_ACCESS_ACTOR }} PRIVATE_TOKEN : ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }} [ ... ] jobs : buildAndTest : [ ... ] - name : Build with Gradle uses : gradle/gradle-build-action@v1.3.3 with : arguments : buildLanguages Within your gradle file you can then access these variables via: build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 [ ... ] repositories { val gpr_user : String? by extra val gpr_token : String? by extra val githubUsername = System . getenv ( \"GITHUB_ACTOR\" ) ?: gpr_user val githubToken = System . getenv ( \"GITHUB_TOKEN\" ) ?: gpr_token if ( githubUsername == null || githubUsername == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_ACTOR ) or via gradle properties (gpr_user) for auth towards Github packages\" ) } if ( githubToken == null || githubToken == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_TOKEN ) or via gradle properties (gpr_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com//mbeddr/mbeddr.core\" ) credentials { username = githubUsername password = githubToken } } val private_user : String? by extra val private_token : String? by extra val privateUsername = System . getenv ( \"PRIVATE_ACTOR\" ) ?: private_user val privateToken = System . getenv ( \"PRIVATE_TOKEN\" ) ?: private_token if ( privateUsername == null || privateUsername == \"\" ) { throw GradleException ( \"No private credentials found via envrionment variable (\\ $ PRIVATE_ACTOR ) or via gradle properties (private_user) for auth towards Github packages\" ) } if ( privateToken == null || privateToken == \"\" ) { throw GradleException ( \"No credentials found via environment variable (\\ $ PRIVATE_TOKEN ) or via gradle properties (private_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com/ORGANIZATION/PRIVATE-PROJECT/\" ) credentials { username = privateUsername password = privateToken } } [ ... ] You can locally set the token by adding the following entries to your gradle.properties file (assuming your token has the correct access rights for the repositories): gpr_user=XXX gpr_token=YYY private_user=XXX private_token=YYY contributed by: @nkoester How to run a Gradle task from java code? Using the Gradle wrapper or the Gradle tooling API as described in this StackOverflow answer .","title":"Questions"},{"location":"build/gradle/#gradle-tips","text":"Item Description closures The closure does it (delay) {} which will delay the value propagation to execution instead of configuration time. buildAll scripts This is the meta build script (platforms only). This build model is generated and its artifact (ant-xml task) is committed to the gradle repo . project properties can be defined as ext .myPropName passed through: - P myPop_name from CL can be access like variables in the build project can be checked if the are set or not System properties passed through -D from CL are available in the gradle build file though norma java mechanism: System.getProperty(); Project properties can be specified as system properties. They need to be prefixed with org.gradle.project.NAME gradle.properties are by default project properties if they are prefixed with systemProp. they are system properties configurations are also separated in the same way as dependencies","title":"Gradle Tips"},{"location":"build/gradle/#gradle-wrapper-gradlewgradlewbat","text":"The gradle wrapper script downloads gradle in the specified version, independent of your local installed gradle, and then starts the downloaded gradle. It consists of a small java program (located under ./gradle/wrapper/gradle-wrapper.jar ), an init-file which contains the gradle version ( ./gradle/wrapper/gradle-wrapper.properties ) and start scripts for Windows, Mac and Linux ( ./gradlew and ./gradlew.bat ). Why do we use gradle? Gradle build scripts have the advantage that you write code instead of XML, like it\u2019s the case using Maven or Ant. We use gradle to download MPS and the dependencies in the correct version and put them in the right place, generate the Ant scripts from the mps build scripts using a build-allScripts.xml Ant scripts and then start Ant with correct parameters (where is MPS on disc, where are the dependencies on disc, \u2026). This is easier than doing it with and directly. For defining the gradle scripts you can use groove ( build.gradle ) or kotlin ( build.gradle.kts ), both can do the same. Groovy is enough for smaller building scripts, but it\u2019s dynamically typed and thus fails late when the gradle task is executed. Kotlin provides type-checking and the auto-completion works better compared to groovy (with Intellij); this makes it easier to use with complex scripts.","title":"Gradle Wrapper (gradlew/gradlew.bat)"},{"location":"build/gradle/#dependencies","text":"","title":"Dependencies"},{"location":"build/gradle/#dependencies-inside-the-buildscript-block","text":"are placed on the classpath of the build script itself (for the current gradle file which will also be compiled (like java)) To be able to compile the build script into bytecode, its dependencies need to be resolved","title":"Dependencies inside the buildScript{...} block"},{"location":"build/gradle/#dependencies-outside-the-buildscript-block","text":"are project dependencies these dependencies are added to the project code\u2019s classpath example: Gson is used inside a gradle project and needs to be on the classpath of the project to be able to compile the project. If the dependency in only used in the buildscript (i.e. only from the build.gradle file) then it should be in a buildscript { } block. Dependencies used in both project code and build scripts will effectively need to be listed twice. A good explanation of gradle configurations can be found in Gradle Configurations Explained: What is the difference between API and Implementation? | medium.com .","title":"Dependencies outside the buildScript{...} block"},{"location":"build/gradle/#creating-a-gradle-plugin","text":"There are three choices: build script buildSrc project standalone project","title":"Creating a gradle plugin"},{"location":"build/gradle/#standalone-project","text":"define all dependencies in gradle file create a properties file in the resource folder with the same name as the plugin id example: org.samples.greeting.properties in src/main/resources/META-INF/gradle-plugins/ plugin IDs full qualified identifiers, similar to Java packages Use pattern component/company/plugin-name examples com.github.[name].[plugin-name] com.github.[arimer].[migration-checker]","title":"Standalone project"},{"location":"clean_code/java/","text":"refactoring.guru has information about general code smells. Be aware of common Java gotchas . Avoid acronyms and abbreviations that may not be clear to others. Name methods and variables after what they mean. Before giving a name, consider the responsibility of that piece of code. 1 Return empty collections instead of returning null elements ( reference ). It saves the efforts needed for testing on null elements. Efficiency: use StringBuilder or StringBuffer for String concatenation Refactor your code regularly , especially when your classes or methods become too big. 2 ^, ^ 3 . Remember to test parameters of public methods for illegal values. These methods shouldn\u2019t crash because of a NullPointer. Order class members by scope from private to public 4 ^, ^ 5 (the reverse order is also fine) Minimize the accessibility of class members. It enforces information hiding or encapsulation . Avoid hardcoded values. Use lazy initialization if performance is critical or use caching if necessary. Utility and helper classes \u00b6 Utility class: include only static methods and are stateless. Don\u2019t create an instance of such a class. Helper class: they can be utility classes, or it can be stateful or require an instance. It can be any class whose design is to aid another class. Try to make the name of the utility or helper class more specific (for example: AdministrationHelper , LoginHelper instead of Helper ). More tips \u00b6 If you use functional interfaces, use the standard java ones . If you want to understand the functional style, consult Unterstand the functional style page. If you want to use newer Java features, have a look at Modernize old code page. Have a look at common sources of complexity . Naming 101: A Programmer\u2019s Guide on How to Name Things \u21a9 Rule of 30 \u2013 When is a Method, Class or Subsystem Too Big? \u21a9 Avoid basic style errors \u21a9 Ordering Class Members by Scopes \u21a9 Separate public and private members \u21a9","title":"Index"},{"location":"clean_code/java/#utility-and-helper-classes","text":"Utility class: include only static methods and are stateless. Don\u2019t create an instance of such a class. Helper class: they can be utility classes, or it can be stateful or require an instance. It can be any class whose design is to aid another class. Try to make the name of the utility or helper class more specific (for example: AdministrationHelper , LoginHelper instead of Helper ).","title":"Utility and helper classes"},{"location":"clean_code/java/#more-tips","text":"If you use functional interfaces, use the standard java ones . If you want to understand the functional style, consult Unterstand the functional style page. If you want to use newer Java features, have a look at Modernize old code page. Have a look at common sources of complexity . Naming 101: A Programmer\u2019s Guide on How to Name Things \u21a9 Rule of 30 \u2013 When is a Method, Class or Subsystem Too Big? \u21a9 Avoid basic style errors \u21a9 Ordering Class Members by Scopes \u21a9 Separate public and private members \u21a9","title":"More tips"},{"location":"clean_code/java/java_style_guide/","text":"These are some points taken from the Google Java Style Guide that make sense in MPS . Fall-through: commented : write a comment why a fall-through is necessary in a switch statement. Default case is present : always write a default case for switch statements. Rules common to all identifiers : identifiers use only ASCII letters and digits, and, in a few cases noted below, underscores. Don\u2019t use prefixes or suffixes with particular meanings. For example, these names don\u2019t adhere to the style: name_ , mName , s_name and kName . Package names : package names are all lowercase, with consecutive words concatenated together (no underscores). For example, com.example.deepspace , not com.example.deepSpace or com.example.deep_space . Class names : should be in UpperCamelCase. Class names are typically nouns or noun phrases. For example, Character or ImmutableList . Interface names may also be nouns or noun phrases (for example, List ), but may sometimes be adjectives or adjective phrases instead (for example, Readable ). Test classes should start with the name of the class they\u2019re testing, and ending with Test. For example, HashTest or HashIntegrationTest . Method names : should be in lowerCamelCase. Method names are typically verbs or verb phrases. For example: sendMessage or stop . Underscores may appear in JUnit test method names to separate logical components of the name, with each component written in lowerCamelCase. One typical pattern is _ , for example pop_emptyStack . No correct way exists for naming test methods. Constant names : use all uppercase letters, with each word separated from the next by a single underscore Non-constant field names : non-constant field names (static or otherwise) should be lowerCamelCase . These names are typically nouns or noun phrases. For example, computedValues or index . Parameter names should be lowerCamelCase . One-character parameter names in public methods should be avoided. Local variable names should be in lowerCamelCase. Even when final and immutable, local variables are not considered to be constants, and should not be styled as constants. Type variable names : each type variable should adhere to one of two styles: a single capital letter, optionally followed by a single numeral (such as E , T , X , T2 ) or a name in the form used for classes, followed by the capital letter T (examples: RequestT , FooBarT ). Camel case: defined : tutorial on how to write camelcase Don\u2019t ignore caught exceptions (see also: Avoid empty catch blocks ) Additional java practises can be found at javapractices.com .","title":"Java style guide"},{"location":"clean_code/java/programming_principles/","text":"Programming principles \u00b6 These are some general programming principles taken from this article which can also be applied to MPS : KISS (Keep It Simple, Stupid): you may notice that developers at the beginning of their journey try to implement complicated, ambiguous design. DRY (Don\u2019t Repeat Yourself): try to avoid any duplicates, instead, you put them into a single part of the system or a method. YAGNI (You Ain\u2019t Gonna Need It): if you run into a situation where you are asking yourself, \u201cWhat about adding extra (feature, code, \u2026etc.) ?\u201d, you probably need to rethink it. Clean code over clever code : speaking of clean code, leave your ego at the door, and forget about writing clever code. Avoid premature optimization : the problem with premature optimization is that you can never really know where a program\u2019s bottlenecks will be until after the fact. Single responsibility : every class or module in a program should only concern itself with providing one bit of specific functionality. Fail fast, fail hard : the fail-fast principle stands for stopping the current operation as soon as any unexpected error occurs. Adhering to this principle generally results in a more stable solution refactoring.guru describes general Java design patterns and also includes very nice illustrations.","title":"Programming principles"},{"location":"clean_code/java/programming_principles/#programming-principles","text":"These are some general programming principles taken from this article which can also be applied to MPS : KISS (Keep It Simple, Stupid): you may notice that developers at the beginning of their journey try to implement complicated, ambiguous design. DRY (Don\u2019t Repeat Yourself): try to avoid any duplicates, instead, you put them into a single part of the system or a method. YAGNI (You Ain\u2019t Gonna Need It): if you run into a situation where you are asking yourself, \u201cWhat about adding extra (feature, code, \u2026etc.) ?\u201d, you probably need to rethink it. Clean code over clever code : speaking of clean code, leave your ego at the door, and forget about writing clever code. Avoid premature optimization : the problem with premature optimization is that you can never really know where a program\u2019s bottlenecks will be until after the fact. Single responsibility : every class or module in a program should only concern itself with providing one bit of specific functionality. Fail fast, fail hard : the fail-fast principle stands for stopping the current operation as soon as any unexpected error occurs. Adhering to this principle generally results in a more stable solution refactoring.guru describes general Java design patterns and also includes very nice illustrations.","title":"Programming principles"},{"location":"clean_code/mps/","text":"This document lists some recommendations for code written it MPS . Implementation \u00b6 Specific Languages blog: Prefer composition over inheritance Implement INamedConcept in concepts that should have a name. The name property can be automatically used as the name for root nodes, references etc. Avoid deep nested call chains, for example: nodea.nodeb.nodec.property . Consider providing a method to access a property or method for the deeper levels. Use isInstanceOf to check if a node is an instance of a concept. Use the built-in collection classes such as collections, set, list, and map ( documentation ). Use the correct type of collection 4 . Use the access language instead of directly calling ModelAccess methods. Write tests for new features and bugs that you have fixed that weren\u2019t caught by a test. Don\u2019t invoke specific features in MPS at places that don\u2019t officially support it, for example, invoking the generator in type system rules. This might not work in future versions of MPS . Null safety \u00b6 Use language checkedDots for saver access of possible null values. You can check nodes for null: node.isNull Use annotation @NotNull and @Nullable for baselanguage code. a specific type system rule in MPS checks these annotations. Use :eq: ( NPE safe equals operation) and : ne : NPE safe not equals operation instead of == and equals . Return optional values instead of null in baselanguage code 1 . Exceptions and warnings \u00b6 Use checked exceptions for recoverable conditions and run-time exceptions for programming errors 2 , 3 . Consider alternative ways of showing errors than throwing exceptions such as showing notifications . Examples for such notifications are balloons and dialogs. Attach throwable objects to logging statements if available: log error \"This is an error\" , errorObject Clean up in the finally block of a try statement. Treat warnings in MPS as errors 5 and also don\u2019t ignore warnings and errors. Warnings might become errors or even make the compilation fail in the future. Ignoring too many messages can hide real errors that you have to address. Specific Languages blog: Warnings should not replace documentation Swing components \u00b6 Use components from the IntelliJ platform. here describe some more components. Use the IntelliJ platform UI guidelines to create consistent and usable user interfaces. Capitalization: most of the short textual items (menus, buttons, labels, for example) should have headline capitalization. Capitalize all words except for common words with up to three letters ( a , an , the , and , or , so , yet , etc.), and don\u2019t appear as the first or last word. If the text isn\u2019t short, then you should use the capitalization used in ordinary prose (sentence capitalization) instead. Read the Swing tutorials to get a better understanding of the components. Multithreading and asynchronous code \u00b6 Be careful with multithreading code in any of the language aspects. It\u2019s better placed in an action or background task. When asynchronous code freezes (for example: on the console), try to call it with ApplicationManager.getApplication().invokeLater(runnable) . Use tasks for asynchronous work or work that takes a long time. Miscellaneous \u00b6 Be careful when using unicode inside MPS . It might break something ( MPS -33687 , MPS -31835 ). Use gradle for build scripts ( minimal example ). Do not leave debug statements in production code (exception: debug log statements). Return Optional not null \u21a9 Java Best Practices Quick Reference \u21a9 Checked versus unchecked exceptions \u21a9 Choosing the right Collection \u21a9 Treat Warnings As Errors \u21a9","title":"Index"},{"location":"clean_code/mps/#implementation","text":"Specific Languages blog: Prefer composition over inheritance Implement INamedConcept in concepts that should have a name. The name property can be automatically used as the name for root nodes, references etc. Avoid deep nested call chains, for example: nodea.nodeb.nodec.property . Consider providing a method to access a property or method for the deeper levels. Use isInstanceOf to check if a node is an instance of a concept. Use the built-in collection classes such as collections, set, list, and map ( documentation ). Use the correct type of collection 4 . Use the access language instead of directly calling ModelAccess methods. Write tests for new features and bugs that you have fixed that weren\u2019t caught by a test. Don\u2019t invoke specific features in MPS at places that don\u2019t officially support it, for example, invoking the generator in type system rules. This might not work in future versions of MPS .","title":"Implementation"},{"location":"clean_code/mps/#null-safety","text":"Use language checkedDots for saver access of possible null values. You can check nodes for null: node.isNull Use annotation @NotNull and @Nullable for baselanguage code. a specific type system rule in MPS checks these annotations. Use :eq: ( NPE safe equals operation) and : ne : NPE safe not equals operation instead of == and equals . Return optional values instead of null in baselanguage code 1 .","title":"Null safety"},{"location":"clean_code/mps/#exceptions-and-warnings","text":"Use checked exceptions for recoverable conditions and run-time exceptions for programming errors 2 , 3 . Consider alternative ways of showing errors than throwing exceptions such as showing notifications . Examples for such notifications are balloons and dialogs. Attach throwable objects to logging statements if available: log error \"This is an error\" , errorObject Clean up in the finally block of a try statement. Treat warnings in MPS as errors 5 and also don\u2019t ignore warnings and errors. Warnings might become errors or even make the compilation fail in the future. Ignoring too many messages can hide real errors that you have to address. Specific Languages blog: Warnings should not replace documentation","title":"Exceptions and warnings"},{"location":"clean_code/mps/#swing-components","text":"Use components from the IntelliJ platform. here describe some more components. Use the IntelliJ platform UI guidelines to create consistent and usable user interfaces. Capitalization: most of the short textual items (menus, buttons, labels, for example) should have headline capitalization. Capitalize all words except for common words with up to three letters ( a , an , the , and , or , so , yet , etc.), and don\u2019t appear as the first or last word. If the text isn\u2019t short, then you should use the capitalization used in ordinary prose (sentence capitalization) instead. Read the Swing tutorials to get a better understanding of the components.","title":"Swing components"},{"location":"clean_code/mps/#multithreading-and-asynchronous-code","text":"Be careful with multithreading code in any of the language aspects. It\u2019s better placed in an action or background task. When asynchronous code freezes (for example: on the console), try to call it with ApplicationManager.getApplication().invokeLater(runnable) . Use tasks for asynchronous work or work that takes a long time.","title":"Multithreading and asynchronous code"},{"location":"clean_code/mps/#miscellaneous","text":"Be careful when using unicode inside MPS . It might break something ( MPS -33687 , MPS -31835 ). Use gradle for build scripts ( minimal example ). Do not leave debug statements in production code (exception: debug log statements). Return Optional not null \u21a9 Java Best Practices Quick Reference \u21a9 Checked versus unchecked exceptions \u21a9 Choosing the right Collection \u21a9 Treat Warnings As Errors \u21a9","title":"Miscellaneous"},{"location":"clean_code/mps/deprecation/","text":"Don\u2019t use commands from the access language without a repository (see: access language ). Don\u2019t use node/myNode . Use node-ptr (myNode).resolve(repository) instead. Don\u2019t use model/myModel . Use model-ptr (myModel).resolve(repository) instead. Don\u2019t use module/myModule or language-module . Use module-reference/myModule instead. Don\u2019t use linkNode/concept:link/ . Use link:concept:link/ instead. Don\u2019t use conceptNode/concept/ . Use concept/concept/ instead. Don\u2019t use node.delete . Use node.detach instead. Don\u2019t use node.containingRole . Use node.getContainmentLink instead. Don\u2019t use interface the IDon\u2019tSubstituteByDefault . Create an empty default substitute menu for the concept instead. Don\u2019t use print , System . out or System . err for logging. Use log for low-level logging or message for high-level logging instead. Use the explicit presentation of a node when used in a string. For example: \"my node: \" + node . getPresentation () instead of \"my node: \" + node . Don\u2019t use counter variable in LoopMacro. Use LOOP index in code instead. Don\u2019t use IOperationContext . You can find more info in the attached comment of the interface. Avoid getting the repository from the opened project or using the global repository. The code might break in the future.","title":"Deprecation"},{"location":"clean_code/mps/readability_maintainability/","text":"Use enhanced for loops instead of for loops with counters: for ( type variable : iterable ) and foreach variable in iterable Mark classes/concepts etc. as deprecated when you shouldn\u2019t use them. DeprecatedNodeAnnotation DeprecatedBlockDocTag Java Deprecated annotation Use the text TODO in comments. The TODO tool can find these strings. Check for redundant variable initializers (type system warning). Use empty lines between statements (for example method declarations) for readability. Use virtual packages to organize your code.","title":"Readability/maintainability"},{"location":"home/console/","text":"I can\u2019t enter the print statement. It can\u2019t be used in nested structures. Use it at the top level instead. How can you enter more than one statement into the console? Enter an opening curly brace (this starts a new statement list in baselanguage) and enter your statements. How can you find all System.out.println statements? Code snippet: ] #nodes, #models, #usages etc. don\u2019t show any result. What went wrong? Make sure that your query is correct. You also have to set a scope for these statements in square brackets such as # nodes < scope = global > to find all the nodes in the global scope. Is the console a regular root node? Yes, it is of concept ConsoleRoot and is located in a temporary model. It is possible to open it in a normal tab. Right-click in the console (for example at the top) and click Show Node in Explorer . Click the ConsoleRoot and it will open in a new tab (keyboard shortcuts such as run line won\u2019t work here). After executing the current line, an error says that the console class wasn\u2019t found. This can happen when the compilation of the model of the console was not successful. It can happen if you import a custom generation plan into the console that disables some generators. It can also happen if you import a solution that doesn\u2019t have the java facet enabled or has a different solution kind such as other . What does the expression #internalMode do? It tells you if the internal mode is activated. It can be achieved by calling RuntimeFlags.setInternalMode(true) or by setting a system variable. Start MPS with argument -Dmps.internal = true or add mps.internal = true to the mps.vmoptions file: use Main menu -> Help -> Edit Custom VM Options . The exact functionality of this flag can be found by looking at the MPS source code . One of the new action groups that it adds, is called Internal . There is also an Internal Actions Menu in Intellij IDE \u2018s. Consolute the documentation for more info . How do you open the selected node in console? Given I have a node selected in the editor. How can I select it to manipulate it in the MPS console? asked by: @aquapp You can simply copy the node and paste it into the console: Copy a node in the editor ( Cmd + C or Ctrl + C ) Go to the console. Paste the content ( Cmd + V or Ctrl + V ) MPS pastes a node reference that you can use to directly manipulate the node: answered by: @coolya","title":"Console"},{"location":"home/debugging/","text":"Debugging \u00b6 For more in-depth explanations, visit: Specific Languages blog: Debugging in MPS DSL Foundry: Whitepaper on Debugging in MPS The following list shows some debugging tips: The menu entry Tools \u2192 Internal Actions provides many useful debugging features, for example, the UI Inspector (Swing debugging). Right-click \u2192 Preview Generated Text : show the result of the M2T transformation (for example generated code) for the current node Inspect Node: right-click \u2192 Show Node in Explorer Inspector: right-click \u2192 Inspect Node Right-click \u2192 Language Debug Show Type : show type system type of current node. Rule which caused Error : find Checking-Rule/Constraint, which caused an error. Cell in Explorer : debug editor cells and collections. Generation Traceback : debug the generator. In transient models you can find the source node for the generated (intermediate) node. Find Action: Help \u2192 Find Action or Ctrl + Shift + A if you forgot the name of your action. Changing IDE settings Two locations: bin folder ( MPS / IDE folder) and Preferences folder (overwrites bin-folder) JVM : bin/mps.vmoptions (RAM/Xmx, debugger port, \u2026) Log-level (Log4J): bin/log.xml IDEA properties: bin/idea.properties: change default paths, advanced IDE settings Log file: is stored in the logs folder, e.g. Logs/<My-MPS-/My-RCP-Identifier>/idea.log How do I debug action maps? Set a breakpoint in CellActionExecutorFinder . Free Java debugging tools \u00b6 VisualVM display process configuration and environment (e.g. Java/ MPS version, JVM arguments, system properties) monitor process performance And memory (e.g. CPU/heap usage, loaded classes, threads) visualize process threads (e.g. dispatch thread) profile performance And memory usage (e.g. CPU usage) take and display thread dumps (e.g. find deadlocks ) take and browse heap dumps (e.g. find memory leaks) analyze core dumps (e.g. crashed Java processes) Memory Analyzer (MAT) find memory relates issues such as memory leaks JDK Mission Control troubleshoot memory leaks troubleshoot performance issues using flight recorder jstack.review - Java Thread Dump Analyzer Decompiler \u00b6 Decompiling jar files usually shouldn\u2019t be necessary because the source code of MPS , IntelliJ Community , JetBrainsRuntime ,and the MPS platforms is open source and available on GitHub. For all other cases, use the JD Java Decompiler . There is also an IntelliJ plugin for it. General Blog posts \u00b6 24 debugging tips and tricks The Debugger Checklist \u2013 Part I The Debugger Checklist \u2013 Part II Debugging tips 10 Debugging Tips for Beginners","title":"Debugging"},{"location":"home/debugging/#debugging","text":"For more in-depth explanations, visit: Specific Languages blog: Debugging in MPS DSL Foundry: Whitepaper on Debugging in MPS The following list shows some debugging tips: The menu entry Tools \u2192 Internal Actions provides many useful debugging features, for example, the UI Inspector (Swing debugging). Right-click \u2192 Preview Generated Text : show the result of the M2T transformation (for example generated code) for the current node Inspect Node: right-click \u2192 Show Node in Explorer Inspector: right-click \u2192 Inspect Node Right-click \u2192 Language Debug Show Type : show type system type of current node. Rule which caused Error : find Checking-Rule/Constraint, which caused an error. Cell in Explorer : debug editor cells and collections. Generation Traceback : debug the generator. In transient models you can find the source node for the generated (intermediate) node. Find Action: Help \u2192 Find Action or Ctrl + Shift + A if you forgot the name of your action. Changing IDE settings Two locations: bin folder ( MPS / IDE folder) and Preferences folder (overwrites bin-folder) JVM : bin/mps.vmoptions (RAM/Xmx, debugger port, \u2026) Log-level (Log4J): bin/log.xml IDEA properties: bin/idea.properties: change default paths, advanced IDE settings Log file: is stored in the logs folder, e.g. Logs/<My-MPS-/My-RCP-Identifier>/idea.log How do I debug action maps? Set a breakpoint in CellActionExecutorFinder .","title":"Debugging"},{"location":"home/debugging/#free-java-debugging-tools","text":"VisualVM display process configuration and environment (e.g. Java/ MPS version, JVM arguments, system properties) monitor process performance And memory (e.g. CPU/heap usage, loaded classes, threads) visualize process threads (e.g. dispatch thread) profile performance And memory usage (e.g. CPU usage) take and display thread dumps (e.g. find deadlocks ) take and browse heap dumps (e.g. find memory leaks) analyze core dumps (e.g. crashed Java processes) Memory Analyzer (MAT) find memory relates issues such as memory leaks JDK Mission Control troubleshoot memory leaks troubleshoot performance issues using flight recorder jstack.review - Java Thread Dump Analyzer","title":"Free Java debugging tools"},{"location":"home/debugging/#decompiler","text":"Decompiling jar files usually shouldn\u2019t be necessary because the source code of MPS , IntelliJ Community , JetBrainsRuntime ,and the MPS platforms is open source and available on GitHub. For all other cases, use the JD Java Decompiler . There is also an IntelliJ plugin for it.","title":"Decompiler"},{"location":"home/debugging/#general-blog-posts","text":"24 debugging tips and tricks The Debugger Checklist \u2013 Part I The Debugger Checklist \u2013 Part II Debugging tips 10 Debugging Tips for Beginners","title":"General Blog posts"},{"location":"home/external_files_and_tools/","text":"Import/export \u00b6 How do you write an importer? Specific Languages Blog: Writing an importer: Introduction Specific Languages Blog: Writing an importer: Adding the action to a menu Specific Languages Blog: Writing an importer: Invoking from the editor Specific Languages Blog: Writing an importer: Error handling considerations Specific Languages Blog: Writing an importer: Updating existing nodes Alternative solution: use custom persistence . How do you deal with errors when writing an importer? Create a new tab in the messages view and show the errors. Create error concepts in the language. If the import fails for a particular node, it can be replaced with one of these error nodes in the output model and some error message can be appended. By doing this you can also implement checking rules for the error nodes so that they errors also are displayed as part of model checking. You can also use finders to find all occurrences of errors in the model. Is there a wizard available to set up an MPS language based on an XML schema (defined in .xsd files)? No, not possible at the moment but you can create new projects from local or GitHub hosted templates with Lochkarte . Where do you put JARs? Specific Languages blog: Where do I put my JARs? Tools \u00b6 How can you run an LSP server for MPS grammars? There is no support for this in IntelliJ products (see IDEABKL-7409 ) and also no implementation exist in MPS . How can you use databases in MPS ? MPS doesn\u2019t have any special support for databases or for frameworks such as Spring Boot (unlike IntelliJ IDEA) . Specific Languages blog: MPS is not a (relational) database How can you create a standalone utility (not a complete IDE ) for language generation with MPS ? 2 This is not possible at the moment but you can interact with MPS models from Java when you setup the necessary dependencies: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import jetbrains.mps.smodel.ModelAccess ; import jetbrains.mps.tool.environment.EnvironmentConfig ; import jetbrains.mps.project.Project ; import jetbrains.mps.tool.environment.MpsEnvironment ; import org.jetbrains.mps.openapi.model.SModel ; import org.jetbrains.mps.openapi.module.SModule ; import java.io.File ; public class Test { static String projectDir = \"your MPS project path\" ; public static void main ( String [] args ) { EnvironmentConfig config = EnvironmentConfig . emptyConfig (); MpsEnvironment ourEnv = new MpsEnvironment ( config ); ourEnv . init (); Project myProject = ourEnv . openProject ( new File ( projectDir )); myProject . getModelAccess (). runReadAction (() -> { for ( SModule module : myProject . getProjectModules ()) { for ( SModel model : module . getModels ()) { System . out . println ( model . getName ()); } } }); } } How can you share MPS snippets? You can use Skadi Cloud Gists . How can you run MPS in the browser? You can try Skadi Cloud . There is also Modelix and JetBrains Projector . How can you embed a web browser in MPS ? Since Intellij 2020.1 it is possible to use the Java Chromium Embedded Framework . Create a new swing component in the editor: 1 2 JBCefBrowser myBrowser = new JBCefBrowser ( myUrl ); return myBrowser . getComponent (); MPS forum - How to migrate existing data into MPS ? \u21a9 MPS forum - Standalone language generator \u21a9","title":"External files and tools"},{"location":"home/external_files_and_tools/#importexport","text":"How do you write an importer? Specific Languages Blog: Writing an importer: Introduction Specific Languages Blog: Writing an importer: Adding the action to a menu Specific Languages Blog: Writing an importer: Invoking from the editor Specific Languages Blog: Writing an importer: Error handling considerations Specific Languages Blog: Writing an importer: Updating existing nodes Alternative solution: use custom persistence . How do you deal with errors when writing an importer? Create a new tab in the messages view and show the errors. Create error concepts in the language. If the import fails for a particular node, it can be replaced with one of these error nodes in the output model and some error message can be appended. By doing this you can also implement checking rules for the error nodes so that they errors also are displayed as part of model checking. You can also use finders to find all occurrences of errors in the model. Is there a wizard available to set up an MPS language based on an XML schema (defined in .xsd files)? No, not possible at the moment but you can create new projects from local or GitHub hosted templates with Lochkarte . Where do you put JARs? Specific Languages blog: Where do I put my JARs?","title":"Import/export"},{"location":"home/external_files_and_tools/#tools","text":"How can you run an LSP server for MPS grammars? There is no support for this in IntelliJ products (see IDEABKL-7409 ) and also no implementation exist in MPS . How can you use databases in MPS ? MPS doesn\u2019t have any special support for databases or for frameworks such as Spring Boot (unlike IntelliJ IDEA) . Specific Languages blog: MPS is not a (relational) database How can you create a standalone utility (not a complete IDE ) for language generation with MPS ? 2 This is not possible at the moment but you can interact with MPS models from Java when you setup the necessary dependencies: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import jetbrains.mps.smodel.ModelAccess ; import jetbrains.mps.tool.environment.EnvironmentConfig ; import jetbrains.mps.project.Project ; import jetbrains.mps.tool.environment.MpsEnvironment ; import org.jetbrains.mps.openapi.model.SModel ; import org.jetbrains.mps.openapi.module.SModule ; import java.io.File ; public class Test { static String projectDir = \"your MPS project path\" ; public static void main ( String [] args ) { EnvironmentConfig config = EnvironmentConfig . emptyConfig (); MpsEnvironment ourEnv = new MpsEnvironment ( config ); ourEnv . init (); Project myProject = ourEnv . openProject ( new File ( projectDir )); myProject . getModelAccess (). runReadAction (() -> { for ( SModule module : myProject . getProjectModules ()) { for ( SModel model : module . getModels ()) { System . out . println ( model . getName ()); } } }); } } How can you share MPS snippets? You can use Skadi Cloud Gists . How can you run MPS in the browser? You can try Skadi Cloud . There is also Modelix and JetBrains Projector . How can you embed a web browser in MPS ? Since Intellij 2020.1 it is possible to use the Java Chromium Embedded Framework . Create a new swing component in the editor: 1 2 JBCefBrowser myBrowser = new JBCefBrowser ( myUrl ); return myBrowser . getComponent (); MPS forum - How to migrate existing data into MPS ? \u21a9 MPS forum - Standalone language generator \u21a9","title":"Tools"},{"location":"home/general/","text":"Who is MPS for? Specific Languages blog: Who is MPS for? I am a MPS beginner. Where do I start? If you are new to MPS and want to learn more about MPS , start with the following links: Learn MPS | official JetBrains landing page Get started with MPS | mps.rocks Learning MPS | mps.rocks Is there a high level presentation that I can have a look at? Yes, there is a presentation from 2020 by V\u00e1clav Pech . What are the most important shortcuts? F1RE blog: JetBrains MPS Shortcuts What can you do if a problem occurs that isn\u2019t in this list? Try invalidating the cache and restarting MPS (same menu). Search the forum and issue tracker . Ask a question on Slack . I changed something in a settings page and nothing changed. There might be a bug related to caching. Reopening the dialog, invalidating the cache or restarting the project might help. Which standard IDE settings should you change? The maximum heap size setting should be changed to a higher values such as 8 GB when using many languages or plugins. Another reason for high memory usage can be many (poorly) implemented checking rules. I am running low on memory or the IDE is running slow. What can you do without restarting MPS ? When you have enabled the loaded models indicator in the lower right corner of the screen, you can click on the text to unload not needed models . The memory indicator at the same location can be used to free memory. As a last resort the power saving mode can be enabled which disables background tasks such as the model checker (not recommended). What\u2019s the difference between a module and a model? Specific Languages blog: Ambiguous terms: Modules and models What\u2019s a SRepository and how\u2019s it structured? The answer can be found in the MPS source code .Multiple repositories could be available in the feature. Given a repository, references to modules/models/nodes can be resolved. There\u2019s no need in making ids unique globally as each subsystem knows, which exact repository it needs to use at any moment. (e.g. the type-system knows where it stores its type-nodes, so it will not try to resolve references to them ) A repository contains modules, modules have model roots, each model root can load models. Also a module can be a models container itself (without model root). A model is then a set of root nodes. Each root node is a root of a tree of nodes, So that overall, a repository is a tree structure. Is there an existing expression/scripting language? There is the expressions sample project. For a full language that can also be evaluated, have a look at KernelF available at IETS3 . How do you organize large projects in MPS ? Read the two answers in this thread . How do you debug MPS projects? Have a look at this blog post or this guide . Where are the log messages? log info logs to the MPS log file idea.log , message info logs to the messages view . Which log level should you use? Have a look at this Stack Overflow answer . How to you export data from MPS ? Specific Languages blog: The simplest way to export your data from MPS Specific Languages blog: Good and bad ways of exporting DSL models Specific Languages blog: Translation vs export Why is a project read-only? Specific Languages blog: Why is my project suddenly read-only? How do you work with more than one project in MPS ? Given I want to work on a MPS project that uses other projects and I want to switch between tasks that sometimes need changes on both, in the dependent project and the root project. I would like to switch back and forth between using the default prepackaged project dependencies and my own repository of them where I build them myself. How could I do that? Option 0 : Open multiple projects in MPS at the same time Works when doing small changes fast unreliable: when changing dependencies in my source models, this leads to a reload operation on the repository, which sometimes messes up the loaded repository and caches Option 1 : Publish and pull from local maven ( IETS3 ) reliable example gradle script needs to be told to pull from local repository \u2013 e.g. by providing -PforceLocalDependencies to IETS3 \u2013 or use dependency overrides Option 3 : Changing project libraries does not affect command line builds Option 3a : Command line setup Task ( IETS3 ) We usually have a ./gradlew setup task in our projects that replaces your .mps/libraries.xml . When you want to change the project, you\u2019ll need to change the configuration of that command line setup task and rerun it. Option 3b : MPS Path variables in settings (deprecated) In the MPS setttings, you can configure path variables that can be used in .mps/libraries.xml to pinpoint to the location of a target project. They will only configure the MPS behavior and not affect the command line builds. So in most cases, you don\u2019t want to use them and instead let your build script setup these files. contributed by: @abstraktor Why is MPS shipped with JBR instead of using an installed JDK / JRE ? JBR is a fork of OpenJDK with specific bugfixes and improvements for JetBrains IDEs. More info can be found in JetBrains/JetBrainsRuntime . In some of the platform build scripts the environment ariable JB_JAVA11_HOME can be used to set the JDK home. For older MPS versions that used Java 8, there was the environment variable JB_JAVA11_HOME . Are there any resources/communities about domain-specific languages and MPS ? DSL & MPS books from Markus Voelter The complete guide to (external) Domain Specific Languages 68 Resources To Help You To Create Programming Languages Strumenta Virtual Meetups","title":"General"},{"location":"home/platform_specific_bugs/","text":"Native crashes \u00b6 Native crashes are crashes where MPS crashes internally (C/C++ code) and shows an error dialog. First search the following Youtrack projects: MPS : MPS related crashes IntelliJ IDEA : IntelliJ (platform) related crashes JetBrains Runtime : mostly UI and JCEF related issues For crashes on MacOS, have a look at Identifying the Cause of Common Crashes | developer.apple.com . Windows \u00b6 Compilation from the command line might fail due to none ASCII chars. The error message looks something like this: 1 [generate] NewLanguage\\behavior\\rtzj__BehaviorDescriptor.java : Invalid character constant (line: 27) If this happens, set the environment variable JAVA_TOOL_OPTIONS to -Dfile.encoding = UTF8 ( MPS -23526 ). Tests are failing with a message, that a filename or extension is too long (Windows). The error message looks like this: Caused by: java.io.IOException: CreateProcess error=206, The filename or extension is too long . It can also look like this: Process fork failed. There is a path that is too long for Windows in the build script. Choose the option compressArgs in test modules node to fix the issue ( MPS -24137 ). Mac \u00b6 How do I get my defined environment variables? Execute printenv on a shell. Using com.mbeddr.mpsutil.datepicker doesn\u2019t work when look and feel is set to macOS Light. Use the default light theme. There is no other workaround at the moment ( MPS -3388 , MBEDDR-2203 ). Can\u2019t find TBItem with uid \u2018XY\u2019. This is a MacBook Pro with touchbar related issue. No workaround at the moment ( MPS -31728 ). What other active bugs are there? Standalone application: impossible to define application icon ( MPS -32971 ) Linux \u00b6 Autocompleting doesn\u2019t work with MPS + i3 (linux window manager). No solution at the moment ( MPS -30499 ). Completion menu on wrong screen in multi monitor setup (linux+i3). No solution at the moment ( MPS -33689 ).","title":"OS-specific bugs"},{"location":"home/platform_specific_bugs/#native-crashes","text":"Native crashes are crashes where MPS crashes internally (C/C++ code) and shows an error dialog. First search the following Youtrack projects: MPS : MPS related crashes IntelliJ IDEA : IntelliJ (platform) related crashes JetBrains Runtime : mostly UI and JCEF related issues For crashes on MacOS, have a look at Identifying the Cause of Common Crashes | developer.apple.com .","title":"Native crashes"},{"location":"home/platform_specific_bugs/#windows","text":"Compilation from the command line might fail due to none ASCII chars. The error message looks something like this: 1 [generate] NewLanguage\\behavior\\rtzj__BehaviorDescriptor.java : Invalid character constant (line: 27) If this happens, set the environment variable JAVA_TOOL_OPTIONS to -Dfile.encoding = UTF8 ( MPS -23526 ). Tests are failing with a message, that a filename or extension is too long (Windows). The error message looks like this: Caused by: java.io.IOException: CreateProcess error=206, The filename or extension is too long . It can also look like this: Process fork failed. There is a path that is too long for Windows in the build script. Choose the option compressArgs in test modules node to fix the issue ( MPS -24137 ).","title":"Windows"},{"location":"home/platform_specific_bugs/#mac","text":"How do I get my defined environment variables? Execute printenv on a shell. Using com.mbeddr.mpsutil.datepicker doesn\u2019t work when look and feel is set to macOS Light. Use the default light theme. There is no other workaround at the moment ( MPS -3388 , MBEDDR-2203 ). Can\u2019t find TBItem with uid \u2018XY\u2019. This is a MacBook Pro with touchbar related issue. No workaround at the moment ( MPS -31728 ). What other active bugs are there? Standalone application: impossible to define application icon ( MPS -32971 )","title":"Mac"},{"location":"home/platform_specific_bugs/#linux","text":"Autocompleting doesn\u2019t work with MPS + i3 (linux window manager). No solution at the moment ( MPS -30499 ). Completion menu on wrong screen in multi monitor setup (linux+i3). No solution at the moment ( MPS -33689 ).","title":"Linux"},{"location":"home/plugins/","text":"Where can you use a created language? 2 They can be used in MPS itself, or in a custom IDE based on MPS (a so called RCP ). Are MPS language often used as plugins in Intellij IDEs instead of MPS itself? (an IntelliJ IDEA plugin, not custom RCP ) No, this functionality is not used very often. How can you find plugins on the JetBrains marketplace that are usable in MPS ? Searching for the word MPS in all categories should do the trick. Why do many IntelliJ plugins don\u2019t work with MPS ? Many of these plugins operate on lines in a text editor. MPS uses projectional editors which are not normal text editors. It doesn\u2019t use documents and the PSI because MPS models are not text based. Using plugins that are not developed for MPS can interfere with certain features of MPS (e.g. find usages isn\u2019t working anymore). Are there any general purpose plugins for MPS from the community? Have a look at the plugin section of mps.rocks . Which kinds of plugins are there? Specific Languages Blog: Two kinds of MPS plugins How do I disable notifications for fatal errors? Add idea.fatal.error.notification = disabled to idea.properties . Are there existing projects regarding MPS on the web? Have a look at deployment options for MPS , this list and WebMPS by JetBrains. Specific Languages Blog: Web-based projectional editing is moving forward Specific Languages Blog: MPSServer and WebEditKit How do you translate every part of MPS ? 1 Install a language pack for Intellij. Hardcoded parts of MPS can\u2019t be translated. There are also known bugs with extented characters ( MPS -31835 ) and unicode in general in case you want to use special characters. Further information can be found in this article: Localizing an IntelliJ Plugin . Can you get information about a MPS installation via an HTTP request? Yes, this is possible through the IntelliJ Platform REST API : Send a GET request (or enter it into the browser address bar): http://localhost:63342/api/about?more=true . Make sure that you don\u2019t have IntelliJ opened at the same time as it has the same API. Example output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"name\" : \"MPS 2021.2.5\" , \"productName\" : \"MPS\" , \"baselineVersion\" : 212 , \"buildNumber\" : \"212.5284.1355\" , \"vendor\" : \"JetBrains s.r.o.\" , \"isEAP\" : false , \"productCode\" : \"MPS\" , \"buildDate\" : 1647561654804 , \"isSnapshot\" : false , \"configPath\" : \"/Users/user/Library/Application Support/JetBrains/MPS2021.2\" , \"systemPath\" : \"/Users/user/Library/Caches/JetBrains/MPS2021.2\" , \"binPath\" : \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents/bin\" , \"logPath\" : \"/Users/user/Library/Logs/JetBrains/MPS2021.2\" , \"homePath\" : \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents\" } How can you compare two nodes? Select them in the logical view, right-click \u2192 Compare two nodes . Use the language com.mbeddr.mpsutil.nodediff : Select first node: Set as First Node in Diff . Select second node: Show Diff with First Node . jetbrains.mps.module.ModuleClassLoaderIsNullException: ClassLoader of module XY could not be found. Make sure that the solution kind is not set to none. Any way to translate the whole MPS ? \u21a9 MPS forum - Plugin \u21a9","title":"Plugins"},{"location":"home/rcp/","text":"RCP stands for Rich Client Platform. The topic is explained in Building standalone IDEs for your languages | MPS . A plugin is incompatible with the current RCP version. Specific Languages blog: Fixing the \u2018Plugin incompatible with the current [CUSTOM RCP ] version\u2019 error How can you customize the welcome screen in an RCP ? Specific Languages blog: Customizing your RCP welcome screen: removing unwanted tabs The used library xml-patch uses XPath path selectors. A cheat sheet for the syntax can be found here . Specific Languages blog: Customizing your RCP welcome screen: stripping down even further Specific Languages blog: A fully custom welcome screen How can you reduce the size of an RCP ? Remove all packaged plugins that you don\u2019t need Use a JBR version without JCEF if you don\u2019t need an embedded browser (jbr_nomod). How can I deactivate a preference page? Remove the plugin that contains the preference page. For SPreference pages: they are project plugins, so you can find them through ProjectPluginManager . getPlugins and then call dispose or you could unregister the preference pages itself. For example: 1 2 3 4 Project ideaProject = ProjectPluginManager . getInstance ( ProjectHelper . toIdeaProject ( # project ); list < BaseProjectPlugin > plugins = new arraylist < BaseProjectPlugin > ( copy : ideaProject . getPlugins ()); BaseProjectPrefsComponent component = plugins . findFirst ({ ~ it => it . toString (). startsWith ( \"path_to_your._ProjectPlugin\" ); }). getPrefsComponents () get ( 0 ); component . getPages (). get ( 0 ). unregister (); For preference forms: they can be found through Configurable . APPLICATION_CONFIGURABLE . getPoint (). getExtensionList and removed by calling unregisterExtension . How can you replace the logical view on the left side with a custom one? Use the class com.mbeddr.mpsutil.projectview from MPS -extensions . You can find an example that replicates the logical view in mbeddr . How can you tell which IntelliJ version MPS runs with? Given I want to know, which version of IntelliJ Community my MPS is built from. How can I know? mbeddr : The easiest way to get the correct platform for an MPS version is by running ant in the root of your MPS sources: ant -f build/getDependencies.xml download-platform It will place the platform in the folder mps-platform of the repository and is automatically imported into the intelliJ project where you can read the sources and also step into them when debugging. In case you\u2019re looking at an RCP : /build.number provides this information and more, eg idea.platform.build.number=MPS\u2014203.7717.56 . The platform version is part of the build information e.g. MPS \u2014211.7442.1291 To get the baseline version e.g. 211, programatically: ApplicationInfo . getInstance (). getBuild (). getBaselineVersion () To get the full version e.g. 211.7442.1291, programatically: ApplicationInfo . getInstance (). getBuild (). currentVersion (). asString () How can you show a custom implemented project view instead of the MPS logical view? Assume that the view was build with com.mbeddr.mpsutil.projectview : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 SwingUtilities . invokeLater ( new Runnable () { public void run () { list < AbstractProjectViewPane > viewsToRemove = new linkedlist < AbstractProjectViewPane > ; ProjectView projectView = ProjectView . getInstance ( project . getProject ()); foreach paneID in projectView . getPaneIds () { if ( paneID . endsWith ( ProjectViewHelper . YOUR_PROJCET_VIEW_ID )) { if ( ! projectView . getCurrentViewId (). equals ( paneID )) { projectView . changeView ( paneID ); } } else if ( this . viewsToKeep . asSequence . any ({ ~ it => paneID . endsWith ( it ); })) { continue ; } else { viewsToRemove . add ( projectView . getProjectViewPaneById ( paneID )); } } viewsToRemove . forEach ({ ~ it => projectView . removeProjectPane ( it ); it . dispose (); }); ProjectPane . getInstance ( project ). activate (); } }) How can you customise the New Roots (mbeddr.platform) or New dialog of MPS /mbeddr? 1 CreateRootFilterEP . getInstance (). addFilter how to change (or turn off) the exception submission dialog? Remove all error handlers like this . Remove <appender name=\"DIALOG\" class=\"com.intellij.diagnostic.DialogAppender\"> from the log.xml file. This will also disable the error pop ups in the IDE where you can see the exception. Where can you find the latest MPS and IntelliJ icons? MPS : mps-icons IntelliJ: Icons list How can you restart MPS programmatically? 1 2 ApplicationEx app = ApplicationManagerEx . getApplicationEx (); app . restart ( true , true ); How can I install a custom editor color scheme? Follow the guideline Export IntelliJ editor themes as plugins | JetBrains blog to export a jar file. You can copy this JAR file to the plugins folder of the RCP . You can enable the color scheme by default with the following code in an applicaiton plugin: 1 2 EditorColorsScheme colorScheme = EditorColorsManager.getInstance().getAllSchemes().asSequence.findFirst({~it => it.getDisplayName() :eq: \"[NAME_OF_YOUR_SCHEME]\"; }); EditorColorsManager.getInstance().setGlobalScheme(colorScheme); How to you disable an MPS /Intellij tool window? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Project ideaProject = ProjectHelper . toIdeaProject ( project ); // MPS tool BaseTool mpsTool = ideaProject . tool < YourTool > ; if ( mpsTool != null && mpsTool . isAvailable ()) { mpsTool . makeUnavailable (); } // IntelliJ Tool /* The toolID can be found through ToolWindowManager.getInstance(ProjectHelper.toIdeaProject(#project)).getToolWindowIds().asSequence on the console*/ ToolWindow toolWindow = ToolWindowManager . getInstance ( ideaProject ). getToolWindow ( toolID ) if ( toolWindow . isAvailable ()) { toolWindow . remove (); } How do you add an action to the menu bar of an IntelliJ tool window? Example base on the project view: 1 2 3 4 ToolWindow window = ToolWindowManager . getInstance ( myProject ). getToolWindow ( ToolWindowId . PROJECT_VIEW ); if ( window != null ) { window . setTitleActions ( titleActions ); } How can you set the position of a tool window? Example based on the MPS inspector: ```Java InspectorTool inspectorTool = ideaProject.getComponent(InspectorTool.class); if (inspectorTool != null) { ToolWindow inspectorToolWindow = inspectorTool.getToolWindow(); inspectorToolWindow.setAnchor(ToolWindowAnchor.RIGHT, null); }","title":"RCP"},{"location":"home/trouble_shooting_guide/","text":"Troubleshooting guide \u00b6 This is a non-exhaustive list of common problems with MPS and platform projects. It is assumed that Gradle is used for building the project. MPS \u00b6 The IDE is sluggish and doesn\u2019t work the way it should. Edit the file mps(64).vmoptions and give it sufficient heap space: -Xmx8g MPS behaves strange. For instance: claims that a method is missing, although it exists.* Tools \u2192 Reload All Classes . File \u2192 Invalidate Caches , then restart. File \u2192 Invalidate Caches , shutdown MPS ; in the repository in question: run git clean -fxd -e build.properties -e gradle.properties , rebuild with Gradle ( ./gradlew ), restart MPS . MPS cannot find languages / solutions. For instance: \u201clanguage X is not deployed\u201d errors. File \u2192 Invalidate Caches , shutdown MPS . Run ./gradlew setup --refresh-dependencies . Start MPS again. The IDE doesn\u2019t let you enter some text / an intention isn\u2019t visible that should be there. Check: was the intention disabled by the user by accident? In this case, the intention can be enabled through preferences \u2192 MPS intentions and manually searching for the disabled intention: Check: is the concept / intention visible in the model? (open a context menu where baselanguage code is allowed and search for classes / concepts from the same language) \u2192 Use Edit \u2192 Add Language Import to import the language containing the concept / the intention. Check the concept: is the type of the concept suitable for the place where you want to create an instance? Does it implement the right interface? Check the intention: is the isApplicable () -method called? (add a System . err . println () to the method and check what MPS outputs) \u2192 The intention is most probably not visible in the model \u2192 see above \u2192 Make sure the method returns true Concept: does a constraint on one of the ancestor-nodes prohibit you from creating it? MPS build fails. Does the MPS Model-Checker report problems? \u2192 Fix identified problems. Does the build log report intelligible problems? \u2192 Fix identified problems. Does it build in Gradle? \u2192 See: Gradle-Build fails . Gradle \u00b6 Gradle build fails. Did you call git clean -fxd -e build.properties before ./gradlew ? \u2192 Do it, retry. Did you call ./gradlew with --refresh-dependencies ? \u2192 Retry with --refresh-dependencies . Does the error message start with \u201cdependencies should be extracted into build script\u201d? In MPS , apply the model-checker to the \u201c_build\u201d-package. Many problems can be fixed by applying the intention \u201cReload modules from disk\u201d. Rebuild the \u201c_build\u201d-package. Retry the gradle build. Do you have local changes? \u2192 Use git stash to stash them away, retry. When the build works without your changes, then your changes are the problem. Redo them one-by-one to find the one that causes the problem. Does it work on CI? \u2192 Is the CI build recent? \u2192 Retrigger via a Whitespace-only commit. \u2192 Search for differences between your local Gradle build and the CI build (versions). \u2192 Is it the same error message? \u2192 Search for differences between your local Gradle build and the CI build (versions). is the master build green on CI? \u2192 Find out who broke it and make him fix it. After it is fixed, continue. is the master build recent? \u2192 Retrigger it via a whitespace-only commit. \u2192 Merge master into your branch, retry. If nothing helped: try cloning your repo again. Out of options. Ask somebody for help. CI \u00b6 Tests are failing on CI, but run green in the local MPS installation. What about the local Gradle build? The tests can be executed locally with: ./gradlew ant-build-tests -Dmps.home=PATH_TO_YOU_MPS_INSTALLTION . Afterwards the test results can be found in build/iets3-allScripts ( IETS3 ). It runs (green) -> there is a discrepancy between the CI and your local Gradle build. Make sure you are on the same branch/commit as the CI, It shows the same test failures as the CI \u2192 there is a discrepancy between the MPS Build and the Gradle Build Rebuild the build scripts in MPS . Try running the tests in a seperate Ppocess (edit the run configuration in MPS ). Make sure your MPS uses the same (versions of the) dependencies as the gradle build. This can be achieved in 2 different ways: Run ./gradlew dependencies to see which versions of which dependency gradle uses and make sure the OS and Mbeddr repos are checked out on the right branches / commits ( IETS3 ). Remove the file projectlibraries.overrides.properties from your repo and execute ./gradlew setup in both. This configures MPS to directy use the Java class files from the Gradle artifacts instead of the checked out repos.","title":"Trouble shooting guide"},{"location":"home/trouble_shooting_guide/#troubleshooting-guide","text":"This is a non-exhaustive list of common problems with MPS and platform projects. It is assumed that Gradle is used for building the project.","title":"Troubleshooting guide"},{"location":"home/trouble_shooting_guide/#mps","text":"The IDE is sluggish and doesn\u2019t work the way it should. Edit the file mps(64).vmoptions and give it sufficient heap space: -Xmx8g MPS behaves strange. For instance: claims that a method is missing, although it exists.* Tools \u2192 Reload All Classes . File \u2192 Invalidate Caches , then restart. File \u2192 Invalidate Caches , shutdown MPS ; in the repository in question: run git clean -fxd -e build.properties -e gradle.properties , rebuild with Gradle ( ./gradlew ), restart MPS . MPS cannot find languages / solutions. For instance: \u201clanguage X is not deployed\u201d errors. File \u2192 Invalidate Caches , shutdown MPS . Run ./gradlew setup --refresh-dependencies . Start MPS again. The IDE doesn\u2019t let you enter some text / an intention isn\u2019t visible that should be there. Check: was the intention disabled by the user by accident? In this case, the intention can be enabled through preferences \u2192 MPS intentions and manually searching for the disabled intention: Check: is the concept / intention visible in the model? (open a context menu where baselanguage code is allowed and search for classes / concepts from the same language) \u2192 Use Edit \u2192 Add Language Import to import the language containing the concept / the intention. Check the concept: is the type of the concept suitable for the place where you want to create an instance? Does it implement the right interface? Check the intention: is the isApplicable () -method called? (add a System . err . println () to the method and check what MPS outputs) \u2192 The intention is most probably not visible in the model \u2192 see above \u2192 Make sure the method returns true Concept: does a constraint on one of the ancestor-nodes prohibit you from creating it? MPS build fails. Does the MPS Model-Checker report problems? \u2192 Fix identified problems. Does the build log report intelligible problems? \u2192 Fix identified problems. Does it build in Gradle? \u2192 See: Gradle-Build fails .","title":"MPS"},{"location":"home/trouble_shooting_guide/#gradle","text":"Gradle build fails. Did you call git clean -fxd -e build.properties before ./gradlew ? \u2192 Do it, retry. Did you call ./gradlew with --refresh-dependencies ? \u2192 Retry with --refresh-dependencies . Does the error message start with \u201cdependencies should be extracted into build script\u201d? In MPS , apply the model-checker to the \u201c_build\u201d-package. Many problems can be fixed by applying the intention \u201cReload modules from disk\u201d. Rebuild the \u201c_build\u201d-package. Retry the gradle build. Do you have local changes? \u2192 Use git stash to stash them away, retry. When the build works without your changes, then your changes are the problem. Redo them one-by-one to find the one that causes the problem. Does it work on CI? \u2192 Is the CI build recent? \u2192 Retrigger via a Whitespace-only commit. \u2192 Search for differences between your local Gradle build and the CI build (versions). \u2192 Is it the same error message? \u2192 Search for differences between your local Gradle build and the CI build (versions). is the master build green on CI? \u2192 Find out who broke it and make him fix it. After it is fixed, continue. is the master build recent? \u2192 Retrigger it via a whitespace-only commit. \u2192 Merge master into your branch, retry. If nothing helped: try cloning your repo again. Out of options. Ask somebody for help.","title":"Gradle"},{"location":"home/trouble_shooting_guide/#ci","text":"Tests are failing on CI, but run green in the local MPS installation. What about the local Gradle build? The tests can be executed locally with: ./gradlew ant-build-tests -Dmps.home=PATH_TO_YOU_MPS_INSTALLTION . Afterwards the test results can be found in build/iets3-allScripts ( IETS3 ). It runs (green) -> there is a discrepancy between the CI and your local Gradle build. Make sure you are on the same branch/commit as the CI, It shows the same test failures as the CI \u2192 there is a discrepancy between the MPS Build and the Gradle Build Rebuild the build scripts in MPS . Try running the tests in a seperate Ppocess (edit the run configuration in MPS ). Make sure your MPS uses the same (versions of the) dependencies as the gradle build. This can be achieved in 2 different ways: Run ./gradlew dependencies to see which versions of which dependency gradle uses and make sure the OS and Mbeddr repos are checked out on the right branches / commits ( IETS3 ). Remove the file projectlibraries.overrides.properties from your repo and execute ./gradlew setup in both. This configures MPS to directy use the Java class files from the Gradle artifacts instead of the checked out repos.","title":"CI"},{"location":"home/visual_guide/","text":"Hover over a green rectangle to show a short description. When you click the shape, you are redirected to the corresponding documentation when it\u2019s available. $(function() { document.getElementsByTagName('body')[0].style.overflow = \"scroll\"; $('.map').maphilight({ alwaysOn: true, fillOpacity: 0.1, strokeColor: '8BC34B', strokeWidth: 2, shadow: false, }); });","title":"Visual guide"},{"location":"includes/abbreviations/","text":"","title":"Abbreviations"},{"location":"includes/code_abbreviations/","text":"","title":"Code abbreviations"},{"location":"languages/","text":"What\u2019s the relationship between mbeddr.platform , iets3.opensource and mps-extensions ? Older versions of mbeddr platform and IETS3 contain a dependency to MPS -extensions and they repack it. The newest version of mbeddr platform doesn\u2019t repack it. MPS -extensions contains many extensions that were part of mbeddr platform . Why are some of these languages not migrated to mps-extensions? Some language have dependencies that would also need to be migrated to MPS -extensions . Other languages are deemed as not stable or important enough to be migrated.","title":"Index"},{"location":"languages/baselanguage/","text":"Base Language \u00b6 jetbrains.mps.baselanguage For a full list of baselanguage bugs and feature requests, have a look at this ticket search . Paste as Java class doesn\u2019t work. Not all newer Java features can be pasted such as the double colon operator(::) and static imports (fixed in the newest MPS versions). Loops with more than one variable also don\u2019t work. Set the `Export flag at the moduleX import. You are using a class that extends another class that is situated in another solution. That means that the export flag for the other solutions should be set in the current module, so that there is automatically a dependency to this module. More information can be found in dependencies: export flag . What Java language features aren\u2019t supported in baselanguage ? The following features are not supported (yet): local classes multiline strings/text blocks records sealed classes pattern matching for switch statements pattern matching for instanceof double brace initialization A function with baselanguage code doesn\u2019t return anything when called. baselanguage permits implicit returns. The last statement is automatically returned. In some places implicit returns aren\u2019t supported, such as when returning a new ListScope class. Make sure to add a return statement in such places. Var Variable \u00b6 jetbrains.mps.baselanguage.varVariable TextGen not found for concept of X language. Maybe a wrong generator order of languages. Example The generators of language x are executed first and then the generator of the var variable of the same language is called. It should be the other way around. You can specify a custom generation plan to fix this issue. Closures \u00b6 jetbrains.mps.baselanguage.closures Exception when passing closure literal as a parameter in a behaviour method call Closures can\u2019t be used for functional interface types such as java.util.Runnable in behaviour methods (see MPS -31866 ) Collections \u00b6 How can you create a sequence with one element? Use the singleton constructor: 1 new singleton < string > ( \"single\" ) ` How do you convert from a Java ArrayList to a baselanguage list? Use the copy constructor: 1 new arraylist < string > ( copy : yourArrayList ) ` How do you convert baselanguage collections to Java streams? First convert your collection to a list that you downcast to a Java list. Then you can convert it into a stream StreamSupport . stream ( list / . spliterator (), false ) Why doesn\u2019t yield work inside a select operation? Given I have this code: myNode.items.select({~it => yield it.index}) When I run it, then I expect the result [0,1,2,3,4] but unexpectedly, I get the same list of nodes, as if I ran myNode.items What\u2019s happening? Yield does not work with .select({\u2026}) . It will do what you expected if you just call .selectMany({\u2026}) instead. That\u2019ll also make it clear what happens if you yield multiple times during an iteration, and that the control flow doesn\u2019t end when you\u2019re yielding. contributed by: @abstraktor How do you sort a collection of children? Given I have a node myNode with a child collection myNode.children . How do I sort them by their toString() ? I tried myNode.children/.sort(Ordering.lexical()) , but that doesn\u2019t do anything. Stepping revealed that it seems to create a copy of that list and sort that one. Use the bold sort, call toList to materialize the result, and then .clear and .addAll it: 1 2 3 sequence < T > sorted = list . sort ({ ~ a , ~ b => ORDERING . compare ( a , b ); }, asc ). toList ; list . clear ; list . addAll ( sorted ); contributed by: @abstraktor Checked dots \u00b6 jetbrains.mps.baselanguage.checkeddots voids NullPointerException when Java executes a method call on a null variable. For example, it won\u2019t throw a NullPointerException , if myObject is null. bold methods or dot-expressions are null safe, for example new arraylist<string>() . where ({~it => }) Access language \u00b6 jetbrains.mps. lang .access Managing concurrent access | MPS Transactional property cells \u00b6 jetbrains.mps. lang .editor.structure An intention can mark a regular property-cell such as string, int, and boolean as transactional. MPS updates the editor, when the cursor leaves the cell (= commit). You must define the commit handler in the inspector. The benefit is that the editor isn\u2019t permanently updated on every key typed. Can be useful, for example, if you set your text-color dynamically. Images \u00b6 jetbrains.mps. lang .editor.figures Statically embed images into the editor. example: image cell","title":"Baselanguage and extensions"},{"location":"languages/baselanguage/#base-language","text":"jetbrains.mps.baselanguage For a full list of baselanguage bugs and feature requests, have a look at this ticket search . Paste as Java class doesn\u2019t work. Not all newer Java features can be pasted such as the double colon operator(::) and static imports (fixed in the newest MPS versions). Loops with more than one variable also don\u2019t work. Set the `Export flag at the moduleX import. You are using a class that extends another class that is situated in another solution. That means that the export flag for the other solutions should be set in the current module, so that there is automatically a dependency to this module. More information can be found in dependencies: export flag . What Java language features aren\u2019t supported in baselanguage ? The following features are not supported (yet): local classes multiline strings/text blocks records sealed classes pattern matching for switch statements pattern matching for instanceof double brace initialization A function with baselanguage code doesn\u2019t return anything when called. baselanguage permits implicit returns. The last statement is automatically returned. In some places implicit returns aren\u2019t supported, such as when returning a new ListScope class. Make sure to add a return statement in such places.","title":"Base Language"},{"location":"languages/baselanguage/#var-variable","text":"jetbrains.mps.baselanguage.varVariable TextGen not found for concept of X language. Maybe a wrong generator order of languages. Example The generators of language x are executed first and then the generator of the var variable of the same language is called. It should be the other way around. You can specify a custom generation plan to fix this issue.","title":"Var Variable"},{"location":"languages/baselanguage/#closures","text":"jetbrains.mps.baselanguage.closures Exception when passing closure literal as a parameter in a behaviour method call Closures can\u2019t be used for functional interface types such as java.util.Runnable in behaviour methods (see MPS -31866 )","title":"Closures"},{"location":"languages/baselanguage/#collections","text":"How can you create a sequence with one element? Use the singleton constructor: 1 new singleton < string > ( \"single\" ) ` How do you convert from a Java ArrayList to a baselanguage list? Use the copy constructor: 1 new arraylist < string > ( copy : yourArrayList ) ` How do you convert baselanguage collections to Java streams? First convert your collection to a list that you downcast to a Java list. Then you can convert it into a stream StreamSupport . stream ( list / . spliterator (), false ) Why doesn\u2019t yield work inside a select operation? Given I have this code: myNode.items.select({~it => yield it.index}) When I run it, then I expect the result [0,1,2,3,4] but unexpectedly, I get the same list of nodes, as if I ran myNode.items What\u2019s happening? Yield does not work with .select({\u2026}) . It will do what you expected if you just call .selectMany({\u2026}) instead. That\u2019ll also make it clear what happens if you yield multiple times during an iteration, and that the control flow doesn\u2019t end when you\u2019re yielding. contributed by: @abstraktor How do you sort a collection of children? Given I have a node myNode with a child collection myNode.children . How do I sort them by their toString() ? I tried myNode.children/.sort(Ordering.lexical()) , but that doesn\u2019t do anything. Stepping revealed that it seems to create a copy of that list and sort that one. Use the bold sort, call toList to materialize the result, and then .clear and .addAll it: 1 2 3 sequence < T > sorted = list . sort ({ ~ a , ~ b => ORDERING . compare ( a , b ); }, asc ). toList ; list . clear ; list . addAll ( sorted ); contributed by: @abstraktor","title":"Collections"},{"location":"languages/baselanguage/#checked-dots","text":"jetbrains.mps.baselanguage.checkeddots voids NullPointerException when Java executes a method call on a null variable. For example, it won\u2019t throw a NullPointerException , if myObject is null. bold methods or dot-expressions are null safe, for example new arraylist<string>() . where ({~it => })","title":"Checked dots"},{"location":"languages/baselanguage/#access-language","text":"jetbrains.mps. lang .access Managing concurrent access | MPS","title":"Access language"},{"location":"languages/baselanguage/#transactional-property-cells","text":"jetbrains.mps. lang .editor.structure An intention can mark a regular property-cell such as string, int, and boolean as transactional. MPS updates the editor, when the cursor leaves the cell (= commit). You must define the commit handler in the inspector. The benefit is that the editor isn\u2019t permanently updated on every key typed. Can be useful, for example, if you set your text-color dynamically.","title":"Transactional property cells"},{"location":"languages/baselanguage/#images","text":"jetbrains.mps. lang .editor.figures Statically embed images into the editor. example: image cell","title":"Images"},{"location":"languages/double_dispatch/","text":"This article explains the language jetbrains.mps.baselanguage.doubleDispatch . The example comes from this article : Most OOP programming languages support single dispatch, more commonly known as virtual methods. For example, consider the following code: Single dispatch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class SpaceShip { public string GetShipType () { return \"SpaceShip\" ; } } public class ApolloSpacecraft extends SpaceShip { public string GetShipType () { return \"ApolloSpacecraft\" ; } } SpaceShip ship = new ApolloSpacecraft (); System . out . println ( ship . GetShipType ()); // output: (1) ApolloSpacecraft The actual method implementation which should be called, is chosen at runtime based solely on the actual type of ship. So, only the type of single object is used to select the method, hence the name single dispatch. Note: Single dispatch is one form of dynamic dispatch , for example, the method is chosen at runtime. If the method is chosen at compile time (true for all non-virtual methods), it\u2019s called static dispatch . Now add some asteroids: Double dispatch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 public class Asteroid { public void collideWith ( SpaceShip s ) { System . out . println ( \"Asteroid hit a SpaceShip\" ); } public void collideWith ( ApolloSpacecraft a ) { System . out . println ( \"Asteroid hit an ApolloSpacecraft\" ); } } public class ExplodingAsteroid extends Asteroid { public void collideWith ( SpaceShip s ) { System . out . println ( \"ExplodingAsteroid hit a SpaceShip\" ); } public void collideWith ( ApolloSpacecraft a ) { System . out . println ( \"ExplodingAsteroid hit an ApolloSpacecraft\" ); } } public class DoubleDispatch { public static void main ( string [] args ) { Asteroid theAsteroid = new Asteroid (); SpaceShip theSpaceShip = new SpaceShip (); ApolloSpacecraft theApolloSpacecraft = new ApolloSpacecraft (); theAsteroid . collideWith ( theSpaceShip ); // output: (1) theAsteroid . collideWith ( theApolloSpacecraft ); // output: (2) System . out . println (); ExplodingAsteroid theExplodingAsteroid = new ExplodingAsteroid (); theExplodingAsteroid . collideWith ( theSpaceShip ); // output: (3) theExplodingAsteroid . collideWith ( theApolloSpacecraft ); // output: (4) System . out . println (); Asteroid theAsteroidReference = theExplodingAsteroid ; theAsteroidReference . collideWith ( theSpaceShip ); // output: (5) theAsteroidReference . collideWith ( theApolloSpacecraft ); // output: (6) System . out . println (); // Note the different datatypes SpaceShip theSpaceShipReference = theApolloSpacecraft ; theAsteroid . collideWith ( theSpaceShipReference ); // output: (7) theAsteroidReference . collideWith ( theSpaceShipReference ); // output: (8) } } Asteroid hit a SpaceShip Asteroid hit an ApolloSpacecraft Exploding Asteroid hit a SpaceShip Exploding Asteroid hit anApolloSpacecraft Exploding Asteroid hit a SpaceShip Exploding Asteroid hit an ApolloSpacecraft Asteroid hit an ApolloSpacecraft ExplodingAsteroid hit a SpaceShip The desired result here would be ExplodingAsteroid hit an ApolloSpacecraft but instead you get ExplodingAsteroid hit a SpaceShip . To support double dispatch, import the dispatch language and include dispatch modifiers in ExplodingAsteroid: 1 2 3 4 5 6 7 8 9 public class ExplodingAsteroid extends Asteroid { public dispatch void collideWith ( SpaceShip s ) { System . out . println ( \"ExplodingAsteroid hit a SpaceShip\" ); } public dispatch void collideWith ( ApolloSpacecraft a ) { System . out . println ( \"ExplodingAsteroid hit an ApolloSpacecrat\" ); } } The last method now correctly returns ExplodingAsteroid hit an ApolloSpacecraft .","title":"Double dispatch"},{"location":"languages/mps_extensions/","text":"Checkboxes \u00b6 Boolean checkboxes \u00b6 de.itemis.mps.editor.bool A boolean checkbox cell that provides custom icons for states. Enumeration/Multi-value \u00b6 de.itemis.mps.editor.enumeration A checkbox cell with more than one state. You have to define states by an enumeration property. Richtext \u00b6 slisson.richtext A multi-line text-block that\u2019s extendable (e.g. for images). It looks a bit latex-like. The mbeddr doc language used it for generating xhtml, latex, and markdown. The ordering of text and IWords can\u2019t be arbitrary, A checking rule enforces that the text is normalized: There has to be at least one child, it must start with a Word and a Word must always be betweeen two embedded nodes and there are noo two consecutive Words. Multiline property cell \u00b6 de.slisson.mps.editor.multiline A cell for string properties over multiple lines. Diagram \u00b6 de.itemis.mps.editor.diagram I encountered a bug. Check the meta Issue on Github. How do you use this language? Have a look at the samples of this language in MPS -extensions . There is also an external tutorial series . What\u2019s the edge ID in the diagrams used for? It\u2019s used in the map that contains the layout data. It can be any unique string. LayoutMapEntry.key is the property where this string is used ( source ). Conditional Editor \u00b6 de.slisson.mps.conditionalEditor Generation errors exist. The condition of the conditional editor is not optional, it has to be set. Tables \u00b6 de.slisson.mps.tables Use slisson-tables instead of mps-tables because the language is more flexible (and not deprecated). The language displays content in a tabular format. The table can be hard-coded or can consist of complex queries/dynamic content. You have to add new cells and rows in the editor. They can also be readonly. You need a little experience (trial-and-error) to create these tables. Features: table cell queries partial tables grid queries Strumenta blog: Tabular projections in Jetbrains MPS : let\u2019s start building an accounting system How do you get rid of the small little extra grid lines on the outside of the table rows? ( original question ) Change these properties to true. How can I improve my tables? even-odd coloring of rows coloring of columns and row headers group columns by color multi-column headers annotations for cells pagination + other UI buttons Cell Layout \u00b6 de.itemis.mps.editor.celllayout What does this language do? In the MPS layout algorithms the children decide about their width and height and the parent cell can only arrange the already layouted children. In the algorithms from the celllayout language are similar to the swing layouters where the child is asked for its min / max /preferred size, but the parent decides about the size of the child and the child then has to fit itself into these bounds. This is used in tables and diagram, but also for the styles defined in the de.itemis.mps.celllayout language ( source ). What does grow-x and push-x do? Grow-x grows the cell to the with of the parent. Push-x is like setting grow-x on the cell and all ancestor cells. Grammar Cells \u00b6 de.itemis.mps.grammarcells Grammar cells seem to need a dummy component. Is this necessary? Yes it is, otherwise the generator doesn\u2019t get used( source ). What combinations of cells aren\u2019t supported? The following combinations are not allowed: optional and constant optional and reference How can you enter enumerations easier? Specific Languages blog: Entering enumerations easier with grammar cells Querylist \u00b6 com.mbeddr.mpsutil.editor.querylist You can use nodes in the editor, which aren\u2019t directly available in the current context. The language is more powerful than (readonly) model access (displays a string). You can have editor cells, which can have actions and all other normal cell features. queryListNode allows to access the surrounding context node in the editor definition (which otherwise isn\u2019t available). How do I fold collections returned by a querylist? Surround the querylist with a vertical collection and and set the cell layout of the querylist (not its content) to vertical. How do I make cells in querylists navigatable? I\u2019m trying to create a list of navigatable cells via querylist from mpsutil. The querylists query collects some nodes from my model, and I\u2019d like to make it so that each cell produced with this querylist navigates to its respective node. Using the navigatable-node style attribute (returning node , the node from the query) on these cells doesn\u2019t seem to work though - ctrl+clicking them doesn\u2019t do anything. How can I make the cells in a querylist navigatable to that node? The navigatable-node style attribute won\u2019t allow you to point directly to the node from the querylist\u2019s query. Instead, you can use the hyperlink-node style attribute (also from mpsutil) to make the navigation work, and the hyperlink-style attribute to make it look like a regular reference: A common workaround to get similar behavior with navigatable-node is to point it to a child or parent of the desired node instead of that node itself. contributed by: @jonaskraemer Tool tips \u00b6 de.itemis.mps.tooltips.structure This language is deprecated, use jetbrains.mps. lang .editor.tooltips instead. It provides tooltips on hover. You have to define a regular editor and a hover editor. Dropdown \u00b6 de.itemis.mps.dropdown This language surrounds an editor cell with a dropdown cell with a button. It opens the code completion menu whe you click on it. The language might not be very stable. Collapsible cells \u00b6 de.itemis.mps.editor.collapsible This language defines collapsed/folded and expanded/unfolded editors. It provides plus(+) and minus(-) buttons in the editor. There is no need for foldable collections. Use them together with other languages such as query lists. Mathematical operators \u00b6 de.itemis.mps.editor.math.notations This language embeds mathematical operators into the editor and also provides a set of predefined operators.","title":"MPS-extensions"},{"location":"languages/mps_extensions/#checkboxes","text":"","title":"Checkboxes"},{"location":"languages/mps_extensions/#boolean-checkboxes","text":"de.itemis.mps.editor.bool A boolean checkbox cell that provides custom icons for states.","title":"Boolean checkboxes"},{"location":"languages/mps_extensions/#enumerationmulti-value","text":"de.itemis.mps.editor.enumeration A checkbox cell with more than one state. You have to define states by an enumeration property.","title":"Enumeration/Multi-value"},{"location":"languages/mps_extensions/#richtext","text":"slisson.richtext A multi-line text-block that\u2019s extendable (e.g. for images). It looks a bit latex-like. The mbeddr doc language used it for generating xhtml, latex, and markdown. The ordering of text and IWords can\u2019t be arbitrary, A checking rule enforces that the text is normalized: There has to be at least one child, it must start with a Word and a Word must always be betweeen two embedded nodes and there are noo two consecutive Words.","title":"Richtext"},{"location":"languages/mps_extensions/#multiline-property-cell","text":"de.slisson.mps.editor.multiline A cell for string properties over multiple lines.","title":"Multiline property cell"},{"location":"languages/mps_extensions/#diagram","text":"de.itemis.mps.editor.diagram I encountered a bug. Check the meta Issue on Github. How do you use this language? Have a look at the samples of this language in MPS -extensions . There is also an external tutorial series . What\u2019s the edge ID in the diagrams used for? It\u2019s used in the map that contains the layout data. It can be any unique string. LayoutMapEntry.key is the property where this string is used ( source ).","title":"Diagram"},{"location":"languages/mps_extensions/#conditional-editor","text":"de.slisson.mps.conditionalEditor Generation errors exist. The condition of the conditional editor is not optional, it has to be set.","title":"Conditional Editor"},{"location":"languages/mps_extensions/#tables","text":"de.slisson.mps.tables Use slisson-tables instead of mps-tables because the language is more flexible (and not deprecated). The language displays content in a tabular format. The table can be hard-coded or can consist of complex queries/dynamic content. You have to add new cells and rows in the editor. They can also be readonly. You need a little experience (trial-and-error) to create these tables. Features: table cell queries partial tables grid queries Strumenta blog: Tabular projections in Jetbrains MPS : let\u2019s start building an accounting system How do you get rid of the small little extra grid lines on the outside of the table rows? ( original question ) Change these properties to true. How can I improve my tables? even-odd coloring of rows coloring of columns and row headers group columns by color multi-column headers annotations for cells pagination + other UI buttons","title":"Tables"},{"location":"languages/mps_extensions/#cell-layout","text":"de.itemis.mps.editor.celllayout What does this language do? In the MPS layout algorithms the children decide about their width and height and the parent cell can only arrange the already layouted children. In the algorithms from the celllayout language are similar to the swing layouters where the child is asked for its min / max /preferred size, but the parent decides about the size of the child and the child then has to fit itself into these bounds. This is used in tables and diagram, but also for the styles defined in the de.itemis.mps.celllayout language ( source ). What does grow-x and push-x do? Grow-x grows the cell to the with of the parent. Push-x is like setting grow-x on the cell and all ancestor cells.","title":"Cell Layout"},{"location":"languages/mps_extensions/#grammar-cells","text":"de.itemis.mps.grammarcells Grammar cells seem to need a dummy component. Is this necessary? Yes it is, otherwise the generator doesn\u2019t get used( source ). What combinations of cells aren\u2019t supported? The following combinations are not allowed: optional and constant optional and reference How can you enter enumerations easier? Specific Languages blog: Entering enumerations easier with grammar cells","title":"Grammar Cells"},{"location":"languages/mps_extensions/#querylist","text":"com.mbeddr.mpsutil.editor.querylist You can use nodes in the editor, which aren\u2019t directly available in the current context. The language is more powerful than (readonly) model access (displays a string). You can have editor cells, which can have actions and all other normal cell features. queryListNode allows to access the surrounding context node in the editor definition (which otherwise isn\u2019t available). How do I fold collections returned by a querylist? Surround the querylist with a vertical collection and and set the cell layout of the querylist (not its content) to vertical. How do I make cells in querylists navigatable? I\u2019m trying to create a list of navigatable cells via querylist from mpsutil. The querylists query collects some nodes from my model, and I\u2019d like to make it so that each cell produced with this querylist navigates to its respective node. Using the navigatable-node style attribute (returning node , the node from the query) on these cells doesn\u2019t seem to work though - ctrl+clicking them doesn\u2019t do anything. How can I make the cells in a querylist navigatable to that node? The navigatable-node style attribute won\u2019t allow you to point directly to the node from the querylist\u2019s query. Instead, you can use the hyperlink-node style attribute (also from mpsutil) to make the navigation work, and the hyperlink-style attribute to make it look like a regular reference: A common workaround to get similar behavior with navigatable-node is to point it to a child or parent of the desired node instead of that node itself. contributed by: @jonaskraemer","title":"Querylist"},{"location":"languages/mps_extensions/#tool-tips","text":"de.itemis.mps.tooltips.structure This language is deprecated, use jetbrains.mps. lang .editor.tooltips instead. It provides tooltips on hover. You have to define a regular editor and a hover editor.","title":"Tool tips"},{"location":"languages/mps_extensions/#dropdown","text":"de.itemis.mps.dropdown This language surrounds an editor cell with a dropdown cell with a button. It opens the code completion menu whe you click on it. The language might not be very stable.","title":"Dropdown"},{"location":"languages/mps_extensions/#collapsible-cells","text":"de.itemis.mps.editor.collapsible This language defines collapsed/folded and expanded/unfolded editors. It provides plus(+) and minus(-) buttons in the editor. There is no need for foldable collections. Use them together with other languages such as query lists.","title":"Collapsible cells"},{"location":"languages/mps_extensions/#mathematical-operators","text":"de.itemis.mps.editor.math.notations This language embeds mathematical operators into the editor and also provides a set of predefined operators.","title":"Mathematical operators"},{"location":"mbeddr/","text":"General \u00b6 What languages are old/deprecated and should not be used anymore? com.mbeddr.mpsutil.breadcrumb (removed in a recent version of mbeddr ) com.mbeddr.mpsutil.buildutil (experimental) com.mbeddr.mpsutil.contextactions (use MPS context actions instead) com.mbeddr.mpsutil.multilingual (unused/unmaintained) com.mbeddr.mpsutil.typesystem.trace (use MPS Type system trace instead) com.mbeddr.mpsutil.test.util (not needed) com.mbeddr.mpsutil.bldoc (obsolete since MPS java doc refactoring) com.mbeddr.mpsutil.langstats (not needed) com.mbeddr.mpsutil.javainterpreter (can only interpret expression, was build as a demo for the interpret framework) com.mbeddr.mpsutil.spreferences (rarely used) com.mbeddr.mpsutil.uniquenames (performance issues) com.mbeddr.mpsutil.iconchar (replaced with MPS concept) com.mbeddr.mpsutil.propertydefault (not used) com.mbeddr.mpsutil.testScope (not used) com.mbeddr.mpsutil.varscope (replaced with MPS scopes) Why are there two context action tools? The context actions tool from com.mbeddr.mpsutil.contextactions was developed first. Later, JetBrains developed their own tool that works the same as the one from mpsutil. Nowadays both tool windows coexist. I am using some mbeddr languages in my project but some of them aren\u2019t deployed. There might be some additional plugins that need to be installed: de.itemis.mps.nativelibs.loader com.mbeddr.mpsutil.actionsfilter mbeddr.spawner They can be installed by calling gradlew.bat install \"-PMPS_Installation=<path to MPS>\" from the root folder of the mbeddr.core repository when building from source. The actionsfilter plugin is necessary for the actionsfilter language.","title":"General"},{"location":"mbeddr/#general","text":"What languages are old/deprecated and should not be used anymore? com.mbeddr.mpsutil.breadcrumb (removed in a recent version of mbeddr ) com.mbeddr.mpsutil.buildutil (experimental) com.mbeddr.mpsutil.contextactions (use MPS context actions instead) com.mbeddr.mpsutil.multilingual (unused/unmaintained) com.mbeddr.mpsutil.typesystem.trace (use MPS Type system trace instead) com.mbeddr.mpsutil.test.util (not needed) com.mbeddr.mpsutil.bldoc (obsolete since MPS java doc refactoring) com.mbeddr.mpsutil.langstats (not needed) com.mbeddr.mpsutil.javainterpreter (can only interpret expression, was build as a demo for the interpret framework) com.mbeddr.mpsutil.spreferences (rarely used) com.mbeddr.mpsutil.uniquenames (performance issues) com.mbeddr.mpsutil.iconchar (replaced with MPS concept) com.mbeddr.mpsutil.propertydefault (not used) com.mbeddr.mpsutil.testScope (not used) com.mbeddr.mpsutil.varscope (replaced with MPS scopes) Why are there two context action tools? The context actions tool from com.mbeddr.mpsutil.contextactions was developed first. Later, JetBrains developed their own tool that works the same as the one from mpsutil. Nowadays both tool windows coexist. I am using some mbeddr languages in my project but some of them aren\u2019t deployed. There might be some additional plugins that need to be installed: de.itemis.mps.nativelibs.loader com.mbeddr.mpsutil.actionsfilter mbeddr.spawner They can be installed by calling gradlew.bat install \"-PMPS_Installation=<path to MPS>\" from the root folder of the mbeddr.core repository when building from source. The actionsfilter plugin is necessary for the actionsfilter language.","title":"General"},{"location":"mbeddr/big_project/","text":"If you have introduced a migration to mbeddr and need to execute, you need to execute it on all MPS projects contained in mbeddr. Otherwise, migrations pop up at for other people who work on other parts of mbeddr. This is an unclean workflow. To avoid this, you can either open all the projects in mbeddr.core\\code\\languages individually and run the migration wizard, but this is tedious. A better approach is to use the BigProject contained in the mbeddr repository. This project loads all languages and solutions available in the individual projects, thus you can run a migration once that executes on all these modules. Open project mbeddr.core\\tools\\BigProject with IntelliJ IDEA community edition. In Idea click in the menu on Run \u2192 Run BigProjectGenerator . If an SDK isn\u2019t configured, follow the error message in the bottom right corner or via project settings and select a Java 11 SDK that\u2019s installed on your system. Use default for the project language level. If a project compiler output path isn\u2019t configured, set it to mbeddr.core\\tmp\\BigProject . Close and open the project again to run the project generator. Check generation feedback. It looks like this: 1 2 3 4 === TOTAL === Languages: 214 Solutions: 305 Devkits: 22 Open project mbeddr.core\\tools\\BigProject with MPS . When the migration wizard starts automatically, execute migrations, otherwise Check for the popup Migration suspended in the right bottom corner. It tells you, which languages aren\u2019t built /deployed. Build or rebuild all languages in that list. Usually, MPS must build all languages and a set of solutions for the wizard to start automatically.","title":"BigProject"},{"location":"mbeddr/development_guide/","text":"Development Guide \u00b6 This document describes how the mbeddr team uses Git for contributing changes. The guide was written some years ago, so it might not reflect the workflow and guidelines of newer committers anymore. Commit messages \u00b6 In general, try to follow this guide with some exceptions for minor changes: When you commit a major change that relates to a GitHub issue, start your commit message with a short title (less than 50 char). Ideally, it contains the title of the GitHub issue if it fits. If you can\u2019t fit the issue title, please reference the issue ID with #4711 notation in the title. The title is followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 ClassCastException on FilteringActionManager #1207 Lorem ipsum dolor sit amet, consectetur adipiscing elit. In contrast, if your commit is just a minor fix, then you mention the modified mbeddr subsystem (for example mpsutil: , core: or ext : ) and provide a short description, followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 core,ext: Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipiscing elit. The optional paragraph at the end of your commit message contains further information about the change. Tests were added or describe why the fix was necessary, maybe there are special conditions when the issue surfaces. This is also the place where you can put GitHub issue commands to close or reference other issues. Further information and ideas on how to write good commit messages can be found here and here Branches \u00b6 We make heavy use of branches in the development process. If your task requires more than one commit, commit your changes on a branch. Two types of branches exist: feature and refactor : the first is used for new features, the second for bug fixes or code refactorings. They are distinguished by prefix: a feature branch my-awesome-stuff would be named feature/my-awesome-stuff or refactor/my-awesome-stuff , if it\u2019s a refactoring branch. Both kinds of branches should be short living (a couple of days) to reduce the risk of diverting to far from master and causing huge afford to merge. Ideally, no commits happen directly to master and every commit is first evaluated on a feature/refactoring branch. Note: Nowadays we mostly do merging instead of rebasing. The following sections might therefore not accurately reflect the current workflow. Merging \u00b6 Once your work is done, it needs to be integrated into the master branch. Because your branch most likely diverted from master, merging it into master would normally end up with a merge commit on the master branch. We have learned the hard way that merging clutters Git history and makes all intermediate commits of the branch end up in master. To prevent this, the suggested workflow is to rebase your branch onto master and thereby squash all your commits into a single one. Example \u00b6 This example shows you how to integrate your branch into the master branch by using rebase instead of merge. The list of commands to use is: 1 2 3 4 5 6 7 git fetch git rebase -i origin/master git checkout origin/master git pull git merge --ff-only feature/my-awesome-stuff git pull --rebase git push They are all explained below. Below you can see the starting point in the repository: 1 2 * 1ed51e3 (HEAD -> master) added another file * 5cee848 initial commit Now create the new feature branch named feature/my-awesome-stuff and commit some changes on it. While working on your branch, someone else committed changes into the master branch. Hence, for integrating your changes into master you would end up with a merge: 1 2 3 4 5 6 * 3c36424 (HEAD -> master) fixed some super important issue | * 66beba4 (feature/my-awesome-stuff) more work on my awesome feature | * cca995e did some stuff |/ * 1ed51e3 added another file * 5cee848 initial commit To get your commits into master , first make sure that your local history is up-to-date by running git fetch . Next, rebase your commits. This prevents a merge from happening. This is achieved with the following git command on our branch: git rebase -i origin/master . Git will now ask you how to proceed with your commits: 1 2 pick cca995e did some stuff pick 66beba4 more work on my awesome feature Now squash all commits into a single commit while rebasing: 1 2 pick cca995e did some stuff squash 66beba4 more work on my awesome feature Afterward, Git asks you to enter a message for the new commit. The default message it offers is a concatenation of all the commit messages from the commits to squash. However, you want to make the new commit message fit the earlier described pattern. After rebasing your Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> feature/my-awesome-stuff) 42: super awesome feature * 3c36424 (master) fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You still have to branch; now it\u2019s time to merge them. Change your git branch to master using git checkout origin/master . Make sure you have pulled from the remote and your branch is up-to-date. Now run git merge --ff-only feature/my-awesome-stuff . The \u2013ff-only is important to force git to not merge if it would produce a merge commit. Now Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> master, feature/my-awesome-stuff) 42: super awesome feature * 3c36424 fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You haven\u2019t created a merge commit, and all commits from your branch appear as a single commit in the Git history. You are good to go to push back to the repo . But wait, what if somebody has changes things in the meantime on the remote, wouldn\u2019t the pull create a new merge? Yes it would! Therefor don\u2019t use a plain git pull but use git pull --rebase in case you are pulling from the repo into your local master branch. This way, Git doesn\u2019t produce a new merge commit but rebase your local changes on top of the remote changes. Test Organization \u00b6 Naming \u00b6 The test solution for language com.mbeddr.x. lang should be named test.com.mbeddr.x. lang . Respectively, the test solution for solution com.mbeddr.y. sol should be named test.com.mbeddr.y. sol . If you need a dedicated language for testing purposes, you should name it test.com.mbeddr.x.[ lang | sol ].testsupport (or a similar suffix). This way, you can discriminate between \u201creal\u201d code below namespace com.mbeddr and test code below namespace test . You should also place any demo or playground modules outside the com.mbeddr namespace for the same reason. By following this scheme, you can build productive code in the UI by building everything below com.mbeddr in the modules pool, and be assured not to be interfered by test, demo, or playground code. Project Structure \u00b6 All languages, solutions, tests, demos, and playgrounds of one feature should be placed below a common virtual folder bearing the name of the feature. An exception might be build models. Generators must be present only when required or deleted if empty. This allows us to access all artifacts constituting one feature. File System \u00b6 All test code should be placed in a special folder in the file system: Build \u00b6 Build script setup \u00b6 In mbeddr there are different build scripts. They are used on the local machines for building the languages and on the build server for various build-related tasks, such as testing or packaging. This documentation guides you in following the mbeddr standards for setting up your BuildProject and integrating it into Mbeddr\u2019s build infrastructure. Required BuildFolderMacros \u00b6 In your BuildProject (the build script\u2019s model representation in MPS ) you first need a BuildFolderMacro (a folder ) named mps.home (see code snippet below). If you want to run the generated ant script in your MPS , then you should specify the location of your MPS installation in a relative way, otherwise you don\u2019t need a path for mps.home . At script execution time, you will redefine mps.home , to point to the folder where your MPS installation is located at. 1 folder mps.home = <no defaultPath> Next, you need a BuildFolderMacro named artifacts.root that doesn\u2019t require a path (see snippet below). When executing the ant script, generated from your BuildProject , define this macro from outside to point to the folder where all your plugin dependencies (for example: mbeddr.platform ) are located. 1 folder artifacts.root = <no defaultPath> For each BuildProjectDependency (the dependency\u2019s section below your folders) we need a separate BuildFolderMacro that follows the naming convention .artifacts and points to $artifacts.root/<BuildProject name> . At build script execution time, those macros will point to the folders, where your required plugins are located. In the code snippet below you can see the resulting BuildFolderMacros for a BuildProject with two dependencies: mps- sl -all and com.mbeddr.platform. 1 2 folder sl-all.artifacts = $artifacts.root/mps-sl-all folder platform.artifacts = $artifacts.root/com.mbeddr.platform Type system tests \u00b6 When you want to build type system tests that require a specific path macro (for example: for specifying the project location inside your TestInfo ), then you must create a BuildFolderMacro for this path macro. The name of this BuildFolderMacro should start with mps.macro , followed by the name of the respective path macro. In the example below, you instruct MPS via mps.macro.mbeddr.github.core.home to create a path macro mbeddr.github.core.home that points to the relative path location specified in the other BuildFolderMacro mbeddr.github.core.home . 1 folder mps.macro.mbeddr.github.core.home = $mbeddr.github.core.home Furthermore, you need to mark solutions containing type system tests as content: (with sources and tests) . To achieve this, please perform the following steps: Inside your BuildProject move your cursor to the solution that contains your type system tests. Open the inspector. Inside the Inspector select the node sources, open the context menu and select sources and tests from it. To get your tests executed, you first need to add the module-tests plugin to your use plugins: section (on top of your BuildProject ). When you can\u2019t add the node module-tests to this section, import it from jetbrains.mps.build.mps.tests.accessories . Finally, create a BuildMpsLayout_TestModules (a test configuration ) at bottom of your BuildProject and list there all solutions that contain type system tests to be executed. Configurations for generator and compiler \u00b6 To make sure code is generated and compiled the same way as in MPS , you have to add the following configurations ( BuildSource_JavaOptions and BuildMps_GeneratorOptions ) to your BuildProject \u2018s project structure. Those configurations control the generator engine and the Java compiler to make sure we have the same build behavior as in the IDE . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 generator options <project default> strict mode true multiple threads true number of threads 4 inplace transform true hide warnings false resort to static references true java options <project default> generate debug info true generate no warnings false fork false compiler <default compiler> java compliance level 1.6 java compiler options <no additional options> copy resources false Building a release \u00b6 For preparing a mbeddr release, you can modify the version number that is set for the mbeddr plugins by overwriting the values of major.version , minor.version and build (see screenshot below). However, you don\u2019t change these values inside the MPS build scripts, instead, either you change them in the global gradle script ( mbeddr.core/build.gradle ), or you overwrite them via the command line while spawning a new release build: -PmajorVersion=1 -PbuildVersion=0 -PminorVersion=0000 build_mbeddr publishMbeddrAllInOnePublicationToMavenRepository","title":"Development guide"},{"location":"mbeddr/development_guide/#development-guide","text":"This document describes how the mbeddr team uses Git for contributing changes. The guide was written some years ago, so it might not reflect the workflow and guidelines of newer committers anymore.","title":"Development Guide"},{"location":"mbeddr/development_guide/#commit-messages","text":"In general, try to follow this guide with some exceptions for minor changes: When you commit a major change that relates to a GitHub issue, start your commit message with a short title (less than 50 char). Ideally, it contains the title of the GitHub issue if it fits. If you can\u2019t fit the issue title, please reference the issue ID with #4711 notation in the title. The title is followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 ClassCastException on FilteringActionManager #1207 Lorem ipsum dolor sit amet, consectetur adipiscing elit. In contrast, if your commit is just a minor fix, then you mention the modified mbeddr subsystem (for example mpsutil: , core: or ext : ) and provide a short description, followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 core,ext: Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipiscing elit. The optional paragraph at the end of your commit message contains further information about the change. Tests were added or describe why the fix was necessary, maybe there are special conditions when the issue surfaces. This is also the place where you can put GitHub issue commands to close or reference other issues. Further information and ideas on how to write good commit messages can be found here and here","title":"Commit messages"},{"location":"mbeddr/development_guide/#branches","text":"We make heavy use of branches in the development process. If your task requires more than one commit, commit your changes on a branch. Two types of branches exist: feature and refactor : the first is used for new features, the second for bug fixes or code refactorings. They are distinguished by prefix: a feature branch my-awesome-stuff would be named feature/my-awesome-stuff or refactor/my-awesome-stuff , if it\u2019s a refactoring branch. Both kinds of branches should be short living (a couple of days) to reduce the risk of diverting to far from master and causing huge afford to merge. Ideally, no commits happen directly to master and every commit is first evaluated on a feature/refactoring branch. Note: Nowadays we mostly do merging instead of rebasing. The following sections might therefore not accurately reflect the current workflow.","title":"Branches"},{"location":"mbeddr/development_guide/#merging","text":"Once your work is done, it needs to be integrated into the master branch. Because your branch most likely diverted from master, merging it into master would normally end up with a merge commit on the master branch. We have learned the hard way that merging clutters Git history and makes all intermediate commits of the branch end up in master. To prevent this, the suggested workflow is to rebase your branch onto master and thereby squash all your commits into a single one.","title":"Merging"},{"location":"mbeddr/development_guide/#example","text":"This example shows you how to integrate your branch into the master branch by using rebase instead of merge. The list of commands to use is: 1 2 3 4 5 6 7 git fetch git rebase -i origin/master git checkout origin/master git pull git merge --ff-only feature/my-awesome-stuff git pull --rebase git push They are all explained below. Below you can see the starting point in the repository: 1 2 * 1ed51e3 (HEAD -> master) added another file * 5cee848 initial commit Now create the new feature branch named feature/my-awesome-stuff and commit some changes on it. While working on your branch, someone else committed changes into the master branch. Hence, for integrating your changes into master you would end up with a merge: 1 2 3 4 5 6 * 3c36424 (HEAD -> master) fixed some super important issue | * 66beba4 (feature/my-awesome-stuff) more work on my awesome feature | * cca995e did some stuff |/ * 1ed51e3 added another file * 5cee848 initial commit To get your commits into master , first make sure that your local history is up-to-date by running git fetch . Next, rebase your commits. This prevents a merge from happening. This is achieved with the following git command on our branch: git rebase -i origin/master . Git will now ask you how to proceed with your commits: 1 2 pick cca995e did some stuff pick 66beba4 more work on my awesome feature Now squash all commits into a single commit while rebasing: 1 2 pick cca995e did some stuff squash 66beba4 more work on my awesome feature Afterward, Git asks you to enter a message for the new commit. The default message it offers is a concatenation of all the commit messages from the commits to squash. However, you want to make the new commit message fit the earlier described pattern. After rebasing your Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> feature/my-awesome-stuff) 42: super awesome feature * 3c36424 (master) fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You still have to branch; now it\u2019s time to merge them. Change your git branch to master using git checkout origin/master . Make sure you have pulled from the remote and your branch is up-to-date. Now run git merge --ff-only feature/my-awesome-stuff . The \u2013ff-only is important to force git to not merge if it would produce a merge commit. Now Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> master, feature/my-awesome-stuff) 42: super awesome feature * 3c36424 fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You haven\u2019t created a merge commit, and all commits from your branch appear as a single commit in the Git history. You are good to go to push back to the repo . But wait, what if somebody has changes things in the meantime on the remote, wouldn\u2019t the pull create a new merge? Yes it would! Therefor don\u2019t use a plain git pull but use git pull --rebase in case you are pulling from the repo into your local master branch. This way, Git doesn\u2019t produce a new merge commit but rebase your local changes on top of the remote changes.","title":"Example"},{"location":"mbeddr/development_guide/#test-organization","text":"","title":"Test Organization"},{"location":"mbeddr/development_guide/#naming","text":"The test solution for language com.mbeddr.x. lang should be named test.com.mbeddr.x. lang . Respectively, the test solution for solution com.mbeddr.y. sol should be named test.com.mbeddr.y. sol . If you need a dedicated language for testing purposes, you should name it test.com.mbeddr.x.[ lang | sol ].testsupport (or a similar suffix). This way, you can discriminate between \u201creal\u201d code below namespace com.mbeddr and test code below namespace test . You should also place any demo or playground modules outside the com.mbeddr namespace for the same reason. By following this scheme, you can build productive code in the UI by building everything below com.mbeddr in the modules pool, and be assured not to be interfered by test, demo, or playground code.","title":"Naming"},{"location":"mbeddr/development_guide/#project-structure","text":"All languages, solutions, tests, demos, and playgrounds of one feature should be placed below a common virtual folder bearing the name of the feature. An exception might be build models. Generators must be present only when required or deleted if empty. This allows us to access all artifacts constituting one feature.","title":"Project Structure"},{"location":"mbeddr/development_guide/#file-system","text":"All test code should be placed in a special folder in the file system:","title":"File System"},{"location":"mbeddr/development_guide/#build","text":"","title":"Build"},{"location":"mbeddr/development_guide/#build-script-setup","text":"In mbeddr there are different build scripts. They are used on the local machines for building the languages and on the build server for various build-related tasks, such as testing or packaging. This documentation guides you in following the mbeddr standards for setting up your BuildProject and integrating it into Mbeddr\u2019s build infrastructure.","title":"Build script setup"},{"location":"mbeddr/development_guide/#required-buildfoldermacros","text":"In your BuildProject (the build script\u2019s model representation in MPS ) you first need a BuildFolderMacro (a folder ) named mps.home (see code snippet below). If you want to run the generated ant script in your MPS , then you should specify the location of your MPS installation in a relative way, otherwise you don\u2019t need a path for mps.home . At script execution time, you will redefine mps.home , to point to the folder where your MPS installation is located at. 1 folder mps.home = <no defaultPath> Next, you need a BuildFolderMacro named artifacts.root that doesn\u2019t require a path (see snippet below). When executing the ant script, generated from your BuildProject , define this macro from outside to point to the folder where all your plugin dependencies (for example: mbeddr.platform ) are located. 1 folder artifacts.root = <no defaultPath> For each BuildProjectDependency (the dependency\u2019s section below your folders) we need a separate BuildFolderMacro that follows the naming convention .artifacts and points to $artifacts.root/<BuildProject name> . At build script execution time, those macros will point to the folders, where your required plugins are located. In the code snippet below you can see the resulting BuildFolderMacros for a BuildProject with two dependencies: mps- sl -all and com.mbeddr.platform. 1 2 folder sl-all.artifacts = $artifacts.root/mps-sl-all folder platform.artifacts = $artifacts.root/com.mbeddr.platform","title":"Required BuildFolderMacros"},{"location":"mbeddr/development_guide/#type-system-tests","text":"When you want to build type system tests that require a specific path macro (for example: for specifying the project location inside your TestInfo ), then you must create a BuildFolderMacro for this path macro. The name of this BuildFolderMacro should start with mps.macro , followed by the name of the respective path macro. In the example below, you instruct MPS via mps.macro.mbeddr.github.core.home to create a path macro mbeddr.github.core.home that points to the relative path location specified in the other BuildFolderMacro mbeddr.github.core.home . 1 folder mps.macro.mbeddr.github.core.home = $mbeddr.github.core.home Furthermore, you need to mark solutions containing type system tests as content: (with sources and tests) . To achieve this, please perform the following steps: Inside your BuildProject move your cursor to the solution that contains your type system tests. Open the inspector. Inside the Inspector select the node sources, open the context menu and select sources and tests from it. To get your tests executed, you first need to add the module-tests plugin to your use plugins: section (on top of your BuildProject ). When you can\u2019t add the node module-tests to this section, import it from jetbrains.mps.build.mps.tests.accessories . Finally, create a BuildMpsLayout_TestModules (a test configuration ) at bottom of your BuildProject and list there all solutions that contain type system tests to be executed.","title":"Type system tests"},{"location":"mbeddr/development_guide/#configurations-for-generator-and-compiler","text":"To make sure code is generated and compiled the same way as in MPS , you have to add the following configurations ( BuildSource_JavaOptions and BuildMps_GeneratorOptions ) to your BuildProject \u2018s project structure. Those configurations control the generator engine and the Java compiler to make sure we have the same build behavior as in the IDE . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 generator options <project default> strict mode true multiple threads true number of threads 4 inplace transform true hide warnings false resort to static references true java options <project default> generate debug info true generate no warnings false fork false compiler <default compiler> java compliance level 1.6 java compiler options <no additional options> copy resources false","title":"Configurations for generator and compiler"},{"location":"mbeddr/development_guide/#building-a-release","text":"For preparing a mbeddr release, you can modify the version number that is set for the mbeddr plugins by overwriting the values of major.version , minor.version and build (see screenshot below). However, you don\u2019t change these values inside the MPS build scripts, instead, either you change them in the global gradle script ( mbeddr.core/build.gradle ), or you overwrite them via the command line while spawning a new release build: -PmajorVersion=1 -PbuildVersion=0 -PminorVersion=0000 build_mbeddr publishMbeddrAllInOnePublicationToMavenRepository","title":"Building a release"},{"location":"mbeddr/misc_topics/","text":"Misc Topics \u00b6 Limitations to product line engineering when generating variant aware code \u00b6 The current PLE approach only generates a single variant. The generated artifacts aren\u2019t variant aware. We want to enable the that the generated code can contain #if statements to generate all variants at once. When we want to do this we have to limit variability to elements where we can represent this in the generated C code. The main problem is that presence conditions can\u2019t be applied to all nodes in the model. What doesn\u2019t work? \u00b6 In addition to elements with a cardinality of 1, some other items can\u2019t be removed from the AST with presence conditions: parameters of a function arguments from function calls extra declarations of for loops variable initializers expressions in array/user defined type initializers arguments of function macros (global function declarations) Code smells \u00b6 replacement of functioncall expression where parent is expression statement replace complete statement to generate readable code","title":"Miscellaneous topics"},{"location":"mbeddr/misc_topics/#misc-topics","text":"","title":"Misc Topics"},{"location":"mbeddr/misc_topics/#limitations-to-product-line-engineering-when-generating-variant-aware-code","text":"The current PLE approach only generates a single variant. The generated artifacts aren\u2019t variant aware. We want to enable the that the generated code can contain #if statements to generate all variants at once. When we want to do this we have to limit variability to elements where we can represent this in the generated C code. The main problem is that presence conditions can\u2019t be applied to all nodes in the model.","title":"Limitations to product line engineering when generating variant aware code"},{"location":"mbeddr/misc_topics/#what-doesnt-work","text":"In addition to elements with a cardinality of 1, some other items can\u2019t be removed from the AST with presence conditions: parameters of a function arguments from function calls extra declarations of for loops variable initializers expressions in array/user defined type initializers arguments of function macros (global function declarations)","title":"What doesn't work?"},{"location":"mbeddr/misc_topics/#code-smells","text":"replacement of functioncall expression where parent is expression statement replace complete statement to generate readable code","title":"Code smells"},{"location":"mps_internal/","text":"The project isn\u2019t a project. I want to call GenerationCheckHelper.checkModelsBeforeGenerationIfNeeded to check my model. It that takes a Project but my Project that I get as an action context isn\u2019t the correct project. The type system complains that it\u2019s not the correct class. How do I get the correct project class? The two Project interfaces are always a source of confusion. Essentially one comes from the IntelliJ platform and the other one holds MPS specific parts of the project. com.intellij.openapi.project.Project : The project from the platform stores basic information like the folder where the project is located and gives, for example, access to project plugins. jetbrains.mps.project.Project : MPS specific aspects of a project like model access or the repository. It also gives access to the modules (languages and solutions) of the project. To get the MPS Project from an Idea Project use fromIdeaProject from ProjectHelper . To the a Idea Project from the MPS Project case the interface to MPSProject , if you only have a jetbrains.mps.project.Project , call getProject on it. contributed by: @coolya How to you get started using MPS \u2018 Open API? Specific Languages blog: The simplest way to use MPS Open API How to you get MPS core components from code? From the console: 1 2 3 MPSProject p = (( MPSProject ) # project ); Platform host = ( Platform ) p . getPlatform (); # print host . findComponent ( MakeServiceComponent . class ); I want to change something inside a SModule such as adding a dependency but can\u2019t find the right method. Try casting it to AbstractModule first. Is there a way to start two instances of MPS , each with its own cache/state? You can create a copy of you MPS installation and edit the idea.properties file in the bin directory. Changing idea.system.path should allows you start a second instance with dedicated caches/state. If you don\u2019t want to share any configuration also update idea.config.path. Where can you find builtin icons? IntelliJ IDEA icons are declared in the class AllIcons . MPS icons are declared in the class MPSIcons . How can you have settings that get saved globally? 1 Preferences can be only used at the project level. Use the workaround described in this answer or save your values in the global IntelliJ IDEA Registry . More information about the Registry can be found in this Stack Overflow post . It can also be shown programmatically by calling new RegistryUi().show() . How can you call make or rebuild? Use the class MakeActionImpl . Example usages can be found in the same model. How to you add widgets to the status bar? (for example: memory indicator, save transient models) Have a look at this answer . Make sure to call this code from a project plugin . How do you display a message in the status bar? (left bottom corner) Note: the message might not be visible when executing the code from the console, because the rebuild of the model overrides it with a new message: WindowManager.getInstance().getStatusBar(ProjectHelper.toIdeaProject(#project)) How can I register an IntelliJ extension? Find the interface you want to add an extension on this page . The corresponding interface has a static field EP_NAME . If the interface is implemented in Kotlin it might have a static field Companion with a getEP_NAME() method. Extend this interface (EX) and register it through the extension point. Example: Interface.EP_NAME.getPoint().registerExtension(new Ex()) How can you add a status bar widget? Implement the interface StatusBarWidgetFactory and register it through the StatusBarWidgetFactory.EP_NAME extension point. How do you add model imports and used languages programmatically? Specific Languages Blog: Adding model imports and used languages programmatically How can you run some MPS code from the command line/CI? Specific Languages blog: Running MPS code from command line Specific Languages blog: Running code in MPS on CI How can you render a node as a text? Specific Languages blog: Rendering a node as text How can you associate more information with a node? Specific Languages blog: Associating additional information with a node How does shrinking of absolute paths work? Specific Languages blog: Shrinking of absolute paths How can you retrieve nodes of other models and modules? model.nodesIncludingImported returns all nodes including the ones from other models that are currently imported. How can you make an internal MPS editor read-only? Given I want to make a contribution to a generator the j.mps.lang.editor . When I download the MPS source , open the project in MPS under code and open j.m.l.editor/SubstituteMenuPart_ReferenceScope_declare , then I see the model being read-only. What can I do? You need to open MPS in IDEA (Community Edition is enough), compile and run it from there, then you can edit MPS sources. There are instructions in README . How can you do a fulltext search in the IDE ? I sometimes need a textual search which MPS doesn\u2019t provide out of the box. In that situation, I am unsure of the concept and type of what I see, so a top-down search is not an option. Instead I would like to search for that string to have a starting point for my investigation. Examples: I want to investigate in an editor in the user interface and don\u2019t want to reverse engineer what hints, editors and concepts lead to what I see. Behavioral view code, like custom cells, swing cells or querylists make it hard to figure out where the source logic of that is located. when the console shows something I don\u2019t understand, I\u2019d like to see its context source code, so that I can figure out what to do next. Option 0 : Use Language Debugging facilities of MPS instead. For built-in languages, MPS brings a load of dedicated debugging facilities: Debugging editor cells and nodes: When you right-click an item in the editor, you can find a submenu Language Debug . Debugging menu entries: Select an item that you\u2019re curious in and press Cmd + Alt + B / Ctrl + Alt + B to open the Menu Trace of it. Setup and an IntelliJ and connect it to step through java code. Option 1 : Search for literals from console. Option 2 : Search through serialized Java. Set up IntelliJ with your project. Hit Cmd + Shift + F / Ctrl + Shift + F to search in path. When you found a class of interest, open it in MPS via Cmd + N / Ctrl + N . The source node usually has a similar name. This is great for finding editor nodes, for example, if that java class is named Vehicle_EditorBuilder , your source node was an editor for the Vehicle concept. Last Resort : Search XML model directly. Use this only if you have no assembly and your project doesn\u2019t open. The serialized API is subject to change and using this should be the last barrier. Then use ack (or a similar tool) on the command line to find the relevant models that contain this string. The output even contains the node id though, as in this example: 1 2 3 4 5 6 7 $ ack \"ack com.mbeddr.mpsutil.grammarcells\" \u2026 <node concept=\"3bR9La\" id=\"1aL6sVX49Cb\" role=\"1SiIV1\"> <property role=\"3bR36h\" value=\"false\" /> <ref role=\"3bR37D\" to=\"90a9:F1NWDqq_DA\" resolve=\"com.mbeddr.mpsutil.grammarcells.runtime\" /> </node> \u2026 Use new IdEncoder (). parseNodeId ( \"1aL6sVX49Cb\" ) to get the node id . This will print the corresponding node to console. Clicking it will open in in MPS : 1 2 3 4 5 6 7 8 9 # nodes . where ({ ~ it => boolean equals = false ; try { equals = it / . getNodeId (). equals ( new IdEncoder (). parseNodeId ( \"1aL6sVX49Cb\" )); } catch ( Exception e ) { < no statements > } return equals ; }) How to get rid of Error: shall specify a repository to lock? When accessing model properties in rendering code, you must encapsulate the model accessing code in a read action: It always has an error \u201cError: shall specify a repository to lock\u201d. How can I get rid of it? What is a \u2018repository\u2019 and is there any documentation that explains the concept and how to use it correctly? asked by: @cwalesch The repository is what is represented as the \u201cmodules pool\u201d in the UI . It contains all the dependencies currently visible. At the moment there is only one global repository which causes several problems. MPS is slowly but steadily moving to project specific repositories. That would mean each project (window) of MPS would have it\u2019s own separate repository. To get the repository you will need access to the project. e.g. the editor context will give you access to the repository: editorContext.getRepository() . In other cases, for instance, when you don\u2019t have an editor context directly available you need to make sure that from UI (action) you pass the project or repository though to the place where you need it. answered by: @coolya How can you get an identifier of a node? Given I have a node myNode and I need to serialize something that identifies it. When I serialize that something and then deserialize that identifier again, then I will find exactly that node. How can I build such a thing? Option 1 : PersistenceFacade ID Since the url does not look nice; you may use this combined string of model ID and node ID that is used for the url. For that, import the class org.jetbrains.mps.openapi.persistence.PersistenceFacade from the MPS .OpenApi stub and run: 1 2 3 4 5 6 7 # serialize identifier string mySerializedId = SNodePointer . serialize ( node / . getReference ()) # find node based on serialized identifier node <> myFoundNode = SNodePointer . deserialize ( mySerializedId ). resolve ( repository ) # then , node == myFoundNode Option 2 : Url Import the httpsupport language and use node.getURL . This will be a url that you can use locally to open this node. It includes the node id and the model and thus is a pretty good globally unique id . This id is a local URL and looks odd though: http://127.0.0.1:63320/node?ref=r%3A4bc03cd1-b1e3-49da-84da-f27e7062f6f7%28integrityOfUpdate%29%2F2209769512593382448&project=SecurityAnalyst . Especially the code to find the node again based on this url contains some grepping then. Option 3 : Node Id Use node / . getNodeId (). toString () it will yield the nodes id . Note that a node ID is only unique within this model. If it should be globally unique, consider option 1. contributed by: @abstraktor Where does MPS store preferences? For a starting point, read Directories used by the IDE . CONFIG_DIR refers to the configuration directory. WORKSPACE_FILE refers to $PROJECT/.mps/workspace.xml : refactoring settings: CONFIG_DIR/options/refactoringSettings.xml override/implement setttings: WORKSPACE_FILE/OverrideImplementMethodComponent additional libraries: CONFIG_DIR/options/AdditionalLibrariesManager.xml default search options: WORKSPACE_FILE/DefaultSearchOptions3 make configuration: WORKSPACE_FILE/mpsMakeService code style settings: CONFIG_DIR/options/codeStyleSettings.xml break point settings: WORKSPACE_FILE/BreakpointViewSettings migration state: WORKSPACE_FILE/MigrationProperties model validation settings: CONFIG_DIR/options/mpsModelValidationSettings.xml concept editor settings: WORKSPACE_FILE/ConceptEditorHintSettings node search history: WORKSPACE_FILE/NodeEditorSearchHistory project libraries: WORKSPACE_FOLDER/libraries.xml bookmarks: WORKSPACE_FILE/BookmarksTool project view: WORKSPACE_FILE/ProjectView blame dialog: CONFIG_DIR/options/charismaBlameDialog.xml compiler settings: WORKSPACE_FOLDER/compiler.xml model checker settings: CONFIG_DIR/options/modelCheckerSettings.xml modules: WORKSPACE_FOLDER/modules.xml project plugin settings: WORKSPACE_FILE/ProjectPluginManager generation settings: CONFIG_DIR/options/generationSettings.xml console history: WORKSPACE_FILE/ConsoleHistory break points: WORKSPACE_FILE/BreakpointManager bookmarks: WORKSPACE_FILE/MPSBookmarkManager messages view tool settings: WORKSPACE_FILE/MessagesViewTool usages view tool settings: WORKSPACE_FILE/UsagesViewTool disabled intentions: CONFIG_DIR/options/intentions.xml editor settings: CONFIG_DIR/options/mpsEditor.xml migration trigger settings: WORKSPACE_FILE/MigrationTrigger https://mps-support.jetbrains.com/hc/en-us/community/posts/115000568670-Create-and-access-a-single-Preference-Component-which-is-common-for-all-projects \u21a9","title":"Index"},{"location":"mps_internal/classloading/","text":"Classloading \u00b6 Classloaders \u00b6 Different classloaders exist: bootstrap-class-loader, IDEA plugin classloaders and module class loaders. Loading a class into an MPS module involves the module class loader, the class of its dependencies and the bootstrap-class-loader. If a class comes from a jar in the MPS / lib folder (a bootstrap-loaded class), you practically can\u2019t load another version of it. They also have different life cycles. Module class loaders can reload classes after rebuilding and are resilient towards hot reloading. IDEA plugin class loaders are just for the installed plugins and didn\u2019t know what to do if a class needs reloading during runtime in the past. New versions of the intelliJ platform know how to reload classes, but now we\u2019re with MPS \u2019 implementation. The IDEA plugin classloaders load jars from the /plugins/ / lib directory. Jars from the / lib directory of the RCP are loaded from the root class loader. For your RCP , you usually don\u2019t want to put anything there. Code inside an IDEA plugin classloader may not access classes from module-class loaders but vice versa is fine If you pass a module-loaded class to an IDEA plugin-loaded class and reload the module-loaded class, and then try to access the stale class, you might get a ClassNotFoundException . If you register a class in the plugin.xml, you should make sure it can be loaded from the IDEA plugin classloader. To do so, add its jar to the / lib folder of your intellij-plugin. location description Java class MPS / lib root class loader,boostrap class loader com.intellij.util. lang .UrlClassLoader /plugins/ / lib IDEA plugin class loader com.intellij.ide.plugins. cl .PluginClassLoader any mps module with a java facet module class loader jetbrains.mps.classloading.ModuleClassLoader How to use Java classes shipped in MPS plugins \u00b6 For this example, assume that you want to use classes from the git4idea plugin inside your code. Solution 1 \u00b6 Create a solution MySolution . Create a model ending with \u201c.plugin,\u201d for example MySolution.plugin . Add the language jetbrains.mps. lang .plugin.standalone to both the MySolution.plugin model and the MySolution solution. Create a StandalonePluginDescriptor in the model MySolution.plugin . Add the MySolution to a build model named MySolution.build . Create an idea plugin the build model with id MySolution.IdeaPlugin . Add MySolution.build to the idea plugin MySolution.IdeaPlugin content. Add the dependency on git4idea to MySolution.IdeaPlugin dependencies. Execute the build script. In properties of solution MySolution , on the Facets tab, select Idea Plugin . In newly appearing Idea Plugin tab, set plugin ID to MySolution.IdeaPlugin . Restart MPS . Now the classes within git4idea are available within MySolution . Attention: MPS IDE won\u2019t build the code within solution MySolution anymore. Run the build script to activate any changes. Solution 2 \u00b6 You can find an example here . Create a solution git4idea.withJavaFacet . Edit the created msd file and make the following modifications: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <solution> ... <models> <modelRoot contentPath= \"${module}\" type= \"default\" > <sourceRoot location= \"models\" /> </modelRoot> <modelRoot contentPath= \"${mps_home}/plugins/git4idea/lib\" type= \"java_classes\" > <sourceRoot location= \"git4idea-rt.jar\" /> <sourceRoot location= \"git4idea.jar\" /> </modelRoot> </models> <facets> <facet type= \"java\" languageLevel= \"JAVA_8\" > <classes generated= \"true\" path= \"${module}/classes_gen\" /> </facet> <facet pluginId= \"Git4Idea\" type= \"ideaPlugin\" /> </facets> <stubModelEntries> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea-rt.jar\" /> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea.jar\" /> </stubModelEntries> <sourcePath /> <dependencies> ... </dependencies> ... </solution> The jar files are directly referenced from the mps plugins folder. The jars are then loaded as part of the Git4Idea facet. Classloading issues \u00b6 Sometimes you might get conflicts with existing libraries that MPS already ships. For instance while using the SAXBuilder . In these cases, you will get a class version exception or similar. As a workaround, you can set the classloader and the current thread while instantiating such classes: 1 2 3 4 5 6 7 8 9 10 11 12 class ClassLoading { void setClassLoader () { ClassLoader cl = Thread . currentThread (). getContextClassLoader (); try { Thread . currentThread (). setContextClassLoader ( this . getClass (). getClassLoader ()); SAXBuilder sax = new SAXBuilder (); return sax . build ( f ); } finally { Thread . currentThread (). setContextClassLoader ( cl ); } } } This prevents the exception but make sure to set the class loader back when you finish. Calling things written in MPS like behavior methods when the class loader changes is also likely to not work and gives you all kinds of strange exceptions.","title":"Classloading"},{"location":"mps_internal/classloading/#classloading","text":"","title":"Classloading"},{"location":"mps_internal/classloading/#classloaders","text":"Different classloaders exist: bootstrap-class-loader, IDEA plugin classloaders and module class loaders. Loading a class into an MPS module involves the module class loader, the class of its dependencies and the bootstrap-class-loader. If a class comes from a jar in the MPS / lib folder (a bootstrap-loaded class), you practically can\u2019t load another version of it. They also have different life cycles. Module class loaders can reload classes after rebuilding and are resilient towards hot reloading. IDEA plugin class loaders are just for the installed plugins and didn\u2019t know what to do if a class needs reloading during runtime in the past. New versions of the intelliJ platform know how to reload classes, but now we\u2019re with MPS \u2019 implementation. The IDEA plugin classloaders load jars from the /plugins/ / lib directory. Jars from the / lib directory of the RCP are loaded from the root class loader. For your RCP , you usually don\u2019t want to put anything there. Code inside an IDEA plugin classloader may not access classes from module-class loaders but vice versa is fine If you pass a module-loaded class to an IDEA plugin-loaded class and reload the module-loaded class, and then try to access the stale class, you might get a ClassNotFoundException . If you register a class in the plugin.xml, you should make sure it can be loaded from the IDEA plugin classloader. To do so, add its jar to the / lib folder of your intellij-plugin. location description Java class MPS / lib root class loader,boostrap class loader com.intellij.util. lang .UrlClassLoader /plugins/ / lib IDEA plugin class loader com.intellij.ide.plugins. cl .PluginClassLoader any mps module with a java facet module class loader jetbrains.mps.classloading.ModuleClassLoader","title":"Classloaders"},{"location":"mps_internal/classloading/#how-to-use-java-classes-shipped-in-mps-plugins","text":"For this example, assume that you want to use classes from the git4idea plugin inside your code.","title":"How to use Java classes shipped in MPS plugins"},{"location":"mps_internal/classloading/#solution-1","text":"Create a solution MySolution . Create a model ending with \u201c.plugin,\u201d for example MySolution.plugin . Add the language jetbrains.mps. lang .plugin.standalone to both the MySolution.plugin model and the MySolution solution. Create a StandalonePluginDescriptor in the model MySolution.plugin . Add the MySolution to a build model named MySolution.build . Create an idea plugin the build model with id MySolution.IdeaPlugin . Add MySolution.build to the idea plugin MySolution.IdeaPlugin content. Add the dependency on git4idea to MySolution.IdeaPlugin dependencies. Execute the build script. In properties of solution MySolution , on the Facets tab, select Idea Plugin . In newly appearing Idea Plugin tab, set plugin ID to MySolution.IdeaPlugin . Restart MPS . Now the classes within git4idea are available within MySolution . Attention: MPS IDE won\u2019t build the code within solution MySolution anymore. Run the build script to activate any changes.","title":"Solution 1"},{"location":"mps_internal/classloading/#solution-2","text":"You can find an example here . Create a solution git4idea.withJavaFacet . Edit the created msd file and make the following modifications: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <solution> ... <models> <modelRoot contentPath= \"${module}\" type= \"default\" > <sourceRoot location= \"models\" /> </modelRoot> <modelRoot contentPath= \"${mps_home}/plugins/git4idea/lib\" type= \"java_classes\" > <sourceRoot location= \"git4idea-rt.jar\" /> <sourceRoot location= \"git4idea.jar\" /> </modelRoot> </models> <facets> <facet type= \"java\" languageLevel= \"JAVA_8\" > <classes generated= \"true\" path= \"${module}/classes_gen\" /> </facet> <facet pluginId= \"Git4Idea\" type= \"ideaPlugin\" /> </facets> <stubModelEntries> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea-rt.jar\" /> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea.jar\" /> </stubModelEntries> <sourcePath /> <dependencies> ... </dependencies> ... </solution> The jar files are directly referenced from the mps plugins folder. The jars are then loaded as part of the Git4Idea facet.","title":"Solution 2"},{"location":"mps_internal/classloading/#classloading-issues","text":"Sometimes you might get conflicts with existing libraries that MPS already ships. For instance while using the SAXBuilder . In these cases, you will get a class version exception or similar. As a workaround, you can set the classloader and the current thread while instantiating such classes: 1 2 3 4 5 6 7 8 9 10 11 12 class ClassLoading { void setClassLoader () { ClassLoader cl = Thread . currentThread (). getContextClassLoader (); try { Thread . currentThread (). setContextClassLoader ( this . getClass (). getClassLoader ()); SAXBuilder sax = new SAXBuilder (); return sax . build ( f ); } finally { Thread . currentThread (). setContextClassLoader ( cl ); } } } This prevents the exception but make sure to set the class loader back when you finish. Calling things written in MPS like behavior methods when the class loader changes is also likely to not work and gives you all kinds of strange exceptions.","title":"Classloading issues"},{"location":"mps_internal/dependencies/","text":"Dependencies \u00b6 Some sections on this page were written a few years ago where an older MPS version was used. Please report anything that isn\u2019t true anymore. First of all: the number of languages can be very important: Many small languages are hard to maintain while big languages take a long time building in the IDE . Many dependencies can create cycles which are described later on this page. By default, you can only reference nodes present in the current model. Dependencies add other models and modules that you can reference from the current model. Models listed as dependencies of Model \\(A\\) need to be contained within modules listed in the dependencies (including transitive entries) of the module containing this model. Example: You can\u2019t mark a model internal and hide it from outside access. Export flag \u00b6 It exports a Module Dependency again to be used by modules depending on this module. Example: Scope \u00b6 Default Scope is available for all module types. Extends Scope is a superset of Default Scope , for example, you never need to have both a Default Scope and an Extends Scope dependency on another module. Extends scope for languages \u00b6 LanguageB (containing ConceptB ) must extend LanguageA (containing ConceptA and ConceptInterfaceA ) if and only if Another case is if LanguageB defines a generator outputting ConceptA and LanguageA has a runtime solution. LanguageB shouldn\u2019t extend LanguageA (but needs a Default Scope dependency) if LanguageB can\u2019t define To be precise, it is possible to remove all errors flagged on behaviors and constraints in LanguageB . However, they aren\u2019t taken into account for ConceptA . Extends scope for generators \u00b6 GeneratorB (inside LanguageB , and containing ConceptB ) must extend GeneratorA (inside LanguageA , and containing ConceptA ), if and only if Implicit dependencies \u00b6 MPS adds some dependencies implicitly without listing them in the corresponding dialog. Warning: even if the dependencies described below are established implicitly, they aren\u2019t taken into account in every aspect of MPS . So if an error occurs, make sure you didn\u2019t rely on some implicit dependency. If in doubt, make the dependency explicit. Implicit dependencies inherited by a generator from its language \u00b6 A Generator inherits some dependencies from the language where it\u2019s defined in: The language\u2019s runtime solutions are added to the generator module dependencies. The language\u2019s module is added to the generator module dependencies. The language is added to the generator Used languages . Except the case of generating a concept of a language that has a runtime solution, there is no requirement on the language\u2019s dependencies or Used Languages stemming from the generator. Implicit exports of used language and language structure aspect \u00b6 Both a Used Language and the language structure aspect implicitly make it possible to access the language\u2019s behavior methods. However, they not export again the complete behavior aspect. For example, a baselanguage class contained in the behavior Aspect isn\u2019t visible. Implicit exports of runtime language settings \u00b6 Runtime solutions are implicitly loaded into the Java classpath of any module using this language. implicitly added to the Dependencies of the Generator contained in this language. Accessory Models are implicitly loaded into the dependencies of any model using this language. Accessory Models aren\u2019t designed to keep any classes. This is design-only information. They shouldn\u2019t affect Java class path anyhow. Neither runtime solutions nor accessory models constitute a dependency from the language to the referenced solution or model. Cyclic dependencies \u00b6 Cyclic dependencies between modules should be avoided in general. They tend to render generation orders and other behavior non-deterministic. Languages are explicitly checked not to have a cyclic Extends Scope dependency. Cycles between models in the same module are fine. Starting with MPS 2021.1, there is a higher chance that you could run into troubles with cyclic dependencies. The reason is the new javax compiler that doesn\u2019t act as forgiving as the earlier one (ECJ). Distinctive cases are runtime solutions, accessory models, and utility models. In contrast to runtime solutions, utility models are used while accessing behavior or running a generator. Code within runtime solutions is used after the generator ran from the generated code. Thus, a runtime solution shouldn\u2019t use or reference the language it is referenced from. A utility model can use or reference the language it is reference from. Accessory models can use or reference the language they\u2019re referenced from. For build scripts there is a flag that allows bootstrap dependencies. More information can be found in section MPS Settings of the build language documentation .","title":"Dependencies"},{"location":"mps_internal/dependencies/#dependencies","text":"Some sections on this page were written a few years ago where an older MPS version was used. Please report anything that isn\u2019t true anymore. First of all: the number of languages can be very important: Many small languages are hard to maintain while big languages take a long time building in the IDE . Many dependencies can create cycles which are described later on this page. By default, you can only reference nodes present in the current model. Dependencies add other models and modules that you can reference from the current model. Models listed as dependencies of Model \\(A\\) need to be contained within modules listed in the dependencies (including transitive entries) of the module containing this model. Example: You can\u2019t mark a model internal and hide it from outside access.","title":"Dependencies"},{"location":"mps_internal/dependencies/#export-flag","text":"It exports a Module Dependency again to be used by modules depending on this module. Example:","title":"Export flag"},{"location":"mps_internal/dependencies/#scope","text":"Default Scope is available for all module types. Extends Scope is a superset of Default Scope , for example, you never need to have both a Default Scope and an Extends Scope dependency on another module.","title":"Scope"},{"location":"mps_internal/dependencies/#extends-scope-for-languages","text":"LanguageB (containing ConceptB ) must extend LanguageA (containing ConceptA and ConceptInterfaceA ) if and only if Another case is if LanguageB defines a generator outputting ConceptA and LanguageA has a runtime solution. LanguageB shouldn\u2019t extend LanguageA (but needs a Default Scope dependency) if LanguageB can\u2019t define To be precise, it is possible to remove all errors flagged on behaviors and constraints in LanguageB . However, they aren\u2019t taken into account for ConceptA .","title":"Extends scope for languages"},{"location":"mps_internal/dependencies/#extends-scope-for-generators","text":"GeneratorB (inside LanguageB , and containing ConceptB ) must extend GeneratorA (inside LanguageA , and containing ConceptA ), if and only if","title":"Extends scope for generators"},{"location":"mps_internal/dependencies/#implicit-dependencies","text":"MPS adds some dependencies implicitly without listing them in the corresponding dialog. Warning: even if the dependencies described below are established implicitly, they aren\u2019t taken into account in every aspect of MPS . So if an error occurs, make sure you didn\u2019t rely on some implicit dependency. If in doubt, make the dependency explicit.","title":"Implicit dependencies"},{"location":"mps_internal/dependencies/#implicit-dependencies-inherited-by-a-generator-from-its-language","text":"A Generator inherits some dependencies from the language where it\u2019s defined in: The language\u2019s runtime solutions are added to the generator module dependencies. The language\u2019s module is added to the generator module dependencies. The language is added to the generator Used languages . Except the case of generating a concept of a language that has a runtime solution, there is no requirement on the language\u2019s dependencies or Used Languages stemming from the generator.","title":"Implicit dependencies inherited by a generator from its language"},{"location":"mps_internal/dependencies/#implicit-exports-of-used-language-and-language-structure-aspect","text":"Both a Used Language and the language structure aspect implicitly make it possible to access the language\u2019s behavior methods. However, they not export again the complete behavior aspect. For example, a baselanguage class contained in the behavior Aspect isn\u2019t visible.","title":"Implicit exports of used language and language structure aspect"},{"location":"mps_internal/dependencies/#implicit-exports-of-runtime-language-settings","text":"Runtime solutions are implicitly loaded into the Java classpath of any module using this language. implicitly added to the Dependencies of the Generator contained in this language. Accessory Models are implicitly loaded into the dependencies of any model using this language. Accessory Models aren\u2019t designed to keep any classes. This is design-only information. They shouldn\u2019t affect Java class path anyhow. Neither runtime solutions nor accessory models constitute a dependency from the language to the referenced solution or model.","title":"Implicit exports of runtime language settings"},{"location":"mps_internal/dependencies/#cyclic-dependencies","text":"Cyclic dependencies between modules should be avoided in general. They tend to render generation orders and other behavior non-deterministic. Languages are explicitly checked not to have a cyclic Extends Scope dependency. Cycles between models in the same module are fine. Starting with MPS 2021.1, there is a higher chance that you could run into troubles with cyclic dependencies. The reason is the new javax compiler that doesn\u2019t act as forgiving as the earlier one (ECJ). Distinctive cases are runtime solutions, accessory models, and utility models. In contrast to runtime solutions, utility models are used while accessing behavior or running a generator. Code within runtime solutions is used after the generator ran from the generated code. Thus, a runtime solution shouldn\u2019t use or reference the language it is referenced from. A utility model can use or reference the language it is reference from. Accessory models can use or reference the language they\u2019re referenced from. For build scripts there is a flag that allows bootstrap dependencies. More information can be found in section MPS Settings of the build language documentation .","title":"Cyclic dependencies"},{"location":"mps_internal/gui/","text":"Where can you find an overview of the user interface? It can be found in the IntelliJ IDEA documentation . A more technical explanation can be found in the IntelliJ Platform Plugin SDK . How can you show modal dialogs for inputting text? Use the class com.intellij.openapi. ui .Messages . How do you add messages to the right side of the window? In IntelliJ IDEA it is called error stripe , in MPS MessagesGutter : 1 2 3 jetbrains . mps . nodeEditor . EditorComponent component = (( EditorComponent ) editorContext . getEditorComponent ()); NodeHighlightManager highlightManager = component . getHighlightManager (); highlightManager . mark ( message ); How can you add things to the left of the editor? (examples: breakpoints, go subclasses etc.) The component is called LeftEditorHighlighter . A checker has to be implemented that can show messages in this component (example: OverrideMethodsChecker ). How to you add an icon to the status bar? Have a look at the the implementation of the transient models widget and its initialisation in TransientModelsNotification . What parts of the IntelliJ Platform SDK can\u2019t be used in MPS because they are not supported? Everything related to text files: Documents , PSI files , Templates , QuickDoc, IDE Features Trainer , CodeSmellDetector and Custom Language Support . How can you have clickable icons in the left editor margin? Specific Languages Blog: Clickable icons in the left editor margin Are there alternatives to message boxes? Specific Languages Blog: Use notification balloons instead of message boxes What IDEA UI elements are available? Specific Languages Blog: Polished UI for free: IDEA UI components How do you create menu items with checkboxes? Specific Languages Blog: Extended actions: Checkboxes How can you retrieve all opened windows in split screen mode ? 1 FileEditorManagerEx . getInstanceEx ( ProjectHelper . toIdeaProject ( # project )). getSplitters (). getWindows ()","title":"GUI"},{"location":"mps_internal/intellij_integration/","text":"The different plugins of MPS are declared using a plugin configuration file . The functionality is split into plugin components . application-components are activated when MPS starts, project-components are activated when a project is opened. MPS uses existing IntelliJ extension points . For a list of all extension points and listener have a look at Extension Point and Listener List | IntelliJ Platform Plugin SDK . New extensions points are declared in a section extensionPoints where a qualified name and the interface to implement has to be provided. The interface has to contain an extension point name declaration. Example: 1 2 3 4 5 6 public interface IntentionActionsProvider { ExtensionPointName < IntentionActionsProvider > EP_NAME = new ExtensionPointName <> ( \"com.intellij.mps.IntentionActionsProvider\" ); @NotNull AnAction [] getIntentionActions ( @NotNull IntentionExecutable intention ); } The extensions can be registered in an extensions block in the plugin.xml . The default extension namespace has to be com.intellij ( example ). The extension can also have attributes ( example ). Link to different MPS plugin.xml files: Execution Api and Utility Languages Execution configurations MPS Ant Integration: Make MPS Build Language MPS Context Actions Tool MPS Diagram Editor Make MPS Tooltips JetBrains MPS Integration Migration Support (+ plugin base ) Debugger API for MPS Java Debugger for MPS Jetpad Idea Integration for MPS MPS Java Integration (+ Java platform ) MPS console (+ actions ) Languages DevKit Memory Tool Model Checker MPS Version Control Support IDEA Core (+ other files ) Included in other plugins: editor actions editor Java platform acitons MPSCore PlatformActions All of the plugins use the charisma reporter for error reporting. This allows reporting errors to YouTrack. Another notable extension is the declaration of the mps language library. For example: 1 <mps.LanguageLibrary dir= \"/languages\" /> It tells MPS where in the plugin folder the compiled MPS languages can be found.","title":"IntelliJ integration"},{"location":"mps_internal/intellij_sdk/","text":"IntelliJ SDK \u00b6 Introduction to creating IntelliJ IDEA plugins Advanced guide to creating IntelliJ IDEA plugins IDEA thread modeling (for example: invokeLater ), PSI , Virtual Files, Dynamic plugins, UI Where can you find a list of all IntelliJ registry entries? They can be found in registry.properties . Listeners and message bus \u00b6 Message bus (message interface) \u00b6 listens for IntelliJ events/messages connection and subscription for different topics through listeners Just disconnect, you don\u2019t have to store and remove each listener you added. Reference IntelliJ Messaging Infrastructure Declarative registration of Plugin Listeners Topics AppTopics ProjectTopics Further Topics (through MPS console with checkeddots imported) # nodes < scope = global > . ofConcept < StaticFieldDeclaration > . where ({ ~ it => it . type . isInstanceOf ( ClassifierType ) && it . type : ClassifierType . ? classifier . ? name . ? equals ( \"Topic\" ); }) Example: 1 2 3 4 5 6 7 8 9 10 11 12 class MessageBusExample { void connect () { this . busConnection = ideaProject . getMessageBus (). connect (); FileEditorManagerListener myListener = new FileEditorManagerListener () { // implement listener (1) @Override public void selectionChanged ( @NotNull () FileEditoManagerEvent event ) { // code } }; this . busConnection . subscribe ( FileEditorManagerListener . FILE_EDITOR . MANAGER , myListener ); } } You have to implement selectionChanged for this listener.","title":"IntelliJ SDK"},{"location":"mps_internal/intellij_sdk/#intellij-sdk","text":"Introduction to creating IntelliJ IDEA plugins Advanced guide to creating IntelliJ IDEA plugins IDEA thread modeling (for example: invokeLater ), PSI , Virtual Files, Dynamic plugins, UI Where can you find a list of all IntelliJ registry entries? They can be found in registry.properties .","title":"IntelliJ SDK"},{"location":"mps_internal/intellij_sdk/#listeners-and-message-bus","text":"","title":"Listeners and message bus"},{"location":"mps_internal/intellij_sdk/#message-bus-message-interface","text":"listens for IntelliJ events/messages connection and subscription for different topics through listeners Just disconnect, you don\u2019t have to store and remove each listener you added. Reference IntelliJ Messaging Infrastructure Declarative registration of Plugin Listeners Topics AppTopics ProjectTopics Further Topics (through MPS console with checkeddots imported) # nodes < scope = global > . ofConcept < StaticFieldDeclaration > . where ({ ~ it => it . type . isInstanceOf ( ClassifierType ) && it . type : ClassifierType . ? classifier . ? name . ? equals ( \"Topic\" ); }) Example: 1 2 3 4 5 6 7 8 9 10 11 12 class MessageBusExample { void connect () { this . busConnection = ideaProject . getMessageBus (). connect (); FileEditorManagerListener myListener = new FileEditorManagerListener () { // implement listener (1) @Override public void selectionChanged ( @NotNull () FileEditoManagerEvent event ) { // code } }; this . busConnection . subscribe ( FileEditorManagerListener . FILE_EDITOR . MANAGER , myListener ); } } You have to implement selectionChanged for this listener.","title":"Message bus (message interface)"},{"location":"mps_internal/jcef/","text":"Start with the page JCEF - Java Chromium Embedded Framework of the IntelliJ platform plugin SDK. It should work with MPS 2021.1.4 and higher. Although it was introduced in Intellij IDEA 2020.1 it might not work in older MPS versions because of classloading issues. The browser itself ( JBCefBrowser ) can be embedded in the MPS editor with a swing component cell. For simple use cases, it is enough to call browser.loadHTML to load some HTMl code. The code can be created by Java or by calling the MPS generator or TextGen . Existing Java documentation and examples on the web: Java JCEF example that showcases all kinds of handlers and dialogs IntelliJ Markdown preview How do I use JCEF with Intellij? CEF documentatation (non Java version) The third link contains an answer on how to do bidirectional communication between the embedded browser and Java ( MPS ): You have to create a browser pipe between Java ( implementation ) and JS ( implementation ). The communication is done through JS. You then have a subscribe method that you can use to listening to events posted through a specific tag or create an event using the post method. These methods are available in Java and JS. Warning : MPS and the Intellij IDEA use Swing to create all the UI components. They are considered lightweight because they are drawn by Java itself. JCEF uses native code, it is a heavyweight component. Especially with MPS \u2018 reloading capabilities, it is important to correctly dispose the browser when it isn\u2019t needed anymore. The following code registers a listener for the editor component dispose event and also closes the browser: 1 2 3 4 5 6 7 8 9 10 11 12 13 class SwingComponent { void create () { // ... EditorComponent editorComponent = ( EditorComponent ) editorContext . getEditorComponent (); editorComponent . addDisposeListener ( new EditorComponent . EditorDisposeListener () { @Override public void editorWillBeDisposed ( @NotNull () EditorComponent p1 ) { browser . getCefBrowser (). close ( true ); } }); // ... } } When the browser is not correctly disposed, it might be drawn in different components, on top of MPS editors etc. There are also some known issues where JCEF makes the IDE crash ( JBR -4667 + linked related issues, JBR -2206 + linked related issues).","title":"Java Chromium Embedded Framework"},{"location":"mps_internal/models/","text":"Model \u00b6 UI : entry below module in the logical view. They may be nested in folders. Container for model contents limiting dependencies to other models. They are within the boundaries of the containing module. Models can be nested in folders. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or any other aspect. Types of models \u00b6 The IDE knows several types of models. They differ in their semantics and sometimes presentation. They don\u2019t differ from a technical point of view. Regular models \u00b6 UI : entry below solution in the logical view They contain root nodes with no specific semantics or presentation. Language aspects \u00b6 UI : entry below language in the logical view Aspects are models within a language with a special meaning. They are recognized by their name. Plugin aspect \u00b6 Although this aspect adheres to the plugin model naming convention, don\u2019t use it. Use it only to define MPS extension points (from language jetbrains.mps. lang .extension ). Test model \u00b6 UI : entry below solution in a specific folder named `tests? with specific icon in the logical view. A model containing tests. Defined by the @tests stereotype. Generator model \u00b6 UI : entry with specific icon below generator in the logical view. A model containing the generator, defined by the @generator stereotype. Transient model \u00b6 UI : last entry below project in logical view. Temporary models produced during generation, defined by @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb stereotype. Accessories model \u00b6 UI : entry below language in a specific folder named accessories in the logical view or entry below the solution in the logical view. A model specially selected by a language. Nodes contained in these models are implicitly available on the Java classpath and the dependencies of any model using this language. A use case would be a default library of concept instances to be available at any place you use the Language. You can store accessory models in two places: either as an aspect of a language (recommended), or as a regular model below a solution. In both cases, the model needs to be added to the module runtime language settings. Utility model \u00b6 UI : entry below language in a special folder named util models in the logical view. It includes code required in other parts of a language or generator. If, for example, the behavior method logic is too complex for inline implementation or a generator needs to do complex model traversals. Create them as regular models within the language. Build model \u00b6 ** UI : entry below a solution in the logical view It includes nodes from the build language . MPS plugin model \u00b6 UI : model within a solution in the logical view. It includes MPS plugins. The model name needs to adhere to the naming convention \u00abmoduleName\u00bb.plugin . Model stereotype \u00b6 UI : attached to the model name, separated by @ . A model may have a stereotype. To change, add, or remove a stereotype, use Rename Model Refactoring in the context menu of a model. Using custom stereotypes interferes with lots of MPS internals and thus isn\u2019t advised to do. The IDE knows some predefined Stereotypes with specific meanings: @tests : Denotes test models. @generator : Denotes generator models. @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb : Denotes transient models. Model settings \u00b6 UI : context menu of a model, model properties For both dependencies and used languages, the settings of models only restrict the settings from the containing module. Dependencies model settings \u00b6 UI : tab in the model properties dialog It lists other models this model contains references to. Used languages model settings \u00b6 UI : tab in model properties dialog It lists languages used in this Model. Any Used Language listed in a model, needs to be in the list of Used Languages of the containing module. Advanced model settings \u00b6 UI : tab in the model properties dialog It contains other settings for a model: languages engaged on generation: Generators contained in languages listed here execute on this model in any case. Build language \u00b6 Abstracted Apache Ant files used to build and package MPS Modules outside the IDE . It\u2019s used in build models . MPS can execute them via the Run \u00abBuild Model name\u00bb context menu entry of the build model in the logical view. Dependencies \u00b6 UI : section within build model This is the scope import for all references to other build models. It provides access to resulting artifacts of other build models. IDEA plugin dependencies \u00b6 UI : section project structure in Build Model , subsection idea plugin , subsection dependencies . It contains the contents of IDEA plugin.xml depends tags. This plugin only loads if all dependencies listed here load before. The contents of dependencies are available for this IDEA plugin. Module Dependencies \u00b6 UI : section mps group in Build Model , subsection solution / module , inspector section dependencies . It contains a copy of relations of the described module. Runtime \u00b6 It contains a copy of module runtime language settings. Jars \u00b6 UI : section default layout in Build Model You have to include all jars included in any Java module settings somewhere in this section. .java files (from Java source paths) need to be compiled as java sources inside corresponding build script and manually included into the resulting build layout: corresponding .class files should be jared, .java files should be places in corresponding location if they are referenced by java_source_stub model root.","title":"Models"},{"location":"mps_internal/models/#model","text":"UI : entry below module in the logical view. They may be nested in folders. Container for model contents limiting dependencies to other models. They are within the boundaries of the containing module. Models can be nested in folders. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or any other aspect.","title":"Model"},{"location":"mps_internal/models/#types-of-models","text":"The IDE knows several types of models. They differ in their semantics and sometimes presentation. They don\u2019t differ from a technical point of view.","title":"Types of models"},{"location":"mps_internal/models/#regular-models","text":"UI : entry below solution in the logical view They contain root nodes with no specific semantics or presentation.","title":"Regular models"},{"location":"mps_internal/models/#language-aspects","text":"UI : entry below language in the logical view Aspects are models within a language with a special meaning. They are recognized by their name.","title":"Language aspects"},{"location":"mps_internal/models/#plugin-aspect","text":"Although this aspect adheres to the plugin model naming convention, don\u2019t use it. Use it only to define MPS extension points (from language jetbrains.mps. lang .extension ).","title":"Plugin aspect"},{"location":"mps_internal/models/#test-model","text":"UI : entry below solution in a specific folder named `tests? with specific icon in the logical view. A model containing tests. Defined by the @tests stereotype.","title":"Test model"},{"location":"mps_internal/models/#generator-model","text":"UI : entry with specific icon below generator in the logical view. A model containing the generator, defined by the @generator stereotype.","title":"Generator model"},{"location":"mps_internal/models/#transient-model","text":"UI : last entry below project in logical view. Temporary models produced during generation, defined by @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb stereotype.","title":"Transient model"},{"location":"mps_internal/models/#accessories-model","text":"UI : entry below language in a specific folder named accessories in the logical view or entry below the solution in the logical view. A model specially selected by a language. Nodes contained in these models are implicitly available on the Java classpath and the dependencies of any model using this language. A use case would be a default library of concept instances to be available at any place you use the Language. You can store accessory models in two places: either as an aspect of a language (recommended), or as a regular model below a solution. In both cases, the model needs to be added to the module runtime language settings.","title":"Accessories model"},{"location":"mps_internal/models/#utility-model","text":"UI : entry below language in a special folder named util models in the logical view. It includes code required in other parts of a language or generator. If, for example, the behavior method logic is too complex for inline implementation or a generator needs to do complex model traversals. Create them as regular models within the language.","title":"Utility model"},{"location":"mps_internal/models/#build-model","text":"** UI : entry below a solution in the logical view It includes nodes from the build language .","title":"Build model"},{"location":"mps_internal/models/#mps-plugin-model","text":"UI : model within a solution in the logical view. It includes MPS plugins. The model name needs to adhere to the naming convention \u00abmoduleName\u00bb.plugin .","title":"MPS plugin model"},{"location":"mps_internal/models/#model-stereotype","text":"UI : attached to the model name, separated by @ . A model may have a stereotype. To change, add, or remove a stereotype, use Rename Model Refactoring in the context menu of a model. Using custom stereotypes interferes with lots of MPS internals and thus isn\u2019t advised to do. The IDE knows some predefined Stereotypes with specific meanings: @tests : Denotes test models. @generator : Denotes generator models. @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb : Denotes transient models.","title":"Model stereotype"},{"location":"mps_internal/models/#model-settings","text":"UI : context menu of a model, model properties For both dependencies and used languages, the settings of models only restrict the settings from the containing module.","title":"Model settings"},{"location":"mps_internal/models/#dependencies-model-settings","text":"UI : tab in the model properties dialog It lists other models this model contains references to.","title":"Dependencies model settings"},{"location":"mps_internal/models/#used-languages-model-settings","text":"UI : tab in model properties dialog It lists languages used in this Model. Any Used Language listed in a model, needs to be in the list of Used Languages of the containing module.","title":"Used languages model settings"},{"location":"mps_internal/models/#advanced-model-settings","text":"UI : tab in the model properties dialog It contains other settings for a model: languages engaged on generation: Generators contained in languages listed here execute on this model in any case.","title":"Advanced model settings"},{"location":"mps_internal/models/#build-language","text":"Abstracted Apache Ant files used to build and package MPS Modules outside the IDE . It\u2019s used in build models . MPS can execute them via the Run \u00abBuild Model name\u00bb context menu entry of the build model in the logical view.","title":"Build language"},{"location":"mps_internal/models/#dependencies","text":"UI : section within build model This is the scope import for all references to other build models. It provides access to resulting artifacts of other build models.","title":"Dependencies"},{"location":"mps_internal/models/#idea-plugin-dependencies","text":"UI : section project structure in Build Model , subsection idea plugin , subsection dependencies . It contains the contents of IDEA plugin.xml depends tags. This plugin only loads if all dependencies listed here load before. The contents of dependencies are available for this IDEA plugin.","title":"IDEA plugin dependencies"},{"location":"mps_internal/models/#module-dependencies","text":"UI : section mps group in Build Model , subsection solution / module , inspector section dependencies . It contains a copy of relations of the described module.","title":"Module Dependencies"},{"location":"mps_internal/models/#runtime","text":"It contains a copy of module runtime language settings.","title":"Runtime"},{"location":"mps_internal/models/#jars","text":"UI : section default layout in Build Model You have to include all jars included in any Java module settings somewhere in this section. .java files (from Java source paths) need to be compiled as java sources inside corresponding build script and manually included into the resulting build layout: corresponding .class files should be jared, .java files should be places in corresponding location if they are referenced by java_source_stub model root.","title":"Jars"},{"location":"mps_internal/navigating_mps_source/","text":"This page describes the folder structure of the MPS sources that can be checked out with Git from https://github.com/JetBrains/MPS . More information can be found in the readme of the repository. .idea \u00b6 The artifacts directory contains the artifact related settings. More info can be found in Artifacts | IntelliJ IDEA . Artifacts in this project are the generated jar files such as mps-core.jar and vcs-core.jar : The directory also contains settings for code styles, copyright infos and enabled inspections. The paths to the used libraries (*.jar) are also specified in the libraries subfolder. The run configurations, search scopes as well as many other IntelliJ specific project settings, .mps \u00b6 This folder also contains run configurations and scopes but also other settings: codeStyleSettings.xml : style settings used for baselanguage (e.g. default field and parameter prefix) compiler.xml : the version of the Java compiler (currently: 11) encodings.xml : encoding of the files (should be: UTF-8) migration.xml : list of executed MPS migrations in current project misc.xml : miscellaneous settings (e.g. settings of favourites manager) modules.xml : a list of modules of this project that are loaded in MPS vcs.xml : version control settings version.xml : project version (not used anymore) settings of different components (e.g. console history, messages view tool, project view) bin \u00b6 This folder contains executable files that are needed for the different operating systems (Windows, Mac, Linux). All of them use the executable fsnotifier to react to file system changes. OS specific files: Linux libdgbm : GNU dbm (\u2018gdbm\u2019) is a library of database functions that use extendible hashing and works similarly to the standard UNIX dbm\u2019 function source restart. py : restarts MPS Mac libmacscreenmenu64.dylib : native access to the Apple menu bar . libnst64.dlib : native access to the Apple MacBook Pro Touch Bar . The library is called NST(NextStep Touch Bar). printenv : prints the environment variables Windows breakgen(64).dll : gracefully shut down a running process (not possible with Java). elevator. exe : sudo-like tool for windows to deal with UAC ( source ) IdeaWin32/64.dll : native file system functions launcher. exe : launches MPS restarter. exe : restarts MPS runnerw. exe : old library for Windows process management. Superceded by WinP . WinProcessListHelper. exe : lists windows processes WinShellIntegrationBridge.dll : integration with the Windows shell wslhash : hash calculation(?) for the Windows Substystem for Linux wslproxy : proxy(?) for the Windows Substystem for Linux build \u00b6 The used dependency manager is Apache Ivy . The corresponding folder is build/ivy . Apache Ant is used as the build tool. The artifacts folder contains the generated jar files. An artifact might look like this: languages : contains MPS languages modules : contains Java classes lib : Jar dependencies META-INF : contains the plugin configuration file build.properties : contains the MPS version and IntelliJ plugin that this artifact belongs to. The dependencies folder contains the Gradle configuration properties . home/.ant/lib contains addtitional Java libraries that can be used with Ant. The resources folder contains image resources as well as the following files: mps : executable file to start MPS mps-dmg.sh : create an Apple Disk image for Mac OS mps-sign.sh : signs the MPS Mac OS application The tests folder contains Ant scripts for executing tests. The tools folder contains scripts for signing and creating DMGs and also a version of the Java Runtime Environment and NSIS (Nullsoft Scriptable Install System) for creating an installer for Windows. The other XML files are also Ant scripts for different tasks (getting dependencies, building MPS languages, migration projects etc). The run_build.sh and run_test.sh can be used to run the build and tests on Linux/Mac respectively. update.xml lists all MPS versions and is used to show automatic updates for MPS . core \u00b6 The aspects folder contains the languages for the language aspects. The baselanguage fodler contains the baselanguage implementation and all its extensions such as extensions methods, closures or the collection language. The folder devkit contains the four main devkits: jetbrains.mps.devkit.bootstrap-languages : contains all the jetbrains.mps. lang languages jetbrains.mps.devkit.general-purpose : baselanguage + smodel + text + quotation language jetbrains.mps.devkit.language-design + the previous 2 devkits + an intermediate language for baselanguage (baseLanguageInternal) + a language for resources jetbrains.mps.devkit.templates : general-purpose + generator languages kernel \u00b6 It contains core languages of MPS such as loaders for Java stubs, classes for persistence, language checkers, make classes and and runtime classes for smodel such as SConceptOperations.java and SModelOperations.java . languages \u00b6 This folder contains all core languages such as smodel, quotation, access, quotations, pattern and so forth. make \u00b6 Everything related to the make facet is situated in this folder. stub \u00b6 This folder contains all stub models provided by MPS . There are, for example, stubs for Aanotations (e.g. JetBrains annotations ), Java core classes ( JDK , e.g. java.util.List ) and all MPS related Java classes are located in solutions that start with the naming pattern MPS.* (e.g. MPS .Core). tool \u00b6 This folder contains classes for accessing MPS from Java (e.g. `MPSEnvironment) and other tool related classes such as accessing Ant from Java. platform \u00b6 This folder contains languages and solutions for the following platform features: build language console http server make migrations model checker Java to mps parsing spell checker debugging information (traceInfo) version control integrations with the IDEA platform integration for MPS plugin into IntelliJ IDEA samples \u00b6 This folder contains the samples that are ship with MPS . They are automatically unpacked into a folder in the home directory when first accessed through the start screen. tests \u00b6 This folder contains classes for executing tests as well as all kinds of tests such as generator tests or tests for the constraint aspect. workbench \u00b6 This folder contains subfolders for: MPS debugger Context actions editor related actions run configurations + execution of baselanguage and othe languages refactorings UI components and tools such as the dependency viewer, the new module dialog as well as different finders all other actions (jetbrains.mps.ide and jetbrains.mps.ide.mpsdevkit) editor tabs for the various language aspects","title":"Navigating the MPS sources"},{"location":"mps_internal/navigating_mps_source/#idea","text":"The artifacts directory contains the artifact related settings. More info can be found in Artifacts | IntelliJ IDEA . Artifacts in this project are the generated jar files such as mps-core.jar and vcs-core.jar : The directory also contains settings for code styles, copyright infos and enabled inspections. The paths to the used libraries (*.jar) are also specified in the libraries subfolder. The run configurations, search scopes as well as many other IntelliJ specific project settings,","title":".idea"},{"location":"mps_internal/navigating_mps_source/#mps","text":"This folder also contains run configurations and scopes but also other settings: codeStyleSettings.xml : style settings used for baselanguage (e.g. default field and parameter prefix) compiler.xml : the version of the Java compiler (currently: 11) encodings.xml : encoding of the files (should be: UTF-8) migration.xml : list of executed MPS migrations in current project misc.xml : miscellaneous settings (e.g. settings of favourites manager) modules.xml : a list of modules of this project that are loaded in MPS vcs.xml : version control settings version.xml : project version (not used anymore) settings of different components (e.g. console history, messages view tool, project view)","title":".mps"},{"location":"mps_internal/navigating_mps_source/#bin","text":"This folder contains executable files that are needed for the different operating systems (Windows, Mac, Linux). All of them use the executable fsnotifier to react to file system changes. OS specific files: Linux libdgbm : GNU dbm (\u2018gdbm\u2019) is a library of database functions that use extendible hashing and works similarly to the standard UNIX dbm\u2019 function source restart. py : restarts MPS Mac libmacscreenmenu64.dylib : native access to the Apple menu bar . libnst64.dlib : native access to the Apple MacBook Pro Touch Bar . The library is called NST(NextStep Touch Bar). printenv : prints the environment variables Windows breakgen(64).dll : gracefully shut down a running process (not possible with Java). elevator. exe : sudo-like tool for windows to deal with UAC ( source ) IdeaWin32/64.dll : native file system functions launcher. exe : launches MPS restarter. exe : restarts MPS runnerw. exe : old library for Windows process management. Superceded by WinP . WinProcessListHelper. exe : lists windows processes WinShellIntegrationBridge.dll : integration with the Windows shell wslhash : hash calculation(?) for the Windows Substystem for Linux wslproxy : proxy(?) for the Windows Substystem for Linux","title":"bin"},{"location":"mps_internal/navigating_mps_source/#build","text":"The used dependency manager is Apache Ivy . The corresponding folder is build/ivy . Apache Ant is used as the build tool. The artifacts folder contains the generated jar files. An artifact might look like this: languages : contains MPS languages modules : contains Java classes lib : Jar dependencies META-INF : contains the plugin configuration file build.properties : contains the MPS version and IntelliJ plugin that this artifact belongs to. The dependencies folder contains the Gradle configuration properties . home/.ant/lib contains addtitional Java libraries that can be used with Ant. The resources folder contains image resources as well as the following files: mps : executable file to start MPS mps-dmg.sh : create an Apple Disk image for Mac OS mps-sign.sh : signs the MPS Mac OS application The tests folder contains Ant scripts for executing tests. The tools folder contains scripts for signing and creating DMGs and also a version of the Java Runtime Environment and NSIS (Nullsoft Scriptable Install System) for creating an installer for Windows. The other XML files are also Ant scripts for different tasks (getting dependencies, building MPS languages, migration projects etc). The run_build.sh and run_test.sh can be used to run the build and tests on Linux/Mac respectively. update.xml lists all MPS versions and is used to show automatic updates for MPS .","title":"build"},{"location":"mps_internal/navigating_mps_source/#core","text":"The aspects folder contains the languages for the language aspects. The baselanguage fodler contains the baselanguage implementation and all its extensions such as extensions methods, closures or the collection language. The folder devkit contains the four main devkits: jetbrains.mps.devkit.bootstrap-languages : contains all the jetbrains.mps. lang languages jetbrains.mps.devkit.general-purpose : baselanguage + smodel + text + quotation language jetbrains.mps.devkit.language-design + the previous 2 devkits + an intermediate language for baselanguage (baseLanguageInternal) + a language for resources jetbrains.mps.devkit.templates : general-purpose + generator languages","title":"core"},{"location":"mps_internal/navigating_mps_source/#kernel","text":"It contains core languages of MPS such as loaders for Java stubs, classes for persistence, language checkers, make classes and and runtime classes for smodel such as SConceptOperations.java and SModelOperations.java .","title":"kernel"},{"location":"mps_internal/navigating_mps_source/#languages","text":"This folder contains all core languages such as smodel, quotation, access, quotations, pattern and so forth.","title":"languages"},{"location":"mps_internal/navigating_mps_source/#make","text":"Everything related to the make facet is situated in this folder.","title":"make"},{"location":"mps_internal/navigating_mps_source/#stub","text":"This folder contains all stub models provided by MPS . There are, for example, stubs for Aanotations (e.g. JetBrains annotations ), Java core classes ( JDK , e.g. java.util.List ) and all MPS related Java classes are located in solutions that start with the naming pattern MPS.* (e.g. MPS .Core).","title":"stub"},{"location":"mps_internal/navigating_mps_source/#tool","text":"This folder contains classes for accessing MPS from Java (e.g. `MPSEnvironment) and other tool related classes such as accessing Ant from Java.","title":"tool"},{"location":"mps_internal/navigating_mps_source/#platform","text":"This folder contains languages and solutions for the following platform features: build language console http server make migrations model checker Java to mps parsing spell checker debugging information (traceInfo) version control integrations with the IDEA platform integration for MPS plugin into IntelliJ IDEA","title":"platform"},{"location":"mps_internal/navigating_mps_source/#samples","text":"This folder contains the samples that are ship with MPS . They are automatically unpacked into a folder in the home directory when first accessed through the start screen.","title":"samples"},{"location":"mps_internal/navigating_mps_source/#tests","text":"This folder contains classes for executing tests as well as all kinds of tests such as generator tests or tests for the constraint aspect.","title":"tests"},{"location":"mps_internal/navigating_mps_source/#workbench","text":"This folder contains subfolders for: MPS debugger Context actions editor related actions run configurations + execution of baselanguage and othe languages refactorings UI components and tools such as the dependency viewer, the new module dialog as well as different finders all other actions (jetbrains.mps.ide and jetbrains.mps.ide.mpsdevkit) editor tabs for the various language aspects","title":"workbench"},{"location":"mps_internal/open_api/","text":"How do you get an icon for a concept? 1 GlobalIconManager . getInstance (). getIconFor ( concept ) How can you copy a language without the new one having duplicate model IDs? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { => SModule sm = module / module1 ; SModule tm = module / module2 ; map < SNode , SNode > node = new hashmap < SNode , SNode > ; foreach aspect in LanguageAspect . values { SModel s = aspect . get (( Language ) sm ); SModel t = aspect . get (( Language ) tm ); if ( s != null && t != null ) { foreach r in new arraylist < SNode > ( copy : t . getRootNodes ()) { (( node <> ) r ). detach ; } foreach r in CopyUtil . copyAndPreserveId (((( sequence < SNode > ) s , getRootNodes ())). toList , node ) { t . addRootNode ( r ) } } } }. invoke () How can you change the default project directory? Put the following code in an application plugin: 1 2 3 // set default project location string defaultProjectDir = Paths . get ( System . getProperty ( \"user.home\" ), \"NewProjectDir\" ). toString (); GeneralSettings . getInstance (). setDefaultProjectDirectory ( defaultProjectDir ); How can you execute an MPS action programmatically? Use ActionUtils to create an event and to run the action: 1 2 3 4 # cast to EditorContext class DataContext dataContext = DataManager . getInstance (). getDataContext ((( EditorContext ) editorContext ). getNodeEditorComponent ()); AnActionEvent event = ActionUtils . createEvent ( ActionPlaces . EDITOR_TAB , dataContext ); ActionUtils . updateAndPerformAction ( action < openHtmlReport > , event ); Since this is based on IDEA components, we need to get the getNodeEditorComponent , which is not part of the openapi. That\u2019s why we need to downcast it to the EditorComponent class. Note: action<\u2026> comes from the jetbrains.mps. lang .plugin language. How to shutdown MPS programmatically? In normal conditions one can use ApplicationManager . getApplication (). exit () . If this doesn\u2019t work, an exception can be thrown on purpose. How can you react to opening and closing of projects? Register a ProjectManagerListener in a plugin via the class ProjectManager . How do you change a model without creating an undo entry? Example: Setting a property (=flag) via a button. 1 repository . getModelAccess (). executeUndoTransparentCommand () How do you work with temporary models? 1 2 3 4 5 6 7 8 9 10 11 12 13 try { undo - transparent command with this . mpsProject . getRepository () { tmpModel = TemporaryModels . getInstance (). createReadOnly ( TempModuleOptions . forDefaultModule ()); tmpModel . addRootNode ( type ); TemporaryModels . getInstance (). addMissingImports ( tmpModel ); } // do something with the node } finally { undo - transparent command with this . mpsProject . getRepository () { tmpModel . removeRootNode ( type ); TemporaryModels . getInstance (). dispose ( tmpModel ); } } How can you react to selection changes in the editor? 1 editorContext . getSelectionManager (). addSelectionListener ( new SingularSelectionListenerAdapter () { ... }) How can I delete a model in a module programmatically? Get the model-to-be-deleted as SModel (interface) and use new ModelDeleteHelper ( model ). delete (); For more context see: DeleteModeHelper How can you add a language to the Used Languages settings of a model programmatically? Module level: (( AbstractModule ) moduleA ). addDependency ( moduleB . getModuleReference (), false ) Model level: new ModelImports ( model ). addUsedLanguage ( language ) To get the language from a reference, you can call: MetaAdapterFactory.getLanguage(moduleRef) . Can a node pointer point to non-root nodes? Yes, for example: 1 node - ptr / Integer -> parseInt -> radix / How can you create an MPS Language programmatically and add it to the current project? 1 NewModuleUtil . createLanguage ( namespace , rootPath , project , saveProject ) How do I save my project(s)? Use SRepository.saveAll() . For a single project, e.g. ProjectHelper.getProjectRepository(project).saveAll(); For all opened projects, e.g. 1 2 3 foreach project in com . intellij . openapi . project . ProjectManager . getInstance (). getOpenProjects () { jetbrains . mps . ide . project . ProjectHelper . getProjectRepository ( project ). saveAll (); } contributed by: @aquapp","title":"Open API"},{"location":"mps_internal/recipes/","text":"Recipes \u00b6 This section lists all relations required for a specific task. If not specified otherwise, you should add all dependencies. If no dependency exists: with default scope and no export flag . If a dependency (no matter witch scope and export flag) exists: no change The IDE often creates the required relations on module level automatically if we add a relation on Model level. However, this doesn\u2019t work always, so double-check if the module level relation was created correctly if errors exist. Use a Java type \u00b6 ClassB inside ModelB inside ModuleB wants to create a variable of type ClassA inside ModelA inside ModuleA . To ModelB , add dependency to ModelA . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to ModuleA . Reuse (aka extend, reference) a external java type \u00b6 ClassB inside ModelB inside ModuleB extends ClassA inside ModelA inside ModuleA . ClassC inside ModelC inside ModuleC wants to use ClassB as simple as possible. To ModuleB , add the export flag to the dependency on ModuleA . To ModelC , add dependency to ModelB . Even if the IDE complains about the Dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleC to ModuleB . Remark: not sure if we should add the export flag to the dependency on ModuleA here. Create a concept instance \u00b6 Directly (aka root node) or indirectly (aka child node) within ModelB inside ModuleB , we want to create an instance of ConceptA inside LanguageA . To ModelB , add Used Language to LanguageA . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically add a Used Language from ModuleB to LanguageA . Use an intention \u00b6 Make IntentionC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC . Use a type system rule \u00b6 Make TypesystemRuleC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC . Use an alternate editor with a hint \u00b6 Make EditorC defined in LanguageC for ConceptA inside LanguageA using HintD defined in LanguageD available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC . Make sure that a generator is executed for a model \u00b6 Make sure that GeneratorC defined in LanguageC for ConceptA inside LanguageA is executed for ModelB inside ModuleB . To ModelB , add LanguageC to Languages engaged on generation . To ModuleB , add Used Language to LanguageC . Use node type \u00b6 ClassB inside ModelB inside ModuleB wants to create a variable of type node inside LanguageA . To ModelB , add Dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA . Call a behavior Method \u00b6 ClassB inside ModelB inside ModuleB wants to call behavior method opA inside ConceptA inside LanguageA . To ModelB , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA . Note: We could also add a dependency from ModelB to LanguageA.behavior . However, as we need to depend on LanguageA.structure anyway (to be able to access the type), the preceding recipe presented is preferred. Use a concept as a child or reference \u00b6 ConceptB inside LanguageB wants to have a child or reference of type ConceptA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from LanguageB to LanguageA . Extend a concept or implement a ConceptInterface \u00b6 ConceptB inside LanguageB wants to extend / implement ConceptA / ConceptInterfaceA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB to LanguageA has extends Scope, either by setting it manually or by using the intention on the error appearing on ConceptB . Create an editor \u00b6 LanguageB wants to define a new editor for EditorHintC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Create an editor component \u00b6 LanguageB wants to define a new editor component for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Use an editor component \u00b6 LanguageB wants to use EditorComponentC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageC has Extends Scope . Create a type system rule \u00b6 LanguageB wants to define a new type system rule for ConceptA inside LanguageA . To LanguageB.typesystem , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Note: The overrides flag in type system rules isn\u2019t related to dependencies. This flag specifies if type system rules of concepts extended by the applicable concept are evaluated. Example: ConceptX extends ConceptY extends ConceptZ ConceptZ defines type system rule ConceptZTypeRule ConceptY defines type system rule ConceptYTypeRule1[override=true] and ConceptYTypeRule2[override=false] ConceptX defines type system rule ConceptXTypeRule[override=false] Then: For ConceptZ , type system rule ConceptZTypeRule gets evaluated. For ConceptY , type system rules ConceptYTypeRule1 and ConceptYTypeRule2 get evaluated. ConceptZTypeRule is not evaluated, as at least one Rule for ConceptY defines [override=true] . For ConceptX , type system rules ConceptYTypeRule1 , ConceptYTypeRule2 and ConceptXTypeRule get evaluated. ConceptYTypeRule1 and ConceptYTypeRule2 get included because no rule for ConceptX defines [override=true] . ConceptZTypeRule*is not evaluated because the search for rules in extended Concepts stops at the first concept having at least one rule defining *[override=true] . Create an intention \u00b6 LanguageB wants to define a new intention for ConceptA inside LanguageA . To LanguageB.intentions , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Create a Generator \u00b6 Create Generator includes creating new root mappings creating new reduction rule creating new switches GeneratorB inside LanguageB wants to create a generator transforming ConceptA inside LanguageA into ConceptC inside LanguageC . To GeneratorB.main@generator , add dependency to LanguageA.structure . To GeneratorB.main@generator , add Used Language to LanguageC . Even if the IDE complains about the dependency or used language being \u201cout of scope,\u201d click ok . Don\u2019t forget to sort your generator into the generation process by defining some mapping priorities . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a Used Language from GeneratorB to GeneratorA . If LanguageC defines a runtime solution: To LanguageB , add Extends Scope dependency to LanguageC . Extend a generator \u00b6 Extend Generator includes Making sure that another generator is always executed if this generator gets executed. Creating new reduction ruled to be used in another generator. Createing a new switch entry for a switch in another generator. GeneratorB inside LanguageB wants to extend GeneratorA inside LanguageA . GeneratorA transforms ConceptC inside LanguageC into ConceptD inside LanguageD . GeneratorB transforms ConceptE inside LanguageE into ConceptF inside LanguageF . To #GeneratorB.main@generator , add dependency to GeneratorA.main@generator . Even if the IDE complains about the dependency being out of scope , click ok . MPS automatically adds a dependency from GeneratorB to GeneratorA . Make sure the dependency from GeneratorB*to *GeneratorA has Extends Scope . Generate a Java class extending a base class \u00b6 GeneratorB inside LanguageB wants to transform ConceptA inside LanguageA into a ConceptAJavaClass extending ConceptAJavaClassBase inside ModelC inside SolutionC . To #!java GeneratorB.main@generator , add dependency to LanguageA.structure . To #!java GeneratorB.main@generator , add dependency to ModelC . To #!java GeneratorB.main@generator , add Used Language to BaseLanguage . Even if the IDE complains about the dependency or Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a dependency from GeneratorB to SolutionC . MPS automatically adds a Used Language from GeneratorB to BaseLanguage . To LanguageB , add Extends Scope dependency to BaseLanguage (because BaseLanguage defines a runtime solution). To LanguageB , add runtime solution to SolutionC . Define a runtime solution \u00b6 LanguageB wants to use SolutionA as a runtime solution. To LanguageB , add a runtime solution to SolutionA . Note: We don\u2019t need any other relation, specifically, no dependency from LanguageB to SolutionA . Define an accessories model (aka make concept instances available everywhere a language is used) \u00b6 BuiltInNodeA as instance of BuiltInConcept inside LanguageA should be available to be referenced anywhere LanguageA is a Used Language . Create AccessoryModel as aspect in LanguageA To AccessoryModel , add Used Language to LanguageA . Create BuiltInNodeA inside AccessoryModel . To LanguageA , add an accessory Model to AccessoryModel (if not present already). Note: We don\u2019t need any other relation, specifically, no dependency from LanguageA to AccessorySolution . Create an utility Model (aka create complex implementations for Behavior Methods or Generators) \u00b6 complexBehavior() defined for ConceptA inside LanguageA needs ComplexBehaviorInternalJavaClass for its implementation or GeneratorA inside LanguageA needs ComplexGeneratorInternalJavaClass for its execution (e.g. for a complex condition or macro ). Create BehaviorUtilityModel / GeneratorUtilityModel as regular Model within LanguageA . To BehaviorUtilityModel / GeneratorUtilityModel , add Used Language to BaseLanguage . Create ComplexBehaviorInternalJavaClass / ComplexBehaviorInternalJavaClass within BehaviorUtilityModel / GeneratorUtilityModel . To LanguageA.behavior / GeneratorA.main@generator add dependency to BehaviorUtilityModel / GeneratorUtilityModel","title":"Recipes"},{"location":"mps_internal/recipes/#recipes","text":"This section lists all relations required for a specific task. If not specified otherwise, you should add all dependencies. If no dependency exists: with default scope and no export flag . If a dependency (no matter witch scope and export flag) exists: no change The IDE often creates the required relations on module level automatically if we add a relation on Model level. However, this doesn\u2019t work always, so double-check if the module level relation was created correctly if errors exist.","title":"Recipes"},{"location":"mps_internal/recipes/#use-a-java-type","text":"ClassB inside ModelB inside ModuleB wants to create a variable of type ClassA inside ModelA inside ModuleA . To ModelB , add dependency to ModelA . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to ModuleA .","title":"Use a Java type"},{"location":"mps_internal/recipes/#reuse-aka-extend-reference-a-external-java-type","text":"ClassB inside ModelB inside ModuleB extends ClassA inside ModelA inside ModuleA . ClassC inside ModelC inside ModuleC wants to use ClassB as simple as possible. To ModuleB , add the export flag to the dependency on ModuleA . To ModelC , add dependency to ModelB . Even if the IDE complains about the Dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleC to ModuleB . Remark: not sure if we should add the export flag to the dependency on ModuleA here.","title":"Reuse (aka extend, reference) a external java type"},{"location":"mps_internal/recipes/#create-a-concept-instance","text":"Directly (aka root node) or indirectly (aka child node) within ModelB inside ModuleB , we want to create an instance of ConceptA inside LanguageA . To ModelB , add Used Language to LanguageA . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically add a Used Language from ModuleB to LanguageA .","title":"Create a concept instance"},{"location":"mps_internal/recipes/#use-an-intention","text":"Make IntentionC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC .","title":"Use an intention"},{"location":"mps_internal/recipes/#use-a-type-system-rule","text":"Make TypesystemRuleC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC .","title":"Use a type system rule"},{"location":"mps_internal/recipes/#use-an-alternate-editor-with-a-hint","text":"Make EditorC defined in LanguageC for ConceptA inside LanguageA using HintD defined in LanguageD available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC .","title":"Use an alternate editor with a hint"},{"location":"mps_internal/recipes/#make-sure-that-a-generator-is-executed-for-a-model","text":"Make sure that GeneratorC defined in LanguageC for ConceptA inside LanguageA is executed for ModelB inside ModuleB . To ModelB , add LanguageC to Languages engaged on generation . To ModuleB , add Used Language to LanguageC .","title":"Make sure that a generator is executed for a model"},{"location":"mps_internal/recipes/#use-node-type","text":"ClassB inside ModelB inside ModuleB wants to create a variable of type node inside LanguageA . To ModelB , add Dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA .","title":"Use node type"},{"location":"mps_internal/recipes/#call-a-behavior-method","text":"ClassB inside ModelB inside ModuleB wants to call behavior method opA inside ConceptA inside LanguageA . To ModelB , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA . Note: We could also add a dependency from ModelB to LanguageA.behavior . However, as we need to depend on LanguageA.structure anyway (to be able to access the type), the preceding recipe presented is preferred.","title":"Call a behavior Method"},{"location":"mps_internal/recipes/#use-a-concept-as-a-child-or-reference","text":"ConceptB inside LanguageB wants to have a child or reference of type ConceptA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from LanguageB to LanguageA .","title":"Use a concept as a child or reference"},{"location":"mps_internal/recipes/#extend-a-concept-or-implement-a-conceptinterface","text":"ConceptB inside LanguageB wants to extend / implement ConceptA / ConceptInterfaceA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB to LanguageA has extends Scope, either by setting it manually or by using the intention on the error appearing on ConceptB .","title":"Extend a concept or implement a ConceptInterface"},{"location":"mps_internal/recipes/#create-an-editor","text":"LanguageB wants to define a new editor for EditorHintC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope .","title":"Create an editor"},{"location":"mps_internal/recipes/#create-an-editor-component","text":"LanguageB wants to define a new editor component for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope .","title":"Create an editor component"},{"location":"mps_internal/recipes/#use-an-editor-component","text":"LanguageB wants to use EditorComponentC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageC has Extends Scope .","title":"Use an editor component"},{"location":"mps_internal/recipes/#create-a-type-system-rule","text":"LanguageB wants to define a new type system rule for ConceptA inside LanguageA . To LanguageB.typesystem , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Note: The overrides flag in type system rules isn\u2019t related to dependencies. This flag specifies if type system rules of concepts extended by the applicable concept are evaluated. Example: ConceptX extends ConceptY extends ConceptZ ConceptZ defines type system rule ConceptZTypeRule ConceptY defines type system rule ConceptYTypeRule1[override=true] and ConceptYTypeRule2[override=false] ConceptX defines type system rule ConceptXTypeRule[override=false] Then: For ConceptZ , type system rule ConceptZTypeRule gets evaluated. For ConceptY , type system rules ConceptYTypeRule1 and ConceptYTypeRule2 get evaluated. ConceptZTypeRule is not evaluated, as at least one Rule for ConceptY defines [override=true] . For ConceptX , type system rules ConceptYTypeRule1 , ConceptYTypeRule2 and ConceptXTypeRule get evaluated. ConceptYTypeRule1 and ConceptYTypeRule2 get included because no rule for ConceptX defines [override=true] . ConceptZTypeRule*is not evaluated because the search for rules in extended Concepts stops at the first concept having at least one rule defining *[override=true] .","title":"Create a type system rule"},{"location":"mps_internal/recipes/#create-an-intention","text":"LanguageB wants to define a new intention for ConceptA inside LanguageA . To LanguageB.intentions , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA .","title":"Create an intention"},{"location":"mps_internal/recipes/#create-a-generator","text":"Create Generator includes creating new root mappings creating new reduction rule creating new switches GeneratorB inside LanguageB wants to create a generator transforming ConceptA inside LanguageA into ConceptC inside LanguageC . To GeneratorB.main@generator , add dependency to LanguageA.structure . To GeneratorB.main@generator , add Used Language to LanguageC . Even if the IDE complains about the dependency or used language being \u201cout of scope,\u201d click ok . Don\u2019t forget to sort your generator into the generation process by defining some mapping priorities . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a Used Language from GeneratorB to GeneratorA . If LanguageC defines a runtime solution: To LanguageB , add Extends Scope dependency to LanguageC .","title":"Create a Generator"},{"location":"mps_internal/recipes/#extend-a-generator","text":"Extend Generator includes Making sure that another generator is always executed if this generator gets executed. Creating new reduction ruled to be used in another generator. Createing a new switch entry for a switch in another generator. GeneratorB inside LanguageB wants to extend GeneratorA inside LanguageA . GeneratorA transforms ConceptC inside LanguageC into ConceptD inside LanguageD . GeneratorB transforms ConceptE inside LanguageE into ConceptF inside LanguageF . To #GeneratorB.main@generator , add dependency to GeneratorA.main@generator . Even if the IDE complains about the dependency being out of scope , click ok . MPS automatically adds a dependency from GeneratorB to GeneratorA . Make sure the dependency from GeneratorB*to *GeneratorA has Extends Scope .","title":"Extend a generator"},{"location":"mps_internal/recipes/#generate-a-java-class-extending-a-base-class","text":"GeneratorB inside LanguageB wants to transform ConceptA inside LanguageA into a ConceptAJavaClass extending ConceptAJavaClassBase inside ModelC inside SolutionC . To #!java GeneratorB.main@generator , add dependency to LanguageA.structure . To #!java GeneratorB.main@generator , add dependency to ModelC . To #!java GeneratorB.main@generator , add Used Language to BaseLanguage . Even if the IDE complains about the dependency or Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a dependency from GeneratorB to SolutionC . MPS automatically adds a Used Language from GeneratorB to BaseLanguage . To LanguageB , add Extends Scope dependency to BaseLanguage (because BaseLanguage defines a runtime solution). To LanguageB , add runtime solution to SolutionC .","title":"Generate a Java class extending a base class"},{"location":"mps_internal/recipes/#define-a-runtime-solution","text":"LanguageB wants to use SolutionA as a runtime solution. To LanguageB , add a runtime solution to SolutionA . Note: We don\u2019t need any other relation, specifically, no dependency from LanguageB to SolutionA .","title":"Define a runtime solution"},{"location":"mps_internal/recipes/#define-an-accessories-model-aka-make-concept-instances-available-everywhere-a-language-is-used","text":"BuiltInNodeA as instance of BuiltInConcept inside LanguageA should be available to be referenced anywhere LanguageA is a Used Language . Create AccessoryModel as aspect in LanguageA To AccessoryModel , add Used Language to LanguageA . Create BuiltInNodeA inside AccessoryModel . To LanguageA , add an accessory Model to AccessoryModel (if not present already). Note: We don\u2019t need any other relation, specifically, no dependency from LanguageA to AccessorySolution .","title":"Define an accessories model (aka make concept instances available everywhere a language is used)"},{"location":"mps_internal/recipes/#create-an-utility-model-aka-create-complex-implementations-for-behavior-methods-or-generators","text":"complexBehavior() defined for ConceptA inside LanguageA needs ComplexBehaviorInternalJavaClass for its implementation or GeneratorA inside LanguageA needs ComplexGeneratorInternalJavaClass for its execution (e.g. for a complex condition or macro ). Create BehaviorUtilityModel / GeneratorUtilityModel as regular Model within LanguageA . To BehaviorUtilityModel / GeneratorUtilityModel , add Used Language to BaseLanguage . Create ComplexBehaviorInternalJavaClass / ComplexBehaviorInternalJavaClass within BehaviorUtilityModel / GeneratorUtilityModel . To LanguageA.behavior / GeneratorA.main@generator add dependency to BehaviorUtilityModel / GeneratorUtilityModel","title":"Create an utility Model (aka create complex implementations for Behavior Methods or Generators)"},{"location":"mps_internal/terminology_and_ui_for_access/","text":"Terminology and user interface for access \u00b6 This section lists terms that aren\u2019t mentioned in the MPS guide or aren\u2019t explained well. MPS project structure should give an overview of the most important terms. Settings \u00b6 UI : File menu All global and project settings. IDE settings (aka global settings) \u00b6 Settings applied to all projects opened with this MPS installation ( official documentation ). (IDEA) Plugins \u00b6 UI : entry in settings dialog A packaged set of contributions to the IntelliJ IDEA platform , which MPS is based upon. Contained in one of the following places: ${mps_home}/plugins \u00abGlobalSettingsDir\u00bb/plugins MPS plugins bear no relationship to IDEA Plugins. However, you can package MPS plugins into IDEA plugins, just as any other content of MPS . Project settings \u00b6 UI : Entry in settings dialog Settings applied to one project. Stored in ${project}/.mps/ . Modules pool \u00b6 UI : second root entry in logical Vvew All content known to MPS is contained in its modules pool. This modules pool is shared between all windows of the same MPS installation. In some future MPS version, every window should have its independent modules pool. If a module is contained more than once in the Mmdules Pool (e.g. present both in the current project and in a global Library), the behavior is undefined (i.e. will mess up badly, don\u2019t do this). MPS window \u00b6 UI : If already open: Window menu, New File* menu: Open\u2026 \u2192 New Window Every Project is contained in its own window. Project \u00b6 UI : first root entry in logical view A project is a collection of modules. A module can be part of more than one project. They can be added via the Project Paths context menu entry of the project. Modules can be nested in folders. These folders are stored in the project, i.e. the same module can be in different folders inside different Projects. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or anything else. What are some known predefined path variables? ${module} : the containing module ${user.home} : the user home directory ${language_descriptor} : the descriptor file of the current language ${solution_descriptor} : the descriptor file of the current solution ${project} : the directory containing the project ${mps_home} : the directory of th MPS installation Don\u2019t point path variables to a subpath of another path variable. MPS always applies the first (predefined before user-defined, user-defined in order of definition) one matching. INVALID example: Path Variable a \u2192 /some/ dir Path Variable b \u2192 /some/ dir /below","title":"Terminology and UI for access"},{"location":"mps_internal/terminology_and_ui_for_access/#terminology-and-user-interface-for-access","text":"This section lists terms that aren\u2019t mentioned in the MPS guide or aren\u2019t explained well. MPS project structure should give an overview of the most important terms.","title":"Terminology and user interface for access"},{"location":"mps_internal/terminology_and_ui_for_access/#settings","text":"UI : File menu All global and project settings.","title":"Settings"},{"location":"mps_internal/terminology_and_ui_for_access/#ide-settings-aka-global-settings","text":"Settings applied to all projects opened with this MPS installation ( official documentation ).","title":"IDE settings (aka global settings)"},{"location":"mps_internal/terminology_and_ui_for_access/#idea-plugins","text":"UI : entry in settings dialog A packaged set of contributions to the IntelliJ IDEA platform , which MPS is based upon. Contained in one of the following places: ${mps_home}/plugins \u00abGlobalSettingsDir\u00bb/plugins MPS plugins bear no relationship to IDEA Plugins. However, you can package MPS plugins into IDEA plugins, just as any other content of MPS .","title":"(IDEA) Plugins"},{"location":"mps_internal/terminology_and_ui_for_access/#project-settings","text":"UI : Entry in settings dialog Settings applied to one project. Stored in ${project}/.mps/ .","title":"Project settings"},{"location":"mps_internal/terminology_and_ui_for_access/#modules-pool","text":"UI : second root entry in logical Vvew All content known to MPS is contained in its modules pool. This modules pool is shared between all windows of the same MPS installation. In some future MPS version, every window should have its independent modules pool. If a module is contained more than once in the Mmdules Pool (e.g. present both in the current project and in a global Library), the behavior is undefined (i.e. will mess up badly, don\u2019t do this).","title":"Modules pool"},{"location":"mps_internal/terminology_and_ui_for_access/#mps-window","text":"UI : If already open: Window menu, New File* menu: Open\u2026 \u2192 New Window Every Project is contained in its own window.","title":"MPS window"},{"location":"mps_internal/terminology_and_ui_for_access/#project","text":"UI : first root entry in logical view A project is a collection of modules. A module can be part of more than one project. They can be added via the Project Paths context menu entry of the project. Modules can be nested in folders. These folders are stored in the project, i.e. the same module can be in different folders inside different Projects. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or anything else. What are some known predefined path variables? ${module} : the containing module ${user.home} : the user home directory ${language_descriptor} : the descriptor file of the current language ${solution_descriptor} : the descriptor file of the current solution ${project} : the directory containing the project ${mps_home} : the directory of th MPS installation Don\u2019t point path variables to a subpath of another path variable. MPS always applies the first (predefined before user-defined, user-defined in order of definition) one matching. INVALID example: Path Variable a \u2192 /some/ dir Path Variable b \u2192 /some/ dir /below","title":"Project"},{"location":"mps_internal/utility_classes/","text":"Utility classes \u00b6 Class Description DirUtil directory related utilities MatchingUtil tests if two nodes match SubtypingUtil subtyping related utilities CopyUtil utility for copying models, nodes etc. FileUtil related utilities JavaNameUtil utilities related to java naming NameUtil related utilities such as pluralizing or escaping strings CopyPasteUtil / TextPasteUtil copy paste related utilities ActionUtils action related utilities; these methods can execute actions programmatically. NewModuleUtil utilities related to creating new modules such as creating solutions or languages TemporaryModels utilities for creating temporary models UIUtil utilities related to the Intellij UI such as checking for dark mode ( isUnderDarcula() ). PathManager / PathManager classes for getting all kinds of paths such as the plugins folder or the log folder. ClassLoaderManager class responsible for loading ( MPS ) classes FindUsagesManager class that has methods for invoking the find usage UI CloneUtil utility method for cloning a model ModelDigestUtil class that contains hash methods FindUtils class for finding nodes in MPS MatchingUtil method for checking if two nodes structurally match SubTypingManagerNew subtyping related methods such as isSubTypeOf and collectImmediateSupertypes . SubtypingUtil subtyping related methods such as leastCommonSuperTypes . PersistenceUtil methods for saving and loading models ModelsAutoImportsManager utility methods related to auto importing models ProjectManager project related methods such as creating projects and attaching listeners to projects CopyUtil methods for copying models and nodes ModelAccessHelper methods for running code as a command/read/write action","title":"Utility classes"},{"location":"mps_internal/utility_classes/#utility-classes","text":"Class Description DirUtil directory related utilities MatchingUtil tests if two nodes match SubtypingUtil subtyping related utilities CopyUtil utility for copying models, nodes etc. FileUtil related utilities JavaNameUtil utilities related to java naming NameUtil related utilities such as pluralizing or escaping strings CopyPasteUtil / TextPasteUtil copy paste related utilities ActionUtils action related utilities; these methods can execute actions programmatically. NewModuleUtil utilities related to creating new modules such as creating solutions or languages TemporaryModels utilities for creating temporary models UIUtil utilities related to the Intellij UI such as checking for dark mode ( isUnderDarcula() ). PathManager / PathManager classes for getting all kinds of paths such as the plugins folder or the log folder. ClassLoaderManager class responsible for loading ( MPS ) classes FindUsagesManager class that has methods for invoking the find usage UI CloneUtil utility method for cloning a model ModelDigestUtil class that contains hash methods FindUtils class for finding nodes in MPS MatchingUtil method for checking if two nodes structurally match SubTypingManagerNew subtyping related methods such as isSubTypeOf and collectImmediateSupertypes . SubtypingUtil subtyping related methods such as leastCommonSuperTypes . PersistenceUtil methods for saving and loading models ModelsAutoImportsManager utility methods related to auto importing models ProjectManager project related methods such as creating projects and attaching listeners to projects CopyUtil methods for copying models and nodes ModelAccessHelper methods for running code as a command/read/write action","title":"Utility classes"},{"location":"mps_internal/writing_mps_plugin_with_kotlin/","text":"When you are using Kotlin to write an MPS plugin, the guidelines for the IntelliJ Platform SDK apply. Folder structure \u00b6 The folder structure should look like this: \u251c\u2500\u2500 build.gradle.kts \u2514\u2500\u2500 src \u2514\u2500\u2500 main \u251c\u2500\u2500 kotlin \u2514\u2500\u2500 resources \u2514\u2500\u2500 META-INF \u251c\u2500\u2500 plugin.xml \u2514\u2500\u2500 pluginIcon.svg build.gradle.kts \u00b6 The file build.gradle.kts should look something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 plugins { id ( \"org.jetbrains.intellij\" ) id ( \"org.jetbrains.kotlin.jvm\" ) } repositories { mavenCentral () maven { url = uri ( \"https://projects.itemis.de/nexus/content/repositories/mbeddr\" ) } } val intellijVersion = \"2021.1\" val mpsVersion = \"2021.1.4\" val targetJvm = \"11\" // the target Java version version = \" $ intellijVersion .4\" dependencies { implementation ( \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.0\" ) implementation ( \"org.jetbrains.kotlin:kotlin-reflect:1.4.0\" ) compileOnly ( \"com.jetbrains:mps-workbench: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-core: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-platform: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-openapi: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-editor: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-editor-api: $ mpsVersion \" ) } intellij { version . set ( intellijVersion ) } java { toolchain . languageVersion . set ( JavaLanguageVersion . of ( 11 )) } tasks . withType < org . jetbrains . kotlin . gradle . tasks . KotlinCompile > (). configureEach { kotlinOptions . jvmTarget = targetJvm kotlinOptions . apiVersion = \"1.4\" } tasks . getByName ( \"buildSearchableOptions\" ). enabled = false The gradle plugin org.jetbrains.intellij is needed for the IntelliJ plugin development, org.jetbrains.kotlin.jvm is needed for Kotlin support. We also add the itemis repository for the MPS dependencies. The dependency section contains dependencies for Kotlin and MPS . The available MPS dependencies can be found in the group JetBrains on mvnrepository.com . The rest of the code is boilerplate code for setting the right versions. plugin.xml \u00b6 The file plugin.xml is the plugin configuration file and is normally automatically generated by the MPS build language. In this file, you have to register, for example, tool windows, settings and actions. Have at look at existing plugin.xml files to figure out how the work. Don\u2019t forget to add dependencies to the MPS plugins in this file: 1 2 3 4 5 6 7 <idea-plugin> ... <depends> com.intellij.modules.platform </depends> <depends> com.intellij.modules.mps </depends> <depends> jetbrains.mps.core </depends> ... </idea-plugin> Links to sections in the documentation \u00b6 Actions : extend the class AnAction Tool window Preferences Application plugin Running tasks once Project plugin For everything else, have a look at the extension point and listener list . Building the plugin \u00b6 When you are ready, you can build the plugin by executing ./gradlew buildPlugin . All the others tasks are explained on the page Gradle IntelliJ plugin . Now there should be a folder build/distributions which contains the zipped plugin that can be installed through the MPS plugin manager. Running the plugin \u00b6 Open the file build.gradle.kts in the ide-plugin folder and change the intellij block to use a local path and disable instrumentation of the code, e.g.: 1 2 3 4 intellij { localPath.set(PATH_TO_MPS_FOLDER) instrumentCode.set(false) } Then you have to make sure that the system variable idea.platform.prefix is set to \u2018Idea\u2019. Workaround: create a file with extension .sh or .bat in the bin folder of the MPS installation with the following content: -Didea.platform.prefix=Idea . You can now open MPS with the plugin installed by calling ./gradlew runIde .","title":"Writing an MPS plugin with Kotlin"},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#folder-structure","text":"The folder structure should look like this: \u251c\u2500\u2500 build.gradle.kts \u2514\u2500\u2500 src \u2514\u2500\u2500 main \u251c\u2500\u2500 kotlin \u2514\u2500\u2500 resources \u2514\u2500\u2500 META-INF \u251c\u2500\u2500 plugin.xml \u2514\u2500\u2500 pluginIcon.svg","title":"Folder structure"},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#buildgradlekts","text":"The file build.gradle.kts should look something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 plugins { id ( \"org.jetbrains.intellij\" ) id ( \"org.jetbrains.kotlin.jvm\" ) } repositories { mavenCentral () maven { url = uri ( \"https://projects.itemis.de/nexus/content/repositories/mbeddr\" ) } } val intellijVersion = \"2021.1\" val mpsVersion = \"2021.1.4\" val targetJvm = \"11\" // the target Java version version = \" $ intellijVersion .4\" dependencies { implementation ( \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.0\" ) implementation ( \"org.jetbrains.kotlin:kotlin-reflect:1.4.0\" ) compileOnly ( \"com.jetbrains:mps-workbench: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-core: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-platform: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-openapi: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-editor: $ mpsVersion \" ) compileOnly ( \"com.jetbrains:mps-editor-api: $ mpsVersion \" ) } intellij { version . set ( intellijVersion ) } java { toolchain . languageVersion . set ( JavaLanguageVersion . of ( 11 )) } tasks . withType < org . jetbrains . kotlin . gradle . tasks . KotlinCompile > (). configureEach { kotlinOptions . jvmTarget = targetJvm kotlinOptions . apiVersion = \"1.4\" } tasks . getByName ( \"buildSearchableOptions\" ). enabled = false The gradle plugin org.jetbrains.intellij is needed for the IntelliJ plugin development, org.jetbrains.kotlin.jvm is needed for Kotlin support. We also add the itemis repository for the MPS dependencies. The dependency section contains dependencies for Kotlin and MPS . The available MPS dependencies can be found in the group JetBrains on mvnrepository.com . The rest of the code is boilerplate code for setting the right versions.","title":"build.gradle.kts"},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#pluginxml","text":"The file plugin.xml is the plugin configuration file and is normally automatically generated by the MPS build language. In this file, you have to register, for example, tool windows, settings and actions. Have at look at existing plugin.xml files to figure out how the work. Don\u2019t forget to add dependencies to the MPS plugins in this file: 1 2 3 4 5 6 7 <idea-plugin> ... <depends> com.intellij.modules.platform </depends> <depends> com.intellij.modules.mps </depends> <depends> jetbrains.mps.core </depends> ... </idea-plugin>","title":"plugin.xml"},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#links-to-sections-in-the-documentation","text":"Actions : extend the class AnAction Tool window Preferences Application plugin Running tasks once Project plugin For everything else, have a look at the extension point and listener list .","title":"Links to sections in the documentation"},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#building-the-plugin","text":"When you are ready, you can build the plugin by executing ./gradlew buildPlugin . All the others tasks are explained on the page Gradle IntelliJ plugin . Now there should be a folder build/distributions which contains the zipped plugin that can be installed through the MPS plugin manager.","title":"Building the plugin"},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#running-the-plugin","text":"Open the file build.gradle.kts in the ide-plugin folder and change the intellij block to use a local path and disable instrumentation of the code, e.g.: 1 2 3 4 intellij { localPath.set(PATH_TO_MPS_FOLDER) instrumentCode.set(false) } Then you have to make sure that the system variable idea.platform.prefix is set to \u2018Idea\u2019. Workaround: create a file with extension .sh or .bat in the bin folder of the MPS installation with the following content: -Didea.platform.prefix=Idea . You can now open MPS with the plugin installed by calling ./gradlew runIde .","title":"Running the plugin"},{"location":"mps_internal/deps_and_classpath/","text":"Dependencies and classpath in MPS \u00b6 This page describes the meaning and effect of different types of dependencies within MPS , including the effects on the applicable Java classpath. It describes both the expected state and all bugs deviating from the expectations. Overview \u00b6 The module pool has all content known to MPS . The modules pool is filled from modules in the current project and all non-project sources . MPS in general cares about dependencies between modules. The dependencies on models only constrain further the dependencies of the modules. Two main types of relations exist: dependencies are needed for any reference to something in another module. Used Languages are needed to use something defined in a language. We refer to relations if we address both types. Other types of dependencies on modules include: Java stubs (in combination with Java libraries ), Java source stubs (in combination with Java source paths ), runtime solutions and accessory models (only available for languages), and languages engaged on generation . Build models abstract Ant files to build and package modules and IDEA plugins . They contain a copy of the relations defined in the modules, and dependencies to other build models and IDEA plugins. MPS Plugins \u00b6 MPS Plugins are automatically loaded according to the solution Kind set in Java module settings. MPS Plugins need to be contained in MPS plugin models. StandalonePluginDescriptor \u00b6 We need to add a StandalonePluginDescriptor (defined in Language jetbrains.mps. lang .plugin.standalone ) as a root node if a MPS plugin model uses any concept from the language jetbrains.mps. lang .plugin . Other concepts from the language jetbrains.mps. lang .plugin.standalone don\u2019t need a StandalonePluginDescriptor . Plugin disambiguation \u00b6 The term \u201cplugin\u201d is used at various places throughout MPS . It describes different things: IDEA plugins: a packaged set of contributions to the IntelliJ IDEA platform, which MPS is based upon. MPS plugins: automatically loaded Models. Plugin language aspect: model inside a aanguage defining extension points. Build model plugins: part of the build model language providing new entries for build models. Non-project sources \u00b6 Non-project sources are global libraries IDEA plugins project libraries common and Java module settings regarding Java classes and Java source files IDEA plugins referenced by a module These directories or jar files are recursively scanned for .mpl (languages), .msd (solutions), and .devkit (devkit) files. If found, the corresponding content is added to the modules pool. Java classpath versus relations \u00b6 The various settings on models and modules specify both the Java classpath and the relations of a model. However, these settings affect classpath and relations in a different way. As a rule of thumb, the classpath has all Java classes reachable through any kind of relation. The Classpath is populated generously. On the contrary, the relations are populated reluctantly, for example, they need to be specified explicitly. The dependency relations on modules and models are completely separated from the used language relations on modules and models. Thus, no dependency requires a Used Language or vice versa. Used languages \u00b6 No implicitly Used Languages are available except described for generators. Specifically, if LanguageB has an Extends Scope dependency on LanguageA and ModuleC uses LanguageB , LanguageA isn\u2019t a Used Language within ModuleC . You must add LanguageA (containing ConceptA ) to ModuleB\u2019s and contained ModelB\u2019s used languages if and only if ModelB instantiates ConceptA within the IDE . ModelB executes intentions from LanguageA . ModelB requires type checks from LanguageA . ModelB uses editors from LanguageA by selecting an editor hint but not if LanguageA only defines the editor hint. ModuleB is a generator and outputs instance of ConceptA . Executed generators \u00b6 GeneratorA contained in LanguageA (containing ConceptA ) will be executed for ModelS (contained in ModuleS ) if and only if ModelS uses LanguageA and contains an instance of ConceptA ModelS lists LanguageA in Languages engaged on generation The preceding conditions match LanguageB containing GeneratorB extending GeneratorA For discussion, we establish a continued scenario: (The Relations listed here are not complete in order to reduce clutter. The complete example is available.) SolutionBase doesn\u2019t change during generation, as LanguageBase doesn\u2019t define any generators. SolutionBaseGen doesn\u2019t change during generation either, as it doesn\u2019t contain any instances from LanguageBaseGen , thus removing LanguageBaseGen from the list of applicable generators, ending up with no generators at all. SolutionBaseGen2 ends up with a transformed NodeBase , as Languages engaged in generation are never removed. SolutionBaseGenExtends ends up with an unchanged NodeBase , but a transformed NodeBase2 . GeneratorBaseExtends gets executed, because LanguageBaseGenExtends is listed in Languages engaged in generation . However, the Dependencies of the Language aren\u2019t considered for selecting the running Generators. In SolutionBaseGenExtends2 both NodeBase and NodeBase2 will be transformed, as LanguageBaseGenExtends2 is listed in Languages engaged in generation and GeneratorBaseExtends2 extends GeneratorBase . Only NodeExtendsGen will be transformed in SolutionExtendsGen , as the only active Generator is GeneratorExtendsGen . The reason is that we found an instance of ConceptExtendsGen contained in the same language as the generator. The Generator doesn\u2019t extend any other applicable Generator. All nodes within SolutionExtendsGen2 get transformed, as an instance of ConceptExtendsGen2 was found, and the generator GeneratorExtendsGen2 contained in the same language extends GeneratorBase . Generated relations \u00b6 Relations on the output model are defined only by the contents of the output model that was created by the generator. Thus, all languages providing the concepts of generated instances are listed in Used Languages all models referenced from the output model are listed in the dependencies Extra relations on anything else (source module, source model, dependencies of the source model, languages used in the source model, dependencies of applied generators, languages used in applied Generators) are not added to the output model. Implicit dependencies apply as described. Tests \u00b6 Tests are regular or extended JUnit tests that can be executed within MPS or stand-alone. Test models contain tests, defined by the @tests stereotype. The Stereotype enables the Run Tests entry in the solution and test model context menu. Build language test instruction to search the model for tests. As soon as you are using any concepts from language jetbrains.mps. lang .test , you need to have a TestInfo root node in the same model. The TestInfo node needs to refer to a project to be used to execute the tests. This reference may not use a ${module} , ${language_descriptor} , ${solution_descriptor} , or ${project} builtin path variables. It needs to refer to a project containing the test.","title":"General"},{"location":"mps_internal/deps_and_classpath/#dependencies-and-classpath-in-mps","text":"This page describes the meaning and effect of different types of dependencies within MPS , including the effects on the applicable Java classpath. It describes both the expected state and all bugs deviating from the expectations.","title":"Dependencies and classpath in MPS"},{"location":"mps_internal/deps_and_classpath/#overview","text":"The module pool has all content known to MPS . The modules pool is filled from modules in the current project and all non-project sources . MPS in general cares about dependencies between modules. The dependencies on models only constrain further the dependencies of the modules. Two main types of relations exist: dependencies are needed for any reference to something in another module. Used Languages are needed to use something defined in a language. We refer to relations if we address both types. Other types of dependencies on modules include: Java stubs (in combination with Java libraries ), Java source stubs (in combination with Java source paths ), runtime solutions and accessory models (only available for languages), and languages engaged on generation . Build models abstract Ant files to build and package modules and IDEA plugins . They contain a copy of the relations defined in the modules, and dependencies to other build models and IDEA plugins.","title":"Overview"},{"location":"mps_internal/deps_and_classpath/#mps-plugins","text":"MPS Plugins are automatically loaded according to the solution Kind set in Java module settings. MPS Plugins need to be contained in MPS plugin models.","title":"MPS Plugins"},{"location":"mps_internal/deps_and_classpath/#standaloneplugindescriptor","text":"We need to add a StandalonePluginDescriptor (defined in Language jetbrains.mps. lang .plugin.standalone ) as a root node if a MPS plugin model uses any concept from the language jetbrains.mps. lang .plugin . Other concepts from the language jetbrains.mps. lang .plugin.standalone don\u2019t need a StandalonePluginDescriptor .","title":"StandalonePluginDescriptor"},{"location":"mps_internal/deps_and_classpath/#plugin-disambiguation","text":"The term \u201cplugin\u201d is used at various places throughout MPS . It describes different things: IDEA plugins: a packaged set of contributions to the IntelliJ IDEA platform, which MPS is based upon. MPS plugins: automatically loaded Models. Plugin language aspect: model inside a aanguage defining extension points. Build model plugins: part of the build model language providing new entries for build models.","title":"Plugin disambiguation"},{"location":"mps_internal/deps_and_classpath/#non-project-sources","text":"Non-project sources are global libraries IDEA plugins project libraries common and Java module settings regarding Java classes and Java source files IDEA plugins referenced by a module These directories or jar files are recursively scanned for .mpl (languages), .msd (solutions), and .devkit (devkit) files. If found, the corresponding content is added to the modules pool.","title":"Non-project sources"},{"location":"mps_internal/deps_and_classpath/#java-classpath-versus-relations","text":"The various settings on models and modules specify both the Java classpath and the relations of a model. However, these settings affect classpath and relations in a different way. As a rule of thumb, the classpath has all Java classes reachable through any kind of relation. The Classpath is populated generously. On the contrary, the relations are populated reluctantly, for example, they need to be specified explicitly. The dependency relations on modules and models are completely separated from the used language relations on modules and models. Thus, no dependency requires a Used Language or vice versa.","title":"Java classpath versus relations"},{"location":"mps_internal/deps_and_classpath/#used-languages","text":"No implicitly Used Languages are available except described for generators. Specifically, if LanguageB has an Extends Scope dependency on LanguageA and ModuleC uses LanguageB , LanguageA isn\u2019t a Used Language within ModuleC . You must add LanguageA (containing ConceptA ) to ModuleB\u2019s and contained ModelB\u2019s used languages if and only if ModelB instantiates ConceptA within the IDE . ModelB executes intentions from LanguageA . ModelB requires type checks from LanguageA . ModelB uses editors from LanguageA by selecting an editor hint but not if LanguageA only defines the editor hint. ModuleB is a generator and outputs instance of ConceptA .","title":"Used languages"},{"location":"mps_internal/deps_and_classpath/#executed-generators","text":"GeneratorA contained in LanguageA (containing ConceptA ) will be executed for ModelS (contained in ModuleS ) if and only if ModelS uses LanguageA and contains an instance of ConceptA ModelS lists LanguageA in Languages engaged on generation The preceding conditions match LanguageB containing GeneratorB extending GeneratorA For discussion, we establish a continued scenario: (The Relations listed here are not complete in order to reduce clutter. The complete example is available.) SolutionBase doesn\u2019t change during generation, as LanguageBase doesn\u2019t define any generators. SolutionBaseGen doesn\u2019t change during generation either, as it doesn\u2019t contain any instances from LanguageBaseGen , thus removing LanguageBaseGen from the list of applicable generators, ending up with no generators at all. SolutionBaseGen2 ends up with a transformed NodeBase , as Languages engaged in generation are never removed. SolutionBaseGenExtends ends up with an unchanged NodeBase , but a transformed NodeBase2 . GeneratorBaseExtends gets executed, because LanguageBaseGenExtends is listed in Languages engaged in generation . However, the Dependencies of the Language aren\u2019t considered for selecting the running Generators. In SolutionBaseGenExtends2 both NodeBase and NodeBase2 will be transformed, as LanguageBaseGenExtends2 is listed in Languages engaged in generation and GeneratorBaseExtends2 extends GeneratorBase . Only NodeExtendsGen will be transformed in SolutionExtendsGen , as the only active Generator is GeneratorExtendsGen . The reason is that we found an instance of ConceptExtendsGen contained in the same language as the generator. The Generator doesn\u2019t extend any other applicable Generator. All nodes within SolutionExtendsGen2 get transformed, as an instance of ConceptExtendsGen2 was found, and the generator GeneratorExtendsGen2 contained in the same language extends GeneratorBase .","title":"Executed generators"},{"location":"mps_internal/deps_and_classpath/#generated-relations","text":"Relations on the output model are defined only by the contents of the output model that was created by the generator. Thus, all languages providing the concepts of generated instances are listed in Used Languages all models referenced from the output model are listed in the dependencies Extra relations on anything else (source module, source model, dependencies of the source model, languages used in the source model, dependencies of applied generators, languages used in applied Generators) are not added to the output model. Implicit dependencies apply as described.","title":"Generated relations"},{"location":"mps_internal/deps_and_classpath/#tests","text":"Tests are regular or extended JUnit tests that can be executed within MPS or stand-alone. Test models contain tests, defined by the @tests stereotype. The Stereotype enables the Run Tests entry in the solution and test model context menu. Build language test instruction to search the model for tests. As soon as you are using any concepts from language jetbrains.mps. lang .test , you need to have a TestInfo root node in the same model. The TestInfo node needs to refer to a project to be used to execute the tests. This reference may not use a ${module} , ${language_descriptor} , ${solution_descriptor} , or ${project} builtin path variables. It needs to refer to a project containing the test.","title":"Tests"},{"location":"mps_internal/threads/","text":"Common Concurrency Pitfalls in Java IDEA threading model | developerlife.com Modality and invokeLater() | IntelliJ Platform SDK The Event Dispatch Thread | Oracle Java documentation Regardless of the calling thread, writing and reading MPS models always need to performed holding an appropriate lock. IntelliJ IDEA also requires read and write locks in its platform. The IDEA\u2019s lock is acquired first and only then the MPS \u2018s lock is acquired when using the MPS access language. The MPS locks are described in Managing concurrent access | MPS . Main thread \u00b6 some operations need to be run there in order to keep race conditions from occurring the UI freezes when operations take a long time (run them in the background) Write MPS model: write action with Read MPS model: read action with AWT event dispatch thread ( EDT ) / UI / Editor Thread \u00b6 drawing of components in MPS /IntelliJ IDEA is done through Swing Swing isn\u2019t thread safe, most of the Swing code runs in EDT . EDT = series of short tasks such as the actionPerformed method of a button. Tasks must be short or the UI becomes unresponsive. Synchronously write/read MPS model: command with . Asynchronously write MPS model: execute command in EDT with . Asynchronously read MPS model: execute in EDT with . The in EDT commands allow to read/write the MPS model and perform EDT -related UI activities ApplicationManager . getApplication (). assertIsDispatchThread () or ThreadUtils . isInEDT () Background threads \u00b6 Progress indicators | MPS Extend class Task and run it in a modal dialog or in the background They must be invoked on EDT through ApplicationManager . getApplication . invokeLater synchronous: ApplicationManager . getApplication . invokeAndWait Don\u2019t call it with SwingUtilities . invokeLater in the Intellij platform/ MPS because it doesn\u2019t respect the modality state. modality state = background or an open dialog The class ThreadUtils contains runInUIThreadAndWait which takes a Runnable instance as a parameter and uses the right method based on the calling context When there are many tasks, pooled threads can be used: Introduction to Thread Pools in Java | baeldung.com","title":"Index"},{"location":"mps_internal/threads/#main-thread","text":"some operations need to be run there in order to keep race conditions from occurring the UI freezes when operations take a long time (run them in the background) Write MPS model: write action with Read MPS model: read action with","title":"Main thread"},{"location":"mps_internal/threads/#awt-event-dispatch-thread-edt-ui-editor-thread","text":"drawing of components in MPS /IntelliJ IDEA is done through Swing Swing isn\u2019t thread safe, most of the Swing code runs in EDT . EDT = series of short tasks such as the actionPerformed method of a button. Tasks must be short or the UI becomes unresponsive. Synchronously write/read MPS model: command with . Asynchronously write MPS model: execute command in EDT with . Asynchronously read MPS model: execute in EDT with . The in EDT commands allow to read/write the MPS model and perform EDT -related UI activities ApplicationManager . getApplication (). assertIsDispatchThread () or ThreadUtils . isInEDT ()","title":"AWT event dispatch thread (EDT) / UI / Editor Thread"},{"location":"mps_internal/threads/#background-threads","text":"Progress indicators | MPS Extend class Task and run it in a modal dialog or in the background They must be invoked on EDT through ApplicationManager . getApplication . invokeLater synchronous: ApplicationManager . getApplication . invokeAndWait Don\u2019t call it with SwingUtilities . invokeLater in the Intellij platform/ MPS because it doesn\u2019t respect the modality state. modality state = background or an open dialog The class ThreadUtils contains runInUIThreadAndWait which takes a Runnable instance as a parameter and uses the right method based on the calling context When there are many tasks, pooled threads can be used: Introduction to Thread Pools in Java | baeldung.com","title":"Background threads"},{"location":"mps_internal/threads/named_threads/","text":"Reference: Named threads \u00b6 These lists contains named threads from Java, the IntelliJ platform and MPS . Java Threads \u00b6 AWT threads AWT-AppKit: macOS specific Thread AWT-EventQueue: = EDT AWT-Windows AWT-Shutdown Image Fetch/Image Animator( sun.awt.image.ImageFetch ) Get All running JVM Threads | baeldung.com Finalizer Reference handler: a high-priority thread to enqueue pending references ( References ). Signal Dispatcher: handles signals sent by the operating system to the JVM . Java2D Java2D Disposer Java2D Queue flusher TimerQueue( java.swing.TimerQueue ) Timer( java.util.Timer ) Common-Cleaner( java. lang . ref .Cleaner ) Attach Listener GC Thread: garbage collector thread CMS Thread and CMD Main Thread: Thread of the concurrent mark sweep collector . VM Thread Service Thread C1/C2 CompilerThread Sweeper thread JPWP VM Periodic Task Thread JDI ( Java Debug Interface ) Debug Events Processor Thread JDI Internal Event Handler JDI Target VM Interface IntelliJ platform threads \u00b6 Alarm Pool ( Alarm ) Flushing Daemon ( FlushingDaemon ) ApplicationImpl ( ApplicationImpl ) Periodic tasks thread ( AppDelayQueue ) BaseDataReader ( com.intellij.util.io.BaseDataReader ) error stream of X output stream of X setsid stream of X I/O pool ( ProcessIOExecutorService ) JobScheduler FJ pool ( IdeaForkJoinWorkerThreadFactory ) Document Committing Pool ( DocumentCommitThread ) FileBasedIndex Vfs Event Processor ( ChangedFilesCollector ) Indexing ( IndexUpdateRunner ) ForkJoinPool ( ForkJoinPool ) Action Updater ( ActionUpdater ) fsnotifier: native file system notifier DestroyJavaVM MPS threads \u00b6 Highlighter: performs model checks in update sessions and updates the editor. Checking rules are run for example inside this thread ( Highlighter ). HighlightUsages: highlights references to the node at the cursor position in the editor ( HighlightUsagesSupport ). CompletionHelper: automatically opens the code completion menu that was introduced in MPS 2021.2 ( CompletionHelper ). MPS EDT Executor: invokes read/write/command task asynchronously on the EDT thread ( EDTExecutorInternal ). MPS interrupting thread: augments the IDEA Platform write action with functionality essential for MPS ( ). ChangesManager command queue: queue for tasks of the VCS changes manager ( CurrentDifferenceRegistry ) Intentions: Shows or hides intentions MPS Make Thread: Thread that executes a make task ( MakeTask ) generation-thread: generator thread ( GenerationTaskPool ) textgen-thread: text generator thread ( TextGeneratorEngine ) Other threads \u00b6 AnimatorThread (removed class of com.intellij.util. ui .Timer) Poller SunPKCS11-Darwin (macOS specific thread) process reaper (Linux/macOS specific thread) Batik CleanerThread ( org.apache.batik.util.CleanerThread ) Netty Builtin Server kotlinx.coroutines.DefaultExecutor","title":"Named threads"},{"location":"mps_internal/threads/named_threads/#reference-named-threads","text":"These lists contains named threads from Java, the IntelliJ platform and MPS .","title":"Reference: Named threads"},{"location":"mps_internal/threads/named_threads/#java-threads","text":"AWT threads AWT-AppKit: macOS specific Thread AWT-EventQueue: = EDT AWT-Windows AWT-Shutdown Image Fetch/Image Animator( sun.awt.image.ImageFetch ) Get All running JVM Threads | baeldung.com Finalizer Reference handler: a high-priority thread to enqueue pending references ( References ). Signal Dispatcher: handles signals sent by the operating system to the JVM . Java2D Java2D Disposer Java2D Queue flusher TimerQueue( java.swing.TimerQueue ) Timer( java.util.Timer ) Common-Cleaner( java. lang . ref .Cleaner ) Attach Listener GC Thread: garbage collector thread CMS Thread and CMD Main Thread: Thread of the concurrent mark sweep collector . VM Thread Service Thread C1/C2 CompilerThread Sweeper thread JPWP VM Periodic Task Thread JDI ( Java Debug Interface ) Debug Events Processor Thread JDI Internal Event Handler JDI Target VM Interface","title":"Java Threads"},{"location":"mps_internal/threads/named_threads/#intellij-platform-threads","text":"Alarm Pool ( Alarm ) Flushing Daemon ( FlushingDaemon ) ApplicationImpl ( ApplicationImpl ) Periodic tasks thread ( AppDelayQueue ) BaseDataReader ( com.intellij.util.io.BaseDataReader ) error stream of X output stream of X setsid stream of X I/O pool ( ProcessIOExecutorService ) JobScheduler FJ pool ( IdeaForkJoinWorkerThreadFactory ) Document Committing Pool ( DocumentCommitThread ) FileBasedIndex Vfs Event Processor ( ChangedFilesCollector ) Indexing ( IndexUpdateRunner ) ForkJoinPool ( ForkJoinPool ) Action Updater ( ActionUpdater ) fsnotifier: native file system notifier DestroyJavaVM","title":"IntelliJ platform threads"},{"location":"mps_internal/threads/named_threads/#mps-threads","text":"Highlighter: performs model checks in update sessions and updates the editor. Checking rules are run for example inside this thread ( Highlighter ). HighlightUsages: highlights references to the node at the cursor position in the editor ( HighlightUsagesSupport ). CompletionHelper: automatically opens the code completion menu that was introduced in MPS 2021.2 ( CompletionHelper ). MPS EDT Executor: invokes read/write/command task asynchronously on the EDT thread ( EDTExecutorInternal ). MPS interrupting thread: augments the IDEA Platform write action with functionality essential for MPS ( ). ChangesManager command queue: queue for tasks of the VCS changes manager ( CurrentDifferenceRegistry ) Intentions: Shows or hides intentions MPS Make Thread: Thread that executes a make task ( MakeTask ) generation-thread: generator thread ( GenerationTaskPool ) textgen-thread: text generator thread ( TextGeneratorEngine )","title":"MPS threads"},{"location":"mps_internal/threads/named_threads/#other-threads","text":"AnimatorThread (removed class of com.intellij.util. ui .Timer) Poller SunPKCS11-Darwin (macOS specific thread) process reaper (Linux/macOS specific thread) Batik CleanerThread ( org.apache.batik.util.CleanerThread ) Netty Builtin Server kotlinx.coroutines.DefaultExecutor","title":"Other threads"},{"location":"mps_internal/threads/read_write_action_examples/","text":"These actions use IntelliJ platforms or access MPS models and need additional locks because of the location where they are used. Especially MPS read and write locks should be available in every language aspect and manually locking isn\u2019t necessary. Example of actions that require MPS locks \u00b6 Write actions \u00b6 reload/add/remove/modify projects modules models Read actions \u00b6 resolve node references read nodes/models/modules Read actions in EDT \u00b6 select a node in the tree view clear the marks in the highlight manager move nodes refactoring resolve node references and open them in the editor run the model checker rebuild editor components paste nodes select nodes in the editor recreate opened MPS editors show the completion menu rehighlight nodes Examples of actions that require IDEA locks \u00b6 Useful methods: Read action: Applicationmanager . getApplication . runReadAction () Read action allowed: ApplicationManager . getApplication (). assertReadAccessAllowed () Write action: Applicationmanager . getApplication . runWriteAction () Write action allowed: ApplicationManager . getApplication (). assertWriteAccessAllowed () Write actions \u00b6 VFS related actions refresh files create/remove directories create/modify/delete/copy files paste data create facets Read actions \u00b6 find files get a list of file editors Actions executed on EDT \u00b6 They are executed in the lambda of ApplicationManager . getApplication (). invokeLater / invokeAndWait ) . update tools show progress bars for a long running actions update text in swing components dispose UI components rebuild components start a make process save projects/modules update toolbars show dialogs update the project pane perform refactorings unload models Actions that are executed on a pooled thread \u00b6 They are executed in the lambda of ApplicationManager . getApplication (). executeOnPooledThread set break points on startup preview the generated text for nodes","title":"Example actions using locks"},{"location":"mps_internal/threads/read_write_action_examples/#example-of-actions-that-require-mps-locks","text":"","title":"Example of actions that require MPS locks"},{"location":"mps_internal/threads/read_write_action_examples/#write-actions","text":"reload/add/remove/modify projects modules models","title":"Write actions"},{"location":"mps_internal/threads/read_write_action_examples/#read-actions","text":"resolve node references read nodes/models/modules","title":"Read actions"},{"location":"mps_internal/threads/read_write_action_examples/#read-actions-in-edt","text":"select a node in the tree view clear the marks in the highlight manager move nodes refactoring resolve node references and open them in the editor run the model checker rebuild editor components paste nodes select nodes in the editor recreate opened MPS editors show the completion menu rehighlight nodes","title":"Read actions in EDT"},{"location":"mps_internal/threads/read_write_action_examples/#examples-of-actions-that-require-idea-locks","text":"Useful methods: Read action: Applicationmanager . getApplication . runReadAction () Read action allowed: ApplicationManager . getApplication (). assertReadAccessAllowed () Write action: Applicationmanager . getApplication . runWriteAction () Write action allowed: ApplicationManager . getApplication (). assertWriteAccessAllowed ()","title":"Examples of actions that require IDEA locks"},{"location":"mps_internal/threads/read_write_action_examples/#write-actions_1","text":"VFS related actions refresh files create/remove directories create/modify/delete/copy files paste data create facets","title":"Write actions"},{"location":"mps_internal/threads/read_write_action_examples/#read-actions_1","text":"find files get a list of file editors","title":"Read actions"},{"location":"mps_internal/threads/read_write_action_examples/#actions-executed-on-edt","text":"They are executed in the lambda of ApplicationManager . getApplication (). invokeLater / invokeAndWait ) . update tools show progress bars for a long running actions update text in swing components dispose UI components rebuild components start a make process save projects/modules update toolbars show dialogs update the project pane perform refactorings unload models","title":"Actions executed on EDT"},{"location":"mps_internal/threads/read_write_action_examples/#actions-that-are-executed-on-a-pooled-thread","text":"They are executed in the lambda of ApplicationManager . getApplication (). executeOnPooledThread set break points on startup preview the generated text for nodes","title":"Actions that are executed on a pooled thread"},{"location":"patterns/language_design/","text":"Language design \u00b6 This page contains tips and articles for patterns regarding the design of MPS languages. Inline Definitions (Specific Languages Blog) Escape hatch (Specific Languages Blog) Externalized names (Specific Languages Blog) Empty lines (Specific Languages Blog) Externalized names (and other common attributes) (F1RE Blog) Multiple generators for same language (F1RE Blog)","title":"Language design"},{"location":"patterns/language_design/#language-design","text":"This page contains tips and articles for patterns regarding the design of MPS languages. Inline Definitions (Specific Languages Blog) Escape hatch (Specific Languages Blog) Externalized names (Specific Languages Blog) Empty lines (Specific Languages Blog) Externalized names (and other common attributes) (F1RE Blog) Multiple generators for same language (F1RE Blog)","title":"Language design"},{"location":"patterns/ui_patterns/","text":"UI Patterns and Anti patterns \u00b6 Go through your editors and check the following list. Texts are readable. The contrast ratio between the background color and the foreground text color should be at least 4.5:1 article . Contrast checkers can also help you. Here are some colors with a high contrast: When using a gray scale color, make sure that the text color doesn\u2019t exceed 48% brightness ( source ). Make also sure to provide different colors for different color schemes (e.g. darcula theme vs light theme). Bad example #1 Bad example #2 Bold and underline aren\u2019t used together. This is an anti-pattern. More information can be found in this article . MPS related summary: Bold important phrases highlighting keywords Italic/Emphasis Used to highlight quotes (some use blockquotes). Foreign words. Underline Used for links CAPS Used for acronyms You use buttons correctly. (Swing) Buttons use appropriate symbols/text to make clear what they do. Buttons can alse be used as up and down keys. Buttons can also be hidden to not disrupt the text editing: Add option to hide buttons (checkbox, editor hint, action, etc.). Clickable elements appear clickable. When elements are clickable, they should appear clickable: They should use an indicator or different style (e.g. underlines and blue or styled like a button). You align collections when possible. Alignment is an important aspect in design ( introduction ). Use vertical grids instead of vertical collections to align cells nicely. It is also very important for readability. You use color for emphasis and to convey information. Not only bold font can be used to emphasize words but also color. Make sure that the used color is correctly associated by the user. Bad example Greyscale editor + grey is associated with disabled content/meta information such as comments. Good example Color is used to distinguish different language features: BLUE for numbers, lila/green for CONSTANTS. You use labels in a consistent way. Labels should be used consistently in the design (e.g. always bold, colon after label), the same goes for key value pairs. There is no best practise for the separation between label and text. Some ideas and common guidelines can be found here . The context of UI elements is consistent. Counterexample: There are 3 buttons next to each other that look similar: One opens an external documentation, the other navigates to a root node and the third one undos a change. This could be confusing and frustrating for the user. A default empty statement exists. There should always be a default concept that acts as an empty line or empty text. It should be editable and support autocompletion. They should have an indicator that they are editable. The easist way is to provide a placeholder value. Bad example Different groups are distinguishable from each other. Groups can be separated for example by whitespace, by drawing a border (box) or drawing brackets around the content. You emphasize non-standard operations/literals. Emphasize special operations or literals to make it clear that they are not. Another good examples in baselanguage are extension methods. Enough paddings surround elements. Make sure there is enough space between the content and its border (padding) otherwhise the editor looks too packed. More information from a design perspective can be found here . You use existing stylesheets. For baselanguage there is BaseLanguageStyle . You can search globally for instances of Stylesheet to find more styles. The font size conveys hierarchy. More information can be found in this beginner\u2019s guide to typographic hierarchy . Example hierarchy (source: Font Size And Weight Matters ) : You use the full window with for your editor. Often times the space in editor components is not good used and a lot of space is left empty on the right side of the window. This can be improved by using multiple groups next to each other or using the right hand side of the screen for some sort of legend for graphics or meta information about the (root) node (e.g. code review). Headers follow general UI principles. The following principles should be followed: hierarchical relationship of ideas consistency readability specificity More information can be found in Technical writing essentials - Headings . Headers are distinguishable from content. Bad example The header and the start of the child concepts use bold font and the same text. In this example the text \u201cOutput\u201d is redundant. The header should be larger in size. A common layout is header-input-output: At the top is the header, then there are the inputs/declarations, followed by the output/body. Make sure to separated this three groups in some ways (such as horizontal lines or empty lines). Mixed example Lines aren\u2019t too thick and not textual. A good maximum width for borders and other lines is 3 pixels. This is just a rough guideline but with thicker lines the design becomes overwhelming. Bad example You don\u2019t emphasize meta/not important information. Good example A smaller font, light gray color or maybe a different font seems to work well. Inherited value can also be shown this way: display them as placeholder values in a light gray color. Don\u2019t emphasize comments by making them bold or stand out in any way. Bad example The reflective editor is never shown. The reflective editor provides a default editor for nodes. The editor is only readonly and should only be used for debugging purposes. Bad example You use The right form of projection for the task in the editor. The right projections are used (text, tables, diagrams..) and different kind of projections are provided when necessary (switchable by menu or editor hints). Example: multiple projections You didn\u2019t forget to enable anti aliasing for custom swing components. When you create a custom component and have a paint-Method, call EditorComponent.turnOnAliasingIfPossible to enable anti aliasing. More information can be found in the Java documentation . All usages of symbols are clear. When using symbols, make sure that the user understands what it means. A Plus symbol might be easy to understand (add, increase), a complex shape that is not usuable used might be not. Common icons can be found for example in the fontawesome icon pack . You abbreviate often used words and symbol. Abbreviate words that are often used in the editor or use symbols. Examples: The Letter \u201cm\u201d or a red star * is often used to mark a field as mandatory. The plus sign \u2295 is used to indicate an \u201cadd\u201d action.","title":"UI patterns"},{"location":"patterns/ui_patterns/#ui-patterns-and-anti-patterns","text":"Go through your editors and check the following list. Texts are readable. The contrast ratio between the background color and the foreground text color should be at least 4.5:1 article . Contrast checkers can also help you. Here are some colors with a high contrast: When using a gray scale color, make sure that the text color doesn\u2019t exceed 48% brightness ( source ). Make also sure to provide different colors for different color schemes (e.g. darcula theme vs light theme). Bad example #1 Bad example #2 Bold and underline aren\u2019t used together. This is an anti-pattern. More information can be found in this article . MPS related summary: Bold important phrases highlighting keywords Italic/Emphasis Used to highlight quotes (some use blockquotes). Foreign words. Underline Used for links CAPS Used for acronyms You use buttons correctly. (Swing) Buttons use appropriate symbols/text to make clear what they do. Buttons can alse be used as up and down keys. Buttons can also be hidden to not disrupt the text editing: Add option to hide buttons (checkbox, editor hint, action, etc.). Clickable elements appear clickable. When elements are clickable, they should appear clickable: They should use an indicator or different style (e.g. underlines and blue or styled like a button). You align collections when possible. Alignment is an important aspect in design ( introduction ). Use vertical grids instead of vertical collections to align cells nicely. It is also very important for readability. You use color for emphasis and to convey information. Not only bold font can be used to emphasize words but also color. Make sure that the used color is correctly associated by the user. Bad example Greyscale editor + grey is associated with disabled content/meta information such as comments. Good example Color is used to distinguish different language features: BLUE for numbers, lila/green for CONSTANTS. You use labels in a consistent way. Labels should be used consistently in the design (e.g. always bold, colon after label), the same goes for key value pairs. There is no best practise for the separation between label and text. Some ideas and common guidelines can be found here . The context of UI elements is consistent. Counterexample: There are 3 buttons next to each other that look similar: One opens an external documentation, the other navigates to a root node and the third one undos a change. This could be confusing and frustrating for the user. A default empty statement exists. There should always be a default concept that acts as an empty line or empty text. It should be editable and support autocompletion. They should have an indicator that they are editable. The easist way is to provide a placeholder value. Bad example Different groups are distinguishable from each other. Groups can be separated for example by whitespace, by drawing a border (box) or drawing brackets around the content. You emphasize non-standard operations/literals. Emphasize special operations or literals to make it clear that they are not. Another good examples in baselanguage are extension methods. Enough paddings surround elements. Make sure there is enough space between the content and its border (padding) otherwhise the editor looks too packed. More information from a design perspective can be found here . You use existing stylesheets. For baselanguage there is BaseLanguageStyle . You can search globally for instances of Stylesheet to find more styles. The font size conveys hierarchy. More information can be found in this beginner\u2019s guide to typographic hierarchy . Example hierarchy (source: Font Size And Weight Matters ) : You use the full window with for your editor. Often times the space in editor components is not good used and a lot of space is left empty on the right side of the window. This can be improved by using multiple groups next to each other or using the right hand side of the screen for some sort of legend for graphics or meta information about the (root) node (e.g. code review). Headers follow general UI principles. The following principles should be followed: hierarchical relationship of ideas consistency readability specificity More information can be found in Technical writing essentials - Headings . Headers are distinguishable from content. Bad example The header and the start of the child concepts use bold font and the same text. In this example the text \u201cOutput\u201d is redundant. The header should be larger in size. A common layout is header-input-output: At the top is the header, then there are the inputs/declarations, followed by the output/body. Make sure to separated this three groups in some ways (such as horizontal lines or empty lines). Mixed example Lines aren\u2019t too thick and not textual. A good maximum width for borders and other lines is 3 pixels. This is just a rough guideline but with thicker lines the design becomes overwhelming. Bad example You don\u2019t emphasize meta/not important information. Good example A smaller font, light gray color or maybe a different font seems to work well. Inherited value can also be shown this way: display them as placeholder values in a light gray color. Don\u2019t emphasize comments by making them bold or stand out in any way. Bad example The reflective editor is never shown. The reflective editor provides a default editor for nodes. The editor is only readonly and should only be used for debugging purposes. Bad example You use The right form of projection for the task in the editor. The right projections are used (text, tables, diagrams..) and different kind of projections are provided when necessary (switchable by menu or editor hints). Example: multiple projections You didn\u2019t forget to enable anti aliasing for custom swing components. When you create a custom component and have a paint-Method, call EditorComponent.turnOnAliasingIfPossible to enable anti aliasing. More information can be found in the Java documentation . All usages of symbols are clear. When using symbols, make sure that the user understands what it means. A Plus symbol might be easy to understand (add, increase), a complex shape that is not usuable used might be not. Common icons can be found for example in the fontawesome icon pack . You abbreviate often used words and symbol. Abbreviate words that are often used in the editor or use symbols. Examples: The Letter \u201cm\u201d or a red star * is often used to mark a field as mandatory. The plus sign \u2295 is used to indicate an \u201cadd\u201d action.","title":"UI Patterns and Anti patterns"},{"location":"patterns/user_experience/","text":"User experience and user interfaces \u00b6 Basics \u00b6 7 Graphic Design Principles to Up-Level your Graphics 7 Gestalt Principles of Design 10 Graphic Design Rules You Should Never Break 20 Most Important UI Design Principles for UI Designer What are the basic rules of user interface design? (quora) Understanding layout | Material Design Text \u00b6 UX Writing: Handy Tips on Text Improving User Experience The Punctuation Guide Technical Writing Essentials \u2013 Document Design Word Choices and Language in UX , Part Three: User Interface Labels & Messages UI \u00b6 Design Better Forms IntelliJ Platform UI Guidelines When to use checkboxes UX /Usability \u00b6 Ten Usability Heuristics for User Interface Design UX Design: How to Make User Interface Readable The following items are cited from different UX guidelines from the web: Windows Design Techniques : Determine the features your users need. Understand your users\u2019 needs through goal, scenario, and task analysis. Determine a set of features that realizes these objectives. Remove unnecessary elements. Remove elements that aren\u2019t likely to be used or have preferable alternatives. Remove unnecessary redundancy. There might be several effective ways to perform a task. To achieve simplicity, make the hard decision and choose the best one for your target users instead of providing all of them and making the choice an option. Make it \u201cjust work\u201d automatically. The element is necessary, but any user interaction to get it to work is not because there is an acceptable default behavior or configuration. To achieve simplicity, make it work automatically and either hide it from the user completely or reduce its exposure significantly. Combine what should be combined. Put the essential features that support a task together so that a task can be performed in one place. The task\u2019s steps should have a unified, streamlined flow. Break down complex tasks into a set of easy, clear steps, so that \u201cone\u201d place might consist of several UI surfaces, such as a wizard. Separate what should be separated. Not everything can be presented in one place, so always have clear, well-chosen boundaries. Make features that support core scenarios central and obvious, and hide optional functionality or make it peripheral. Separate individual tasks and provide links to related tasks. For example, tasks related to manipulating photos should be clearly separated from tasks related to managing collections of photos, but they should be readily accessible from each other. Eliminate what can be eliminated. Take a printout of your design and highlight the elements used to perform the most important tasks. Even highlight the individual words in the UI text that communicate useful information. Now review what isn\u2019t highlighted and consider removing it from the design. If you remove the item, would anything bad happen? If not, remove it! Consistency, configurability, and generalization are often desirable qualities, but they can lead to unnecessary complexity. Review your design for misguided efforts in consistency (such as having redundant text), generalization (such as having any number of time zones when two is sufficient), and configurability (such as options that users aren\u2019t likely to change), and eliminate what can be eliminated. Put the elements in the right place. Within a window, an element\u2019s location should follow its utility. Essential controls, instructions, and explanations should all be in context in logical order. If more options are needed, expose them in context by clicking a chevron or similar mechanism; if more information is needed, display an infotip on mouse hover. Place less important tasks, options, and Help information outside the main flow in a separate window or page. The technique of displaying additional detail as needed is called progressive disclosure. Use meaningful high-level combinations. It is often simpler and more scalable to select and manipulate groups of related elements than individual elements. Examples of high-level combinations include folders, themes, styles, and user groups. Such combinations often map to a user goal or intention that isn\u2019t apparent from the individual elements. For example, the intention behind the High Contrast Black color scheme is far more apparent than that of a black window background. Select the right controls. Design elements are embodied by the controls you use to represent them, so selecting the right control is crucial to efficient presentation. For example, the font selection box used by Microsoft Word shows both a preview of the font as well as the most recently used fonts. Similarly, the way Word shows potential spelling and grammar errors in place is much simpler than the dialog box alternative, as shown in the beginning of this article. Make tasks discoverable and visible. All tasks, but especially frequent tasks, should be readily discoverable within the user interface. The steps required to perform tasks should be visible and should not rely on memorization. Present tasks in the user\u2019s domain. Complex software requires users to map their problems to the technology. Simple software does that mapping for them by presenting what is natural. For example, a red-eye reduction feature maps directly to the problem space and doesn\u2019t require users to think in terms of details like hues and gradients. Put domain knowledge into the program. Users shouldn\u2019t be required to access external information to use your application successfully. Domain knowledge can range from complex data and algorithms to simply making it clear what type of input is valid. Use text that users understand. Well-crafted text is crucial to effective communication with users. Use concepts and terms familiar to your users. Fully explain what is being asked in plain language so that users can make intelligent, informed decisions. Use safe, secure, probable defaults. If a setting has a value that applies to most users in most circumstances, and that setting is both safe and secure, use it as the default value. Make users specify values only when necessary. Use constraints. If there are many ways to perform a task, but only some are correct, constrain the task to those correct ways. Users should not be allowed to make readily preventable mistakes. Window UX Top Violations : Use ordinary, conversational terms when you can. Focus on the user goals, not technology. This is especially effective if you are explaining a complex technical concept or action. Imagine yourself looking over the user\u2019s shoulder and explaining how to accomplish the task. IN CONFLICT WITH Domain Be polite, supportive, and encouraging. The user should never feel condescended to, blamed, or intimidated. Remove redundant text. Look for redundant text in window titles, main instructions, supplemental instructions, content areas, command links, and commit buttons. Generally, leave full text in main instructions and interactive controls, and remove any redundancy from the other places. Use title-style capitalization for titles, and sentence-style capitalization for all other UI elements. For feature and technology names, be conservative in capitalizing. Typically, only major components should be capitalized (using title-style capitalization). For feature and technology names, be consistent in capitalizing. If the name appears more than once on a UI screen, it should always appear the same way. Likewise, across all UI screens in the program, the name should be consistently presented. Don\u2019t capitalize the names of generic user interface elements, such as toolbar, menu, scroll bar, button, and icon. Exceptions: Address bar, Links bar, ribbon. Don\u2019t use blue text that isn\u2019t a link, because users may assume that it is a link. Use bold or a shade of gray where you\u2019d otherwise use colored text. Use bold sparingly to draw attention to text users must read. Don\u2019t place periods at the end of control labels or main instructions. Use one space between sentences. Not two. Label every control or group of control For all controls, select the safest (to prevent loss of data or system access), most secure value by default. If safety and security aren\u2019t factors, select the most likely or convenient value. Use notifications for events that are unrelated to the current user activity, don\u2019t require immediate user action, and users can freely ignore. Don\u2019t abuse notifications: Use notifications only if you need to. When you display a notification, you are potentially interrupting users or even annoying them. Make sure that interruption is justified. Use notifications for non-critical events or situations that don\u2019t require immediate user action. For critical events or situations that require immediate user action, use an alternative UI element (such as a modal dialog box). Don\u2019t use notifications for feature advertisements! Never require users to click an object to determine if it is clickable. Users must be able to determine clickability by visual inspection alone. Whenever possible, propose a solution so users can fix the problem. However, make sure the proposed solution is likely to solve the problem. Don\u2019t waste users\u2019 time by suggesting possible, but improbable, solutions. Be specific. Avoid vague wording, such as syntax error and illegal operation. Provide specific names, locations, and values of the objects involved. Don\u2019t use phrasing that blames the user or implies user error. Avoid using you and your in the phrasing. While the active voice is generally preferred, use the passive voice when the user is the subject and might feel blamed for the error if the active voice were used. Don\u2019t use OK for error messages. Users don\u2019t view errors as being OK. If the error message has no direct action, use Close instead. Don\u2019t use the following words: Error, failure (use problem instead) Failed to (use unable to instead) Illegal, invalid, bad (use incorrect or not valid instead) Abort, kill, terminate (use stop instead) Catastrophic, fatal (use serious instead) Dark theme \u00b6 Use the predefined colors in MPS or define your own colors using the class JBColor with the constructor JBColor(light theme color, dark theme color) . By using this class, it shouldn\u2019t be necessary to verify if the user is using the Darcula theme . The MPS colors already support the light and dark theme because they inherit from JBColor . As seen in the screenshot below, the colors can be different when using the dark theme (for example: the white and black colors). Don\u2019t use hard-coded hex colors or the class Color . Light theme Dark theme Make sure that the foreground color is readable for the chosen background (see preceding screenshots). You can use an online contrast checker tool to verify that the color combination is readable. Example for colors with a good contrast ratio (foreground: black, the ratio can be found after the hex code): If this change isn\u2019t feasible, you can switch to the default theme (useful for RCPs): 1 2 3 4 5 6 class LookAndFeel { void set () { LafManager lafManager = LafManager . getInstance (); QuickChangeLookAndFeel . switchLafAndUpdateUI ( lafManager , LafManagerImpl . getTestInstance (). getDefaultLightLaf (), false ); } } Additional useful resources: ColorUtil (fromHex, darker, brighter, withAlpha, saturate, desaturate\u2026) MPS color definitions: MPSColors.java JBColor. brighter () + JBColor. darker () e.g. new JBColor(JBColor.PINK, JBColor.PINK.darker().darker()) IntelliJ IDEA color definitions: JBColor IntelliJ IDEA platform colors + explanation: JBUI + Platform theme colors Apple color Guidelines","title":"User experience"},{"location":"patterns/user_experience/#user-experience-and-user-interfaces","text":"","title":"User experience and user interfaces"},{"location":"patterns/user_experience/#basics","text":"7 Graphic Design Principles to Up-Level your Graphics 7 Gestalt Principles of Design 10 Graphic Design Rules You Should Never Break 20 Most Important UI Design Principles for UI Designer What are the basic rules of user interface design? (quora) Understanding layout | Material Design","title":"Basics"},{"location":"patterns/user_experience/#text","text":"UX Writing: Handy Tips on Text Improving User Experience The Punctuation Guide Technical Writing Essentials \u2013 Document Design Word Choices and Language in UX , Part Three: User Interface Labels & Messages","title":"Text"},{"location":"patterns/user_experience/#ui","text":"Design Better Forms IntelliJ Platform UI Guidelines When to use checkboxes","title":"UI"},{"location":"patterns/user_experience/#uxusability","text":"Ten Usability Heuristics for User Interface Design UX Design: How to Make User Interface Readable The following items are cited from different UX guidelines from the web: Windows Design Techniques : Determine the features your users need. Understand your users\u2019 needs through goal, scenario, and task analysis. Determine a set of features that realizes these objectives. Remove unnecessary elements. Remove elements that aren\u2019t likely to be used or have preferable alternatives. Remove unnecessary redundancy. There might be several effective ways to perform a task. To achieve simplicity, make the hard decision and choose the best one for your target users instead of providing all of them and making the choice an option. Make it \u201cjust work\u201d automatically. The element is necessary, but any user interaction to get it to work is not because there is an acceptable default behavior or configuration. To achieve simplicity, make it work automatically and either hide it from the user completely or reduce its exposure significantly. Combine what should be combined. Put the essential features that support a task together so that a task can be performed in one place. The task\u2019s steps should have a unified, streamlined flow. Break down complex tasks into a set of easy, clear steps, so that \u201cone\u201d place might consist of several UI surfaces, such as a wizard. Separate what should be separated. Not everything can be presented in one place, so always have clear, well-chosen boundaries. Make features that support core scenarios central and obvious, and hide optional functionality or make it peripheral. Separate individual tasks and provide links to related tasks. For example, tasks related to manipulating photos should be clearly separated from tasks related to managing collections of photos, but they should be readily accessible from each other. Eliminate what can be eliminated. Take a printout of your design and highlight the elements used to perform the most important tasks. Even highlight the individual words in the UI text that communicate useful information. Now review what isn\u2019t highlighted and consider removing it from the design. If you remove the item, would anything bad happen? If not, remove it! Consistency, configurability, and generalization are often desirable qualities, but they can lead to unnecessary complexity. Review your design for misguided efforts in consistency (such as having redundant text), generalization (such as having any number of time zones when two is sufficient), and configurability (such as options that users aren\u2019t likely to change), and eliminate what can be eliminated. Put the elements in the right place. Within a window, an element\u2019s location should follow its utility. Essential controls, instructions, and explanations should all be in context in logical order. If more options are needed, expose them in context by clicking a chevron or similar mechanism; if more information is needed, display an infotip on mouse hover. Place less important tasks, options, and Help information outside the main flow in a separate window or page. The technique of displaying additional detail as needed is called progressive disclosure. Use meaningful high-level combinations. It is often simpler and more scalable to select and manipulate groups of related elements than individual elements. Examples of high-level combinations include folders, themes, styles, and user groups. Such combinations often map to a user goal or intention that isn\u2019t apparent from the individual elements. For example, the intention behind the High Contrast Black color scheme is far more apparent than that of a black window background. Select the right controls. Design elements are embodied by the controls you use to represent them, so selecting the right control is crucial to efficient presentation. For example, the font selection box used by Microsoft Word shows both a preview of the font as well as the most recently used fonts. Similarly, the way Word shows potential spelling and grammar errors in place is much simpler than the dialog box alternative, as shown in the beginning of this article. Make tasks discoverable and visible. All tasks, but especially frequent tasks, should be readily discoverable within the user interface. The steps required to perform tasks should be visible and should not rely on memorization. Present tasks in the user\u2019s domain. Complex software requires users to map their problems to the technology. Simple software does that mapping for them by presenting what is natural. For example, a red-eye reduction feature maps directly to the problem space and doesn\u2019t require users to think in terms of details like hues and gradients. Put domain knowledge into the program. Users shouldn\u2019t be required to access external information to use your application successfully. Domain knowledge can range from complex data and algorithms to simply making it clear what type of input is valid. Use text that users understand. Well-crafted text is crucial to effective communication with users. Use concepts and terms familiar to your users. Fully explain what is being asked in plain language so that users can make intelligent, informed decisions. Use safe, secure, probable defaults. If a setting has a value that applies to most users in most circumstances, and that setting is both safe and secure, use it as the default value. Make users specify values only when necessary. Use constraints. If there are many ways to perform a task, but only some are correct, constrain the task to those correct ways. Users should not be allowed to make readily preventable mistakes. Window UX Top Violations : Use ordinary, conversational terms when you can. Focus on the user goals, not technology. This is especially effective if you are explaining a complex technical concept or action. Imagine yourself looking over the user\u2019s shoulder and explaining how to accomplish the task. IN CONFLICT WITH Domain Be polite, supportive, and encouraging. The user should never feel condescended to, blamed, or intimidated. Remove redundant text. Look for redundant text in window titles, main instructions, supplemental instructions, content areas, command links, and commit buttons. Generally, leave full text in main instructions and interactive controls, and remove any redundancy from the other places. Use title-style capitalization for titles, and sentence-style capitalization for all other UI elements. For feature and technology names, be conservative in capitalizing. Typically, only major components should be capitalized (using title-style capitalization). For feature and technology names, be consistent in capitalizing. If the name appears more than once on a UI screen, it should always appear the same way. Likewise, across all UI screens in the program, the name should be consistently presented. Don\u2019t capitalize the names of generic user interface elements, such as toolbar, menu, scroll bar, button, and icon. Exceptions: Address bar, Links bar, ribbon. Don\u2019t use blue text that isn\u2019t a link, because users may assume that it is a link. Use bold or a shade of gray where you\u2019d otherwise use colored text. Use bold sparingly to draw attention to text users must read. Don\u2019t place periods at the end of control labels or main instructions. Use one space between sentences. Not two. Label every control or group of control For all controls, select the safest (to prevent loss of data or system access), most secure value by default. If safety and security aren\u2019t factors, select the most likely or convenient value. Use notifications for events that are unrelated to the current user activity, don\u2019t require immediate user action, and users can freely ignore. Don\u2019t abuse notifications: Use notifications only if you need to. When you display a notification, you are potentially interrupting users or even annoying them. Make sure that interruption is justified. Use notifications for non-critical events or situations that don\u2019t require immediate user action. For critical events or situations that require immediate user action, use an alternative UI element (such as a modal dialog box). Don\u2019t use notifications for feature advertisements! Never require users to click an object to determine if it is clickable. Users must be able to determine clickability by visual inspection alone. Whenever possible, propose a solution so users can fix the problem. However, make sure the proposed solution is likely to solve the problem. Don\u2019t waste users\u2019 time by suggesting possible, but improbable, solutions. Be specific. Avoid vague wording, such as syntax error and illegal operation. Provide specific names, locations, and values of the objects involved. Don\u2019t use phrasing that blames the user or implies user error. Avoid using you and your in the phrasing. While the active voice is generally preferred, use the passive voice when the user is the subject and might feel blamed for the error if the active voice were used. Don\u2019t use OK for error messages. Users don\u2019t view errors as being OK. If the error message has no direct action, use Close instead. Don\u2019t use the following words: Error, failure (use problem instead) Failed to (use unable to instead) Illegal, invalid, bad (use incorrect or not valid instead) Abort, kill, terminate (use stop instead) Catastrophic, fatal (use serious instead)","title":"UX/Usability"},{"location":"patterns/user_experience/#dark-theme","text":"Use the predefined colors in MPS or define your own colors using the class JBColor with the constructor JBColor(light theme color, dark theme color) . By using this class, it shouldn\u2019t be necessary to verify if the user is using the Darcula theme . The MPS colors already support the light and dark theme because they inherit from JBColor . As seen in the screenshot below, the colors can be different when using the dark theme (for example: the white and black colors). Don\u2019t use hard-coded hex colors or the class Color . Light theme Dark theme Make sure that the foreground color is readable for the chosen background (see preceding screenshots). You can use an online contrast checker tool to verify that the color combination is readable. Example for colors with a good contrast ratio (foreground: black, the ratio can be found after the hex code): If this change isn\u2019t feasible, you can switch to the default theme (useful for RCPs): 1 2 3 4 5 6 class LookAndFeel { void set () { LafManager lafManager = LafManager . getInstance (); QuickChangeLookAndFeel . switchLafAndUpdateUI ( lafManager , LafManagerImpl . getTestInstance (). getDefaultLightLaf (), false ); } } Additional useful resources: ColorUtil (fromHex, darker, brighter, withAlpha, saturate, desaturate\u2026) MPS color definitions: MPSColors.java JBColor. brighter () + JBColor. darker () e.g. new JBColor(JBColor.PINK, JBColor.PINK.darker().darker()) IntelliJ IDEA color definitions: JBColor IntelliJ IDEA platform colors + explanation: JBUI + Platform theme colors Apple color Guidelines","title":"Dark theme"},{"location":"platform_essentials/","text":"Platform essentials \u00b6 The following pages give an introduction to the most important languages of the platforms. In addition to this articles, make sure to check out sandboxes and test cases in the corresponding languages. If you aren\u2019t sure how to use a specific concept, right-click it \u2192 Find Usage Settings \u2192 Concept Instances / Node usages + Global Scope . You can also use the console to search for instances: # instances < scope = global > ( ClassConcept )","title":"Platform essentials"},{"location":"platform_essentials/#platform-essentials","text":"The following pages give an introduction to the most important languages of the platforms. In addition to this articles, make sure to check out sandboxes and test cases in the corresponding languages. If you aren\u2019t sure how to use a specific concept, right-click it \u2192 Find Usage Settings \u2192 Concept Instances / Node usages + Global Scope . You can also use the console to search for instances: # instances < scope = global > ( ClassConcept )","title":"Platform essentials"},{"location":"platform_essentials/building_mbeddr_locally/","text":"When trying to build mbeddr locally, there are some stumblings blocks that you have to overcome. This article isn\u2019t a full build instruction but rather a rough guideline. It should make mbeddr build so far than you can make changes to the non C parts of the project. You probably need to install all tools from the page Required Tools and Versions | mbeddr.com , especially the C related tools, if you want to get everything build. Help for extending this guide is always appreciated. git clone git@github.com:mbeddr/mbeddr.core.git Switch to the branch that you need, in case it isn\u2019t the master branch e.g. MPS 2021.1.4: git checkout maintenance/mps20211 Open the com.mbeddr.debugger project in MPS (there are multiple projects in the code/languages folder) and run ./gradlew install on Mac/Linux or gradlew.bat install on Windows in the command line. This command should build the full project and takes probably more than 10 minutes. You don\u2019t have to start this command from inside MPS but when you execute it on the normal command line, you might need to pass -PMPS_PATHS_SELECTOR to gradle to set the path to the MPS home directory. When everything works, the script should install a plugin named spawner into your MPS installation. This plugin contains libraries for the Eclipse C/C++ development tooling and needs to be installed. It also install the idea plugin for the actionsfilter language, that needs to be installed to be able to use the language. If not also set, open MPS , go to preferences \u2192 Appearance&Behavior \u2192 Path Variables and set mbeddr.github.core.home to the root directory of the mbeddr.core repository. You can now build all projects. Start with these projects in this order: com.mbeddr.debugger com.mbeddr.mpsutil com.mbeddr.core com.mbeddr. ext \u2026 If you get compilation error, try a different order. Some projects like com.mbeddr. doc and com.mbeddr. doc .aspect don\u2019t have as many dependencies to other projects as other projects. If there are many errors in the com.mbeddr.debugger project, you probably don\u2019t have the spawner plugin installed. In case anything went wrong, and you want to start over, just clean the generated files: git clean -xdf . After you\u2019ve made a change, just (re)build the parts of the project that you\u2019ve changed and push the branch so that the build server can make a full build + execute the tests. You don\u2019t need to open all dependent projects if you make a change in one project.","title":"Building Mbeddr locally"},{"location":"platform_essentials/com_mbeddr_mpsutil/","text":"This documentation gives an introduction to the subproject com.mbeddr.mpsutil of mbeddr . The project contains a bunch of different utility languages and solutions: Common \u00b6 com.mbeddr.mpsutil.common Graph \u00b6 The graph model contains classes for working with graphs as well as an implementation for the AVL tree data structure, which is a self-balancing binary search tree . The Graph class can be used together with GraphUtil , which provides the following methods: computeSCC(Graph) : computes the strongly connected components of the given graph isConnected(Graph, T initial) : determines whether the given directed graph corresponds to a connected graph computeSCCSingle(T sought, Graph) : returns the set of nodes in the strongly connected component that the node to find is in computeTopologicalSorting(Graph, boolean silent) : returns the topological sorting of the nodes of the given graph. Model \u00b6 The class ConceptInstanceFinder contains a few methods for finding instances (= nodes) of a concept: findAllVisibleInstances(context, conceptToFind) : find instances of a concept in the used languages of the model. context node\u2019s model is the starting point. findAllInstances(conceptToFind) : searches for nodes of the given concept in all user models from the global scope (not including transient and temporary models) Util \u00b6 The class ApplicationHelper contains a method for running a Runnable object inside a progress window that optionally can be canceled. The class ModelComparator can compare two models programmatically and report the mismatches between them. SNodeIdentityWrapper This Class is used to preserve node identity across model boundaries. This is useful in generator scenarios where nodes are copied between the different phases. Comparator \u00b6 com.mbeddr.mpsutil.comparator The class MPSNodeComparator can be used to compare two nodes programmatically. There are overloaded methods for ignoring properties, ignored references and some more settings. The return object of class MPSNodeComparison contains the list of differences and can also pre pretty printed by called the method getDescription() . Incremental computation \u00b6 com.mbeddr.mpsutil.incrementalcomputation The language provides a single interface IncrementallyComputedValueHolder that can be implemented to support values that are automatically recomputed when a dependent value changes. The methods are documented in the behavior aspect. If a full model should be derived from an existing model, you have to use shadow models from MPS -extensions . Interpreter \u00b6 com.mbeddr.mpsutil.interpreter The interpreter is described on the interpreter page. Stubs \u00b6 There are stub models for the following Java libraries: Mockito : a framework for unit tests Open CSV jav: a CSV (comma-separated values) parser library Batik : a toolkit for applications that want to use images in the Scalable Vector Graphics (SVG) format for various purposes, such as display, generation, or manipulation XML : the following jars are included: XML Commons External Components XML APIs Extensions XML Commons Resolver Component Xerces2 J The included versions might be quite old. Actions \u00b6 Build assistant \u00b6 com.mbeddr.mpsutil.buildassistant This language adds actions to make or rebuild models/modules or projects and also include their dependencies. TODO: Do the official actions already provide this capability? Generic actions \u00b6 com.mbeddr.mpsutil.genericactions As the name already implies, this language adds some new generic actions: Decrease MPS Editor Font Size : decreases the font size in the editor settings and updates all editors (ctrl + -) Increase MPS Editor Font Size : increases the font size in the editor settings and updates all editors (ctrl + +) Reset MPS Editor Font Size :: reset the font size to the default size (ctrl + 0, 13 pixels) File Manager in Output Folder : a new action in the context menu of models that opens the path of the generated files. This action won\u2019t work if the model doesn\u2019t generate output files. File Manager in Module Folder : a new action in the context menu of modules that opens the path of th module. Node access \u00b6 com.mbeddr.mpsutil.nodeaccess This language adds a new group of actions called Copy/Paste Special to the editor popup that opens when right-clicking in the editor: Copy Node as XML : serialize the selected node to XML and copy it to the system clipboard. Paste XML Node : deserialize a previously copied node and insert it next to the current selected node. Copy Node Info to Clipboard : copies some information (project, module, model, node, URL) about a node to the system clipboard. Print \u00b6 com.mbeddr.mpsutil.print.pluginSolution This language adds a new action to the general MPS File menu. The action Print Editor can be used to print the current editor with a printer. If the operating system permits it, this action can also be used to create a PDF from the editor. Refactoring \u00b6 com.mbeddr.mpsutil.refactoring This language adds support for a projection mode switcher and refactoring actions. Projection mode switcher \u00b6 The mbeddr platform has a group Projection which is a top-level menu in MPS : A projection mode switcher can be declared containing push hint options where the hints are referenced from an existing ConceptEditor context hints container. The action can be added in the Add to Menu/Button Group section editor. This adds a toggle to this menu/button group that toggles the referenced editor hint in the editors. When it should only be enabled for a specific concept, add a concept to only in editor with instance of . Refactoring action \u00b6 The concept RefactoringAction can create an action for a simple refactoring . The title of the action can be specified with caption, and the keyboard shortcut can be defined in shortcut . Refactoring parameters can be specified in parameters . There are a few different choosers which will be shown in the refactoring dialog for the value of the parameters: string : chooser for selecting a text +node*: chooser for selecting a node using a filter. The filter is a function which has a list of nodes to refactor as a parameter and should return a new filtered sequence of nodes. project tree node : chooser for selecting a node from the project tree Baselanguage extensions \u00b6 BLDoc \u00b6 com.mbeddr.mpsutil.bldoc This language can be used to attach a documentation via the intention Attach Documentation to any node. The richtext language provides the concept Text for writing the documentation. There are also two interfaces that implement IWord so that any node can be referenced in the com.mbeddr. doc language: @child and @root for referencing any child nodes and named nodes respectively. Richstring \u00b6 com.mbeddr.mpsutil.richstring This BaseLanguage extension simplifies usage of variables and Java String.format() inside BaseLanguage Strings. Just add the language com.mbeddr.mpsutil.richstring to your model. The following example shows referencing a simple variable, embedding an expression inside a string, and the equivalent of calling String . format () : SModule \u00b6 com.mbeddr.mpsutil.smodule This language adds new operations to modules: add dependencies : adds dependencies to one or more models to the module add DevKits : adds devkits to the modules add languages to the module : adds used languages to the module add model : adds a new model with the specified name to the module. The repository has to be specified as the second parameter. If you press enter after the name, you can also add devkits, references to models and languages to the newly created model. In the inspector, the storage type has to be declared: it can be per root or single file persistence. add solution : adds a new solution to the module. The virtual package can be specified (subfolder). Generator \u00b6 Generator facade \u00b6 com.mbeddr.mpsutil.generatorfacade This language contains a class GeneratorFacade that helps with running the generator. In contains a method runGenerator with different signatures that can run the generator with a specific generation plan for a defined model with a custom handler for generator messages and custom generation parameters such as save transient models (default: false ) or generate in parallel (default: yes, 4 threads). GenUtil \u00b6 com.mbeddr.mpsutil.genutil This language helps with managing user objects and creating temporary nodes for them: 1 createTempNode{hello -> \"world\"}; This expression creates a new node and assigns Base Language expressions to keys of it. The keys are set internally with the setref statement which takes a key, a context node (here: the newly created node) and a target expression, and creates a new user object for this node. For normal values, there are the setref and getref statements to set and retrieve values from the user object respectively. For int values, there are the statements setint and getint . Mapping labels \u00b6 com.mbeddr.mpsutil.mappingLabels This language provides intentions for automatically creating mapping labels . One of the use cases is to migrate reference macros that use strings to identify target nodes to resolve the target by mapping labels instead. postprocessGeneratedFiles \u00b6 com.mbeddr.mpsutil.postprocessGeneratedFiles Add a new node generated files postprocessor facet to the plugin aspect of a language to declare a new facet that is executed after files are generated (textGen). It supports post-processor functions that have a node parameter and a path parameter that contains the path of the generate file. This method can be, for example, used to copy the generated files to a different folder: 1 2 3 4 5 6 7 8 9 10 11 12 generated files postprocessor facet testGen ( node , path ) -> void { Path target = Paths . get ( \"/var/tmp/testGen\" ). resolve ( path . getFileName ()); message info \"Copying \" + path + \" to \" + target , < no project > , < no throwable > ; try { Files . createDirectories ( target . getParent ()); Files . copy ( path , target , StandardCopyOption . REPLACE_EXISTING ); } catch ( IOException e ) { e . printStackTrace (); } } For simple duplicating the TextGen outcome, There\u2019s also the builtin JetBrains annotation CopyOutcome . XModel actions \u00b6 com.mbeddr.mpsutil.xmodel.actions This language adds actions for automatically deriving generation plans . For a single or list of modules There\u2019s the action Generation Plan for Languages which can be found in the context menu that opens when you right-click the modules in the logical view. There\u2019s also an action Derive Generation Plan which derives a generation plan for a model that has to be selected in a dialog that opens when executing this action. It can be found in the same places as the text preview action (for example, in the context menu of models). Importer and exporter \u00b6 ECore \u00b6 com.mbeddr.mpsutil.ecore This is an importer and exporter for the meta model( ECore ) of the Eclipse Modelling Framework. The conversion is between an XML file and a MPS model. The importer can import Ecore and Ecore model files. Access the action through right-clicking a model and opening the Ecore Transformation tools group. XML import \u00b6 com.mbeddr.mpsutil.xmlImport.plugin This plugin adds two actions for importing XML files into MPS : Paste as XML Content : this action is located in the editor context menu and parses XML code and adds it to the next xml node or root node. Import XML File(s) : this actions parses on or multiple xml files and creates xml root nodes for them in the current selected model. Languages \u00b6 JSON \u00b6 com.mbeddr.mpsutil.json This language implements a simple JSON language that can be used as a generator target. The Json file root node supports an additional package name which is used as the folder inside the generation folder where the file is generated into. An example for a file that can be generated: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"description\" : \"This is a json file\" , \"name\" : \"my json file\" , \"this is an object\" : { \"And another object\" : { \"With a description\" : \"object description\" , \"An array\" : [ \"valu1\" , \"value2\" ], \"withANumber\" : 1.232E+231231 , \"empty array\" : [ ], \"empty object\" : { }, \"empty string\" : \"\" } } } Language extensions \u00b6 Dataflow \u00b6 com.mbeddr.mpsutil.dataflow MPS -DF is a data-flow extension for MPS . Please visit the following page for more information: An Extensible Framework for Variable-precision Data-flow Analyses in MPS | Tam\u00e1s Szab\u00f3 Default values for properties \u00b6 com.mbeddr.mpsutil.propertydefault This language allows setting a default value for properties when they\u2019re initialized. The default value can be set by invoking the code completion on an existing property constraint inside the concept constraints of a concept and using one of the completion items with the \u201cdefault\u201d suffix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 concepts constraints TestPropertyDefault { ... property { bool } default : true property { int } default : 42 property { string } default : \"empty\" ... } Extension class \u00b6 com.mbeddr.mpsutil.extensionclass MPS already provides a language for defining extension methods , for example, methods to be called on an object without being part of the Object\u2019s class. This language extends this mechanism to provide all static methods of a class as extension methods. They can be invoked on the type of the method\u2019s first parameter. Import the language and create a new ExtensionClass root node. Reference the Java class containing the static methods. Method annotations can be added to overwrite parameter names, so that they\u2019re more elaborate than \u201cp0\u201d or \u201cp2\u201d. As a starting point, create a dependency to the model com.mbeddr.mpsutil.extensionclass.annotation.apache.commons.lang3 which provides extension methods with useful parameter names for Apache Commons StringUtils, ObjectUtils, and StringEscapeUtils. Language plugin extensions \u00b6 com.mbeddr.mpsutil. lang .plugin.extensions This language contains extensions for jetbrains.mps. lang .plugin . It mainly adds support for adding actions not only at a specific position but also supports the anchors first, last, before and after. Example: add to NewProjectOrModuleGroup after position NewProject #Parameterized menu \u00b6 com.mbeddr.mpsutil.parameterizedMenu This language is an extension to the parameterized transformation language part. When used as a menu part of it, it allows iterating over the parameter object ( parameterizable parameterized menu part) or create a dynamic submenu based on the parameter object ( parameterized submenu ). For completion styling and item priorities, use completion styling instead. Resources \u00b6 com.mbeddr.mpsutil.resources This language extends the language jetbrains.mps. lang .resources by providing more customizations. CircleCustomizable adds support for drawing the circle with a different thickness. TextCustomizable adds support for specificing the font style (plain, bold, italic), font family and offsets for the text. Suppress warning \u00b6 com.mbeddr.mpsutil.suppresswarning This language allows attaching an annotation to nodes to disable all or certain type system warnings by invoking the intention Toggle Suppress Warnings . There are different kinds of warnings that can be suppressed: all : suppress all warnings In com.mbeddr.core.modules two more data flow specific kinds exist: liveness : suppress dataflow liveness warning dataflow : suppress dataflow warning Type system trace \u00b6 com.mbeddr.mpsutil.typesystem.trace This language currently doesn\u2019t work anymore. This language modifies the different typesystem concepts like comparison rule, non typesystem rules etc. to collect information about the runtime execution time. To use it, place an instance of TraceTypesystem into a typesystem aspect to include the generator of this language and set the enabled flag to true. The model contains a new action Benchmark Typesystem that opens a tool named Type System Performance Data that shows the collected information. XML fix \u00b6 com.mbeddr.mpsutil.xml.fix This language contains fixes for the XML language . It escapes XMl values for XML 1.0/1.1. Unique names \u00b6 com.mbeddr.mpsutil.uniquenames MPS references all nodes by their id , not their name. Still, as humans, we see only the name, and this might be ambiguous. The Unique Names hint can be activated in MPS Preferences, Editor Hints. It shows as much of the full qualified name as required rendering a name unique. Example concept: Example Base Language: Tools \u00b6 Context actions \u00b6 com.mbeddr.mpsutil.contextactions There\u2019s a Context Actions (JetBrains) and Context Actions 2 (mbeddr) tool. Please use the one from JetBrains instead of this language. This language adds a tool with context-specific editor actions that can be navigated by mouse. For more information about the JetBrains implementation, visit the page Context acions tool | MPS Editing guide \u00b6 com.mbeddr.mpsutil.editingGuide This language allows creating interactive exercises for the end users that can be checked on the fly. An exercise contains a number of tasks and contain a reference to a following exercise. A single task contains a name, a description as well as the code block that should be shown in the exercise. The monitor function checks the completion status of the task. The variable program refers to the code section, the editorContext can be used, for example, to get the selected cell by calling editorContext.getSelectedCell() . The following objects can be returned: MonitorResultDone : the task was completed successfully, and the explanation is shown. MonitorResultError : the task was completed with an error. MonitorResultHint : the task was not completed successfully, and a hint is shown. The task can\u2019t be started by clicking the play button next to the name of a task. A new temporary model is created which contains the editable task. Favourites plugin \u00b6 com.mbeddr.mpsutil.favourites.plugin The favourites view is implemented using the language com.mbeddr.mpsutil.projectview from MPS -extensions . There\u2019s an action Add to Favourites to add a node to this view. The node can be removed by executing the action Remove from Favourites . Internally, the plugin is implemented using node annotations. Generated artifacts review \u00b6 com.mbeddr.mpsutil.genreview This language might not work correctly anymore. This tool can be used to view artifacts that where generated by a generator. It has a special color mapping for Java files. The button Highlight lines not linked should highlight the lines which aren\u2019t related to any node. When multiple original nodes can be traced to a certain file and line, the previous and next button can be used to navigate to these nodes. Graphstream \u00b6 com.mbeddr.mpsutil.graphstream This language adds support for GraphStream , a dynamic Java graph library. It can show a graph inside a tool called Graphing . Have a look at the language com.mbeddr.mpsutil.graphstream.example to see how a graph can be loaded. A concept has to implement the interface GraphingElement . When the current selected node implements the interface, a new menu View Graph appears in the editor context menu. The tool itself has support for history, zooming, fitting the view and rendering the graph as a GraphViz SVG. JUNG framework \u00b6 com.mbeddr.mpsutil.jung As an additional means of displaying relationships between nodes (next to PlantUML and the tree views) the JUNG framework was integrated displaying graph. As a language developer, you can implement an interface IJGraphProvider and implement a method that creates the graph: programmable with high-level API specify initial layout configurable node size, color, line style and color, fill color, shape and label configurable edge width, style, color and label configurable tooltip text for nodes and edges extensibility to plug in your own layouters (such as the one from yWorks) Once you have created a graph, your users have many options for viewing the graph in an MPS tool window: double-click selects node or edge in editor zoom and pan tooltips selectable layouts selection and highlighting of outgoing and incoming nodes and edges filtering based on node and edge type filtering along a continuous axis (for example, time) incremental, node-based collapsing and expansion The JUNG integration is available as part of mbeddr, but also as part of the mbeddr.platform, so you can use it for your own languages. Check out the Chunk node for an example of how to use it. A demo video of the viewer can be found here . To use it in your own language, implement the IJGraphProvider interface. Return a JNGraph from the getGraph() method. Check out the existing implementations, and in particular the DepGraphHelper (called from Chunk.getGraph()) to learn the details. In short, a graph is built in two steps: the first step actually adds the nodes and edges. The second step uses closures to style the graph. Examples can be seen from DepGraphHelper. PlantUML \u00b6 com.mbeddr.mpsutil.plantuml.node This provides an integration of PlantUML with MPS . Watch this old video to get an overview. To use it in your own languages, implement the IVisualizable interface in your language concept. Each concept can have several visualizations, called categories. The getCategories() method returns the list (just strings). The getVisualization() method then returns the actual visualization. It gets the user-requested category as an argument, as well as an empty VisGraph object. The getVisualization() method then has to fill the VisGraph with the actual visualization. This is done simply by using the add() method to build a native, textual PlantUML visualization. Check out the existing implementations of the interface to learn the deails; in particular, There\u2019s a helper method on VisGraph that creates a URL for users to click in the graph: createUrl(node) . Tool runner \u00b6 com.mbeddr.mpsutil.toolrunner.plugin This solution provides an extension point ToolsSanityCheckerProvider that allows registering instances of ToolsAvailabilityChecker This interface checks the availability of external tools and their proper configuration and can be called through ToolsInstallationSanityChecker.check . There\u2019s also a class ToolRunnerBase , a base class for running external tools. It supports running the tool with a progress indicator, a customizable timeout and reading the (error) output. Trace explorer \u00b6 com.mbeddr.mpsutil.traceExplorer This language contributes a new tool Trace Explorer than can show and navigate traces of a model e.g. from the interpreter. An example can be seen in the KernelF paper . The IETS3 tracing is explained on the interpreter page . UI \u00b6 Cells \u00b6 AsyncCell \u00b6 The async cell allows displaying a text based loading indicator as long as the return string is null. Create a new $custom cell$ editor cell and return a new AsyncCellProvider: 1 2 3 4 5 6 return new AsyncCellProvider ( node , { => string value = calculateValue (); // calculate or query your value here if ( value . isEmpty ) { return null ; } Style style = editorContext . ? getContextCell (). ? getStyle (); return new AsyncCellValue ( value , style ); }); FrameCell \u00b6 com.mbeddr.mpsutil.framecell frame is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes: frame-color : the color of the frame (default: black) frame-width : the thickness of the frame (default: 1 pixel) frame-padding : the space between the containting cell and the frame (default: 3 pixel) An example can be seen in the documentation language: In most cases, the language de.itemis.mps.editor.celllayout from MPS -extensions can also be used for customizing the border and margins around a cell. Its documentation can be found here . Margin cell / review \u00b6 com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review Margin cells are editor cells that are shown beyond the right editor margin, a little bit like comments in Word. In fact, the ReviewNote cell implements exactly Word\u2019s comment facility as an example of the margin cell. Here is a screenshot: To use the review notes, just include the respective language; intentions are available to attach review notes to editor cells. To put your own cells into the right margin, your cell must implement the IMarginCellContent interface. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. You also have to have the actual margin cell on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation for this. Hence, margin comments can essentially be added to every model, without the model\u2019s language being aware of it. Placeholder text list \u00b6 com.mbeddr.mpsutil.placeholderTextList This language adds a new cell model that supports multiple aggregation with a custom placeholder text. The placeholder can be specified in the inspector by creating a query function for the placeholder text . Diagrams \u00b6 Concept diagram \u00b6 com.mbeddr.mpsutil.conceptdiagram Create a new root node of type ConceptDiagram . The editor should now contain an empty editor. Nodes can be dragged from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section. Dependencies diagram \u00b6 com.mbeddr.mpsutil.dependenciesdiagram This language contains a concept DependenciesDiagram Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules will be automatically added. The dependencies is visualized by the line between the two boxes, and its label is named after the scope of the dependency (e.g. uses if the language is imported). Date picker \u00b6 com.mbeddr.mpsutil.datepicker A classic widget to select a date from a pop-up calendar. There\u2019s a known issue where the datepicker doesn\u2019t work when the theme is set to macOS light. This is only the control, i.e. the developer is responsible for synchronizing the control with the source of the shown date. We provide hooks executed before showing the calendar, for determining whether a date is valid, and to process a selected date. Editor utils \u00b6 com.mbeddr.mpsutil.editor.utils The class EditorRuntimeUtil contains a few helpful editor utility methods: getErrorText(EditorContext) : returns the error text of the current selected cell in the editor collectAllOpenEditors(Project) : returns all opened MPS editors collectAllOpenEditorComponents(Project) : return all opened editor components File picker \u00b6 com.mbeddr.mpsutil.filepicker This language contains text-based file and folder pickers. The paths can be directly entered in the editor. There\u2019s also an intention Open File Chooser Dialog that shows a file chooser dialog. The following file pickers are supported: file system dir picker file system file picker macro file picker macro folder picker solution relative dir picker solution relative file picker The macro pickers can contain path variables . Hyperlink \u00b6 com.mbeddr.mpsutil.hyperlink Hyperlink cells can be used for references in MPS . In contrast to normal reference cells they automatically become blue and underlined if the mouse hovers over them (no Ctrl is necessary). The following style attributes are supported: hyperlink-reference : make a reference a hyperlink hyperlink-handler : a function that\u2019s called when the link is clicked. The util parameter object contains a method openInBrowser for opening an URL with the default web browser. hyperlink-style : can be URl or reference. The reference style forces the use of ctrl to activate the hyperlink. hyperlink-node : the node that should be displayed after the link was clicked hyperlink-focus : focus the target node of the hyperlink after navigating to it. hyperlink-select : select the target node of the hyperlink after navigating to it. JFreeChart \u00b6 com.mbeddr.mpsutil.jfreechart This module contains stubs for the jfreechart library. The charts can be viewed in an extra tool Chart by calling the following code: 1 ChartManager . getInstance ( editorContext ). setChart ( node . createChart ()) where createChart return instance of JFreeChart . Target chooser \u00b6 com.mbeddr.mpsutil.targetchooser The target chooser language provides a modal dialog for choosing nodes based on a predefined scope: Example code: 1 2 3 4 5 6 TargetChooserOptions options = new TargetChooserOptions (); project . getModelAccess (). runReadAction ({ => options . setScope ( new arraylist < node <>> { node / TargetChooser / , node / TargetChooserDialog / , node / DefaultModuleScope / }); }); TargetChooser chooser = new TargetChooser ( ProjectHelper . toIdeaProject ( project ), options ); TargetChooserDialog . chooseTarget ( # project , options ) The options object has the following setters: setInitial : set the initial selected item. This can be a node or a model. setSelectionValidator : the selection validator checks if the selected target is valid or shows an error message when it\u2019s invalid. By default, no validation takes places (an empty validator is used). setSNodeFilter : this filter decides which nodes should be visible in the dialog (within the selected scope). To show a node, you also have to return true for the root node, but not for all ancestors. setModuleScope : this scope defines the available modules that will be the sources for the nodes that will be displayed. addModuleFilter : an additional boolean filter for the modules of the module scope. showModulesPool : a flag that decides if the modules pool (last entry in logical view) should also be displayed in the dialog. setModelFilter : only keep the models of the specified scope where the filter returns true setScope : sets the scope for the items that should be displayed in the dialog. This can be in instance of TargetChooserScope or a sequence of nodes (+ ancestor filter). By default, the specified modules scope with the specified model and node filers applied is used. User styles \u00b6 com.mbeddr.mpsutil.userstyles This language provides a new annotation @userConfigurable , that can be added to a style class in a style sheet (intention: Make User Configurable ). After defining a name, the user can change the style in the preferences ( Preferences \u2192 Editor \u2192 Color Scheme \u2192 Code ). The following style-class items are supported: Foreground : equivalent to text-foreground-color Background : equivalent to text-background-color Bold : equivalent to font-style: bold Italic : equivalent to *font-style: italic Effects: Dotted lines, bold underscored, underscored, underwaved : equivalent to underlined Effects: strikeout : equivalent to strike-out Further useful links for developers: Export IntelliJ editor themes as plugin | JetBrains blog UI Themes \u2014 Editor Schemes and Background Images | IntelliJ Platform Plugin SDK Testing \u00b6 Lantest \u00b6 This language isn\u2019t working anymore. com.mbeddr.mpsutil.lantest This language was an attempt to automatically test languages, for example, check if the generation of files finished successfully or check that existing models can be instantiated again via the editor (for example: discover bugs in constraints). Test utils \u00b6 com.mbeddr.mpsutil.test.util The class ModelAsserter can be used to compare models inside a test case. When the two models don\u2019t match, it shows the difference between the models. Wait for \u00b6 com.mbeddr.mpsutil.blutil.test.waitfor This language contains a assert item wait for for tests, the waits for an expression to become true. If the condition evaluates to false, the check is repeated every m millisecond until the timeout of n milliseconds is reached. Both m and n can be set in the inspector of the statement. A use case for this statement could be a multithreaded code, where you have to wait for the result of a different thread: 1 2 3 4 5 6 7 8 9 10 boolean enoughTimeHasElapsed; ApplicationManager.getApplication().executeOnPooledThread({ => try { Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } enoughTimeHasElapsed = true; }); wait for enoughTimeHasElapsed; Plugin and RCP \u00b6 Actions filter \u00b6 com.mbeddr.mpsutil.actionsfilter MPS contains a lot of actions that might be not needed by end users such as actions for language development and actions of the IDE platform. This language allows disabling actions inside a MPS plugin solution by defining an actions profile. active by default can be set including an activation condition to make this profile the active profile when opening the project or RCP . All actions are disabled in a tree view and can be selected to disable them. To allow actions instead of filtering them use the intention Use allow actions on the actions profile. Actions in the section specify toolbar are displayed in the main toolbar that\u2019s located at the top left of the window. To use the language, not only the language has to be installed but also the corresponding Intellij plugin. ./gradlew install can install this plugin. Without the plugin the language won\u2019t load at all. Development tip: when making changes to the language, make sure to disable the plugin in the preferences, so that the model is not readonly. Execute ./gradlew install to install the plugin after making a change and restart MPS to test it. The predefined actions profiles can be customized by the user in preferences \u2192 Appearance & Behavior \u2192 Actions . New profiles can be created by clicking the + button and deleted by clicking the - button. Preference form \u00b6 com.mbeddr.mpsutil.preferenceform This language allows adding new preference pages to Preferences \u2192 Other Settings . The language uses the IntelliJ platform mechanism for adding preference pages ( documentation ). Example: It supports the following options: scope : save the preferences on application or project level help topic : The help topic is an internal identifier that can link a page in the MPS documentation. Example: preferences.intentionPowerPack links to https://www.jetbrains.com/mps/webhelp/?preferences.intentionPowerPack which redirects to https://www.jetbrains.com/help/mps/intentions-settings.html . The base URL in MPS is defined the XML configuration of a few plugins. To get the other internal names search for getHelpTopic in the MPS repository ) and/or the IntelliJ Community repository . The preference form supports a few different input elements: password field checkbox dynamic combo box integer field predefined combo box text field The before write method is called, when the button Apply or OK is pressed. This method should update all tools or classes that reference the values of the preference form. The input fields can be accessed through the this object. Example: 1 2 3 final HttpServerConfig config = new HttpServerConfig ((( int ) this . port ), this . enabled ); HttpServerConfig . setCurrentConfig ( config ); extensionPoint / HttpServerConfigChangeListener / . objects . forEach ({ ~ it => it . serverChanged ( config ); }); The after read method is called, after the state is loaded (for example: when the preference form is opened). Wizard (process) \u00b6 com.mbeddr.mpsutil.process This language allows creating wizards with multiple steps: Create a new node of instance Process . The wizard can have input parameters and produces one output. After defining the wizard it can be invoked from an action. Example: 1 2 3 4 wizard<theProcess> wiz = createWizard<theProcess>(\"This is my testdata\"); boolean b = wiz.show; System.out.println(\"show == \" + b); wiz.finish; The show method shows the modal dialog and checks if it was closed with the exit code OK . The finish method executed the onFinish callback of every step. For more information, have at look the example . New Model ( RCP ) \u00b6 com.mbeddr.mpsutil.rcp This language allows creating a new action for creating models similar to the action New model of mbeddr. Create an instance of NewModelDialogConfig . The following settings are supported: name : the name of the new action caption : the text that\u2019s shown for the action user can change persistence : boolean flag that decides if the user can change the model\u2019s persistence type. default persistence : the type of model persistence that\u2019s used when the model is created optional devkits : devkits that are automatically added when the model is created show model properties : open the model properties after the model was created SPreferences \u00b6 com.mbeddr.mpsutil.spreferences This extension allows the definition of preference pages by using MPS models; so in the preference page you get a normal MPS editor, as exemplified by mbeddr\u2019s platform templates preference page: Such pages are defined using an instance of PreferencePageDescription (check out the root \u201cPlatform Templates\u201d as an example). This instance must reside in a plugin solution. The data, i.e., the respective MPS model, is stored as part of the respective project or in MPS globally (this is configurable). It is possible to access the model that contains the preferences via code: Deprecated \u00b6 Build utilities \u00b6 com.mbeddr.mpsutil.buildutil This language was an attempt to automatically update build scripts during the build. It will be removed in the future. Code completion menu \u00b6 com.mbeddr.mpsutil.ccmenu This language isn\u2019t used anymore and is disabled. This language added support for customizing the code completion menu with tabs and a special tab for creating reference targets. The contributions were made in a plugin solutions by creating a CCMenuExtensions root node. Forms \u00b6 com.mbeddr.mpsutil.forms This is an unfinished language that was probably intented to be used in com.mbeddr.mpsutil.process . This language will be removed soon. Gradle support \u00b6 com.mbeddr.mpsutil.gradlesupport This language was an attempt to create Gradle files from MPS . It has a concepts for text files, single lines and multi lines. If you want to generate text files, use one of the text generator plugins from MPS -extensions . HTTP support \u00b6 com.mbeddr.mpsutil.httpsupport This was the old http support plugin. Please use the language jetbrains.mps.ide.httpsupport instead. Icon char \u00b6 com.mbeddr.mpsutil.iconchar This language was used to programmatically create icons but is deprecated. Please use the official Icon description language instead. Language stats \u00b6 com.mbeddr.mpsutil.langstats This language contains a concept Counter that can be populated by invoking the intention Count after creating a new instance in any model. It will search the current model and all imported models and will fill it with some general stats like the number of concepts, properties or number of type system rules. The formula for the lines of code (LOC) property can be found in the editor . Most of the stats can be easily replicated with the MPS console . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Counter ----------------------- concepts: 266 properties: 95 links: 204 cells: 0 nodeRefConstraints 0 nodePropConstraints 0 behaviorMethods 0 type system rules 0 mapping rules 0 statements 721 intentions 0 testgens 0 ------------------------- LOC: 1962.1999999999998 License manager \u00b6 com.mbeddr.mpsutil.licensemanager.common This language contains some classes of an old mbeddr licensemanager and will probably be removed in the future. Make \u00b6 com.mbeddr.mpsutil.make This plugin contains old fixes for rebuilding models/modules and projects that are already included in MPS . The plugin will be removed soon. Multilingual \u00b6 This language might be removed in the future. com.mbeddr.mpsutil.multilingual The idea behind this language was to store text translations in properties files and load the through the Java ResourceBundle class. The documentation for the language can be found here as a PDF and is located in the virtual package doc .com.mbeddr.mpsutil . Node difference \u00b6 com.mbeddr.mpsutil.nodediff These actions were used to structurally compare two nodes and are deprecated. Please use the official action Compare Two Nodes instead. RCP configuration \u00b6 com.mbeddr.mpsutil.rcpconfig This solution contains an old build script for the mbeddr RCP . It is deprecated and will be removed soon. Run configuration \u00b6 com.mbeddr.mpsutil.runconfiguration This language was used as a workaround for accessing the debuggle node in breakpoint creators . The expression is now officially supported, this language is deprecated and will be removed soon. Test scope \u00b6 ^^com.mbeddr.mpsutil.testScope This language is deprecated. Please use the official testing scopes instead. Var scope \u00b6 com.mbeddr.mpsutil.varscope This language used to provide the interfaces IScopeElement and IScopeProvider to provide scopes for nodes but is now deprecated. Please use the official scopes instead.","title":"MPS utilities"},{"location":"platform_essentials/com_mbeddr_mpsutil/#common","text":"com.mbeddr.mpsutil.common","title":"Common"},{"location":"platform_essentials/com_mbeddr_mpsutil/#graph","text":"The graph model contains classes for working with graphs as well as an implementation for the AVL tree data structure, which is a self-balancing binary search tree . The Graph class can be used together with GraphUtil , which provides the following methods: computeSCC(Graph) : computes the strongly connected components of the given graph isConnected(Graph, T initial) : determines whether the given directed graph corresponds to a connected graph computeSCCSingle(T sought, Graph) : returns the set of nodes in the strongly connected component that the node to find is in computeTopologicalSorting(Graph, boolean silent) : returns the topological sorting of the nodes of the given graph.","title":"Graph"},{"location":"platform_essentials/com_mbeddr_mpsutil/#model","text":"The class ConceptInstanceFinder contains a few methods for finding instances (= nodes) of a concept: findAllVisibleInstances(context, conceptToFind) : find instances of a concept in the used languages of the model. context node\u2019s model is the starting point. findAllInstances(conceptToFind) : searches for nodes of the given concept in all user models from the global scope (not including transient and temporary models)","title":"Model"},{"location":"platform_essentials/com_mbeddr_mpsutil/#util","text":"The class ApplicationHelper contains a method for running a Runnable object inside a progress window that optionally can be canceled. The class ModelComparator can compare two models programmatically and report the mismatches between them. SNodeIdentityWrapper This Class is used to preserve node identity across model boundaries. This is useful in generator scenarios where nodes are copied between the different phases.","title":"Util"},{"location":"platform_essentials/com_mbeddr_mpsutil/#comparator","text":"com.mbeddr.mpsutil.comparator The class MPSNodeComparator can be used to compare two nodes programmatically. There are overloaded methods for ignoring properties, ignored references and some more settings. The return object of class MPSNodeComparison contains the list of differences and can also pre pretty printed by called the method getDescription() .","title":"Comparator"},{"location":"platform_essentials/com_mbeddr_mpsutil/#incremental-computation","text":"com.mbeddr.mpsutil.incrementalcomputation The language provides a single interface IncrementallyComputedValueHolder that can be implemented to support values that are automatically recomputed when a dependent value changes. The methods are documented in the behavior aspect. If a full model should be derived from an existing model, you have to use shadow models from MPS -extensions .","title":"Incremental computation"},{"location":"platform_essentials/com_mbeddr_mpsutil/#interpreter","text":"com.mbeddr.mpsutil.interpreter The interpreter is described on the interpreter page.","title":"Interpreter"},{"location":"platform_essentials/com_mbeddr_mpsutil/#stubs","text":"There are stub models for the following Java libraries: Mockito : a framework for unit tests Open CSV jav: a CSV (comma-separated values) parser library Batik : a toolkit for applications that want to use images in the Scalable Vector Graphics (SVG) format for various purposes, such as display, generation, or manipulation XML : the following jars are included: XML Commons External Components XML APIs Extensions XML Commons Resolver Component Xerces2 J The included versions might be quite old.","title":"Stubs"},{"location":"platform_essentials/com_mbeddr_mpsutil/#actions","text":"","title":"Actions"},{"location":"platform_essentials/com_mbeddr_mpsutil/#build-assistant","text":"com.mbeddr.mpsutil.buildassistant This language adds actions to make or rebuild models/modules or projects and also include their dependencies. TODO: Do the official actions already provide this capability?","title":"Build assistant"},{"location":"platform_essentials/com_mbeddr_mpsutil/#generic-actions","text":"com.mbeddr.mpsutil.genericactions As the name already implies, this language adds some new generic actions: Decrease MPS Editor Font Size : decreases the font size in the editor settings and updates all editors (ctrl + -) Increase MPS Editor Font Size : increases the font size in the editor settings and updates all editors (ctrl + +) Reset MPS Editor Font Size :: reset the font size to the default size (ctrl + 0, 13 pixels) File Manager in Output Folder : a new action in the context menu of models that opens the path of the generated files. This action won\u2019t work if the model doesn\u2019t generate output files. File Manager in Module Folder : a new action in the context menu of modules that opens the path of th module.","title":"Generic actions"},{"location":"platform_essentials/com_mbeddr_mpsutil/#node-access","text":"com.mbeddr.mpsutil.nodeaccess This language adds a new group of actions called Copy/Paste Special to the editor popup that opens when right-clicking in the editor: Copy Node as XML : serialize the selected node to XML and copy it to the system clipboard. Paste XML Node : deserialize a previously copied node and insert it next to the current selected node. Copy Node Info to Clipboard : copies some information (project, module, model, node, URL) about a node to the system clipboard.","title":"Node access"},{"location":"platform_essentials/com_mbeddr_mpsutil/#print","text":"com.mbeddr.mpsutil.print.pluginSolution This language adds a new action to the general MPS File menu. The action Print Editor can be used to print the current editor with a printer. If the operating system permits it, this action can also be used to create a PDF from the editor.","title":"Print"},{"location":"platform_essentials/com_mbeddr_mpsutil/#refactoring","text":"com.mbeddr.mpsutil.refactoring This language adds support for a projection mode switcher and refactoring actions.","title":"Refactoring"},{"location":"platform_essentials/com_mbeddr_mpsutil/#projection-mode-switcher","text":"The mbeddr platform has a group Projection which is a top-level menu in MPS : A projection mode switcher can be declared containing push hint options where the hints are referenced from an existing ConceptEditor context hints container. The action can be added in the Add to Menu/Button Group section editor. This adds a toggle to this menu/button group that toggles the referenced editor hint in the editors. When it should only be enabled for a specific concept, add a concept to only in editor with instance of .","title":"Projection mode switcher"},{"location":"platform_essentials/com_mbeddr_mpsutil/#refactoring-action","text":"The concept RefactoringAction can create an action for a simple refactoring . The title of the action can be specified with caption, and the keyboard shortcut can be defined in shortcut . Refactoring parameters can be specified in parameters . There are a few different choosers which will be shown in the refactoring dialog for the value of the parameters: string : chooser for selecting a text +node*: chooser for selecting a node using a filter. The filter is a function which has a list of nodes to refactor as a parameter and should return a new filtered sequence of nodes. project tree node : chooser for selecting a node from the project tree","title":"Refactoring action"},{"location":"platform_essentials/com_mbeddr_mpsutil/#baselanguage-extensions","text":"","title":"Baselanguage extensions"},{"location":"platform_essentials/com_mbeddr_mpsutil/#bldoc","text":"com.mbeddr.mpsutil.bldoc This language can be used to attach a documentation via the intention Attach Documentation to any node. The richtext language provides the concept Text for writing the documentation. There are also two interfaces that implement IWord so that any node can be referenced in the com.mbeddr. doc language: @child and @root for referencing any child nodes and named nodes respectively.","title":"BLDoc"},{"location":"platform_essentials/com_mbeddr_mpsutil/#richstring","text":"com.mbeddr.mpsutil.richstring This BaseLanguage extension simplifies usage of variables and Java String.format() inside BaseLanguage Strings. Just add the language com.mbeddr.mpsutil.richstring to your model. The following example shows referencing a simple variable, embedding an expression inside a string, and the equivalent of calling String . format () :","title":"Richstring"},{"location":"platform_essentials/com_mbeddr_mpsutil/#smodule","text":"com.mbeddr.mpsutil.smodule This language adds new operations to modules: add dependencies : adds dependencies to one or more models to the module add DevKits : adds devkits to the modules add languages to the module : adds used languages to the module add model : adds a new model with the specified name to the module. The repository has to be specified as the second parameter. If you press enter after the name, you can also add devkits, references to models and languages to the newly created model. In the inspector, the storage type has to be declared: it can be per root or single file persistence. add solution : adds a new solution to the module. The virtual package can be specified (subfolder).","title":"SModule"},{"location":"platform_essentials/com_mbeddr_mpsutil/#generator","text":"","title":"Generator"},{"location":"platform_essentials/com_mbeddr_mpsutil/#generator-facade","text":"com.mbeddr.mpsutil.generatorfacade This language contains a class GeneratorFacade that helps with running the generator. In contains a method runGenerator with different signatures that can run the generator with a specific generation plan for a defined model with a custom handler for generator messages and custom generation parameters such as save transient models (default: false ) or generate in parallel (default: yes, 4 threads).","title":"Generator facade"},{"location":"platform_essentials/com_mbeddr_mpsutil/#genutil","text":"com.mbeddr.mpsutil.genutil This language helps with managing user objects and creating temporary nodes for them: 1 createTempNode{hello -> \"world\"}; This expression creates a new node and assigns Base Language expressions to keys of it. The keys are set internally with the setref statement which takes a key, a context node (here: the newly created node) and a target expression, and creates a new user object for this node. For normal values, there are the setref and getref statements to set and retrieve values from the user object respectively. For int values, there are the statements setint and getint .","title":"GenUtil"},{"location":"platform_essentials/com_mbeddr_mpsutil/#mapping-labels","text":"com.mbeddr.mpsutil.mappingLabels This language provides intentions for automatically creating mapping labels . One of the use cases is to migrate reference macros that use strings to identify target nodes to resolve the target by mapping labels instead.","title":"Mapping labels"},{"location":"platform_essentials/com_mbeddr_mpsutil/#postprocessgeneratedfiles","text":"com.mbeddr.mpsutil.postprocessGeneratedFiles Add a new node generated files postprocessor facet to the plugin aspect of a language to declare a new facet that is executed after files are generated (textGen). It supports post-processor functions that have a node parameter and a path parameter that contains the path of the generate file. This method can be, for example, used to copy the generated files to a different folder: 1 2 3 4 5 6 7 8 9 10 11 12 generated files postprocessor facet testGen ( node , path ) -> void { Path target = Paths . get ( \"/var/tmp/testGen\" ). resolve ( path . getFileName ()); message info \"Copying \" + path + \" to \" + target , < no project > , < no throwable > ; try { Files . createDirectories ( target . getParent ()); Files . copy ( path , target , StandardCopyOption . REPLACE_EXISTING ); } catch ( IOException e ) { e . printStackTrace (); } } For simple duplicating the TextGen outcome, There\u2019s also the builtin JetBrains annotation CopyOutcome .","title":"postprocessGeneratedFiles"},{"location":"platform_essentials/com_mbeddr_mpsutil/#xmodel-actions","text":"com.mbeddr.mpsutil.xmodel.actions This language adds actions for automatically deriving generation plans . For a single or list of modules There\u2019s the action Generation Plan for Languages which can be found in the context menu that opens when you right-click the modules in the logical view. There\u2019s also an action Derive Generation Plan which derives a generation plan for a model that has to be selected in a dialog that opens when executing this action. It can be found in the same places as the text preview action (for example, in the context menu of models).","title":"XModel actions"},{"location":"platform_essentials/com_mbeddr_mpsutil/#importer-and-exporter","text":"","title":"Importer and exporter"},{"location":"platform_essentials/com_mbeddr_mpsutil/#ecore","text":"com.mbeddr.mpsutil.ecore This is an importer and exporter for the meta model( ECore ) of the Eclipse Modelling Framework. The conversion is between an XML file and a MPS model. The importer can import Ecore and Ecore model files. Access the action through right-clicking a model and opening the Ecore Transformation tools group.","title":"ECore"},{"location":"platform_essentials/com_mbeddr_mpsutil/#xml-import","text":"com.mbeddr.mpsutil.xmlImport.plugin This plugin adds two actions for importing XML files into MPS : Paste as XML Content : this action is located in the editor context menu and parses XML code and adds it to the next xml node or root node. Import XML File(s) : this actions parses on or multiple xml files and creates xml root nodes for them in the current selected model.","title":"XML import"},{"location":"platform_essentials/com_mbeddr_mpsutil/#languages","text":"","title":"Languages"},{"location":"platform_essentials/com_mbeddr_mpsutil/#json","text":"com.mbeddr.mpsutil.json This language implements a simple JSON language that can be used as a generator target. The Json file root node supports an additional package name which is used as the folder inside the generation folder where the file is generated into. An example for a file that can be generated: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"description\" : \"This is a json file\" , \"name\" : \"my json file\" , \"this is an object\" : { \"And another object\" : { \"With a description\" : \"object description\" , \"An array\" : [ \"valu1\" , \"value2\" ], \"withANumber\" : 1.232E+231231 , \"empty array\" : [ ], \"empty object\" : { }, \"empty string\" : \"\" } } }","title":"JSON"},{"location":"platform_essentials/com_mbeddr_mpsutil/#language-extensions","text":"","title":"Language extensions"},{"location":"platform_essentials/com_mbeddr_mpsutil/#dataflow","text":"com.mbeddr.mpsutil.dataflow MPS -DF is a data-flow extension for MPS . Please visit the following page for more information: An Extensible Framework for Variable-precision Data-flow Analyses in MPS | Tam\u00e1s Szab\u00f3","title":"Dataflow"},{"location":"platform_essentials/com_mbeddr_mpsutil/#default-values-for-properties","text":"com.mbeddr.mpsutil.propertydefault This language allows setting a default value for properties when they\u2019re initialized. The default value can be set by invoking the code completion on an existing property constraint inside the concept constraints of a concept and using one of the completion items with the \u201cdefault\u201d suffix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 concepts constraints TestPropertyDefault { ... property { bool } default : true property { int } default : 42 property { string } default : \"empty\" ... }","title":"Default values for properties"},{"location":"platform_essentials/com_mbeddr_mpsutil/#extension-class","text":"com.mbeddr.mpsutil.extensionclass MPS already provides a language for defining extension methods , for example, methods to be called on an object without being part of the Object\u2019s class. This language extends this mechanism to provide all static methods of a class as extension methods. They can be invoked on the type of the method\u2019s first parameter. Import the language and create a new ExtensionClass root node. Reference the Java class containing the static methods. Method annotations can be added to overwrite parameter names, so that they\u2019re more elaborate than \u201cp0\u201d or \u201cp2\u201d. As a starting point, create a dependency to the model com.mbeddr.mpsutil.extensionclass.annotation.apache.commons.lang3 which provides extension methods with useful parameter names for Apache Commons StringUtils, ObjectUtils, and StringEscapeUtils.","title":"Extension class"},{"location":"platform_essentials/com_mbeddr_mpsutil/#language-plugin-extensions","text":"com.mbeddr.mpsutil. lang .plugin.extensions This language contains extensions for jetbrains.mps. lang .plugin . It mainly adds support for adding actions not only at a specific position but also supports the anchors first, last, before and after. Example: add to NewProjectOrModuleGroup after position NewProject","title":"Language plugin extensions"},{"location":"platform_essentials/com_mbeddr_mpsutil/#parameterized-menu","text":"com.mbeddr.mpsutil.parameterizedMenu This language is an extension to the parameterized transformation language part. When used as a menu part of it, it allows iterating over the parameter object ( parameterizable parameterized menu part) or create a dynamic submenu based on the parameter object ( parameterized submenu ). For completion styling and item priorities, use completion styling instead.","title":"#Parameterized menu"},{"location":"platform_essentials/com_mbeddr_mpsutil/#resources","text":"com.mbeddr.mpsutil.resources This language extends the language jetbrains.mps. lang .resources by providing more customizations. CircleCustomizable adds support for drawing the circle with a different thickness. TextCustomizable adds support for specificing the font style (plain, bold, italic), font family and offsets for the text.","title":"Resources"},{"location":"platform_essentials/com_mbeddr_mpsutil/#suppress-warning","text":"com.mbeddr.mpsutil.suppresswarning This language allows attaching an annotation to nodes to disable all or certain type system warnings by invoking the intention Toggle Suppress Warnings . There are different kinds of warnings that can be suppressed: all : suppress all warnings In com.mbeddr.core.modules two more data flow specific kinds exist: liveness : suppress dataflow liveness warning dataflow : suppress dataflow warning","title":"Suppress warning"},{"location":"platform_essentials/com_mbeddr_mpsutil/#type-system-trace","text":"com.mbeddr.mpsutil.typesystem.trace This language currently doesn\u2019t work anymore. This language modifies the different typesystem concepts like comparison rule, non typesystem rules etc. to collect information about the runtime execution time. To use it, place an instance of TraceTypesystem into a typesystem aspect to include the generator of this language and set the enabled flag to true. The model contains a new action Benchmark Typesystem that opens a tool named Type System Performance Data that shows the collected information.","title":"Type system trace"},{"location":"platform_essentials/com_mbeddr_mpsutil/#xml-fix","text":"com.mbeddr.mpsutil.xml.fix This language contains fixes for the XML language . It escapes XMl values for XML 1.0/1.1.","title":"XML fix"},{"location":"platform_essentials/com_mbeddr_mpsutil/#unique-names","text":"com.mbeddr.mpsutil.uniquenames MPS references all nodes by their id , not their name. Still, as humans, we see only the name, and this might be ambiguous. The Unique Names hint can be activated in MPS Preferences, Editor Hints. It shows as much of the full qualified name as required rendering a name unique. Example concept: Example Base Language:","title":"Unique names"},{"location":"platform_essentials/com_mbeddr_mpsutil/#tools","text":"","title":"Tools"},{"location":"platform_essentials/com_mbeddr_mpsutil/#context-actions","text":"com.mbeddr.mpsutil.contextactions There\u2019s a Context Actions (JetBrains) and Context Actions 2 (mbeddr) tool. Please use the one from JetBrains instead of this language. This language adds a tool with context-specific editor actions that can be navigated by mouse. For more information about the JetBrains implementation, visit the page Context acions tool | MPS","title":"Context actions"},{"location":"platform_essentials/com_mbeddr_mpsutil/#editing-guide","text":"com.mbeddr.mpsutil.editingGuide This language allows creating interactive exercises for the end users that can be checked on the fly. An exercise contains a number of tasks and contain a reference to a following exercise. A single task contains a name, a description as well as the code block that should be shown in the exercise. The monitor function checks the completion status of the task. The variable program refers to the code section, the editorContext can be used, for example, to get the selected cell by calling editorContext.getSelectedCell() . The following objects can be returned: MonitorResultDone : the task was completed successfully, and the explanation is shown. MonitorResultError : the task was completed with an error. MonitorResultHint : the task was not completed successfully, and a hint is shown. The task can\u2019t be started by clicking the play button next to the name of a task. A new temporary model is created which contains the editable task.","title":"Editing guide"},{"location":"platform_essentials/com_mbeddr_mpsutil/#favourites-plugin","text":"com.mbeddr.mpsutil.favourites.plugin The favourites view is implemented using the language com.mbeddr.mpsutil.projectview from MPS -extensions . There\u2019s an action Add to Favourites to add a node to this view. The node can be removed by executing the action Remove from Favourites . Internally, the plugin is implemented using node annotations.","title":"Favourites plugin"},{"location":"platform_essentials/com_mbeddr_mpsutil/#generated-artifacts-review","text":"com.mbeddr.mpsutil.genreview This language might not work correctly anymore. This tool can be used to view artifacts that where generated by a generator. It has a special color mapping for Java files. The button Highlight lines not linked should highlight the lines which aren\u2019t related to any node. When multiple original nodes can be traced to a certain file and line, the previous and next button can be used to navigate to these nodes.","title":"Generated artifacts review"},{"location":"platform_essentials/com_mbeddr_mpsutil/#graphstream","text":"com.mbeddr.mpsutil.graphstream This language adds support for GraphStream , a dynamic Java graph library. It can show a graph inside a tool called Graphing . Have a look at the language com.mbeddr.mpsutil.graphstream.example to see how a graph can be loaded. A concept has to implement the interface GraphingElement . When the current selected node implements the interface, a new menu View Graph appears in the editor context menu. The tool itself has support for history, zooming, fitting the view and rendering the graph as a GraphViz SVG.","title":"Graphstream"},{"location":"platform_essentials/com_mbeddr_mpsutil/#jung-framework","text":"com.mbeddr.mpsutil.jung As an additional means of displaying relationships between nodes (next to PlantUML and the tree views) the JUNG framework was integrated displaying graph. As a language developer, you can implement an interface IJGraphProvider and implement a method that creates the graph: programmable with high-level API specify initial layout configurable node size, color, line style and color, fill color, shape and label configurable edge width, style, color and label configurable tooltip text for nodes and edges extensibility to plug in your own layouters (such as the one from yWorks) Once you have created a graph, your users have many options for viewing the graph in an MPS tool window: double-click selects node or edge in editor zoom and pan tooltips selectable layouts selection and highlighting of outgoing and incoming nodes and edges filtering based on node and edge type filtering along a continuous axis (for example, time) incremental, node-based collapsing and expansion The JUNG integration is available as part of mbeddr, but also as part of the mbeddr.platform, so you can use it for your own languages. Check out the Chunk node for an example of how to use it. A demo video of the viewer can be found here . To use it in your own language, implement the IJGraphProvider interface. Return a JNGraph from the getGraph() method. Check out the existing implementations, and in particular the DepGraphHelper (called from Chunk.getGraph()) to learn the details. In short, a graph is built in two steps: the first step actually adds the nodes and edges. The second step uses closures to style the graph. Examples can be seen from DepGraphHelper.","title":"JUNG framework"},{"location":"platform_essentials/com_mbeddr_mpsutil/#plantuml","text":"com.mbeddr.mpsutil.plantuml.node This provides an integration of PlantUML with MPS . Watch this old video to get an overview. To use it in your own languages, implement the IVisualizable interface in your language concept. Each concept can have several visualizations, called categories. The getCategories() method returns the list (just strings). The getVisualization() method then returns the actual visualization. It gets the user-requested category as an argument, as well as an empty VisGraph object. The getVisualization() method then has to fill the VisGraph with the actual visualization. This is done simply by using the add() method to build a native, textual PlantUML visualization. Check out the existing implementations of the interface to learn the deails; in particular, There\u2019s a helper method on VisGraph that creates a URL for users to click in the graph: createUrl(node) .","title":"PlantUML"},{"location":"platform_essentials/com_mbeddr_mpsutil/#tool-runner","text":"com.mbeddr.mpsutil.toolrunner.plugin This solution provides an extension point ToolsSanityCheckerProvider that allows registering instances of ToolsAvailabilityChecker This interface checks the availability of external tools and their proper configuration and can be called through ToolsInstallationSanityChecker.check . There\u2019s also a class ToolRunnerBase , a base class for running external tools. It supports running the tool with a progress indicator, a customizable timeout and reading the (error) output.","title":"Tool runner"},{"location":"platform_essentials/com_mbeddr_mpsutil/#trace-explorer","text":"com.mbeddr.mpsutil.traceExplorer This language contributes a new tool Trace Explorer than can show and navigate traces of a model e.g. from the interpreter. An example can be seen in the KernelF paper . The IETS3 tracing is explained on the interpreter page .","title":"Trace explorer"},{"location":"platform_essentials/com_mbeddr_mpsutil/#ui","text":"","title":"UI"},{"location":"platform_essentials/com_mbeddr_mpsutil/#cells","text":"","title":"Cells"},{"location":"platform_essentials/com_mbeddr_mpsutil/#asynccell","text":"The async cell allows displaying a text based loading indicator as long as the return string is null. Create a new $custom cell$ editor cell and return a new AsyncCellProvider: 1 2 3 4 5 6 return new AsyncCellProvider ( node , { => string value = calculateValue (); // calculate or query your value here if ( value . isEmpty ) { return null ; } Style style = editorContext . ? getContextCell (). ? getStyle (); return new AsyncCellValue ( value , style ); });","title":"AsyncCell"},{"location":"platform_essentials/com_mbeddr_mpsutil/#framecell","text":"com.mbeddr.mpsutil.framecell frame is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes: frame-color : the color of the frame (default: black) frame-width : the thickness of the frame (default: 1 pixel) frame-padding : the space between the containting cell and the frame (default: 3 pixel) An example can be seen in the documentation language: In most cases, the language de.itemis.mps.editor.celllayout from MPS -extensions can also be used for customizing the border and margins around a cell. Its documentation can be found here .","title":"FrameCell"},{"location":"platform_essentials/com_mbeddr_mpsutil/#margin-cell-review","text":"com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review Margin cells are editor cells that are shown beyond the right editor margin, a little bit like comments in Word. In fact, the ReviewNote cell implements exactly Word\u2019s comment facility as an example of the margin cell. Here is a screenshot: To use the review notes, just include the respective language; intentions are available to attach review notes to editor cells. To put your own cells into the right margin, your cell must implement the IMarginCellContent interface. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. You also have to have the actual margin cell on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation for this. Hence, margin comments can essentially be added to every model, without the model\u2019s language being aware of it.","title":"Margin cell / review"},{"location":"platform_essentials/com_mbeddr_mpsutil/#placeholder-text-list","text":"com.mbeddr.mpsutil.placeholderTextList This language adds a new cell model that supports multiple aggregation with a custom placeholder text. The placeholder can be specified in the inspector by creating a query function for the placeholder text .","title":"Placeholder text list"},{"location":"platform_essentials/com_mbeddr_mpsutil/#diagrams","text":"","title":"Diagrams"},{"location":"platform_essentials/com_mbeddr_mpsutil/#concept-diagram","text":"com.mbeddr.mpsutil.conceptdiagram Create a new root node of type ConceptDiagram . The editor should now contain an empty editor. Nodes can be dragged from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section.","title":"Concept diagram"},{"location":"platform_essentials/com_mbeddr_mpsutil/#dependencies-diagram","text":"com.mbeddr.mpsutil.dependenciesdiagram This language contains a concept DependenciesDiagram Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules will be automatically added. The dependencies is visualized by the line between the two boxes, and its label is named after the scope of the dependency (e.g. uses if the language is imported).","title":"Dependencies diagram"},{"location":"platform_essentials/com_mbeddr_mpsutil/#date-picker","text":"com.mbeddr.mpsutil.datepicker A classic widget to select a date from a pop-up calendar. There\u2019s a known issue where the datepicker doesn\u2019t work when the theme is set to macOS light. This is only the control, i.e. the developer is responsible for synchronizing the control with the source of the shown date. We provide hooks executed before showing the calendar, for determining whether a date is valid, and to process a selected date.","title":"Date picker"},{"location":"platform_essentials/com_mbeddr_mpsutil/#editor-utils","text":"com.mbeddr.mpsutil.editor.utils The class EditorRuntimeUtil contains a few helpful editor utility methods: getErrorText(EditorContext) : returns the error text of the current selected cell in the editor collectAllOpenEditors(Project) : returns all opened MPS editors collectAllOpenEditorComponents(Project) : return all opened editor components","title":"Editor utils"},{"location":"platform_essentials/com_mbeddr_mpsutil/#file-picker","text":"com.mbeddr.mpsutil.filepicker This language contains text-based file and folder pickers. The paths can be directly entered in the editor. There\u2019s also an intention Open File Chooser Dialog that shows a file chooser dialog. The following file pickers are supported: file system dir picker file system file picker macro file picker macro folder picker solution relative dir picker solution relative file picker The macro pickers can contain path variables .","title":"File picker"},{"location":"platform_essentials/com_mbeddr_mpsutil/#hyperlink","text":"com.mbeddr.mpsutil.hyperlink Hyperlink cells can be used for references in MPS . In contrast to normal reference cells they automatically become blue and underlined if the mouse hovers over them (no Ctrl is necessary). The following style attributes are supported: hyperlink-reference : make a reference a hyperlink hyperlink-handler : a function that\u2019s called when the link is clicked. The util parameter object contains a method openInBrowser for opening an URL with the default web browser. hyperlink-style : can be URl or reference. The reference style forces the use of ctrl to activate the hyperlink. hyperlink-node : the node that should be displayed after the link was clicked hyperlink-focus : focus the target node of the hyperlink after navigating to it. hyperlink-select : select the target node of the hyperlink after navigating to it.","title":"Hyperlink"},{"location":"platform_essentials/com_mbeddr_mpsutil/#jfreechart","text":"com.mbeddr.mpsutil.jfreechart This module contains stubs for the jfreechart library. The charts can be viewed in an extra tool Chart by calling the following code: 1 ChartManager . getInstance ( editorContext ). setChart ( node . createChart ()) where createChart return instance of JFreeChart .","title":"JFreeChart"},{"location":"platform_essentials/com_mbeddr_mpsutil/#target-chooser","text":"com.mbeddr.mpsutil.targetchooser The target chooser language provides a modal dialog for choosing nodes based on a predefined scope: Example code: 1 2 3 4 5 6 TargetChooserOptions options = new TargetChooserOptions (); project . getModelAccess (). runReadAction ({ => options . setScope ( new arraylist < node <>> { node / TargetChooser / , node / TargetChooserDialog / , node / DefaultModuleScope / }); }); TargetChooser chooser = new TargetChooser ( ProjectHelper . toIdeaProject ( project ), options ); TargetChooserDialog . chooseTarget ( # project , options ) The options object has the following setters: setInitial : set the initial selected item. This can be a node or a model. setSelectionValidator : the selection validator checks if the selected target is valid or shows an error message when it\u2019s invalid. By default, no validation takes places (an empty validator is used). setSNodeFilter : this filter decides which nodes should be visible in the dialog (within the selected scope). To show a node, you also have to return true for the root node, but not for all ancestors. setModuleScope : this scope defines the available modules that will be the sources for the nodes that will be displayed. addModuleFilter : an additional boolean filter for the modules of the module scope. showModulesPool : a flag that decides if the modules pool (last entry in logical view) should also be displayed in the dialog. setModelFilter : only keep the models of the specified scope where the filter returns true setScope : sets the scope for the items that should be displayed in the dialog. This can be in instance of TargetChooserScope or a sequence of nodes (+ ancestor filter). By default, the specified modules scope with the specified model and node filers applied is used.","title":"Target chooser"},{"location":"platform_essentials/com_mbeddr_mpsutil/#user-styles","text":"com.mbeddr.mpsutil.userstyles This language provides a new annotation @userConfigurable , that can be added to a style class in a style sheet (intention: Make User Configurable ). After defining a name, the user can change the style in the preferences ( Preferences \u2192 Editor \u2192 Color Scheme \u2192 Code ). The following style-class items are supported: Foreground : equivalent to text-foreground-color Background : equivalent to text-background-color Bold : equivalent to font-style: bold Italic : equivalent to *font-style: italic Effects: Dotted lines, bold underscored, underscored, underwaved : equivalent to underlined Effects: strikeout : equivalent to strike-out Further useful links for developers: Export IntelliJ editor themes as plugin | JetBrains blog UI Themes \u2014 Editor Schemes and Background Images | IntelliJ Platform Plugin SDK","title":"User styles"},{"location":"platform_essentials/com_mbeddr_mpsutil/#testing","text":"","title":"Testing"},{"location":"platform_essentials/com_mbeddr_mpsutil/#lantest","text":"This language isn\u2019t working anymore. com.mbeddr.mpsutil.lantest This language was an attempt to automatically test languages, for example, check if the generation of files finished successfully or check that existing models can be instantiated again via the editor (for example: discover bugs in constraints).","title":"Lantest"},{"location":"platform_essentials/com_mbeddr_mpsutil/#test-utils","text":"com.mbeddr.mpsutil.test.util The class ModelAsserter can be used to compare models inside a test case. When the two models don\u2019t match, it shows the difference between the models.","title":"Test utils"},{"location":"platform_essentials/com_mbeddr_mpsutil/#wait-for","text":"com.mbeddr.mpsutil.blutil.test.waitfor This language contains a assert item wait for for tests, the waits for an expression to become true. If the condition evaluates to false, the check is repeated every m millisecond until the timeout of n milliseconds is reached. Both m and n can be set in the inspector of the statement. A use case for this statement could be a multithreaded code, where you have to wait for the result of a different thread: 1 2 3 4 5 6 7 8 9 10 boolean enoughTimeHasElapsed; ApplicationManager.getApplication().executeOnPooledThread({ => try { Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } enoughTimeHasElapsed = true; }); wait for enoughTimeHasElapsed;","title":"Wait for"},{"location":"platform_essentials/com_mbeddr_mpsutil/#plugin-and-rcp","text":"","title":"Plugin and RCP"},{"location":"platform_essentials/com_mbeddr_mpsutil/#actions-filter","text":"com.mbeddr.mpsutil.actionsfilter MPS contains a lot of actions that might be not needed by end users such as actions for language development and actions of the IDE platform. This language allows disabling actions inside a MPS plugin solution by defining an actions profile. active by default can be set including an activation condition to make this profile the active profile when opening the project or RCP . All actions are disabled in a tree view and can be selected to disable them. To allow actions instead of filtering them use the intention Use allow actions on the actions profile. Actions in the section specify toolbar are displayed in the main toolbar that\u2019s located at the top left of the window. To use the language, not only the language has to be installed but also the corresponding Intellij plugin. ./gradlew install can install this plugin. Without the plugin the language won\u2019t load at all. Development tip: when making changes to the language, make sure to disable the plugin in the preferences, so that the model is not readonly. Execute ./gradlew install to install the plugin after making a change and restart MPS to test it. The predefined actions profiles can be customized by the user in preferences \u2192 Appearance & Behavior \u2192 Actions . New profiles can be created by clicking the + button and deleted by clicking the - button.","title":"Actions filter"},{"location":"platform_essentials/com_mbeddr_mpsutil/#preference-form","text":"com.mbeddr.mpsutil.preferenceform This language allows adding new preference pages to Preferences \u2192 Other Settings . The language uses the IntelliJ platform mechanism for adding preference pages ( documentation ). Example: It supports the following options: scope : save the preferences on application or project level help topic : The help topic is an internal identifier that can link a page in the MPS documentation. Example: preferences.intentionPowerPack links to https://www.jetbrains.com/mps/webhelp/?preferences.intentionPowerPack which redirects to https://www.jetbrains.com/help/mps/intentions-settings.html . The base URL in MPS is defined the XML configuration of a few plugins. To get the other internal names search for getHelpTopic in the MPS repository ) and/or the IntelliJ Community repository . The preference form supports a few different input elements: password field checkbox dynamic combo box integer field predefined combo box text field The before write method is called, when the button Apply or OK is pressed. This method should update all tools or classes that reference the values of the preference form. The input fields can be accessed through the this object. Example: 1 2 3 final HttpServerConfig config = new HttpServerConfig ((( int ) this . port ), this . enabled ); HttpServerConfig . setCurrentConfig ( config ); extensionPoint / HttpServerConfigChangeListener / . objects . forEach ({ ~ it => it . serverChanged ( config ); }); The after read method is called, after the state is loaded (for example: when the preference form is opened).","title":"Preference form"},{"location":"platform_essentials/com_mbeddr_mpsutil/#wizard-process","text":"com.mbeddr.mpsutil.process This language allows creating wizards with multiple steps: Create a new node of instance Process . The wizard can have input parameters and produces one output. After defining the wizard it can be invoked from an action. Example: 1 2 3 4 wizard<theProcess> wiz = createWizard<theProcess>(\"This is my testdata\"); boolean b = wiz.show; System.out.println(\"show == \" + b); wiz.finish; The show method shows the modal dialog and checks if it was closed with the exit code OK . The finish method executed the onFinish callback of every step. For more information, have at look the example .","title":"Wizard (process)"},{"location":"platform_essentials/com_mbeddr_mpsutil/#new-model-rcp","text":"com.mbeddr.mpsutil.rcp This language allows creating a new action for creating models similar to the action New model of mbeddr. Create an instance of NewModelDialogConfig . The following settings are supported: name : the name of the new action caption : the text that\u2019s shown for the action user can change persistence : boolean flag that decides if the user can change the model\u2019s persistence type. default persistence : the type of model persistence that\u2019s used when the model is created optional devkits : devkits that are automatically added when the model is created show model properties : open the model properties after the model was created","title":"New Model (RCP)"},{"location":"platform_essentials/com_mbeddr_mpsutil/#spreferences","text":"com.mbeddr.mpsutil.spreferences This extension allows the definition of preference pages by using MPS models; so in the preference page you get a normal MPS editor, as exemplified by mbeddr\u2019s platform templates preference page: Such pages are defined using an instance of PreferencePageDescription (check out the root \u201cPlatform Templates\u201d as an example). This instance must reside in a plugin solution. The data, i.e., the respective MPS model, is stored as part of the respective project or in MPS globally (this is configurable). It is possible to access the model that contains the preferences via code:","title":"SPreferences"},{"location":"platform_essentials/com_mbeddr_mpsutil/#deprecated","text":"","title":"Deprecated"},{"location":"platform_essentials/com_mbeddr_mpsutil/#build-utilities","text":"com.mbeddr.mpsutil.buildutil This language was an attempt to automatically update build scripts during the build. It will be removed in the future.","title":"Build utilities"},{"location":"platform_essentials/com_mbeddr_mpsutil/#code-completion-menu","text":"com.mbeddr.mpsutil.ccmenu This language isn\u2019t used anymore and is disabled. This language added support for customizing the code completion menu with tabs and a special tab for creating reference targets. The contributions were made in a plugin solutions by creating a CCMenuExtensions root node.","title":"Code completion menu"},{"location":"platform_essentials/com_mbeddr_mpsutil/#forms","text":"com.mbeddr.mpsutil.forms This is an unfinished language that was probably intented to be used in com.mbeddr.mpsutil.process . This language will be removed soon.","title":"Forms"},{"location":"platform_essentials/com_mbeddr_mpsutil/#gradle-support","text":"com.mbeddr.mpsutil.gradlesupport This language was an attempt to create Gradle files from MPS . It has a concepts for text files, single lines and multi lines. If you want to generate text files, use one of the text generator plugins from MPS -extensions .","title":"Gradle support"},{"location":"platform_essentials/com_mbeddr_mpsutil/#http-support","text":"com.mbeddr.mpsutil.httpsupport This was the old http support plugin. Please use the language jetbrains.mps.ide.httpsupport instead.","title":"HTTP support"},{"location":"platform_essentials/com_mbeddr_mpsutil/#icon-char","text":"com.mbeddr.mpsutil.iconchar This language was used to programmatically create icons but is deprecated. Please use the official Icon description language instead.","title":"Icon char"},{"location":"platform_essentials/com_mbeddr_mpsutil/#language-stats","text":"com.mbeddr.mpsutil.langstats This language contains a concept Counter that can be populated by invoking the intention Count after creating a new instance in any model. It will search the current model and all imported models and will fill it with some general stats like the number of concepts, properties or number of type system rules. The formula for the lines of code (LOC) property can be found in the editor . Most of the stats can be easily replicated with the MPS console . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Counter ----------------------- concepts: 266 properties: 95 links: 204 cells: 0 nodeRefConstraints 0 nodePropConstraints 0 behaviorMethods 0 type system rules 0 mapping rules 0 statements 721 intentions 0 testgens 0 ------------------------- LOC: 1962.1999999999998","title":"Language stats"},{"location":"platform_essentials/com_mbeddr_mpsutil/#license-manager","text":"com.mbeddr.mpsutil.licensemanager.common This language contains some classes of an old mbeddr licensemanager and will probably be removed in the future.","title":"License manager"},{"location":"platform_essentials/com_mbeddr_mpsutil/#make","text":"com.mbeddr.mpsutil.make This plugin contains old fixes for rebuilding models/modules and projects that are already included in MPS . The plugin will be removed soon.","title":"Make"},{"location":"platform_essentials/com_mbeddr_mpsutil/#multilingual","text":"This language might be removed in the future. com.mbeddr.mpsutil.multilingual The idea behind this language was to store text translations in properties files and load the through the Java ResourceBundle class. The documentation for the language can be found here as a PDF and is located in the virtual package doc .com.mbeddr.mpsutil .","title":"Multilingual"},{"location":"platform_essentials/com_mbeddr_mpsutil/#node-difference","text":"com.mbeddr.mpsutil.nodediff These actions were used to structurally compare two nodes and are deprecated. Please use the official action Compare Two Nodes instead.","title":"Node difference"},{"location":"platform_essentials/com_mbeddr_mpsutil/#rcp-configuration","text":"com.mbeddr.mpsutil.rcpconfig This solution contains an old build script for the mbeddr RCP . It is deprecated and will be removed soon.","title":"RCP configuration"},{"location":"platform_essentials/com_mbeddr_mpsutil/#run-configuration","text":"com.mbeddr.mpsutil.runconfiguration This language was used as a workaround for accessing the debuggle node in breakpoint creators . The expression is now officially supported, this language is deprecated and will be removed soon.","title":"Run configuration"},{"location":"platform_essentials/com_mbeddr_mpsutil/#test-scope","text":"^^com.mbeddr.mpsutil.testScope This language is deprecated. Please use the official testing scopes instead.","title":"Test scope"},{"location":"platform_essentials/com_mbeddr_mpsutil/#var-scope","text":"com.mbeddr.mpsutil.varscope This language used to provide the interfaces IScopeElement and IScopeProvider to provide scopes for nodes but is now deprecated. Please use the official scopes instead.","title":"Var scope"},{"location":"platform_essentials/common_concepts_and_interfaces/","text":"This list explains some common abstract concepts and interfaces that you can use to extend or use the funtionality of the platforms. Mbeddr \u00b6 Base \u00b6 Assessement \u00b6 To extend assessements, extend the class AssessmentQuery to create a new query. The result of the query has to extend the class AssessmentResult . The interface AssessmentSummary must also be extended to provide an summary of the results. Example: Chunk \u00b6 A node of the class Chunk has several properties: it has a name, acts as a scope provider for elements, can import other elements or vice versa. It also integrates with the tree view and provides a graph of all the chunk hierarchy including imports. It also detects dependency cycles. Example: ICommentable \u00b6 Concepts or interfaces that implement ICommentable can be commented out by typing // or /* as long as it is not trigger by a node that implements IEmpty . IDocumentable \u00b6 Add support for documentating nodes when implementing the IDocumentable interface. The text node is using the language de.slisson.mps.richtext and supported text and embedded nodes. ITreeViewable \u00b6 Implement the interface [ITreeViewRoot] to use the Tree tool. It is a tool that can show a tree structure when this interface is implemented. Example: IETS3 call tree of functions IContainerOfUniqueNames \u00b6 The interface IContainerOfUniqueNames checks that the provided names are indeed unique and shows and error otherwise. For qualified names, implement the interface IHasQualifiedName . IDetectCycle \u00b6 The interface IDetectCycle can be implemented to detect cyclic dependencies. This feature is used, for example, with chunks that import other chunks. IEmpty \u00b6 The interface IEmpty can be implemented to support empty lines. Error messages are automatically supressed and the node is also not shown in the outline. Name related interfaces \u00b6 The interface IIdentifierNamedConcept can be used for concept that should have a valid identifier. Check the property constraint to unterstand how it works. The interface INameAllUpperCase , INameFirstCharLowerCase and INameFirstCharUpperCase can be used to further constraint the identifier name. IMbeddrIDERoot \u00b6 Concepts that implement the interface IMbeddrIDERoot show up in the New Roots menu thats shown above the normal new menu of the context menu. It adds the following features: custom name for the menu entry, root concept sorting and custom categories for the root concepts. IETS3 \u00b6 General \u00b6 ISolvable \u00b6 The interface ISolvable can be implemented to create solver tasks that could be executed by a solver such as Z3 . To enable the solver for a node, implement the interface IUseSolver . A solver task must extend the concept AbstractSolverTask . The concept that can be mapped to the solver must implement ICanBeMappedToSolver . ICanRunCheckManually \u00b6 The interface ICanRunCheckManually can be implemented to support running checks that are executed through one of the actions (runAllManuallyOnModel, runAllManuallyOnRoot, runManuallyOnContainer etc.) or are executed through intentions. The result of a check can be stored as a user object of a node. The interface also supports updating the editor with the test results, for example, highlighting the background of a test with a color and refreshing the editor. Example: IOptionallyNamed \u00b6 Use the interface IOptionallyNamed for concepts that should support an optional name. You can also use this name in smart references. IValidNamedConcept \u00b6 As an alternative to the mbeddr interfaces, you can use the interface IValidNamedConcept for valid identifiers that are valid in KernelF. Expressions \u00b6 To add a new expression, extend the concept Expression . The new concept can be commented out and documented by default. ICanBeLValue \u00b6 Implement the interface ICanBeLValue when the concept can be used as the left value of expressions such as assignments. Variable references, paths and dot expression can be left values. IDotTarget \u00b6 Implement the interface IDotTarget to support custom operations for the dot expression. It can be used, for example, to add new operations for collections, enumerations, math, statemachines and many more. IEmptyLiteral \u00b6 The interface IEmptyLiteral is a marker interface used to mark literals that at runtime evaluate to an empty value. ILiteral \u00b6 Implement the interface ILiteral to add support for a new literal. For primitive types such as integers and strings, extend the concept PrimitiveLiteral instead. Register an extension for the primitiveTypeMapper extension point when using custom primitive literals. The standard implementation is the SimpleTypesPrimitiveTypeMapper . Effects \u00b6 Since KernelF is by default immutable, there are some language extensions that allow side effects such as the language org.iets3.core. expr .mutable . To add custom concepts that have affects, implement the interfaces IMayAllowEffect and IMayHaveEffect . IOptionallyTyped \u00b6 Use the interface IOptionallyTyped to add an optional type to an expression. The expression automatically used the provided type as its own type. ITraceRoot \u00b6 Nodes that want to be the root of tracing , should implement the interface ITraceRoot Custom types \u00b6 Custom types must extend the concept Type . If the type supports a default value (e.g. false for the boolean type and 0 for a numeric type), also implement the interface ITypeSupportsDefaultValue . IWantNewLine \u00b6 The concepts of expressions that need to be on a new line such as try expressions, block expressions and sometimes tables, need to implement the interface IWantNewLine . This interface affects the layout of some expressions such as if expressions and function bodies. Tests \u00b6 To add a new test statement, extend the concept AbstractTestItem . If the editor needs to be updated after the test item was executed, override the method performAdditionalEditorUpdate . Top-level \u00b6 IToplevelExprContent \u00b6 Implement the interface IToplevelExprContent to allow an expression to be used at the topmost level similar to the ExpressionStatement in baselanguage . Collections \u00b6 When implementing custom operations for collections such as maps, lists and sets, use one of the provided concepts as the base concept (for example NoArgCollectionOp and OneArgCollectionOp ). If there is no suitable concept, implement one of the interfaces such as ICollectionOp and IMapOneArgOp . If this is still not possible, you can still implement IDotTarget directly. MPS -extensions \u00b6 Richtext \u00b6 IWord \u00b6 Implement the interface IWord to add new embeddable nodes to the text.","title":"Common concepts and interfaces"},{"location":"platform_essentials/common_concepts_and_interfaces/#mbeddr","text":"","title":"Mbeddr"},{"location":"platform_essentials/common_concepts_and_interfaces/#base","text":"","title":"Base"},{"location":"platform_essentials/common_concepts_and_interfaces/#assessement","text":"To extend assessements, extend the class AssessmentQuery to create a new query. The result of the query has to extend the class AssessmentResult . The interface AssessmentSummary must also be extended to provide an summary of the results. Example:","title":"Assessement"},{"location":"platform_essentials/common_concepts_and_interfaces/#chunk","text":"A node of the class Chunk has several properties: it has a name, acts as a scope provider for elements, can import other elements or vice versa. It also integrates with the tree view and provides a graph of all the chunk hierarchy including imports. It also detects dependency cycles. Example:","title":"Chunk"},{"location":"platform_essentials/common_concepts_and_interfaces/#icommentable","text":"Concepts or interfaces that implement ICommentable can be commented out by typing // or /* as long as it is not trigger by a node that implements IEmpty .","title":"ICommentable"},{"location":"platform_essentials/common_concepts_and_interfaces/#idocumentable","text":"Add support for documentating nodes when implementing the IDocumentable interface. The text node is using the language de.slisson.mps.richtext and supported text and embedded nodes.","title":"IDocumentable"},{"location":"platform_essentials/common_concepts_and_interfaces/#itreeviewable","text":"Implement the interface [ITreeViewRoot] to use the Tree tool. It is a tool that can show a tree structure when this interface is implemented. Example: IETS3 call tree of functions","title":"ITreeViewable"},{"location":"platform_essentials/common_concepts_and_interfaces/#icontainerofuniquenames","text":"The interface IContainerOfUniqueNames checks that the provided names are indeed unique and shows and error otherwise. For qualified names, implement the interface IHasQualifiedName .","title":"IContainerOfUniqueNames"},{"location":"platform_essentials/common_concepts_and_interfaces/#idetectcycle","text":"The interface IDetectCycle can be implemented to detect cyclic dependencies. This feature is used, for example, with chunks that import other chunks.","title":"IDetectCycle"},{"location":"platform_essentials/common_concepts_and_interfaces/#iempty","text":"The interface IEmpty can be implemented to support empty lines. Error messages are automatically supressed and the node is also not shown in the outline.","title":"IEmpty"},{"location":"platform_essentials/common_concepts_and_interfaces/#name-related-interfaces","text":"The interface IIdentifierNamedConcept can be used for concept that should have a valid identifier. Check the property constraint to unterstand how it works. The interface INameAllUpperCase , INameFirstCharLowerCase and INameFirstCharUpperCase can be used to further constraint the identifier name.","title":"Name related interfaces"},{"location":"platform_essentials/common_concepts_and_interfaces/#imbeddrideroot","text":"Concepts that implement the interface IMbeddrIDERoot show up in the New Roots menu thats shown above the normal new menu of the context menu. It adds the following features: custom name for the menu entry, root concept sorting and custom categories for the root concepts.","title":"IMbeddrIDERoot"},{"location":"platform_essentials/common_concepts_and_interfaces/#iets3","text":"","title":"IETS3"},{"location":"platform_essentials/common_concepts_and_interfaces/#general","text":"","title":"General"},{"location":"platform_essentials/common_concepts_and_interfaces/#isolvable","text":"The interface ISolvable can be implemented to create solver tasks that could be executed by a solver such as Z3 . To enable the solver for a node, implement the interface IUseSolver . A solver task must extend the concept AbstractSolverTask . The concept that can be mapped to the solver must implement ICanBeMappedToSolver .","title":"ISolvable"},{"location":"platform_essentials/common_concepts_and_interfaces/#icanruncheckmanually","text":"The interface ICanRunCheckManually can be implemented to support running checks that are executed through one of the actions (runAllManuallyOnModel, runAllManuallyOnRoot, runManuallyOnContainer etc.) or are executed through intentions. The result of a check can be stored as a user object of a node. The interface also supports updating the editor with the test results, for example, highlighting the background of a test with a color and refreshing the editor. Example:","title":"ICanRunCheckManually"},{"location":"platform_essentials/common_concepts_and_interfaces/#ioptionallynamed","text":"Use the interface IOptionallyNamed for concepts that should support an optional name. You can also use this name in smart references.","title":"IOptionallyNamed"},{"location":"platform_essentials/common_concepts_and_interfaces/#ivalidnamedconcept","text":"As an alternative to the mbeddr interfaces, you can use the interface IValidNamedConcept for valid identifiers that are valid in KernelF.","title":"IValidNamedConcept"},{"location":"platform_essentials/common_concepts_and_interfaces/#expressions","text":"To add a new expression, extend the concept Expression . The new concept can be commented out and documented by default.","title":"Expressions"},{"location":"platform_essentials/common_concepts_and_interfaces/#icanbelvalue","text":"Implement the interface ICanBeLValue when the concept can be used as the left value of expressions such as assignments. Variable references, paths and dot expression can be left values.","title":"ICanBeLValue"},{"location":"platform_essentials/common_concepts_and_interfaces/#idottarget","text":"Implement the interface IDotTarget to support custom operations for the dot expression. It can be used, for example, to add new operations for collections, enumerations, math, statemachines and many more.","title":"IDotTarget"},{"location":"platform_essentials/common_concepts_and_interfaces/#iemptyliteral","text":"The interface IEmptyLiteral is a marker interface used to mark literals that at runtime evaluate to an empty value.","title":"IEmptyLiteral"},{"location":"platform_essentials/common_concepts_and_interfaces/#iliteral","text":"Implement the interface ILiteral to add support for a new literal. For primitive types such as integers and strings, extend the concept PrimitiveLiteral instead. Register an extension for the primitiveTypeMapper extension point when using custom primitive literals. The standard implementation is the SimpleTypesPrimitiveTypeMapper .","title":"ILiteral"},{"location":"platform_essentials/common_concepts_and_interfaces/#effects","text":"Since KernelF is by default immutable, there are some language extensions that allow side effects such as the language org.iets3.core. expr .mutable . To add custom concepts that have affects, implement the interfaces IMayAllowEffect and IMayHaveEffect .","title":"Effects"},{"location":"platform_essentials/common_concepts_and_interfaces/#ioptionallytyped","text":"Use the interface IOptionallyTyped to add an optional type to an expression. The expression automatically used the provided type as its own type.","title":"IOptionallyTyped"},{"location":"platform_essentials/common_concepts_and_interfaces/#itraceroot","text":"Nodes that want to be the root of tracing , should implement the interface ITraceRoot","title":"ITraceRoot"},{"location":"platform_essentials/common_concepts_and_interfaces/#custom-types","text":"Custom types must extend the concept Type . If the type supports a default value (e.g. false for the boolean type and 0 for a numeric type), also implement the interface ITypeSupportsDefaultValue .","title":"Custom types"},{"location":"platform_essentials/common_concepts_and_interfaces/#iwantnewline","text":"The concepts of expressions that need to be on a new line such as try expressions, block expressions and sometimes tables, need to implement the interface IWantNewLine . This interface affects the layout of some expressions such as if expressions and function bodies.","title":"IWantNewLine"},{"location":"platform_essentials/common_concepts_and_interfaces/#tests","text":"To add a new test statement, extend the concept AbstractTestItem . If the editor needs to be updated after the test item was executed, override the method performAdditionalEditorUpdate .","title":"Tests"},{"location":"platform_essentials/common_concepts_and_interfaces/#top-level","text":"","title":"Top-level"},{"location":"platform_essentials/common_concepts_and_interfaces/#itoplevelexprcontent","text":"Implement the interface IToplevelExprContent to allow an expression to be used at the topmost level similar to the ExpressionStatement in baselanguage .","title":"IToplevelExprContent"},{"location":"platform_essentials/common_concepts_and_interfaces/#collections","text":"When implementing custom operations for collections such as maps, lists and sets, use one of the provided concepts as the base concept (for example NoArgCollectionOp and OneArgCollectionOp ). If there is no suitable concept, implement one of the interfaces such as ICollectionOp and IMapOneArgOp . If this is still not possible, you can still implement IDotTarget directly.","title":"Collections"},{"location":"platform_essentials/common_concepts_and_interfaces/#mps-extensions","text":"","title":"MPS-extensions"},{"location":"platform_essentials/common_concepts_and_interfaces/#richtext","text":"","title":"Richtext"},{"location":"platform_essentials/common_concepts_and_interfaces/#iword","text":"Implement the interface IWord to add new embeddable nodes to the text.","title":"IWord"},{"location":"platform_essentials/contributing/","text":"This guide shows how to make a contribution to one of the platforms. It takes IETS3 as an example. It mostly uses the MPS GUI for Git. If you want to do everything on the command line, checkout An introduction to Git or one of the Git cheatsheets . Make sure that you have Git and Java 11 installed. Clone the repository: git clone https://github.com/IETS3/iets3.opensource.git or Check out a project from a remote host for the GUI way. Decide which branch you want to use a the template for the contribution. The supported MPS version should be listed in the README. Older branches are named maintenance/mpsX, e.g. maintenance/mps20203, the main branch is the master branch. If you have already checked out the repository before, make sure to fetch all the changes from the remote repository. Create a new branch from the selected branch . Some common names are feature/X, bugfix/X and refactoring/X where X stands for a description of the branch and maybe the targeted MPS version such as feature/myfeature_20211. Push the changes to the repository. Editing the repository history is only allowed on your on branch. Create a new pull request in the remote repository. Optionally, request a pull request review if the repository requires reviewing. Make sure that the build runs on https://build.mbeddr.com . The status can be viewed in the PR . If the reviewer requires a change, make the change and click the rerequest review button. If the reviewer approves the change, you can merge the changes (or he has already merged your changes). If you have a lot of commits, that you want to merge into one commit or several commits, you can either use interactive rebase in MPS or squash your commits into one single commit when merging the pull request. Some more tips: Enable GitHub notifications to receive mail notifications about events on GitHub such as comments, or approved pull requests. The browser extension Refined GitHub provides some additional features for GitHub that you might find useful.","title":"Contributing"},{"location":"platform_essentials/interpreter/","text":"The interpreter let you interpret code on the fly. You can use it instead of the normal approach by writing an MPS generator and executing the code this way (e.g. executing baselanguage code). The result of invoking the interpreter is a Java object. In the GIF you can see the interpreter executing a test case that contains assertions that are writing with KernelF . The MPS generator isn\u2019t involved in the execution at all. Creating an interpreter \u00b6 First you have to import the language com.mbeddr.mpsutil.interpreter . Now create a new interpreter and give it a name. The category should be arithmetic so that other interpreters of this category can also use this interpreter but you can also use other categories. There is, for example a demo Java interpreter in mpsutils(mbeddr) that uses its own category java . You don\u2019t have to set the evaluated languages: they are automatically calculated based on the declared evaluators. In the related interpreter section, you can define that the current interpret should run before or after another interpreter. An example from KernelF: the collections operations should be interpreted first because they are reduced to simpler statements. The lambda and base interpreter should be run afterwards. The type mappings section can declare mappings from types that implement the IType interface to either a java type or another custom type that implements the IType interface. An evalutator consists of a left and right side: the left side is a concept that should be interpreted. In the inspector, you can set cacheValues to true to enabling caching. When the same value is accessed again, the cached value is returned instead of recalculation a value. The interpreter cache can be disabled by unchecking Tools \u2192 Enable Interpreter Cache in the main menu. The right side contains is an expression or a block and must return a value. The node expression refers to the currently evaluated expression. There are a few expressions starting with \u2018#\u2019, that are explained in their corresponding short descriptions. The \u2018#->\u2019 expression is used to call functions (search for usages globally). The right side can return a Java object (including null) or call another interpreter with one of the #-expressions. Another interesting expressions is the env expression. It\u2019s an array that can be used to save values for other evalulators. The key must be a node. If you don\u2019t have a node available, you can also use a helper class with static dummy nodes as keys. An example could be a dot expression where the operation needs to access the operand e.g. \"hello\".startswith(\"he\") . startswith() is the operation, \"hello\" is the operand: In case that the current interpreter is not suitable for interpreting the current node, the expression tryOtherInterpreter can be used to use the next interpreter to interpret the current node: The castUp expression can be used to case a Java (baselanguage) expression to a type. For example, if the expression is of type Number (numberInput) and the target type is float, numberInput.floatValue() would be called. The $ expression returns the type of a concept. It can be used for type mappings but also for child type constraints that can be entered in the middle of evaluators. For example: the evalator of a modulo operator might require that the left and right expressions are of type integer otherwise the evaluator shouldn\u2019t be used: The context expression can be used to access the interpreter configurations, the cache, the root interpreter and contains some other useful. It can, for example, be used to access the environment from a Java class by executing a method with the context as a parameter. Then the environment can be accessed by calling context.getEnvironment() . The environment can be nested by calling push and pop . The topmost environment in the stack is used. The is evaluable expression (#?) can be used to check if there is an evaluator available for a specific node. Code coverage \u00b6 There\u2019s also support for coverage that\u2019s displayed inside the editor. Code coverage checks which part of the code was executed by the interpreter. For more information, consult the Wikipedia page . This way you can, for example, find out which parts of the code aren\u2019t covered by tests: There\u2019s support for coverage of single nodes but also branches. An example for branches would be, for example, the if and else block of an if statement. To register branches use the register branches statement. To visit a branch, use the branch statement. When visiting a node, the node, the node\u2019s concept and the evaluator are automatically marked as covered. For the children of the node, there\u2019s the list coverage statement which visits a list of nodes and there\u2019s also the simple cover statement. The former is, for example, used for the elements of a map literal. The coverage information can be accessed and set through the coverage variable. Tracing in KernelF \u00b6 To follow the executing of an interpreter, the execution trace is helpful. Right-click an interpreted node and click Show Trace . The Trace explorer now opens in the lower left corner. When you click onww of the lines in the trace explorer, the node in the editor gets replaced by the trace. The trace can be manipulated through the trace expression . Nix handling in KernelF \u00b6 KernelF doesn\u2019t allow returning null values (intermediate null values that are caught by the same or other evaluators are fine). Instead it supports so called nix handlers (there\u2019s an nixHandler extension point ). The default handler for KernelF is DefaultNixHandler . A nix value (interface INixValue ) repesents an empty (nothing) value. There is, for example, a DefaultNix class, for dates there\u2019s EmptyDateRangeValue . The handler has a method process that can be used to handle values that might be nix. To use this feature. To use this feature call new NixSupport(Object value node<> node {NixSupport => Object} calculator).run() where the calculator returns the value: Calling the interpreter \u00b6 For IETS3 use the class IETS3ExprEvalHelper . If you can\u2019t use this class, use the following code: 1 2 3 4 5 6 7 8 class Coverage { void test () { ICoverage coverage = null ; // your implementation ContextImpl ctx = new ContextImpl (); InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper ( INTERPRETER_CATEGORY ); return helper . evaluateWithContextAndCoverage ( expr , getInterpreter (), ctx , coverage ); } } There are also methods which don\u2019t need coverage, a context object and so forth. The easiest method is helper.evaluate which returns a Java expression. Final notes \u00b6 The interpreter doesn\u2019t support multithreading. It can also be slow when called too many times. It\u2019s also recommended to not call the interpreter from the generator because when searching for interpreters, MPS might deadlock because it starts indexing. You might get away with it by calling the interpreter inside the runnable of DumbService.getInstance(project).suspendIndexingAndRun() . You can\u2019t return the value from the runnable, but you can assign it in a method of an object that\u2019s outside the runnable. Examples \u00b6 KernelF: ExprBaseInterpreter Mbeddr: JavaInterpreterBase","title":"Interpreter"},{"location":"platform_essentials/interpreter/#creating-an-interpreter","text":"First you have to import the language com.mbeddr.mpsutil.interpreter . Now create a new interpreter and give it a name. The category should be arithmetic so that other interpreters of this category can also use this interpreter but you can also use other categories. There is, for example a demo Java interpreter in mpsutils(mbeddr) that uses its own category java . You don\u2019t have to set the evaluated languages: they are automatically calculated based on the declared evaluators. In the related interpreter section, you can define that the current interpret should run before or after another interpreter. An example from KernelF: the collections operations should be interpreted first because they are reduced to simpler statements. The lambda and base interpreter should be run afterwards. The type mappings section can declare mappings from types that implement the IType interface to either a java type or another custom type that implements the IType interface. An evalutator consists of a left and right side: the left side is a concept that should be interpreted. In the inspector, you can set cacheValues to true to enabling caching. When the same value is accessed again, the cached value is returned instead of recalculation a value. The interpreter cache can be disabled by unchecking Tools \u2192 Enable Interpreter Cache in the main menu. The right side contains is an expression or a block and must return a value. The node expression refers to the currently evaluated expression. There are a few expressions starting with \u2018#\u2019, that are explained in their corresponding short descriptions. The \u2018#->\u2019 expression is used to call functions (search for usages globally). The right side can return a Java object (including null) or call another interpreter with one of the #-expressions. Another interesting expressions is the env expression. It\u2019s an array that can be used to save values for other evalulators. The key must be a node. If you don\u2019t have a node available, you can also use a helper class with static dummy nodes as keys. An example could be a dot expression where the operation needs to access the operand e.g. \"hello\".startswith(\"he\") . startswith() is the operation, \"hello\" is the operand: In case that the current interpreter is not suitable for interpreting the current node, the expression tryOtherInterpreter can be used to use the next interpreter to interpret the current node: The castUp expression can be used to case a Java (baselanguage) expression to a type. For example, if the expression is of type Number (numberInput) and the target type is float, numberInput.floatValue() would be called. The $ expression returns the type of a concept. It can be used for type mappings but also for child type constraints that can be entered in the middle of evaluators. For example: the evalator of a modulo operator might require that the left and right expressions are of type integer otherwise the evaluator shouldn\u2019t be used: The context expression can be used to access the interpreter configurations, the cache, the root interpreter and contains some other useful. It can, for example, be used to access the environment from a Java class by executing a method with the context as a parameter. Then the environment can be accessed by calling context.getEnvironment() . The environment can be nested by calling push and pop . The topmost environment in the stack is used. The is evaluable expression (#?) can be used to check if there is an evaluator available for a specific node.","title":"Creating an interpreter"},{"location":"platform_essentials/interpreter/#code-coverage","text":"There\u2019s also support for coverage that\u2019s displayed inside the editor. Code coverage checks which part of the code was executed by the interpreter. For more information, consult the Wikipedia page . This way you can, for example, find out which parts of the code aren\u2019t covered by tests: There\u2019s support for coverage of single nodes but also branches. An example for branches would be, for example, the if and else block of an if statement. To register branches use the register branches statement. To visit a branch, use the branch statement. When visiting a node, the node, the node\u2019s concept and the evaluator are automatically marked as covered. For the children of the node, there\u2019s the list coverage statement which visits a list of nodes and there\u2019s also the simple cover statement. The former is, for example, used for the elements of a map literal. The coverage information can be accessed and set through the coverage variable.","title":"Code coverage"},{"location":"platform_essentials/interpreter/#tracing-in-kernelf","text":"To follow the executing of an interpreter, the execution trace is helpful. Right-click an interpreted node and click Show Trace . The Trace explorer now opens in the lower left corner. When you click onww of the lines in the trace explorer, the node in the editor gets replaced by the trace. The trace can be manipulated through the trace expression .","title":"Tracing in KernelF"},{"location":"platform_essentials/interpreter/#nix-handling-in-kernelf","text":"KernelF doesn\u2019t allow returning null values (intermediate null values that are caught by the same or other evaluators are fine). Instead it supports so called nix handlers (there\u2019s an nixHandler extension point ). The default handler for KernelF is DefaultNixHandler . A nix value (interface INixValue ) repesents an empty (nothing) value. There is, for example, a DefaultNix class, for dates there\u2019s EmptyDateRangeValue . The handler has a method process that can be used to handle values that might be nix. To use this feature. To use this feature call new NixSupport(Object value node<> node {NixSupport => Object} calculator).run() where the calculator returns the value:","title":"Nix handling in KernelF"},{"location":"platform_essentials/interpreter/#calling-the-interpreter","text":"For IETS3 use the class IETS3ExprEvalHelper . If you can\u2019t use this class, use the following code: 1 2 3 4 5 6 7 8 class Coverage { void test () { ICoverage coverage = null ; // your implementation ContextImpl ctx = new ContextImpl (); InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper ( INTERPRETER_CATEGORY ); return helper . evaluateWithContextAndCoverage ( expr , getInterpreter (), ctx , coverage ); } } There are also methods which don\u2019t need coverage, a context object and so forth. The easiest method is helper.evaluate which returns a Java expression.","title":"Calling the interpreter"},{"location":"platform_essentials/interpreter/#final-notes","text":"The interpreter doesn\u2019t support multithreading. It can also be slow when called too many times. It\u2019s also recommended to not call the interpreter from the generator because when searching for interpreters, MPS might deadlock because it starts indexing. You might get away with it by calling the interpreter inside the runnable of DumbService.getInstance(project).suspendIndexingAndRun() . You can\u2019t return the value from the runnable, but you can assign it in a method of an object that\u2019s outside the runnable.","title":"Final notes"},{"location":"platform_essentials/interpreter/#examples","text":"KernelF: ExprBaseInterpreter Mbeddr: JavaInterpreterBase","title":"Examples"},{"location":"platform_essentials/platform_build_scripts/","text":"Platform build scripts \u00b6 This page describes the MPS -extensions and IETS3 build scripts. They might look different in the future but this guide should still be helpful. The build scripts from mbeddr work similar but there\u2019s more than just one, so let\u2019s focus on the other two platforms. MPS -extensions/build.gradle \u00b6 Let\u2019s ignore Modelix related stuff. The script uses the mps-gradle-plugin which already contains some useful tasks for Gradle-based builds with MPS . Line 2 : the build script block lists the used dependency repositories: the new itemis nexus server ( https://artifacts.itemis.cloud ) and also the old one ( projects.itemis.de ). Line 8 : the dependency block contains the reference to the mps-gradle-plugin. Line 15 : for publishing artifacts to GitHub, the plugin gradle-github-plugin can be used. It\u2019s important to import the classes from the mps-gradle-plugin: import de.itemis.mps.gradle.*. Line 28 : the gradle wrapper can be used to specify the Gradle version that should be downloaded: it must be compatible with the used Java version ( compatibility matrix ) Line 34 : the variable ciBuild can affect the build, for example, by using a different version identifier for the artifacts. Line 47 : the path to the Java installation must be set. For the build it isn\u2019t important if it\u2019s a normal JDK or a JBR , only the Java version must be correct. Line 71 : there are a few ways to specify properties for the build. This guide explains them. Line 77 : this list contains the Nexus repositories that are used for fetching the dependencies. The actual declaration is done on line 138 . Line 83-109 : the logic for deciding the version identifier. It uses hardcoded values, the branch name and ciBuild and the class GitBasedVersioning to create a suitable identifier. A local build gets the version 1.0-SNAPSHOT as described in the Maven guide . More information can be found in this StackOverflow question . Line 112-123 : the plugins directory varies dependening on the operating system ( Plugins directory | MPS ). Line 125 : the following variables contain the Nexus repositories that are used for publishing the artifacts. Line 130-136 : a new configuration named mps is declared. It\u2019s used for declaring the dependency on MPS . the dependencies block declares the dependency. The dependency isn\u2019t automatically resolved because a custom configuration is used. The resolution task is created on line 150 and the following lines. configurations.mps.resolve() downloads the zip file, zipTree unzips it into the mps home directory. Line 168-174 : this dependency is needed, so that there is support for junit ant tasks. Line 183-199 : some system variables are set by prepending -D in front of the key-value pairs. These variables are actually declared in the build solution in the build script of the MPS project. They can be overriden from the command line this way. Line 204-219 : the all script is a special MPS build script that calls all other build scripts. This task has the type BuildLanguages as described in the gradle-plugin documentation and executes the xml file that was created by the MPS build language. The next lines also declare tasks for building the languages and running the tests. They call the corresponding build scripts from the build module of this project ( de.itemis.mps.extensions.build ). Line 221 : this task installs the nativlibs.loader plugin which can be used for loading native code(e.g. C code) that is needed for a Java library (e.g. C debugger). The reason why a special plugin is needed is that there are special methods for loading native code in Java. Normal MPS solutions should\u2019nt be used for this task because they can be reloaded in MPS which isn\u2019t possible with native libraries. This plugin is implemented as an IntelliJ plugin which is not affected by the MPS reloading mechanism. Line 250 : this block declares the Junit ant dependency. Line 260-270 : these two tasks create zip files from the artifacts. Line 272 : the clean tasks removes the generated MPS files, cleans the temporary folder and remove the content of the artifact folder. Line 279-317 : this block uses the Maven publishing plugin to publish the generated artifacts to different repositories such as Nexus and GitHub maven repositories. The credentials can be stored on the build server (e.g. TeamCity) or in the GitHub project itself, when the project is build with GitHub actions . Line 319-339 : this block defines one single publication de.itemis.mps:extensions . It also publishes a Maven pom file that lists all the dependencies of this artifact (in this case: only MPS ). Line 376 : this block declares the publication for GitHub. Warning : it\u2019s not possible to publish an artifact with the same name on GitHub, it won\u2019t be overriden. The rest of the build script uses modelix/mpsbuild , a replacement for the MPS build language. Visit Exploring modelix/mpsbuild - Specific Languages for some initial information on this project. iets3.opensource/build.gradle \u00b6 The build script looks very similar to the script from MPS -extensions, so let\u2019s focus only on the differences. Line 68-112 : the project has a dependency on mbeddr which can be overriden with a local dependency by setting the project variable forceLocalDependencies . Line 134-139 : a few configurations are declared in this block. The dependency of this configurations are resolved in different Gradle tasks, for example in the task resolvePcollections on line 179 . Line 259-264 : additional to exporting the languages and solutions, the project also creates a standalone IDE ( RCP ) Line 332-406 : this time there a multiple publications. Not only the languages and tests are published but also some runtime Java libraries that are needed by KernelF (e.g. org.iets3.core. expr .datetime.runtime for the datetime language). Line 409-421 : This task reads project libraries from projectlibraries.properties and generate libraries.xml in the .mps directory. Libraries are loaded in MPS during start. A library is, for example, mbeddr. The task is used by the setup tasks which should be executed when cloning the project. Mbeddr build scripts \u00b6 The main build.gradle can be found in the root directory. There is also a build subfolder. The most important build files are com.mbeddr/build.gradle which build mbeddr itself and com.mbeddr/platform/build.gradle which builds the mbeddr platform.","title":"Platform build scripts"},{"location":"platform_essentials/platform_build_scripts/#platform-build-scripts","text":"This page describes the MPS -extensions and IETS3 build scripts. They might look different in the future but this guide should still be helpful. The build scripts from mbeddr work similar but there\u2019s more than just one, so let\u2019s focus on the other two platforms.","title":"Platform build scripts"},{"location":"platform_essentials/platform_build_scripts/#mps-extensionsbuildgradle","text":"Let\u2019s ignore Modelix related stuff. The script uses the mps-gradle-plugin which already contains some useful tasks for Gradle-based builds with MPS . Line 2 : the build script block lists the used dependency repositories: the new itemis nexus server ( https://artifacts.itemis.cloud ) and also the old one ( projects.itemis.de ). Line 8 : the dependency block contains the reference to the mps-gradle-plugin. Line 15 : for publishing artifacts to GitHub, the plugin gradle-github-plugin can be used. It\u2019s important to import the classes from the mps-gradle-plugin: import de.itemis.mps.gradle.*. Line 28 : the gradle wrapper can be used to specify the Gradle version that should be downloaded: it must be compatible with the used Java version ( compatibility matrix ) Line 34 : the variable ciBuild can affect the build, for example, by using a different version identifier for the artifacts. Line 47 : the path to the Java installation must be set. For the build it isn\u2019t important if it\u2019s a normal JDK or a JBR , only the Java version must be correct. Line 71 : there are a few ways to specify properties for the build. This guide explains them. Line 77 : this list contains the Nexus repositories that are used for fetching the dependencies. The actual declaration is done on line 138 . Line 83-109 : the logic for deciding the version identifier. It uses hardcoded values, the branch name and ciBuild and the class GitBasedVersioning to create a suitable identifier. A local build gets the version 1.0-SNAPSHOT as described in the Maven guide . More information can be found in this StackOverflow question . Line 112-123 : the plugins directory varies dependening on the operating system ( Plugins directory | MPS ). Line 125 : the following variables contain the Nexus repositories that are used for publishing the artifacts. Line 130-136 : a new configuration named mps is declared. It\u2019s used for declaring the dependency on MPS . the dependencies block declares the dependency. The dependency isn\u2019t automatically resolved because a custom configuration is used. The resolution task is created on line 150 and the following lines. configurations.mps.resolve() downloads the zip file, zipTree unzips it into the mps home directory. Line 168-174 : this dependency is needed, so that there is support for junit ant tasks. Line 183-199 : some system variables are set by prepending -D in front of the key-value pairs. These variables are actually declared in the build solution in the build script of the MPS project. They can be overriden from the command line this way. Line 204-219 : the all script is a special MPS build script that calls all other build scripts. This task has the type BuildLanguages as described in the gradle-plugin documentation and executes the xml file that was created by the MPS build language. The next lines also declare tasks for building the languages and running the tests. They call the corresponding build scripts from the build module of this project ( de.itemis.mps.extensions.build ). Line 221 : this task installs the nativlibs.loader plugin which can be used for loading native code(e.g. C code) that is needed for a Java library (e.g. C debugger). The reason why a special plugin is needed is that there are special methods for loading native code in Java. Normal MPS solutions should\u2019nt be used for this task because they can be reloaded in MPS which isn\u2019t possible with native libraries. This plugin is implemented as an IntelliJ plugin which is not affected by the MPS reloading mechanism. Line 250 : this block declares the Junit ant dependency. Line 260-270 : these two tasks create zip files from the artifacts. Line 272 : the clean tasks removes the generated MPS files, cleans the temporary folder and remove the content of the artifact folder. Line 279-317 : this block uses the Maven publishing plugin to publish the generated artifacts to different repositories such as Nexus and GitHub maven repositories. The credentials can be stored on the build server (e.g. TeamCity) or in the GitHub project itself, when the project is build with GitHub actions . Line 319-339 : this block defines one single publication de.itemis.mps:extensions . It also publishes a Maven pom file that lists all the dependencies of this artifact (in this case: only MPS ). Line 376 : this block declares the publication for GitHub. Warning : it\u2019s not possible to publish an artifact with the same name on GitHub, it won\u2019t be overriden. The rest of the build script uses modelix/mpsbuild , a replacement for the MPS build language. Visit Exploring modelix/mpsbuild - Specific Languages for some initial information on this project.","title":"MPS-extensions/build.gradle"},{"location":"platform_essentials/platform_build_scripts/#iets3opensourcebuildgradle","text":"The build script looks very similar to the script from MPS -extensions, so let\u2019s focus only on the differences. Line 68-112 : the project has a dependency on mbeddr which can be overriden with a local dependency by setting the project variable forceLocalDependencies . Line 134-139 : a few configurations are declared in this block. The dependency of this configurations are resolved in different Gradle tasks, for example in the task resolvePcollections on line 179 . Line 259-264 : additional to exporting the languages and solutions, the project also creates a standalone IDE ( RCP ) Line 332-406 : this time there a multiple publications. Not only the languages and tests are published but also some runtime Java libraries that are needed by KernelF (e.g. org.iets3.core. expr .datetime.runtime for the datetime language). Line 409-421 : This task reads project libraries from projectlibraries.properties and generate libraries.xml in the .mps directory. Libraries are loaded in MPS during start. A library is, for example, mbeddr. The task is used by the setup tasks which should be executed when cloning the project.","title":"iets3.opensource/build.gradle"},{"location":"platform_essentials/platform_build_scripts/#mbeddr-build-scripts","text":"The main build.gradle can be found in the root directory. There is also a build subfolder. The most important build files are com.mbeddr/build.gradle which build mbeddr itself and com.mbeddr/platform/build.gradle which builds the mbeddr platform.","title":"Mbeddr build scripts"},{"location":"platform_essentials/mpsutils/actions/","text":"Actions \u00b6 Build assistant \u00b6 com.mbeddr.mpsutil.buildassistant This language adds actions to make or rebuild models/modules or projects and also include their dependencies. TODO: Do the official actions already provide this capability? Generic actions \u00b6 com.mbeddr.mpsutil.genericactions As the name already implies, this language adds some new generic actions: Decrease MPS Editor Font Size : decreases the font size in the editor settings and updates all editors (ctrl + -) Increase MPS Editor Font Size : increases the font size in the editor settings and updates all editors (ctrl + +) Reset MPS Editor Font Size :: reset the font size to the default size (ctrl + 0, 13 pixels) File Manager in Output Folder : a new action in the context menu of models that opens the path of the generated files. This action won\u2019t work if the model doesn\u2019t generate output files. File Manager in Module Folder : a new action in the context menu of modules that opens the path of th module. Node access \u00b6 com.mbeddr.mpsutil.nodeaccess This language adds a new group of actions called Copy/Paste Special to the editor popup that opens when right-clicking in the editor: Copy Node as XML : serialize the selected node to XML and copy it to the system clipboard. Paste XML Node : deserialize a previously copied node and insert it next to the current selected node. Copy Node Info to Clipboard : copies some information (project, module, model, node, URL) about a node to the system clipboard. Print \u00b6 com.mbeddr.mpsutil.print.pluginSolution This language adds a new action to the general MPS File menu. The action Print Editor can be used to print the current editor with a printer. If the operating system permits it, this action can also be used to create a PDF from the editor. Refactoring \u00b6 com.mbeddr.mpsutil.refactoring This language adds support for a projection mode switcher and refactoring actions. Projection mode switcher \u00b6 The mbeddr platform has a group Projection which is a top-level menu in MPS : A projection mode switcher can be declared containing push hint options where the hints are referenced from an existing ConceptEditor context hints container. The action can be added in the Add to Menu/Button Group section editor. This adds a toggle to this menu/button group that toggles the referenced editor hint in the editors. When it should only be enabled for a specific concept, add a concept to only in editor with instance of . Refactoring action \u00b6 The concept RefactoringAction can create an action for a simple refactoring . The title of the action can be specified with caption, and the keyboard shortcut can be defined in shortcut . Refactoring parameters can be specified in parameters . There are a few different choosers which will be shown in the refactoring dialog for the value of the parameters: string : chooser for selecting a text +node*: chooser for selecting a node using a filter. The filter is a function which has a list of nodes to refactor as a parameter and should return a new filtered sequence of nodes. project tree node : chooser for selecting a node from the project tree","title":"Actions"},{"location":"platform_essentials/mpsutils/actions/#actions","text":"","title":"Actions"},{"location":"platform_essentials/mpsutils/actions/#build-assistant","text":"com.mbeddr.mpsutil.buildassistant This language adds actions to make or rebuild models/modules or projects and also include their dependencies. TODO: Do the official actions already provide this capability?","title":"Build assistant"},{"location":"platform_essentials/mpsutils/actions/#generic-actions","text":"com.mbeddr.mpsutil.genericactions As the name already implies, this language adds some new generic actions: Decrease MPS Editor Font Size : decreases the font size in the editor settings and updates all editors (ctrl + -) Increase MPS Editor Font Size : increases the font size in the editor settings and updates all editors (ctrl + +) Reset MPS Editor Font Size :: reset the font size to the default size (ctrl + 0, 13 pixels) File Manager in Output Folder : a new action in the context menu of models that opens the path of the generated files. This action won\u2019t work if the model doesn\u2019t generate output files. File Manager in Module Folder : a new action in the context menu of modules that opens the path of th module.","title":"Generic actions"},{"location":"platform_essentials/mpsutils/actions/#node-access","text":"com.mbeddr.mpsutil.nodeaccess This language adds a new group of actions called Copy/Paste Special to the editor popup that opens when right-clicking in the editor: Copy Node as XML : serialize the selected node to XML and copy it to the system clipboard. Paste XML Node : deserialize a previously copied node and insert it next to the current selected node. Copy Node Info to Clipboard : copies some information (project, module, model, node, URL) about a node to the system clipboard.","title":"Node access"},{"location":"platform_essentials/mpsutils/actions/#print","text":"com.mbeddr.mpsutil.print.pluginSolution This language adds a new action to the general MPS File menu. The action Print Editor can be used to print the current editor with a printer. If the operating system permits it, this action can also be used to create a PDF from the editor.","title":"Print"},{"location":"platform_essentials/mpsutils/actions/#refactoring","text":"com.mbeddr.mpsutil.refactoring This language adds support for a projection mode switcher and refactoring actions.","title":"Refactoring"},{"location":"platform_essentials/mpsutils/actions/#projection-mode-switcher","text":"The mbeddr platform has a group Projection which is a top-level menu in MPS : A projection mode switcher can be declared containing push hint options where the hints are referenced from an existing ConceptEditor context hints container. The action can be added in the Add to Menu/Button Group section editor. This adds a toggle to this menu/button group that toggles the referenced editor hint in the editors. When it should only be enabled for a specific concept, add a concept to only in editor with instance of .","title":"Projection mode switcher"},{"location":"platform_essentials/mpsutils/actions/#refactoring-action","text":"The concept RefactoringAction can create an action for a simple refactoring . The title of the action can be specified with caption, and the keyboard shortcut can be defined in shortcut . Refactoring parameters can be specified in parameters . There are a few different choosers which will be shown in the refactoring dialog for the value of the parameters: string : chooser for selecting a text +node*: chooser for selecting a node using a filter. The filter is a function which has a list of nodes to refactor as a parameter and should return a new filtered sequence of nodes. project tree node : chooser for selecting a node from the project tree","title":"Refactoring action"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/","text":"Baselanguage extensions \u00b6 BLDoc \u00b6 com.mbeddr.mpsutil.bldoc This language can be used to attach a documentation via the intention Attach Documentation to any node. The richtext language provides the concept Text for writing the documentation. There are also two interfaces that implement IWord so that any node can be referenced in the com.mbeddr. doc language: @child and @root for referencing any child nodes and named nodes respectively. Richstring \u00b6 com.mbeddr.mpsutil.richstring This BaseLanguage extension simplifies usage of variables and Java String.format() inside BaseLanguage Strings. Just add the language com.mbeddr.mpsutil.richstring to your model. The following example shows referencing a simple variable, embedding an expression inside a string, and the equivalent of calling String . format () : SModule \u00b6 com.mbeddr.mpsutil.smodule This language adds new operations to modules: add dependencies : adds dependencies to one or more models to the module add DevKits : adds devkits to the modules add languages to the module : adds used languages to the module add model : adds a new model with the specified name to the module. The repository has to be specified as the second parameter. If you press enter after the name, you can also add devkits, references to models and languages to the newly created model. In the inspector, the storage type has to be declared: it can be per root or single file persistence. add solution : adds a new solution to the module. The virtual package can be specified (subfolder).","title":"Baselanguage extensions"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#baselanguage-extensions","text":"","title":"Baselanguage extensions"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#bldoc","text":"com.mbeddr.mpsutil.bldoc This language can be used to attach a documentation via the intention Attach Documentation to any node. The richtext language provides the concept Text for writing the documentation. There are also two interfaces that implement IWord so that any node can be referenced in the com.mbeddr. doc language: @child and @root for referencing any child nodes and named nodes respectively.","title":"BLDoc"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#richstring","text":"com.mbeddr.mpsutil.richstring This BaseLanguage extension simplifies usage of variables and Java String.format() inside BaseLanguage Strings. Just add the language com.mbeddr.mpsutil.richstring to your model. The following example shows referencing a simple variable, embedding an expression inside a string, and the equivalent of calling String . format () :","title":"Richstring"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#smodule","text":"com.mbeddr.mpsutil.smodule This language adds new operations to modules: add dependencies : adds dependencies to one or more models to the module add DevKits : adds devkits to the modules add languages to the module : adds used languages to the module add model : adds a new model with the specified name to the module. The repository has to be specified as the second parameter. If you press enter after the name, you can also add devkits, references to models and languages to the newly created model. In the inspector, the storage type has to be declared: it can be per root or single file persistence. add solution : adds a new solution to the module. The virtual package can be specified (subfolder).","title":"SModule"},{"location":"platform_essentials/mpsutils/common/","text":"Common \u00b6 com.mbeddr.mpsutil.common Graph \u00b6 The graph model contains classes for working with graphs as well as an implementation for the AVL tree data structure, which is a self-balancing binary search tree . The Graph class can be used together with GraphUtil , which provides the following methods: computeSCC(Graph) : computes the strongly connected components of the given graph isConnected(Graph, T initial) : determines whether the given directed graph corresponds to a connected graph computeSCCSingle(T sought, Graph) : returns the set of nodes in the strongly connected component that the node to find is in computeTopologicalSorting(Graph, boolean silent) : returns the topological sorting of the nodes of the given graph. Model \u00b6 The class ConceptInstanceFinder contains a few methods for finding instances (= nodes) of a concept: findAllVisibleInstances(context, conceptToFind) : find instances of a concept in the used languages of the model. context node\u2019s model is the starting point. findAllInstances(conceptToFind) : searches for nodes of the given concept in all user models from the global scope (not including transient and temporary models) Util \u00b6 The class ApplicationHelper contains a method for running a Runnable object inside a progress window that optionally can be canceled. The class ModelComparator can compare two models programmatically and report the mismatches between them. SNodeIdentityWrapper This Class is used to preserve node identity across model boundaries. This is useful in generator scenarios where nodes are copied between the different phases. Comparator \u00b6 com.mbeddr.mpsutil.comparator The class MPSNodeComparator can be used to compare two nodes programmatically. There are overloaded methods for ignoring properties, ignored references and some more settings. The return object of class MPSNodeComparison contains the list of differences and can also pre pretty printed by called the method getDescription() .","title":"Common"},{"location":"platform_essentials/mpsutils/common/#common","text":"com.mbeddr.mpsutil.common","title":"Common"},{"location":"platform_essentials/mpsutils/common/#graph","text":"The graph model contains classes for working with graphs as well as an implementation for the AVL tree data structure, which is a self-balancing binary search tree . The Graph class can be used together with GraphUtil , which provides the following methods: computeSCC(Graph) : computes the strongly connected components of the given graph isConnected(Graph, T initial) : determines whether the given directed graph corresponds to a connected graph computeSCCSingle(T sought, Graph) : returns the set of nodes in the strongly connected component that the node to find is in computeTopologicalSorting(Graph, boolean silent) : returns the topological sorting of the nodes of the given graph.","title":"Graph"},{"location":"platform_essentials/mpsutils/common/#model","text":"The class ConceptInstanceFinder contains a few methods for finding instances (= nodes) of a concept: findAllVisibleInstances(context, conceptToFind) : find instances of a concept in the used languages of the model. context node\u2019s model is the starting point. findAllInstances(conceptToFind) : searches for nodes of the given concept in all user models from the global scope (not including transient and temporary models)","title":"Model"},{"location":"platform_essentials/mpsutils/common/#util","text":"The class ApplicationHelper contains a method for running a Runnable object inside a progress window that optionally can be canceled. The class ModelComparator can compare two models programmatically and report the mismatches between them. SNodeIdentityWrapper This Class is used to preserve node identity across model boundaries. This is useful in generator scenarios where nodes are copied between the different phases.","title":"Util"},{"location":"platform_essentials/mpsutils/common/#comparator","text":"com.mbeddr.mpsutil.comparator The class MPSNodeComparator can be used to compare two nodes programmatically. There are overloaded methods for ignoring properties, ignored references and some more settings. The return object of class MPSNodeComparison contains the list of differences and can also pre pretty printed by called the method getDescription() .","title":"Comparator"},{"location":"platform_essentials/mpsutils/deprecated/","text":"Deprecated \u00b6 Build utilities \u00b6 com.mbeddr.mpsutil.buildutil This language was an attempt to automatically update build scripts during the build. It will be removed in the future. Code completion menu \u00b6 com.mbeddr.mpsutil.ccmenu This language isn\u2019t used anymore and is disabled. This language added support for customizing the code completion menu with tabs and a special tab for creating reference targets. The contributions were made in a plugin solutions by creating a CCMenuExtensions root node. Forms \u00b6 com.mbeddr.mpsutil.forms This is an unfinished language that was probably intented to be used in com.mbeddr.mpsutil.process . This language will be removed soon. Gradle support \u00b6 com.mbeddr.mpsutil.gradlesupport This language was an attempt to create Gradle files from MPS . It has a concepts for text files, single lines and multi lines. If you want to generate text files, use one of the text generator plugins from MPS -extensions . HTTP support \u00b6 com.mbeddr.mpsutil.httpsupport This was the old http support plugin. Please use the language jetbrains.mps.ide.httpsupport instead. Icon char \u00b6 com.mbeddr.mpsutil.iconchar This language was used to programmatically create icons but is deprecated. Please use the official Icon description language instead. Language stats \u00b6 com.mbeddr.mpsutil.langstats This language contains a concept Counter that can be populated by invoking the intention Count after creating a new instance in any model. It will search the current model and all imported models and will fill it with some general stats like the number of concepts, properties or number of type system rules. The formula for the lines of code (LOC) property can be found in the editor . Most of the stats can be easily replicated with the MPS console . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Counter ----------------------- concepts: 266 properties: 95 links: 204 cells: 0 nodeRefConstraints 0 nodePropConstraints 0 behaviorMethods 0 type system rules 0 mapping rules 0 statements 721 intentions 0 testgens 0 ------------------------- LOC: 1962.1999999999998 License manager \u00b6 com.mbeddr.mpsutil.licensemanager.common This language contains some classes of an old mbeddr licensemanager and will probably be removed in the future. Make \u00b6 com.mbeddr.mpsutil.make This plugin contains old fixes for rebuilding models/modules and projects that are already included in MPS . The plugin will be removed soon. Multilingual \u00b6 This language might be removed in the future. com.mbeddr.mpsutil.multilingual The idea behind this language was to store text translations in properties files and load the through the Java ResourceBundle class. The documentation for the language can be found here as a PDF and is located in the virtual package doc .com.mbeddr.mpsutil . Node difference \u00b6 com.mbeddr.mpsutil.nodediff These actions were used to structurally compare two nodes and are deprecated. Please use the official action Compare Two Nodes instead. RCP configuration \u00b6 com.mbeddr.mpsutil.rcpconfig This solution contains an old build script for the mbeddr RCP . It is deprecated and will be removed soon. Run configuration \u00b6 com.mbeddr.mpsutil.runconfiguration This language was used as a workaround for accessing the debuggle node in breakpoint creators . The expression is now officially supported, this language is deprecated and will be removed soon. Test scope \u00b6 ^^com.mbeddr.mpsutil.testScope This language is deprecated. Please use the official testing scopes instead. Var scope \u00b6 com.mbeddr.mpsutil.varscope This language used to provide the interfaces IScopeElement and IScopeProvider to provide scopes for nodes but is now deprecated. Please use the official scopes instead.","title":"Deprecated"},{"location":"platform_essentials/mpsutils/deprecated/#deprecated","text":"","title":"Deprecated"},{"location":"platform_essentials/mpsutils/deprecated/#build-utilities","text":"com.mbeddr.mpsutil.buildutil This language was an attempt to automatically update build scripts during the build. It will be removed in the future.","title":"Build utilities"},{"location":"platform_essentials/mpsutils/deprecated/#code-completion-menu","text":"com.mbeddr.mpsutil.ccmenu This language isn\u2019t used anymore and is disabled. This language added support for customizing the code completion menu with tabs and a special tab for creating reference targets. The contributions were made in a plugin solutions by creating a CCMenuExtensions root node.","title":"Code completion menu"},{"location":"platform_essentials/mpsutils/deprecated/#forms","text":"com.mbeddr.mpsutil.forms This is an unfinished language that was probably intented to be used in com.mbeddr.mpsutil.process . This language will be removed soon.","title":"Forms"},{"location":"platform_essentials/mpsutils/deprecated/#gradle-support","text":"com.mbeddr.mpsutil.gradlesupport This language was an attempt to create Gradle files from MPS . It has a concepts for text files, single lines and multi lines. If you want to generate text files, use one of the text generator plugins from MPS -extensions .","title":"Gradle support"},{"location":"platform_essentials/mpsutils/deprecated/#http-support","text":"com.mbeddr.mpsutil.httpsupport This was the old http support plugin. Please use the language jetbrains.mps.ide.httpsupport instead.","title":"HTTP support"},{"location":"platform_essentials/mpsutils/deprecated/#icon-char","text":"com.mbeddr.mpsutil.iconchar This language was used to programmatically create icons but is deprecated. Please use the official Icon description language instead.","title":"Icon char"},{"location":"platform_essentials/mpsutils/deprecated/#language-stats","text":"com.mbeddr.mpsutil.langstats This language contains a concept Counter that can be populated by invoking the intention Count after creating a new instance in any model. It will search the current model and all imported models and will fill it with some general stats like the number of concepts, properties or number of type system rules. The formula for the lines of code (LOC) property can be found in the editor . Most of the stats can be easily replicated with the MPS console . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Counter ----------------------- concepts: 266 properties: 95 links: 204 cells: 0 nodeRefConstraints 0 nodePropConstraints 0 behaviorMethods 0 type system rules 0 mapping rules 0 statements 721 intentions 0 testgens 0 ------------------------- LOC: 1962.1999999999998","title":"Language stats"},{"location":"platform_essentials/mpsutils/deprecated/#license-manager","text":"com.mbeddr.mpsutil.licensemanager.common This language contains some classes of an old mbeddr licensemanager and will probably be removed in the future.","title":"License manager"},{"location":"platform_essentials/mpsutils/deprecated/#make","text":"com.mbeddr.mpsutil.make This plugin contains old fixes for rebuilding models/modules and projects that are already included in MPS . The plugin will be removed soon.","title":"Make"},{"location":"platform_essentials/mpsutils/deprecated/#multilingual","text":"This language might be removed in the future. com.mbeddr.mpsutil.multilingual The idea behind this language was to store text translations in properties files and load the through the Java ResourceBundle class. The documentation for the language can be found here as a PDF and is located in the virtual package doc .com.mbeddr.mpsutil .","title":"Multilingual"},{"location":"platform_essentials/mpsutils/deprecated/#node-difference","text":"com.mbeddr.mpsutil.nodediff These actions were used to structurally compare two nodes and are deprecated. Please use the official action Compare Two Nodes instead.","title":"Node difference"},{"location":"platform_essentials/mpsutils/deprecated/#rcp-configuration","text":"com.mbeddr.mpsutil.rcpconfig This solution contains an old build script for the mbeddr RCP . It is deprecated and will be removed soon.","title":"RCP configuration"},{"location":"platform_essentials/mpsutils/deprecated/#run-configuration","text":"com.mbeddr.mpsutil.runconfiguration This language was used as a workaround for accessing the debuggle node in breakpoint creators . The expression is now officially supported, this language is deprecated and will be removed soon.","title":"Run configuration"},{"location":"platform_essentials/mpsutils/deprecated/#test-scope","text":"^^com.mbeddr.mpsutil.testScope This language is deprecated. Please use the official testing scopes instead.","title":"Test scope"},{"location":"platform_essentials/mpsutils/deprecated/#var-scope","text":"com.mbeddr.mpsutil.varscope This language used to provide the interfaces IScopeElement and IScopeProvider to provide scopes for nodes but is now deprecated. Please use the official scopes instead.","title":"Var scope"},{"location":"platform_essentials/mpsutils/generator/","text":"Generator \u00b6 Generator facade \u00b6 com.mbeddr.mpsutil.generatorfacade This language contains a class GeneratorFacade that helps with running the generator. In contains a method runGenerator with different signatures that can run the generator with a specific generation plan for a defined model with a custom handler for generator messages and custom generation parameters such as save transient models (default: false ) or generate in parallel (default: yes, 4 threads). GenUtil \u00b6 com.mbeddr.mpsutil.genutil This language helps with managing user objects and creating temporary nodes for them: 1 createTempNode{hello -> \"world\"}; This expression creates a new node and assigns Base Language expressions to keys of it. The keys are set internally with the setref statement which takes a key, a context node (here: the newly created node) and a target expression, and creates a new user object for this node. For normal values, there are the setref and getref statements to set and retrieve values from the user object respectively. For int values, there are the statements setint and getint . Mapping labels \u00b6 com.mbeddr.mpsutil.mappingLabels This language provides intentions for automatically creating mapping labels . One of the use cases is to migrate reference macros that use strings to identify target nodes to resolve the target by mapping labels instead. postprocessGeneratedFiles \u00b6 com.mbeddr.mpsutil.postprocessGeneratedFiles Add a new node generated files postprocessor facet to the plugin aspect of a language to declare a new facet that is executed after files are generated (textGen). It supports post-processor functions that have a node parameter and a path parameter that contains the path of the generate file. This method can be, for example, used to copy the generated files to a different folder: 1 2 3 4 5 6 7 8 9 10 11 12 generated files postprocessor facet testGen ( node , path ) -> void { Path target = Paths . get ( \"/var/tmp/testGen\" ). resolve ( path . getFileName ()); message info \"Copying \" + path + \" to \" + target , < no project > , < no throwable > ; try { Files . createDirectories ( target . getParent ()); Files . copy ( path , target , StandardCopyOption . REPLACE_EXISTING ); } catch ( IOException e ) { e . printStackTrace (); } } For simple duplicating the TextGen outcome, There\u2019s also the builtin JetBrains annotation CopyOutcome . XModel actions \u00b6 com.mbeddr.mpsutil.xmodel.actions This language adds actions for automatically deriving generation plans . For a single or list of modules There\u2019s the action Generation Plan for Languages which can be found in the context menu that opens when you right-click the modules in the logical view. There\u2019s also an action Derive Generation Plan which derives a generation plan for a model that has to be selected in a dialog that opens when executing this action. It can be found in the same places as the text preview action (for example, in the context menu of models).","title":"Generator"},{"location":"platform_essentials/mpsutils/generator/#generator","text":"","title":"Generator"},{"location":"platform_essentials/mpsutils/generator/#generator-facade","text":"com.mbeddr.mpsutil.generatorfacade This language contains a class GeneratorFacade that helps with running the generator. In contains a method runGenerator with different signatures that can run the generator with a specific generation plan for a defined model with a custom handler for generator messages and custom generation parameters such as save transient models (default: false ) or generate in parallel (default: yes, 4 threads).","title":"Generator facade"},{"location":"platform_essentials/mpsutils/generator/#genutil","text":"com.mbeddr.mpsutil.genutil This language helps with managing user objects and creating temporary nodes for them: 1 createTempNode{hello -> \"world\"}; This expression creates a new node and assigns Base Language expressions to keys of it. The keys are set internally with the setref statement which takes a key, a context node (here: the newly created node) and a target expression, and creates a new user object for this node. For normal values, there are the setref and getref statements to set and retrieve values from the user object respectively. For int values, there are the statements setint and getint .","title":"GenUtil"},{"location":"platform_essentials/mpsutils/generator/#mapping-labels","text":"com.mbeddr.mpsutil.mappingLabels This language provides intentions for automatically creating mapping labels . One of the use cases is to migrate reference macros that use strings to identify target nodes to resolve the target by mapping labels instead.","title":"Mapping labels"},{"location":"platform_essentials/mpsutils/generator/#postprocessgeneratedfiles","text":"com.mbeddr.mpsutil.postprocessGeneratedFiles Add a new node generated files postprocessor facet to the plugin aspect of a language to declare a new facet that is executed after files are generated (textGen). It supports post-processor functions that have a node parameter and a path parameter that contains the path of the generate file. This method can be, for example, used to copy the generated files to a different folder: 1 2 3 4 5 6 7 8 9 10 11 12 generated files postprocessor facet testGen ( node , path ) -> void { Path target = Paths . get ( \"/var/tmp/testGen\" ). resolve ( path . getFileName ()); message info \"Copying \" + path + \" to \" + target , < no project > , < no throwable > ; try { Files . createDirectories ( target . getParent ()); Files . copy ( path , target , StandardCopyOption . REPLACE_EXISTING ); } catch ( IOException e ) { e . printStackTrace (); } } For simple duplicating the TextGen outcome, There\u2019s also the builtin JetBrains annotation CopyOutcome .","title":"postprocessGeneratedFiles"},{"location":"platform_essentials/mpsutils/generator/#xmodel-actions","text":"com.mbeddr.mpsutil.xmodel.actions This language adds actions for automatically deriving generation plans . For a single or list of modules There\u2019s the action Generation Plan for Languages which can be found in the context menu that opens when you right-click the modules in the logical view. There\u2019s also an action Derive Generation Plan which derives a generation plan for a model that has to be selected in a dialog that opens when executing this action. It can be found in the same places as the text preview action (for example, in the context menu of models).","title":"XModel actions"},{"location":"platform_essentials/mpsutils/importer_and_exporter/","text":"Importer and exporter \u00b6 ECore \u00b6 com.mbeddr.mpsutil.ecore This is an importer and exporter for the meta model( ECore ) of the Eclipse Modelling Framework. The conversion is between an XML file and a MPS model. The importer can import Ecore and Ecore model files. Access the action through right-clicking a model and opening the Ecore Transformation tools group. XML import \u00b6 com.mbeddr.mpsutil.xmlImport.plugin This plugin adds two actions for importing XML files into MPS : Paste as XML Content : this action is located in the editor context menu and parses XML code and adds it to the next xml node or root node. Import XML File(s) : this actions parses on or multiple xml files and creates xml root nodes for them in the current selected model.","title":"Importer and exporter"},{"location":"platform_essentials/mpsutils/importer_and_exporter/#importer-and-exporter","text":"","title":"Importer and exporter"},{"location":"platform_essentials/mpsutils/importer_and_exporter/#ecore","text":"com.mbeddr.mpsutil.ecore This is an importer and exporter for the meta model( ECore ) of the Eclipse Modelling Framework. The conversion is between an XML file and a MPS model. The importer can import Ecore and Ecore model files. Access the action through right-clicking a model and opening the Ecore Transformation tools group.","title":"ECore"},{"location":"platform_essentials/mpsutils/importer_and_exporter/#xml-import","text":"com.mbeddr.mpsutil.xmlImport.plugin This plugin adds two actions for importing XML files into MPS : Paste as XML Content : this action is located in the editor context menu and parses XML code and adds it to the next xml node or root node. Import XML File(s) : this actions parses on or multiple xml files and creates xml root nodes for them in the current selected model.","title":"XML import"},{"location":"platform_essentials/mpsutils/language_extensions/","text":"Language extensions \u00b6 Dataflow \u00b6 com.mbeddr.mpsutil.dataflow MPS -DF is a data-flow extension for MPS . Please visit the following page for more information: An Extensible Framework for Variable-precision Data-flow Analyses in MPS | Tam\u00e1s Szab\u00f3 Default values for properties \u00b6 com.mbeddr.mpsutil.propertydefault This language allows setting a default value for properties when they\u2019re initialized. The default value can be set by invoking the code completion on an existing property constraint inside the concept constraints of a concept and using one of the completion items with the \u201cdefault\u201d suffix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 concepts constraints TestPropertyDefault { ... property { bool } default : true property { int } default : 42 property { string } default : \"empty\" ... } Extension class \u00b6 com.mbeddr.mpsutil.extensionclass MPS already provides a language for defining extension methods , for example, methods to be called on an object without being part of the Object\u2019s class. This language extends this mechanism to provide all static methods of a class as extension methods. They can be invoked on the type of the method\u2019s first parameter. Import the language and create a new ExtensionClass root node. Reference the Java class containing the static methods. Method annotations can be added to overwrite parameter names, so that they\u2019re more elaborate than \u201cp0\u201d or \u201cp2\u201d. As a starting point, create a dependency to the model com.mbeddr.mpsutil.extensionclass.annotation.apache.commons.lang3 which provides extension methods with useful parameter names for Apache Commons StringUtils, ObjectUtils, and StringEscapeUtils. Language plugin extensions \u00b6 com.mbeddr.mpsutil. lang .plugin.extensions This language contains extensions for jetbrains.mps. lang .plugin . It mainly adds support for adding actions not only at a specific position but also supports the anchors first, last, before and after. Example: add to NewProjectOrModuleGroup after position NewProject #Parameterized menu \u00b6 com.mbeddr.mpsutil.parameterizedMenu This language is an extension to the parameterized transformation language part. When used as a menu part of it, it allows iterating over the parameter object ( parameterizable parameterized menu part) or create a dynamic submenu based on the parameter object ( parameterized submenu ). For completion styling and item priorities, use completion styling instead. Resources \u00b6 com.mbeddr.mpsutil.resources This language extends the language jetbrains.mps. lang .resources by providing more customizations. CircleCustomizable adds support for drawing the circle with a different thickness. TextCustomizable adds support for specificing the font style (plain, bold, italic), font family and offsets for the text. Suppress warning \u00b6 com.mbeddr.mpsutil.suppresswarning This language allows attaching an annotation to nodes to disable all or certain type system warnings by invoking the intention Toggle Suppress Warnings . There are different kinds of warnings that can be suppressed: all : suppress all warnings In com.mbeddr.core.modules two more data flow specific kinds exist: liveness : suppress dataflow liveness warning dataflow : suppress dataflow warning Type system trace \u00b6 com.mbeddr.mpsutil.typesystem.trace This language currently doesn\u2019t work anymore. This language modifies the different typesystem concepts like comparison rule, non typesystem rules etc. to collect information about the runtime execution time. To use it, place an instance of TraceTypesystem into a typesystem aspect to include the generator of this language and set the enabled flag to true. The model contains a new action Benchmark Typesystem that opens a tool named Type System Performance Data that shows the collected information. XML fix \u00b6 com.mbeddr.mpsutil.xml.fix This language contains fixes for the XML language . It escapes XMl values for XML 1.0/1.1. Unique names \u00b6 com.mbeddr.mpsutil.uniquenames MPS references all nodes by their id , not their name. Still, as humans, we see only the name, and this might be ambiguous. The Unique Names hint can be activated in MPS Preferences, Editor Hints. It shows as much of the full qualified name as required rendering a name unique. Example concept: Example Base Language:","title":"Language extensions"},{"location":"platform_essentials/mpsutils/language_extensions/#language-extensions","text":"","title":"Language extensions"},{"location":"platform_essentials/mpsutils/language_extensions/#dataflow","text":"com.mbeddr.mpsutil.dataflow MPS -DF is a data-flow extension for MPS . Please visit the following page for more information: An Extensible Framework for Variable-precision Data-flow Analyses in MPS | Tam\u00e1s Szab\u00f3","title":"Dataflow"},{"location":"platform_essentials/mpsutils/language_extensions/#default-values-for-properties","text":"com.mbeddr.mpsutil.propertydefault This language allows setting a default value for properties when they\u2019re initialized. The default value can be set by invoking the code completion on an existing property constraint inside the concept constraints of a concept and using one of the completion items with the \u201cdefault\u201d suffix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 concepts constraints TestPropertyDefault { ... property { bool } default : true property { int } default : 42 property { string } default : \"empty\" ... }","title":"Default values for properties"},{"location":"platform_essentials/mpsutils/language_extensions/#extension-class","text":"com.mbeddr.mpsutil.extensionclass MPS already provides a language for defining extension methods , for example, methods to be called on an object without being part of the Object\u2019s class. This language extends this mechanism to provide all static methods of a class as extension methods. They can be invoked on the type of the method\u2019s first parameter. Import the language and create a new ExtensionClass root node. Reference the Java class containing the static methods. Method annotations can be added to overwrite parameter names, so that they\u2019re more elaborate than \u201cp0\u201d or \u201cp2\u201d. As a starting point, create a dependency to the model com.mbeddr.mpsutil.extensionclass.annotation.apache.commons.lang3 which provides extension methods with useful parameter names for Apache Commons StringUtils, ObjectUtils, and StringEscapeUtils.","title":"Extension class"},{"location":"platform_essentials/mpsutils/language_extensions/#language-plugin-extensions","text":"com.mbeddr.mpsutil. lang .plugin.extensions This language contains extensions for jetbrains.mps. lang .plugin . It mainly adds support for adding actions not only at a specific position but also supports the anchors first, last, before and after. Example: add to NewProjectOrModuleGroup after position NewProject","title":"Language plugin extensions"},{"location":"platform_essentials/mpsutils/language_extensions/#parameterized-menu","text":"com.mbeddr.mpsutil.parameterizedMenu This language is an extension to the parameterized transformation language part. When used as a menu part of it, it allows iterating over the parameter object ( parameterizable parameterized menu part) or create a dynamic submenu based on the parameter object ( parameterized submenu ). For completion styling and item priorities, use completion styling instead.","title":"#Parameterized menu"},{"location":"platform_essentials/mpsutils/language_extensions/#resources","text":"com.mbeddr.mpsutil.resources This language extends the language jetbrains.mps. lang .resources by providing more customizations. CircleCustomizable adds support for drawing the circle with a different thickness. TextCustomizable adds support for specificing the font style (plain, bold, italic), font family and offsets for the text.","title":"Resources"},{"location":"platform_essentials/mpsutils/language_extensions/#suppress-warning","text":"com.mbeddr.mpsutil.suppresswarning This language allows attaching an annotation to nodes to disable all or certain type system warnings by invoking the intention Toggle Suppress Warnings . There are different kinds of warnings that can be suppressed: all : suppress all warnings In com.mbeddr.core.modules two more data flow specific kinds exist: liveness : suppress dataflow liveness warning dataflow : suppress dataflow warning","title":"Suppress warning"},{"location":"platform_essentials/mpsutils/language_extensions/#type-system-trace","text":"com.mbeddr.mpsutil.typesystem.trace This language currently doesn\u2019t work anymore. This language modifies the different typesystem concepts like comparison rule, non typesystem rules etc. to collect information about the runtime execution time. To use it, place an instance of TraceTypesystem into a typesystem aspect to include the generator of this language and set the enabled flag to true. The model contains a new action Benchmark Typesystem that opens a tool named Type System Performance Data that shows the collected information.","title":"Type system trace"},{"location":"platform_essentials/mpsutils/language_extensions/#xml-fix","text":"com.mbeddr.mpsutil.xml.fix This language contains fixes for the XML language . It escapes XMl values for XML 1.0/1.1.","title":"XML fix"},{"location":"platform_essentials/mpsutils/language_extensions/#unique-names","text":"com.mbeddr.mpsutil.uniquenames MPS references all nodes by their id , not their name. Still, as humans, we see only the name, and this might be ambiguous. The Unique Names hint can be activated in MPS Preferences, Editor Hints. It shows as much of the full qualified name as required rendering a name unique. Example concept: Example Base Language:","title":"Unique names"},{"location":"platform_essentials/mpsutils/languages/","text":"Languages \u00b6 JSON \u00b6 com.mbeddr.mpsutil.json This language implements a simple JSON language that can be used as a generator target. The Json file root node supports an additional package name which is used as the folder inside the generation folder where the file is generated into. An example for a file that can be generated: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"description\" : \"This is a json file\" , \"name\" : \"my json file\" , \"this is an object\" : { \"And another object\" : { \"With a description\" : \"object description\" , \"An array\" : [ \"valu1\" , \"value2\" ], \"withANumber\" : 1.232E+231231 , \"empty array\" : [ ], \"empty object\" : { }, \"empty string\" : \"\" } } }","title":"Languages"},{"location":"platform_essentials/mpsutils/languages/#languages","text":"","title":"Languages"},{"location":"platform_essentials/mpsutils/languages/#json","text":"com.mbeddr.mpsutil.json This language implements a simple JSON language that can be used as a generator target. The Json file root node supports an additional package name which is used as the folder inside the generation folder where the file is generated into. An example for a file that can be generated: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"description\" : \"This is a json file\" , \"name\" : \"my json file\" , \"this is an object\" : { \"And another object\" : { \"With a description\" : \"object description\" , \"An array\" : [ \"valu1\" , \"value2\" ], \"withANumber\" : 1.232E+231231 , \"empty array\" : [ ], \"empty object\" : { }, \"empty string\" : \"\" } } }","title":"JSON"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/","text":"Plugin and RCP \u00b6 Actions filter \u00b6 com.mbeddr.mpsutil.actionsfilter MPS contains a lot of actions that might be not needed by end users such as actions for language development and actions of the IDE platform. This language allows disabling actions inside a MPS plugin solution by defining an actions profile. active by default can be set including an activation condition to make this profile the active profile when opening the project or RCP . All actions are disabled in a tree view and can be selected to disable them. To allow actions instead of filtering them use the intention Use allow actions on the actions profile. Actions in the section specify toolbar are displayed in the main toolbar that\u2019s located at the top left of the window. To use the language, not only the language has to be installed but also the corresponding Intellij plugin. ./gradlew install can install this plugin. Without the plugin the language won\u2019t load at all. Development tip: when making changes to the language, make sure to disable the plugin in the preferences, so that the model is not readonly. Execute ./gradlew install to install the plugin after making a change and restart MPS to test it. The predefined actions profiles can be customized by the user in preferences \u2192 Appearance & Behavior \u2192 Actions . New profiles can be created by clicking the + button and deleted by clicking the - button. Preference form \u00b6 com.mbeddr.mpsutil.preferenceform This language allows adding new preference pages to Preferences \u2192 Other Settings . The language uses the IntelliJ platform mechanism for adding preference pages ( documentation ). Example: It supports the following options: scope : save the preferences on application or project level help topic : The help topic is an internal identifier that can link a page in the MPS documentation. Example: preferences.intentionPowerPack links to https://www.jetbrains.com/mps/webhelp/?preferences.intentionPowerPack which redirects to https://www.jetbrains.com/help/mps/intentions-settings.html . The base URL in MPS is defined the XML configuration of a few plugins. To get the other internal names search for getHelpTopic in the MPS repository ) and/or the IntelliJ Community repository . The preference form supports a few different input elements: password field checkbox dynamic combo box integer field predefined combo box text field The before write method is called, when the button Apply or OK is pressed. This method should update all tools or classes that reference the values of the preference form. The input fields can be accessed through the this object. Example: 1 2 3 final HttpServerConfig config = new HttpServerConfig ((( int ) this . port ), this . enabled ); HttpServerConfig . setCurrentConfig ( config ); extensionPoint / HttpServerConfigChangeListener / . objects . forEach ({ ~ it => it . serverChanged ( config ); }); The after read method is called, after the state is loaded (for example: when the preference form is opened). Wizard (process) \u00b6 com.mbeddr.mpsutil.process This language allows creating wizards with multiple steps: Create a new node of instance Process . The wizard can have input parameters and produces one output. After defining the wizard it can be invoked from an action. Example: 1 2 3 4 wizard<theProcess> wiz = createWizard<theProcess>(\"This is my testdata\"); boolean b = wiz.show; System.out.println(\"show == \" + b); wiz.finish; The show method shows the modal dialog and checks if it was closed with the exit code OK . The finish method executed the onFinish callback of every step. For more information, have at look the example . New Model ( RCP ) \u00b6 com.mbeddr.mpsutil.rcp This language allows creating a new action for creating models similar to the action New model of mbeddr. Create an instance of NewModelDialogConfig . The following settings are supported: name : the name of the new action caption : the text that\u2019s shown for the action user can change persistence : boolean flag that decides if the user can change the model\u2019s persistence type. default persistence : the type of model persistence that\u2019s used when the model is created optional devkits : devkits that are automatically added when the model is created show model properties : open the model properties after the model was created SPreferences \u00b6 com.mbeddr.mpsutil.spreferences This extension allows the definition of preference pages by using MPS models; so in the preference page you get a normal MPS editor, as exemplified by mbeddr\u2019s platform templates preference page: Such pages are defined using an instance of PreferencePageDescription (check out the root \u201cPlatform Templates\u201d as an example). This instance must reside in a plugin solution. The data, i.e., the respective MPS model, is stored as part of the respective project or in MPS globally (this is configurable). It is possible to access the model that contains the preferences via code:","title":"Plugin and rcp"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#plugin-and-rcp","text":"","title":"Plugin and RCP"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#actions-filter","text":"com.mbeddr.mpsutil.actionsfilter MPS contains a lot of actions that might be not needed by end users such as actions for language development and actions of the IDE platform. This language allows disabling actions inside a MPS plugin solution by defining an actions profile. active by default can be set including an activation condition to make this profile the active profile when opening the project or RCP . All actions are disabled in a tree view and can be selected to disable them. To allow actions instead of filtering them use the intention Use allow actions on the actions profile. Actions in the section specify toolbar are displayed in the main toolbar that\u2019s located at the top left of the window. To use the language, not only the language has to be installed but also the corresponding Intellij plugin. ./gradlew install can install this plugin. Without the plugin the language won\u2019t load at all. Development tip: when making changes to the language, make sure to disable the plugin in the preferences, so that the model is not readonly. Execute ./gradlew install to install the plugin after making a change and restart MPS to test it. The predefined actions profiles can be customized by the user in preferences \u2192 Appearance & Behavior \u2192 Actions . New profiles can be created by clicking the + button and deleted by clicking the - button.","title":"Actions filter"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#preference-form","text":"com.mbeddr.mpsutil.preferenceform This language allows adding new preference pages to Preferences \u2192 Other Settings . The language uses the IntelliJ platform mechanism for adding preference pages ( documentation ). Example: It supports the following options: scope : save the preferences on application or project level help topic : The help topic is an internal identifier that can link a page in the MPS documentation. Example: preferences.intentionPowerPack links to https://www.jetbrains.com/mps/webhelp/?preferences.intentionPowerPack which redirects to https://www.jetbrains.com/help/mps/intentions-settings.html . The base URL in MPS is defined the XML configuration of a few plugins. To get the other internal names search for getHelpTopic in the MPS repository ) and/or the IntelliJ Community repository . The preference form supports a few different input elements: password field checkbox dynamic combo box integer field predefined combo box text field The before write method is called, when the button Apply or OK is pressed. This method should update all tools or classes that reference the values of the preference form. The input fields can be accessed through the this object. Example: 1 2 3 final HttpServerConfig config = new HttpServerConfig ((( int ) this . port ), this . enabled ); HttpServerConfig . setCurrentConfig ( config ); extensionPoint / HttpServerConfigChangeListener / . objects . forEach ({ ~ it => it . serverChanged ( config ); }); The after read method is called, after the state is loaded (for example: when the preference form is opened).","title":"Preference form"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#wizard-process","text":"com.mbeddr.mpsutil.process This language allows creating wizards with multiple steps: Create a new node of instance Process . The wizard can have input parameters and produces one output. After defining the wizard it can be invoked from an action. Example: 1 2 3 4 wizard<theProcess> wiz = createWizard<theProcess>(\"This is my testdata\"); boolean b = wiz.show; System.out.println(\"show == \" + b); wiz.finish; The show method shows the modal dialog and checks if it was closed with the exit code OK . The finish method executed the onFinish callback of every step. For more information, have at look the example .","title":"Wizard (process)"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#new-model-rcp","text":"com.mbeddr.mpsutil.rcp This language allows creating a new action for creating models similar to the action New model of mbeddr. Create an instance of NewModelDialogConfig . The following settings are supported: name : the name of the new action caption : the text that\u2019s shown for the action user can change persistence : boolean flag that decides if the user can change the model\u2019s persistence type. default persistence : the type of model persistence that\u2019s used when the model is created optional devkits : devkits that are automatically added when the model is created show model properties : open the model properties after the model was created","title":"New Model (RCP)"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#spreferences","text":"com.mbeddr.mpsutil.spreferences This extension allows the definition of preference pages by using MPS models; so in the preference page you get a normal MPS editor, as exemplified by mbeddr\u2019s platform templates preference page: Such pages are defined using an instance of PreferencePageDescription (check out the root \u201cPlatform Templates\u201d as an example). This instance must reside in a plugin solution. The data, i.e., the respective MPS model, is stored as part of the respective project or in MPS globally (this is configurable). It is possible to access the model that contains the preferences via code:","title":"SPreferences"},{"location":"platform_essentials/mpsutils/testing/","text":"Testing \u00b6 Lantest \u00b6 This language isn\u2019t working anymore. com.mbeddr.mpsutil.lantest This language was an attempt to automatically test languages, for example, check if the generation of files finished successfully or check that existing models can be instantiated again via the editor (for example: discover bugs in constraints). Test utils \u00b6 com.mbeddr.mpsutil.test.util The class ModelAsserter can be used to compare models inside a test case. When the two models don\u2019t match, it shows the difference between the models. Wait for \u00b6 com.mbeddr.mpsutil.blutil.test.waitfor This language contains a assert item wait for for tests, the waits for an expression to become true. If the condition evaluates to false, the check is repeated every m millisecond until the timeout of n milliseconds is reached. Both m and n can be set in the inspector of the statement. A use case for this statement could be a multithreaded code, where you have to wait for the result of a different thread: 1 2 3 4 5 6 7 8 9 10 boolean enoughTimeHasElapsed; ApplicationManager.getApplication().executeOnPooledThread({ => try { Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } enoughTimeHasElapsed = true; }); wait for enoughTimeHasElapsed;","title":"Testing"},{"location":"platform_essentials/mpsutils/testing/#testing","text":"","title":"Testing"},{"location":"platform_essentials/mpsutils/testing/#lantest","text":"This language isn\u2019t working anymore. com.mbeddr.mpsutil.lantest This language was an attempt to automatically test languages, for example, check if the generation of files finished successfully or check that existing models can be instantiated again via the editor (for example: discover bugs in constraints).","title":"Lantest"},{"location":"platform_essentials/mpsutils/testing/#test-utils","text":"com.mbeddr.mpsutil.test.util The class ModelAsserter can be used to compare models inside a test case. When the two models don\u2019t match, it shows the difference between the models.","title":"Test utils"},{"location":"platform_essentials/mpsutils/testing/#wait-for","text":"com.mbeddr.mpsutil.blutil.test.waitfor This language contains a assert item wait for for tests, the waits for an expression to become true. If the condition evaluates to false, the check is repeated every m millisecond until the timeout of n milliseconds is reached. Both m and n can be set in the inspector of the statement. A use case for this statement could be a multithreaded code, where you have to wait for the result of a different thread: 1 2 3 4 5 6 7 8 9 10 boolean enoughTimeHasElapsed; ApplicationManager.getApplication().executeOnPooledThread({ => try { Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } enoughTimeHasElapsed = true; }); wait for enoughTimeHasElapsed;","title":"Wait for"},{"location":"platform_essentials/mpsutils/tools/","text":"Tools \u00b6 Context actions \u00b6 com.mbeddr.mpsutil.contextactions There\u2019s a Context Actions (JetBrains) and Context Actions 2 (mbeddr) tool. Please use the one from JetBrains instead of this language. This language adds a tool with context-specific editor actions that can be navigated by mouse. For more information about the JetBrains implementation, visit the page Context acions tool | MPS Editing guide \u00b6 com.mbeddr.mpsutil.editingGuide This language allows creating interactive exercises for the end users that can be checked on the fly. An exercise contains a number of tasks and contain a reference to a following exercise. A single task contains a name, a description as well as the code block that should be shown in the exercise. The monitor function checks the completion status of the task. The variable program refers to the code section, the editorContext can be used, for example, to get the selected cell by calling editorContext.getSelectedCell() . The following objects can be returned: MonitorResultDone : the task was completed successfully, and the explanation is shown. MonitorResultError : the task was completed with an error. MonitorResultHint : the task was not completed successfully, and a hint is shown. The task can\u2019t be started by clicking the play button next to the name of a task. A new temporary model is created which contains the editable task. Favourites plugin \u00b6 com.mbeddr.mpsutil.favourites.plugin The favourites view is implemented using the language com.mbeddr.mpsutil.projectview from MPS -extensions . There\u2019s an action Add to Favourites to add a node to this view. The node can be removed by executing the action Remove from Favourites . Internally, the plugin is implemented using node annotations. Generated artifacts review \u00b6 com.mbeddr.mpsutil.genreview This language might not work correctly anymore. This tool can be used to view artifacts that where generated by a generator. It has a special color mapping for Java files. The button Highlight lines not linked should highlight the lines which aren\u2019t related to any node. When multiple original nodes can be traced to a certain file and line, the previous and next button can be used to navigate to these nodes. Graphstream \u00b6 com.mbeddr.mpsutil.graphstream This language adds support for GraphStream , a dynamic Java graph library. It can show a graph inside a tool called Graphing . Have a look at the language com.mbeddr.mpsutil.graphstream.example to see how a graph can be loaded. A concept has to implement the interface GraphingElement . When the current selected node implements the interface, a new menu View Graph appears in the editor context menu. The tool itself has support for history, zooming, fitting the view and rendering the graph as a GraphViz SVG. JUNG framework \u00b6 com.mbeddr.mpsutil.jung As an additional means of displaying relationships between nodes (next to PlantUML and the tree views) the JUNG framework was integrated displaying graph. As a language developer, you can implement an interface IJGraphProvider and implement a method that creates the graph: programmable with high-level API specify initial layout configurable node size, color, line style and color, fill color, shape and label configurable edge width, style, color and label configurable tooltip text for nodes and edges extensibility to plug in your own layouters (such as the one from yWorks) Once you have created a graph, your users have many options for viewing the graph in an MPS tool window: double-click selects node or edge in editor zoom and pan tooltips selectable layouts selection and highlighting of outgoing and incoming nodes and edges filtering based on node and edge type filtering along a continuous axis (for example, time) incremental, node-based collapsing and expansion The JUNG integration is available as part of mbeddr, but also as part of the mbeddr.platform, so you can use it for your own languages. Check out the Chunk node for an example of how to use it. A demo video of the viewer can be found here . To use it in your own language, implement the IJGraphProvider interface. Return a JNGraph from the getGraph() method. Check out the existing implementations, and in particular the DepGraphHelper (called from Chunk.getGraph()) to learn the details. In short, a graph is built in two steps: the first step actually adds the nodes and edges. The second step uses closures to style the graph. Examples can be seen from DepGraphHelper. PlantUML \u00b6 com.mbeddr.mpsutil.plantuml.node This provides an integration of PlantUML with MPS . Watch this old video to get an overview. To use it in your own languages, implement the IVisualizable interface in your language concept. Each concept can have several visualizations, called categories. The getCategories() method returns the list (just strings). The getVisualization() method then returns the actual visualization. It gets the user-requested category as an argument, as well as an empty VisGraph object. The getVisualization() method then has to fill the VisGraph with the actual visualization. This is done simply by using the add() method to build a native, textual PlantUML visualization. Check out the existing implementations of the interface to learn the deails; in particular, There\u2019s a helper method on VisGraph that creates a URL for users to click in the graph: createUrl(node) . Tool runner \u00b6 com.mbeddr.mpsutil.toolrunner.plugin This solution provides an extension point ToolsSanityCheckerProvider that allows registering instances of ToolsAvailabilityChecker This interface checks the availability of external tools and their proper configuration and can be called through ToolsInstallationSanityChecker.check . There\u2019s also a class ToolRunnerBase , a base class for running external tools. It supports running the tool with a progress indicator, a customizable timeout and reading the (error) output. Trace explorer \u00b6 com.mbeddr.mpsutil.traceExplorer This language contributes a new tool Trace Explorer than can show and navigate traces of a model e.g. from the interpreter. An example can be seen in the KernelF paper . The IETS3 tracing is explained on the interpreter page .","title":"Tools"},{"location":"platform_essentials/mpsutils/tools/#tools","text":"","title":"Tools"},{"location":"platform_essentials/mpsutils/tools/#context-actions","text":"com.mbeddr.mpsutil.contextactions There\u2019s a Context Actions (JetBrains) and Context Actions 2 (mbeddr) tool. Please use the one from JetBrains instead of this language. This language adds a tool with context-specific editor actions that can be navigated by mouse. For more information about the JetBrains implementation, visit the page Context acions tool | MPS","title":"Context actions"},{"location":"platform_essentials/mpsutils/tools/#editing-guide","text":"com.mbeddr.mpsutil.editingGuide This language allows creating interactive exercises for the end users that can be checked on the fly. An exercise contains a number of tasks and contain a reference to a following exercise. A single task contains a name, a description as well as the code block that should be shown in the exercise. The monitor function checks the completion status of the task. The variable program refers to the code section, the editorContext can be used, for example, to get the selected cell by calling editorContext.getSelectedCell() . The following objects can be returned: MonitorResultDone : the task was completed successfully, and the explanation is shown. MonitorResultError : the task was completed with an error. MonitorResultHint : the task was not completed successfully, and a hint is shown. The task can\u2019t be started by clicking the play button next to the name of a task. A new temporary model is created which contains the editable task.","title":"Editing guide"},{"location":"platform_essentials/mpsutils/tools/#favourites-plugin","text":"com.mbeddr.mpsutil.favourites.plugin The favourites view is implemented using the language com.mbeddr.mpsutil.projectview from MPS -extensions . There\u2019s an action Add to Favourites to add a node to this view. The node can be removed by executing the action Remove from Favourites . Internally, the plugin is implemented using node annotations.","title":"Favourites plugin"},{"location":"platform_essentials/mpsutils/tools/#generated-artifacts-review","text":"com.mbeddr.mpsutil.genreview This language might not work correctly anymore. This tool can be used to view artifacts that where generated by a generator. It has a special color mapping for Java files. The button Highlight lines not linked should highlight the lines which aren\u2019t related to any node. When multiple original nodes can be traced to a certain file and line, the previous and next button can be used to navigate to these nodes.","title":"Generated artifacts review"},{"location":"platform_essentials/mpsutils/tools/#graphstream","text":"com.mbeddr.mpsutil.graphstream This language adds support for GraphStream , a dynamic Java graph library. It can show a graph inside a tool called Graphing . Have a look at the language com.mbeddr.mpsutil.graphstream.example to see how a graph can be loaded. A concept has to implement the interface GraphingElement . When the current selected node implements the interface, a new menu View Graph appears in the editor context menu. The tool itself has support for history, zooming, fitting the view and rendering the graph as a GraphViz SVG.","title":"Graphstream"},{"location":"platform_essentials/mpsutils/tools/#jung-framework","text":"com.mbeddr.mpsutil.jung As an additional means of displaying relationships between nodes (next to PlantUML and the tree views) the JUNG framework was integrated displaying graph. As a language developer, you can implement an interface IJGraphProvider and implement a method that creates the graph: programmable with high-level API specify initial layout configurable node size, color, line style and color, fill color, shape and label configurable edge width, style, color and label configurable tooltip text for nodes and edges extensibility to plug in your own layouters (such as the one from yWorks) Once you have created a graph, your users have many options for viewing the graph in an MPS tool window: double-click selects node or edge in editor zoom and pan tooltips selectable layouts selection and highlighting of outgoing and incoming nodes and edges filtering based on node and edge type filtering along a continuous axis (for example, time) incremental, node-based collapsing and expansion The JUNG integration is available as part of mbeddr, but also as part of the mbeddr.platform, so you can use it for your own languages. Check out the Chunk node for an example of how to use it. A demo video of the viewer can be found here . To use it in your own language, implement the IJGraphProvider interface. Return a JNGraph from the getGraph() method. Check out the existing implementations, and in particular the DepGraphHelper (called from Chunk.getGraph()) to learn the details. In short, a graph is built in two steps: the first step actually adds the nodes and edges. The second step uses closures to style the graph. Examples can be seen from DepGraphHelper.","title":"JUNG framework"},{"location":"platform_essentials/mpsutils/tools/#plantuml","text":"com.mbeddr.mpsutil.plantuml.node This provides an integration of PlantUML with MPS . Watch this old video to get an overview. To use it in your own languages, implement the IVisualizable interface in your language concept. Each concept can have several visualizations, called categories. The getCategories() method returns the list (just strings). The getVisualization() method then returns the actual visualization. It gets the user-requested category as an argument, as well as an empty VisGraph object. The getVisualization() method then has to fill the VisGraph with the actual visualization. This is done simply by using the add() method to build a native, textual PlantUML visualization. Check out the existing implementations of the interface to learn the deails; in particular, There\u2019s a helper method on VisGraph that creates a URL for users to click in the graph: createUrl(node) .","title":"PlantUML"},{"location":"platform_essentials/mpsutils/tools/#tool-runner","text":"com.mbeddr.mpsutil.toolrunner.plugin This solution provides an extension point ToolsSanityCheckerProvider that allows registering instances of ToolsAvailabilityChecker This interface checks the availability of external tools and their proper configuration and can be called through ToolsInstallationSanityChecker.check . There\u2019s also a class ToolRunnerBase , a base class for running external tools. It supports running the tool with a progress indicator, a customizable timeout and reading the (error) output.","title":"Tool runner"},{"location":"platform_essentials/mpsutils/tools/#trace-explorer","text":"com.mbeddr.mpsutil.traceExplorer This language contributes a new tool Trace Explorer than can show and navigate traces of a model e.g. from the interpreter. An example can be seen in the KernelF paper . The IETS3 tracing is explained on the interpreter page .","title":"Trace explorer"},{"location":"platform_essentials/mpsutils/ui/","text":"UI \u00b6 Cells \u00b6 AsyncCell \u00b6 The async cell allows displaying a text based loading indicator as long as the return string is null. Create a new $custom cell$ editor cell and return a new AsyncCellProvider: 1 2 3 4 5 6 return new AsyncCellProvider ( node , { => string value = calculateValue (); // calculate or query your value here if ( value . isEmpty ) { return null ; } Style style = editorContext . ? getContextCell (). ? getStyle (); return new AsyncCellValue ( value , style ); }); FrameCell \u00b6 com.mbeddr.mpsutil.framecell frame is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes: frame-color : the color of the frame (default: black) frame-width : the thickness of the frame (default: 1 pixel) frame-padding : the space between the containting cell and the frame (default: 3 pixel) An example can be seen in the documentation language: In most cases, the language de.itemis.mps.editor.celllayout from MPS -extensions can also be used for customizing the border and margins around a cell. Its documentation can be found here . Margin cell / review \u00b6 com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review Margin cells are editor cells that are shown beyond the right editor margin, a little bit like comments in Word. In fact, the ReviewNote cell implements exactly Word\u2019s comment facility as an example of the margin cell. Here is a screenshot: To use the review notes, just include the respective language; intentions are available to attach review notes to editor cells. To put your own cells into the right margin, your cell must implement the IMarginCellContent interface. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. You also have to have the actual margin cell on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation for this. Hence, margin comments can essentially be added to every model, without the model\u2019s language being aware of it. Placeholder text list \u00b6 com.mbeddr.mpsutil.placeholderTextList This language adds a new cell model that supports multiple aggregation with a custom placeholder text. The placeholder can be specified in the inspector by creating a query function for the placeholder text . Diagrams \u00b6 Concept diagram \u00b6 com.mbeddr.mpsutil.conceptdiagram Create a new root node of type ConceptDiagram . The editor should now contain an empty editor. Nodes can be dragged from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section. Dependencies diagram \u00b6 com.mbeddr.mpsutil.dependenciesdiagram This language contains a concept DependenciesDiagram Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules will be automatically added. The dependencies is visualized by the line between the two boxes, and its label is named after the scope of the dependency (e.g. uses if the language is imported). Date picker \u00b6 com.mbeddr.mpsutil.datepicker A classic widget to select a date from a pop-up calendar. There\u2019s a known issue where the datepicker doesn\u2019t work when the theme is set to macOS light. This is only the control, i.e. the developer is responsible for synchronizing the control with the source of the shown date. We provide hooks executed before showing the calendar, for determining whether a date is valid, and to process a selected date. Editor utils \u00b6 com.mbeddr.mpsutil.editor.utils The class EditorRuntimeUtil contains a few helpful editor utility methods: getErrorText(EditorContext) : returns the error text of the current selected cell in the editor collectAllOpenEditors(Project) : returns all opened MPS editors collectAllOpenEditorComponents(Project) : return all opened editor components File picker \u00b6 com.mbeddr.mpsutil.filepicker This language contains text-based file and folder pickers. The paths can be directly entered in the editor. There\u2019s also an intention Open File Chooser Dialog that shows a file chooser dialog. The following file pickers are supported: file system dir picker file system file picker macro file picker macro folder picker solution relative dir picker solution relative file picker The macro pickers can contain path variables . Hyperlink \u00b6 com.mbeddr.mpsutil.hyperlink Hyperlink cells can be used for references in MPS . In contrast to normal reference cells they automatically become blue and underlined if the mouse hovers over them (no Ctrl is necessary). The following style attributes are supported: hyperlink-reference : make a reference a hyperlink hyperlink-handler : a function that\u2019s called when the link is clicked. The util parameter object contains a method openInBrowser for opening an URL with the default web browser. hyperlink-style : can be URl or reference. The reference style forces the use of ctrl to activate the hyperlink. hyperlink-node : the node that should be displayed after the link was clicked hyperlink-focus : focus the target node of the hyperlink after navigating to it. hyperlink-select : select the target node of the hyperlink after navigating to it. JFreeChart \u00b6 com.mbeddr.mpsutil.jfreechart This module contains stubs for the jfreechart library. The charts can be viewed in an extra tool Chart by calling the following code: 1 ChartManager . getInstance ( editorContext ). setChart ( node . createChart ()) where createChart return instance of JFreeChart . Target chooser \u00b6 com.mbeddr.mpsutil.targetchooser The target chooser language provides a modal dialog for choosing nodes based on a predefined scope: Example code: 1 2 3 4 5 6 TargetChooserOptions options = new TargetChooserOptions (); project . getModelAccess (). runReadAction ({ => options . setScope ( new arraylist < node <>> { node / TargetChooser / , node / TargetChooserDialog / , node / DefaultModuleScope / }); }); TargetChooser chooser = new TargetChooser ( ProjectHelper . toIdeaProject ( project ), options ); TargetChooserDialog . chooseTarget ( # project , options ) The options object has the following setters: setInitial : set the initial selected item. This can be a node or a model. setSelectionValidator : the selection validator checks if the selected target is valid or shows an error message when it\u2019s invalid. By default, no validation takes places (an empty validator is used). setSNodeFilter : this filter decides which nodes should be visible in the dialog (within the selected scope). To show a node, you also have to return true for the root node, but not for all ancestors. setModuleScope : this scope defines the available modules that will be the sources for the nodes that will be displayed. addModuleFilter : an additional boolean filter for the modules of the module scope. showModulesPool : a flag that decides if the modules pool (last entry in logical view) should also be displayed in the dialog. setModelFilter : only keep the models of the specified scope where the filter returns true setScope : sets the scope for the items that should be displayed in the dialog. This can be in instance of TargetChooserScope or a sequence of nodes (+ ancestor filter). By default, the specified modules scope with the specified model and node filers applied is used. User styles \u00b6 com.mbeddr.mpsutil.userstyles This language provides a new annotation @userConfigurable , that can be added to a style class in a style sheet (intention: Make User Configurable ). After defining a name, the user can change the style in the preferences ( Preferences \u2192 Editor \u2192 Color Scheme \u2192 Code ). The following style-class items are supported: Foreground : equivalent to text-foreground-color Background : equivalent to text-background-color Bold : equivalent to font-style: bold Italic : equivalent to *font-style: italic Effects: Dotted lines, bold underscored, underscored, underwaved : equivalent to underlined Effects: strikeout : equivalent to strike-out Further useful links for developers: Export IntelliJ editor themes as plugin | JetBrains blog UI Themes \u2014 Editor Schemes and Background Images | IntelliJ Platform Plugin SDK","title":"Ui"},{"location":"platform_essentials/mpsutils/ui/#ui","text":"","title":"UI"},{"location":"platform_essentials/mpsutils/ui/#cells","text":"","title":"Cells"},{"location":"platform_essentials/mpsutils/ui/#asynccell","text":"The async cell allows displaying a text based loading indicator as long as the return string is null. Create a new $custom cell$ editor cell and return a new AsyncCellProvider: 1 2 3 4 5 6 return new AsyncCellProvider ( node , { => string value = calculateValue (); // calculate or query your value here if ( value . isEmpty ) { return null ; } Style style = editorContext . ? getContextCell (). ? getStyle (); return new AsyncCellValue ( value , style ); });","title":"AsyncCell"},{"location":"platform_essentials/mpsutils/ui/#framecell","text":"com.mbeddr.mpsutil.framecell frame is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes: frame-color : the color of the frame (default: black) frame-width : the thickness of the frame (default: 1 pixel) frame-padding : the space between the containting cell and the frame (default: 3 pixel) An example can be seen in the documentation language: In most cases, the language de.itemis.mps.editor.celllayout from MPS -extensions can also be used for customizing the border and margins around a cell. Its documentation can be found here .","title":"FrameCell"},{"location":"platform_essentials/mpsutils/ui/#margin-cell-review","text":"com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review Margin cells are editor cells that are shown beyond the right editor margin, a little bit like comments in Word. In fact, the ReviewNote cell implements exactly Word\u2019s comment facility as an example of the margin cell. Here is a screenshot: To use the review notes, just include the respective language; intentions are available to attach review notes to editor cells. To put your own cells into the right margin, your cell must implement the IMarginCellContent interface. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. You also have to have the actual margin cell on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation for this. Hence, margin comments can essentially be added to every model, without the model\u2019s language being aware of it.","title":"Margin cell / review"},{"location":"platform_essentials/mpsutils/ui/#placeholder-text-list","text":"com.mbeddr.mpsutil.placeholderTextList This language adds a new cell model that supports multiple aggregation with a custom placeholder text. The placeholder can be specified in the inspector by creating a query function for the placeholder text .","title":"Placeholder text list"},{"location":"platform_essentials/mpsutils/ui/#diagrams","text":"","title":"Diagrams"},{"location":"platform_essentials/mpsutils/ui/#concept-diagram","text":"com.mbeddr.mpsutil.conceptdiagram Create a new root node of type ConceptDiagram . The editor should now contain an empty editor. Nodes can be dragged from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section.","title":"Concept diagram"},{"location":"platform_essentials/mpsutils/ui/#dependencies-diagram","text":"com.mbeddr.mpsutil.dependenciesdiagram This language contains a concept DependenciesDiagram Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules will be automatically added. The dependencies is visualized by the line between the two boxes, and its label is named after the scope of the dependency (e.g. uses if the language is imported).","title":"Dependencies diagram"},{"location":"platform_essentials/mpsutils/ui/#date-picker","text":"com.mbeddr.mpsutil.datepicker A classic widget to select a date from a pop-up calendar. There\u2019s a known issue where the datepicker doesn\u2019t work when the theme is set to macOS light. This is only the control, i.e. the developer is responsible for synchronizing the control with the source of the shown date. We provide hooks executed before showing the calendar, for determining whether a date is valid, and to process a selected date.","title":"Date picker"},{"location":"platform_essentials/mpsutils/ui/#editor-utils","text":"com.mbeddr.mpsutil.editor.utils The class EditorRuntimeUtil contains a few helpful editor utility methods: getErrorText(EditorContext) : returns the error text of the current selected cell in the editor collectAllOpenEditors(Project) : returns all opened MPS editors collectAllOpenEditorComponents(Project) : return all opened editor components","title":"Editor utils"},{"location":"platform_essentials/mpsutils/ui/#file-picker","text":"com.mbeddr.mpsutil.filepicker This language contains text-based file and folder pickers. The paths can be directly entered in the editor. There\u2019s also an intention Open File Chooser Dialog that shows a file chooser dialog. The following file pickers are supported: file system dir picker file system file picker macro file picker macro folder picker solution relative dir picker solution relative file picker The macro pickers can contain path variables .","title":"File picker"},{"location":"platform_essentials/mpsutils/ui/#hyperlink","text":"com.mbeddr.mpsutil.hyperlink Hyperlink cells can be used for references in MPS . In contrast to normal reference cells they automatically become blue and underlined if the mouse hovers over them (no Ctrl is necessary). The following style attributes are supported: hyperlink-reference : make a reference a hyperlink hyperlink-handler : a function that\u2019s called when the link is clicked. The util parameter object contains a method openInBrowser for opening an URL with the default web browser. hyperlink-style : can be URl or reference. The reference style forces the use of ctrl to activate the hyperlink. hyperlink-node : the node that should be displayed after the link was clicked hyperlink-focus : focus the target node of the hyperlink after navigating to it. hyperlink-select : select the target node of the hyperlink after navigating to it.","title":"Hyperlink"},{"location":"platform_essentials/mpsutils/ui/#jfreechart","text":"com.mbeddr.mpsutil.jfreechart This module contains stubs for the jfreechart library. The charts can be viewed in an extra tool Chart by calling the following code: 1 ChartManager . getInstance ( editorContext ). setChart ( node . createChart ()) where createChart return instance of JFreeChart .","title":"JFreeChart"},{"location":"platform_essentials/mpsutils/ui/#target-chooser","text":"com.mbeddr.mpsutil.targetchooser The target chooser language provides a modal dialog for choosing nodes based on a predefined scope: Example code: 1 2 3 4 5 6 TargetChooserOptions options = new TargetChooserOptions (); project . getModelAccess (). runReadAction ({ => options . setScope ( new arraylist < node <>> { node / TargetChooser / , node / TargetChooserDialog / , node / DefaultModuleScope / }); }); TargetChooser chooser = new TargetChooser ( ProjectHelper . toIdeaProject ( project ), options ); TargetChooserDialog . chooseTarget ( # project , options ) The options object has the following setters: setInitial : set the initial selected item. This can be a node or a model. setSelectionValidator : the selection validator checks if the selected target is valid or shows an error message when it\u2019s invalid. By default, no validation takes places (an empty validator is used). setSNodeFilter : this filter decides which nodes should be visible in the dialog (within the selected scope). To show a node, you also have to return true for the root node, but not for all ancestors. setModuleScope : this scope defines the available modules that will be the sources for the nodes that will be displayed. addModuleFilter : an additional boolean filter for the modules of the module scope. showModulesPool : a flag that decides if the modules pool (last entry in logical view) should also be displayed in the dialog. setModelFilter : only keep the models of the specified scope where the filter returns true setScope : sets the scope for the items that should be displayed in the dialog. This can be in instance of TargetChooserScope or a sequence of nodes (+ ancestor filter). By default, the specified modules scope with the specified model and node filers applied is used.","title":"Target chooser"},{"location":"platform_essentials/mpsutils/ui/#user-styles","text":"com.mbeddr.mpsutil.userstyles This language provides a new annotation @userConfigurable , that can be added to a style class in a style sheet (intention: Make User Configurable ). After defining a name, the user can change the style in the preferences ( Preferences \u2192 Editor \u2192 Color Scheme \u2192 Code ). The following style-class items are supported: Foreground : equivalent to text-foreground-color Background : equivalent to text-background-color Bold : equivalent to font-style: bold Italic : equivalent to *font-style: italic Effects: Dotted lines, bold underscored, underscored, underwaved : equivalent to underlined Effects: strikeout : equivalent to strike-out Further useful links for developers: Export IntelliJ editor themes as plugin | JetBrains blog UI Themes \u2014 Editor Schemes and Background Images | IntelliJ Platform Plugin SDK","title":"User styles"},{"location":"platform_essentials/mpsutils/ui/cells/","text":"Cells \u00b6 AsyncCell \u00b6 The async cell allows displaying a text based loading indicator as long as the return string is null. Create a new $custom cell$ editor cell and return a new AsyncCellProvider: 1 2 3 4 5 6 return new AsyncCellProvider ( node , { => string value = calculateValue (); // calculate or query your value here if ( value . isEmpty ) { return null ; } Style style = editorContext . ? getContextCell (). ? getStyle (); return new AsyncCellValue ( value , style ); }); FrameCell \u00b6 com.mbeddr.mpsutil.framecell frame is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes: frame-color : the color of the frame (default: black) frame-width : the thickness of the frame (default: 1 pixel) frame-padding : the space between the containting cell and the frame (default: 3 pixel) An example can be seen in the documentation language: In most cases, the language de.itemis.mps.editor.celllayout from MPS -extensions can also be used for customizing the border and margins around a cell. Its documentation can be found here . Margin cell / review \u00b6 com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review Margin cells are editor cells that are shown beyond the right editor margin, a little bit like comments in Word. In fact, the ReviewNote cell implements exactly Word\u2019s comment facility as an example of the margin cell. Here is a screenshot: To use the review notes, just include the respective language; intentions are available to attach review notes to editor cells. To put your own cells into the right margin, your cell must implement the IMarginCellContent interface. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. You also have to have the actual margin cell on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation for this. Hence, margin comments can essentially be added to every model, without the model\u2019s language being aware of it. Placeholder text list \u00b6 com.mbeddr.mpsutil.placeholderTextList This language adds a new cell model that supports multiple aggregation with a custom placeholder text. The placeholder can be specified in the inspector by creating a query function for the placeholder text .","title":"Cells"},{"location":"platform_essentials/mpsutils/ui/cells/#cells","text":"","title":"Cells"},{"location":"platform_essentials/mpsutils/ui/cells/#asynccell","text":"The async cell allows displaying a text based loading indicator as long as the return string is null. Create a new $custom cell$ editor cell and return a new AsyncCellProvider: 1 2 3 4 5 6 return new AsyncCellProvider ( node , { => string value = calculateValue (); // calculate or query your value here if ( value . isEmpty ) { return null ; } Style style = editorContext . ? getContextCell (). ? getStyle (); return new AsyncCellValue ( value , style ); });","title":"AsyncCell"},{"location":"platform_essentials/mpsutils/ui/cells/#framecell","text":"com.mbeddr.mpsutil.framecell frame is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes: frame-color : the color of the frame (default: black) frame-width : the thickness of the frame (default: 1 pixel) frame-padding : the space between the containting cell and the frame (default: 3 pixel) An example can be seen in the documentation language: In most cases, the language de.itemis.mps.editor.celllayout from MPS -extensions can also be used for customizing the border and margins around a cell. Its documentation can be found here .","title":"FrameCell"},{"location":"platform_essentials/mpsutils/ui/cells/#margin-cell-review","text":"com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review Margin cells are editor cells that are shown beyond the right editor margin, a little bit like comments in Word. In fact, the ReviewNote cell implements exactly Word\u2019s comment facility as an example of the margin cell. Here is a screenshot: To use the review notes, just include the respective language; intentions are available to attach review notes to editor cells. To put your own cells into the right margin, your cell must implement the IMarginCellContent interface. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. You also have to have the actual margin cell on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation for this. Hence, margin comments can essentially be added to every model, without the model\u2019s language being aware of it.","title":"Margin cell / review"},{"location":"platform_essentials/mpsutils/ui/cells/#placeholder-text-list","text":"com.mbeddr.mpsutil.placeholderTextList This language adds a new cell model that supports multiple aggregation with a custom placeholder text. The placeholder can be specified in the inspector by creating a query function for the placeholder text .","title":"Placeholder text list"},{"location":"platform_essentials/mpsutils/ui/diagrams/","text":"Diagrams \u00b6 Concept diagram \u00b6 com.mbeddr.mpsutil.conceptdiagram Create a new root node of type ConceptDiagram . The editor should now contain an empty editor. Nodes can be dragged from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section. Dependencies diagram \u00b6 com.mbeddr.mpsutil.dependenciesdiagram This language contains a concept DependenciesDiagram Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules will be automatically added. The dependencies is visualized by the line between the two boxes, and its label is named after the scope of the dependency (e.g. uses if the language is imported).","title":"Diagrams"},{"location":"platform_essentials/mpsutils/ui/diagrams/#diagrams","text":"","title":"Diagrams"},{"location":"platform_essentials/mpsutils/ui/diagrams/#concept-diagram","text":"com.mbeddr.mpsutil.conceptdiagram Create a new root node of type ConceptDiagram . The editor should now contain an empty editor. Nodes can be dragged from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section.","title":"Concept diagram"},{"location":"platform_essentials/mpsutils/ui/diagrams/#dependencies-diagram","text":"com.mbeddr.mpsutil.dependenciesdiagram This language contains a concept DependenciesDiagram Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules will be automatically added. The dependencies is visualized by the line between the two boxes, and its label is named after the scope of the dependency (e.g. uses if the language is imported).","title":"Dependencies diagram"},{"location":"reference/abbreviations/","text":"Abbreviations \u00b6 AI : Artificial Intelligence AST : Abstract Syntax Tree BaseLanguage : a projectional clone of Java 6 (with optional extensions for Java 7 and 8) COW : Copy On Write DOM : Document Object Model DSL : Domain Specific Language EDT : Event Dispatch Thread EP : Extension Point ES : External System FBI : File Based Index FJ : ForkJoin GP : Generation Plan HTTP : Hypertext Transfer Protocol IDE : Integrated Development Environment IETS3 : Integrated Specification Environment for the Specification of Technical Software Systems JAR : Java Archive JBR : JetBrains Runtime JCEF : Java Chromium Embedded Framework JDK : Java Development Kit JPS : JetBrains Project System JRE : Java Runtime Environment JVM : Java Virtual Machine LSP : Language Server Protocol LVCS : Local History LaF : Look and Feel M2M : Model to Model M2T : Model to Text MDD : Model Driven Development MDSD : Model Driven Software Development MPS : Meta Programming System NDA : Non Disclosure Agreement NPE : NullPointerException OS : Open Source PR : Pull Request or Public Relations PSI : Program Structure Interface PSI : Program Structure Interface RCP : Rich Client Platform RC : Run Configuration REST : Representational State Transfer SNode : Semantic Node SRepository : Semantic Repository SSH : Secure Shell SSR : Structural Search and Replace TMC : Template Mapping Configuration UAST : Unified Abstract Syntax Tree UI : User Interface UML : Unified Markup Language UUID : Universally Unique Identifier UX : User Experience VCS : Version Control System VFS : Virtual File System VF : Virtual File","title":"Abbreviations"},{"location":"reference/abbreviations/#abbreviations","text":"AI : Artificial Intelligence AST : Abstract Syntax Tree BaseLanguage : a projectional clone of Java 6 (with optional extensions for Java 7 and 8) COW : Copy On Write DOM : Document Object Model DSL : Domain Specific Language EDT : Event Dispatch Thread EP : Extension Point ES : External System FBI : File Based Index FJ : ForkJoin GP : Generation Plan HTTP : Hypertext Transfer Protocol IDE : Integrated Development Environment IETS3 : Integrated Specification Environment for the Specification of Technical Software Systems JAR : Java Archive JBR : JetBrains Runtime JCEF : Java Chromium Embedded Framework JDK : Java Development Kit JPS : JetBrains Project System JRE : Java Runtime Environment JVM : Java Virtual Machine LSP : Language Server Protocol LVCS : Local History LaF : Look and Feel M2M : Model to Model M2T : Model to Text MDD : Model Driven Development MDSD : Model Driven Software Development MPS : Meta Programming System NDA : Non Disclosure Agreement NPE : NullPointerException OS : Open Source PR : Pull Request or Public Relations PSI : Program Structure Interface PSI : Program Structure Interface RCP : Rich Client Platform RC : Run Configuration REST : Representational State Transfer SNode : Semantic Node SRepository : Semantic Repository SSH : Secure Shell SSR : Structural Search and Replace TMC : Template Mapping Configuration UAST : Unified Abstract Syntax Tree UI : User Interface UML : Unified Markup Language UUID : Universally Unique Identifier UX : User Experience VCS : Version Control System VFS : Virtual File System VF : Virtual File","title":"Abbreviations"},{"location":"reference/actions/","text":"CommonDataKeys \u00b6 name description Available in MPS CARET Returns a caret instance (in host or injected editor, depending on context). EDITOR Returns the currently focused editor instance. EDITOR_EVEN_IF_INACTIVE Returns an editor even if focus currently is in find bar. EDITOR_VIRTUAL_SPACE Returns whether the current location relates to a virtual space in an editor. HOST_EDITOR Returns a reference to host an editor instance, in case EDITOR key is referring to an injected editor. NAVIGATABLE Returns a Navigatable instance. NAVIGATABLE_ARRAY Returns several navigatables, e.g. PROJECT Returns a project if a project node is selected (in project view) PSI_ELEMENT Returns a PsiElement instance. PSI_FILE Returns the currently selected PsiFile instance. VIRTUAL_FILE Returns a VirtualFile instance. VIRTUAL_FILE_ARRAY Returns several VirtualFile instances PlatformDataKeys \u00b6 name description Available in MPS ACTIONS_SORTER Deprecated. use ActionPromoter CONTENT_MANAGER Returns the managing class that\u2019s responsible for the current component\u2019s content CONTEXT_COMPONENT Returns the component that\u2019s currently in focus. CONTEXT_MENU_POINT Returns a point to guess where to show context menu invoked by key. COPY_PROVIDER Returns the copy provider responsible for copying data. CUT_PROVIDER Returns the cut provider responsible for cutting data. DELETE_ELEMENT_PROVIDER DOMINANT_HINT_AREA_RECTANGLE Returns the position and dimension of a hint. EXPORTER_TO_TEXT_FILE FILE_EDITOR Returns the file FILE_TEXT Returns the text of currently selected file/file revision HELP_ID Returns help id . IS_MODAL_CONTEXT Returns Boolean. TRUE if action is executed in modal context and Boolean. FALSE if action is executed not in modal context. MODALITY_STATE See: Modality and invokeLater() - IntelliJ Platform Plugin SDK NONEMPTY_CONTENT_MANAGER Returns a non empty managing class that\u2019s responsible for the current component\u2019s content PASTE_PROVIDER Returns the paste provider responsible for pasting data. PREDEFINED_TEXT Returns a predefined text value. PROJECT_CONTEXT Returns a project if a project node is selected (in theproject view). PROJECT_FILE_DIRECTORY SEARCH_INPUT_TEXT SELECTED_ITEM Returns a single selection item. SELECTED_ITEMS Returns multi selection items. SOURCE_NAVIGATION_LOCKED SPEED_SEARCH_COMPONENT Returns the speed search component STATUS_BAR Returns the status bar class TOOL_WINDOW Returns the current tool window TREE_EXPANDER UI_DISPOSABLE Returns the class responsible for disposing an UI component","title":"Actions"},{"location":"reference/actions/#commondatakeys","text":"name description Available in MPS CARET Returns a caret instance (in host or injected editor, depending on context). EDITOR Returns the currently focused editor instance. EDITOR_EVEN_IF_INACTIVE Returns an editor even if focus currently is in find bar. EDITOR_VIRTUAL_SPACE Returns whether the current location relates to a virtual space in an editor. HOST_EDITOR Returns a reference to host an editor instance, in case EDITOR key is referring to an injected editor. NAVIGATABLE Returns a Navigatable instance. NAVIGATABLE_ARRAY Returns several navigatables, e.g. PROJECT Returns a project if a project node is selected (in project view) PSI_ELEMENT Returns a PsiElement instance. PSI_FILE Returns the currently selected PsiFile instance. VIRTUAL_FILE Returns a VirtualFile instance. VIRTUAL_FILE_ARRAY Returns several VirtualFile instances","title":"CommonDataKeys"},{"location":"reference/actions/#platformdatakeys","text":"name description Available in MPS ACTIONS_SORTER Deprecated. use ActionPromoter CONTENT_MANAGER Returns the managing class that\u2019s responsible for the current component\u2019s content CONTEXT_COMPONENT Returns the component that\u2019s currently in focus. CONTEXT_MENU_POINT Returns a point to guess where to show context menu invoked by key. COPY_PROVIDER Returns the copy provider responsible for copying data. CUT_PROVIDER Returns the cut provider responsible for cutting data. DELETE_ELEMENT_PROVIDER DOMINANT_HINT_AREA_RECTANGLE Returns the position and dimension of a hint. EXPORTER_TO_TEXT_FILE FILE_EDITOR Returns the file FILE_TEXT Returns the text of currently selected file/file revision HELP_ID Returns help id . IS_MODAL_CONTEXT Returns Boolean. TRUE if action is executed in modal context and Boolean. FALSE if action is executed not in modal context. MODALITY_STATE See: Modality and invokeLater() - IntelliJ Platform Plugin SDK NONEMPTY_CONTENT_MANAGER Returns a non empty managing class that\u2019s responsible for the current component\u2019s content PASTE_PROVIDER Returns the paste provider responsible for pasting data. PREDEFINED_TEXT Returns a predefined text value. PROJECT_CONTEXT Returns a project if a project node is selected (in theproject view). PROJECT_FILE_DIRECTORY SEARCH_INPUT_TEXT SELECTED_ITEM Returns a single selection item. SELECTED_ITEMS Returns multi selection items. SOURCE_NAVIGATION_LOCKED SPEED_SEARCH_COMPONENT Returns the speed search component STATUS_BAR Returns the status bar class TOOL_WINDOW Returns the current tool window TREE_EXPANDER UI_DISPOSABLE Returns the class responsible for disposing an UI component","title":"PlatformDataKeys"},{"location":"reference/code_abbreviations/","text":"Code abbreviations \u00b6 abs : absolute acc : accumulator acd : abstract concept declaration act : actual ad : aspect descriptor addr : address agg : aggregation am : abstract module anc : ancestor anno : annotation app : application arch : architecture arg : argument arr : array art : artifact ass : assessment ast : abstract syntax tree attr : attribute aux : auxiliary avg : average bais : byte array input stream baos : byte array output stream bb : byte buffer bc : build configuration bd : big decimal bg : background or button group bhvr : behavior bim : buffered image bis : buffered input stream bl : baselanguage/baseline bos : byte array output stream bp : breakpoint or binary persistence br : buffered reader/break bt : base type btn : button buff : buffer ca : concept argument cat : category cc : class concept cd : concept declaration ced : concept editor declaration cfg : configuration ch : character ci : config item cl : classloader clm : classloader manager cls : class cmd : command cme : cross model environment cmp : compare cn : context node cncpt : concept cnt : count col : column coll : collection comp : component cond : condition conn : connection cons : constructor const : constant cp : check point (state) or copy or current process cpb : concept presentation builder cr : concept reference/registry cs : change set or collection sequence ct : classifier/current type ctx : context curr : current dbgr : debugger dcl : declaration decl : declaration def : definition dep : dependency descr : description df : decimal format di : debug info diff : difference dim : dimension dir : directory div : division dk : delta key or devkit doc : documentation dr : dynamic reference ds : data source dsm : default semantic model dst : destination dx : difference x dy : difference y ec : editor component ec : editor context ecf : editor cell factory ed : enumeration declaration or extension descriptor eg : engaged generator el : element env : environment eof : end of file ep : else part or element provider or extension point eq : equal or equation err : error et : element type evt : event ex : exception or executor exe : executable expr : expression ext : extension fc : file chooser or first child fct : facet fdc : file delta collector fmt : format fp : file processor fqn : full qualified name fr : file reader frac : fraction freq : frequence fsm : file status manager ft : float type or file tracker fun : function fw : file writer gd : graphics device or generator descriptor ge : graphics environment or greater equals gms : generator module scanner or model generation status manager gp : generation plan/partitioner gr : generator gtf : generation target facet gvd : global variable declaration hm : hashmap horz : horizontal href : hyper-reference hs : hashset hsb : hue/saturation/brightness id : identification idx : index img : image imp : import impl : implementation inc : increase info : information inst : instance intf : interface intfc : interface concept ir : icon resource isr : input stream reader iter : iterator jc : Java compiler jmf : Java module facet km : keymap kv : key value kwd : keyword la : line annotation lang : language lca : lowest common ancestor lcv : lower case value ld : link declaration/descriptor le : less equals len : length lf : line feed lhs : left hand side lib : library lnk : link loc : location lr : language registry/runtime ls : list of strings ls : list sequence lt : left type lvd : local variable declaration lvl : level ma : model access mah : model access helper max : maximum mc : mapping configuration md : model mdm : model dependencies manager mdr : model dependency resolver mem : member meth : method mf : manifest mf : model factory mg : models generator mgr : manager mgsm : module generation status manager mi : model imports or internal model min : minimum mis : model input stream ml : module loader mm : modules miner mn : model name mo : module options mod : modulus mos : model output stream mp : model persistence mr : model/module reference or model root or model/module repository mrd : model root descriptor mrf : module repository facade msg : message mul : multiplication mv : module dependency versions nb : node builder nbn : node builder node nc : named concept ne : not equals/expresison nl : new line or number literal nm : nodes matcher np : null pointer or node pointer ns : name source/space nuli : number literal num : number nut : node under test obj : object ois : object input stream oos : object output stream op : operation or operator opt : option or optional orig : origin os : operation system pa : property attribute pb : popup builder pd : parameter declaration or property descriptor pf : persistence facade ph : phase pkg : package pm : project manager pma : project model access pol : polygon pos : position pp : project pane pq : priority queue prev : previous proc : process prog : program proj : project prop : property psc : package scope control pt : primitive type or pointer type or performance tracer pw : print writer px : pixel or position x py : position y ra : read action rc : rule consequence rd : reference descriptor rec : rectangle or record ref : reference rel : relative repo : repository req : requirement res : result ret : return rgb : red/blue/green rhs : right hand side rl : reference link rm : remove or root model rnd : random rt : right type or runtime or result type or result tpype rv : result value sa : style attribute sb : string builder/buffer sc : script sca : smart completion action scb : script builder scs : subconcepts sd : solution descriptor sdk : software development kit sdmd : semantic model model descriptor sec : section sel : selector/selection sep : separator seq : sequence sess : session sfr : static field reference si : substitute info sl : selection or statement list sln : solution sm : semantic model or state machine smc : static method call sn : semantic node snt : snode type sol : solver sp : settings provider spec : specification sqrt : square root sr : search results or source root src : source st : solver task or string tokenizer stmt : statement str : string sub : subtraction sw : string writer ta : text area tc : teamcity or template context or template call td : table data or type definition or target declaration tf : template fragment tg : template generator or thread group tgs : text generation support tgt : target th : throwable ti : test item tm : table model tm : template module tmp : temporary tn : target node or tree node tpe : type tqc : template query context tr : table row or trigger trd : thread trf : transferable tsc : type size configuration tv : text value tvr : type variable reference txt : text ud : used dependency ui : user interface ul : used language uo : user object val : value var : variable vc : value container vd : variable declaration vep : visible element provider ver : version vert : vertical vf : virtual file vp : view port or virtual package wa : write action wiz : wizard wrk : worker zf : zip file","title":"Code abbreviations"},{"location":"reference/code_abbreviations/#code-abbreviations","text":"abs : absolute acc : accumulator acd : abstract concept declaration act : actual ad : aspect descriptor addr : address agg : aggregation am : abstract module anc : ancestor anno : annotation app : application arch : architecture arg : argument arr : array art : artifact ass : assessment ast : abstract syntax tree attr : attribute aux : auxiliary avg : average bais : byte array input stream baos : byte array output stream bb : byte buffer bc : build configuration bd : big decimal bg : background or button group bhvr : behavior bim : buffered image bis : buffered input stream bl : baselanguage/baseline bos : byte array output stream bp : breakpoint or binary persistence br : buffered reader/break bt : base type btn : button buff : buffer ca : concept argument cat : category cc : class concept cd : concept declaration ced : concept editor declaration cfg : configuration ch : character ci : config item cl : classloader clm : classloader manager cls : class cmd : command cme : cross model environment cmp : compare cn : context node cncpt : concept cnt : count col : column coll : collection comp : component cond : condition conn : connection cons : constructor const : constant cp : check point (state) or copy or current process cpb : concept presentation builder cr : concept reference/registry cs : change set or collection sequence ct : classifier/current type ctx : context curr : current dbgr : debugger dcl : declaration decl : declaration def : definition dep : dependency descr : description df : decimal format di : debug info diff : difference dim : dimension dir : directory div : division dk : delta key or devkit doc : documentation dr : dynamic reference ds : data source dsm : default semantic model dst : destination dx : difference x dy : difference y ec : editor component ec : editor context ecf : editor cell factory ed : enumeration declaration or extension descriptor eg : engaged generator el : element env : environment eof : end of file ep : else part or element provider or extension point eq : equal or equation err : error et : element type evt : event ex : exception or executor exe : executable expr : expression ext : extension fc : file chooser or first child fct : facet fdc : file delta collector fmt : format fp : file processor fqn : full qualified name fr : file reader frac : fraction freq : frequence fsm : file status manager ft : float type or file tracker fun : function fw : file writer gd : graphics device or generator descriptor ge : graphics environment or greater equals gms : generator module scanner or model generation status manager gp : generation plan/partitioner gr : generator gtf : generation target facet gvd : global variable declaration hm : hashmap horz : horizontal href : hyper-reference hs : hashset hsb : hue/saturation/brightness id : identification idx : index img : image imp : import impl : implementation inc : increase info : information inst : instance intf : interface intfc : interface concept ir : icon resource isr : input stream reader iter : iterator jc : Java compiler jmf : Java module facet km : keymap kv : key value kwd : keyword la : line annotation lang : language lca : lowest common ancestor lcv : lower case value ld : link declaration/descriptor le : less equals len : length lf : line feed lhs : left hand side lib : library lnk : link loc : location lr : language registry/runtime ls : list of strings ls : list sequence lt : left type lvd : local variable declaration lvl : level ma : model access mah : model access helper max : maximum mc : mapping configuration md : model mdm : model dependencies manager mdr : model dependency resolver mem : member meth : method mf : manifest mf : model factory mg : models generator mgr : manager mgsm : module generation status manager mi : model imports or internal model min : minimum mis : model input stream ml : module loader mm : modules miner mn : model name mo : module options mod : modulus mos : model output stream mp : model persistence mr : model/module reference or model root or model/module repository mrd : model root descriptor mrf : module repository facade msg : message mul : multiplication mv : module dependency versions nb : node builder nbn : node builder node nc : named concept ne : not equals/expresison nl : new line or number literal nm : nodes matcher np : null pointer or node pointer ns : name source/space nuli : number literal num : number nut : node under test obj : object ois : object input stream oos : object output stream op : operation or operator opt : option or optional orig : origin os : operation system pa : property attribute pb : popup builder pd : parameter declaration or property descriptor pf : persistence facade ph : phase pkg : package pm : project manager pma : project model access pol : polygon pos : position pp : project pane pq : priority queue prev : previous proc : process prog : program proj : project prop : property psc : package scope control pt : primitive type or pointer type or performance tracer pw : print writer px : pixel or position x py : position y ra : read action rc : rule consequence rd : reference descriptor rec : rectangle or record ref : reference rel : relative repo : repository req : requirement res : result ret : return rgb : red/blue/green rhs : right hand side rl : reference link rm : remove or root model rnd : random rt : right type or runtime or result type or result tpype rv : result value sa : style attribute sb : string builder/buffer sc : script sca : smart completion action scb : script builder scs : subconcepts sd : solution descriptor sdk : software development kit sdmd : semantic model model descriptor sec : section sel : selector/selection sep : separator seq : sequence sess : session sfr : static field reference si : substitute info sl : selection or statement list sln : solution sm : semantic model or state machine smc : static method call sn : semantic node snt : snode type sol : solver sp : settings provider spec : specification sqrt : square root sr : search results or source root src : source st : solver task or string tokenizer stmt : statement str : string sub : subtraction sw : string writer ta : text area tc : teamcity or template context or template call td : table data or type definition or target declaration tf : template fragment tg : template generator or thread group tgs : text generation support tgt : target th : throwable ti : test item tm : table model tm : template module tmp : temporary tn : target node or tree node tpe : type tqc : template query context tr : table row or trigger trd : thread trf : transferable tsc : type size configuration tv : text value tvr : type variable reference txt : text ud : used dependency ui : user interface ul : used language uo : user object val : value var : variable vc : value container vd : variable declaration vep : visible element provider ver : version vert : vertical vf : virtual file vp : view port or virtual package wa : write action wiz : wizard wrk : worker zf : zip file","title":"Code abbreviations"},{"location":"reference/core_languages/","text":".tg {border-collapse:collapse;border-spacing:0; text-align:center} .header { font-weight:bold; text-decoration:underline } .tg td{border-color:black;border-style:solid;border-width:1px;font-size:14px; overflow:hidden;padding:10px 10px} .tg th{border-color:black;border-style:solid;border-width:1px;font-size:14px; overflow:hidden;padding:10px 10px;} .bg-green{background-color:#9aff99} .bg-red{background-color:#ffccc9} .bg-purple{background-color:#ffccc9} .bg-light-yellow{background-color:#ffffc7} .bg-yellow{background-color:#ffce93} .bg-gray{background-color:#ecf4ff} .bg-blue{background-color:#96fffb} table { table-layout: fixed ; width: 100% ; } td { width: 1.66666666667%; } jetbrains.mps.baselanguage classifiers javadoc closures unitTest logging collections collections.trove builders checkedDots overloadedOperators lightweightdsl regexp tuples varVariable extensionMethods doubleDispatch constructors blTypes baselanguageInternal jdk7 jdk8 jetbrains.mps.build mps mps.runner mps.testManifest mps.tests startup tips workflow jetbrains.mps.console base ideCommands internalCommands scripts jetbrains.mps.core properties xml xml.sax jetbrains.mps.debugger api.lang java.customViewers java.evaluation java.privateMembers jetbrains.mps.editor contextActionsTool.lang.menus jetbrains.mps.execution commands common configurations settings util jetbrains.mps.ide httpsupport vcs.modelmetadata jetbrains.mps.lang access checkedName context context.defs aspect core descriptor extension actions behavior dataFlow dataFlow.analyzers editor findUsages intentions makeup messages migration migration.util modelapi pattern refactoring project quotation resources rulesAndMessages scopes script sharedConcepts slanguage smodel smodel.query smodelTests structure test test.generator text textGen tracable typesystem util.order jetbrains.mps.make facet reduced script jetbrains.mps.lang.plugin plugin standalone jetbrains.mps.lang.feedback messages problem problem.childAndProp problem.failingRule problem.scopes problem.structural skeleton jetbrains.mps.lang.editor diagram figures forms imageGen menu.extras table tooltips jetbrains.mps.lang.constraints msg.specification rules rules.kinds rules.skeleton jetbrains.mps.generator generationContext generationParameters plan misc jetbrains.mps.refactoring.participant jetbrains.mps.tool.gentest jetbrains.mps.vcs.mergehints","title":"Core languages"},{"location":"reference/exceptions/","text":"What does the dollar sign in error messages mean? This indicates an anomyous class ( more information ). For a list of common Java exceptions have a look at The Exception Hierarchy and Types of Exception in Java with Examples . This list includes documentation for all kinds of exceptions. Here is some more information for exceptions that often occur in MPS : java.util.ConcurrentModificationException java. lang .NullPointerException MPS \u00b6 name example description ModuleLoaderException none Deprecated exception that is not thrown anymore since 2017. ModelReadException *.mps file is corrupt Indicates failure to read model. Is not specific to \u2018default\u2019 persistence. IllegalModelAccessException Accessing a model from a swing button handler (e.g. you can read model only inside read actions). Indicates forbidden operations over a SModel/ SNode ( official documentation ). AssertionError: Taking target node of dynamic reference whose source node is not in a model a node is in detached state The source of a dynamic reference doesn\u2019t belong to a model. Position n is not allowed for X The caret is the first position but the first position was disabled in the style. The caret is at a position that is not allowed. ModuleClassLoaderIsDisposedException A module couldn\u2019t be disposed and it is loaded again. The classloader of a module is disposed. ClassLoader of module could not be found A module can\u2019t be loaded because the classloader can\u2019t be found. Intellij Platform \u00b6 name example description PluginException Usage of deprecated Intellij SDK methods Represents an internal error caused by a plugin. It may happen if the plugin\u2019s code fails with an exception, or if the plugin violates some contract of IntelliJ Platform. AlreadyDisposedException An already disposed objects gets disposed again (e.g. a Project) Exception from class SlowOperations MPS -34029 If you get an exception from this method, then you need to move the computation to the background while also trying to avoid blocking the UI thread as well. Argument for @NotNull parameter must not be null method with @NotNull Annotation is called with null A null check failed ( official documentation ). Action dispatch failed. The execution of an action failed. ExtensionInstantiationException This exception is thrown if some extension (service, extension point) failed to initialize.","title":"Exceptions"},{"location":"reference/exceptions/#mps","text":"name example description ModuleLoaderException none Deprecated exception that is not thrown anymore since 2017. ModelReadException *.mps file is corrupt Indicates failure to read model. Is not specific to \u2018default\u2019 persistence. IllegalModelAccessException Accessing a model from a swing button handler (e.g. you can read model only inside read actions). Indicates forbidden operations over a SModel/ SNode ( official documentation ). AssertionError: Taking target node of dynamic reference whose source node is not in a model a node is in detached state The source of a dynamic reference doesn\u2019t belong to a model. Position n is not allowed for X The caret is the first position but the first position was disabled in the style. The caret is at a position that is not allowed. ModuleClassLoaderIsDisposedException A module couldn\u2019t be disposed and it is loaded again. The classloader of a module is disposed. ClassLoader of module could not be found A module can\u2019t be loaded because the classloader can\u2019t be found.","title":"MPS"},{"location":"reference/exceptions/#intellij-platform","text":"name example description PluginException Usage of deprecated Intellij SDK methods Represents an internal error caused by a plugin. It may happen if the plugin\u2019s code fails with an exception, or if the plugin violates some contract of IntelliJ Platform. AlreadyDisposedException An already disposed objects gets disposed again (e.g. a Project) Exception from class SlowOperations MPS -34029 If you get an exception from this method, then you need to move the computation to the background while also trying to avoid blocking the UI thread as well. Argument for @NotNull parameter must not be null method with @NotNull Annotation is called with null A null check failed ( official documentation ). Action dispatch failed. The execution of an action failed. ExtensionInstantiationException This exception is thrown if some extension (service, extension point) failed to initialize.","title":"Intellij Platform"},{"location":"reference/extension_points/","text":"Extension Points \u00b6 For a list of IntelliJ extensions, have a look at Extension Point and Listener List | IntelliJ SDK . The following table lists MPS extension points that use the IntelliJ mechanism. Qualified name Interface Description com.intellij.mps.VisibleModuleMask VisibleModuleMask controls the visibility of MPS modules com.intellij.mps.modelRootFactory ModelRootFactory factory which creates model roots jetbrains.mps.nodeStructureViewProvider NodeStructureViewProvider provider for the structure tool in the lower left corner com.intellij.mps.editorWarningsProvider EditorWarningsProvider provider for warnings that are shown above the editor (e.g. the node is in a read-only model) mps.CodeNavigationProvider CodeNavigationProvider opener for generated code files mps.ModelValidator ModelValidator validate a list of models com.intellij.mps.modelRootEntry ModelRootEntry UI entry in the module properties dialog corresponding to the specific model root com.intellij.mps.facetTabFactory FacetTabEP custom facets (e.g. ideaPlugin facet) com.intellij.mps.modelTemplateProvider ModelTemplateProvider create new models using a template com.intellij.mps.renameRefactoringContributor RenameRefactoringContributor contribution to the rename refactoring action jetbrains.mps.debugger.PositionProvider PositionProvider source position of current debugger line The following sections are about MPS extension points . MPS \u00b6 Name Interface Description GeneratorCache GenerationCacheContainer cache container for the generator NodeRenamer lambda rename node action HttpRequestHandlerEP IHttpRequestHandlerFactory handle requests to the HTTP server MoveModelParticipantEP MoveModelRefactoringParticipant move model refactoring action MoveNodeParticipantEP MoveNodeRefactoringParticipant move node refactoring action PersistentRefactoringParticipantsEP Iterable refactoring action RenameNodeParticipantEP RenameNodeRefactoringParticipant rename node action MoveNodesActionEP MoveNodesAction move nodes action customContainers lambda custom collection container ActionIDs List action IDs for tests LanguageAspectsEP LanguageAspectDescriptor automatic gen. language descriptors Mbeddr \u00b6 Name Interface Description CustomLayouts LayoutFactory custom layouts for the Java JUNG diagram language ToolsSanityCheckerProvider ToolsAvailabilityChecker check if external tools are available HttpRequestHandlers IRequestHandler handle requests to the HTTP server ServletProvider IServletProvider the provider of the servlet CCMenuExtensionsDescriptors ICCMenuExtensionsDescriptor code completion menu extension customValueRenderer CustomValueRenderer renderer for custom values in the trace explorer MULTILINGUAL_PROVIDERS ILanguageProvider language provider for multilingual InterpreterExtensionPoint IInterpreter custom interpreter implementation HttpServerConfigChangeListener IHttpServerConfigChangeListener listener for config changes of the HTTP server TargetModifiers ITargetCreationActionModifier modify the target creation in the code completion menu TargetSetupExtensions ITargetSetupExtension modify the target setup in the code completion menu wizardExtensions ExtensionProvider add a step to a wizard RichstringEvaluator IRichstringEvaluator evaluate a richstring MPS -extensions \u00b6 Name Interface Description IdentityCalculators IdentityCalculator identity calculators for the model merger GlobalDiagramMouseListener MouseListener mouse listeners for diagrams diagramPaletteEntryProvider IPaletteEntryExtensionProvider entry provider for diagrams diagramConnectionTypesProvider IConnectionTypesExtensionProvider connection types provider for diagrams DragSelectionHandlerEP IDragSelectionHandler drag selection handler ModelMergeExt MergePolicySpec merge policy specifications for model merger IETS3 \u00b6 Name Interface Description recordIsComparable RecordIsComparable custom comparator for records solverfactories SolverTaskFactory factory for creating solver tasks primitiveTypeMapper PrimitiveTypeMapper basic methods of primitive KernelF types constraintViolationHandler ConstraintViolationHandler handler for KernelF constraint violations mutatorContributions MutatorFactory factory for creating mutators runtimeResolverConfig RuntimeResolverConfig configuration for runtime resolver (e.g. functions resolving) nameCompletionProvider NameCompletionProvider name completion provider for nodes of type INamedConcept + a prefix identifierConfigurator IdentifierConfigurator configuration for identifiers (allow umlauts/paragraphs) nixHandler NixHandler handler for empty (\u2018nothing\u2019) values mandatoryAttributesProviderEP IMandatoryAttributesProvider provider for mandatory attributes","title":"Extension points"},{"location":"reference/extension_points/#extension-points","text":"For a list of IntelliJ extensions, have a look at Extension Point and Listener List | IntelliJ SDK . The following table lists MPS extension points that use the IntelliJ mechanism. Qualified name Interface Description com.intellij.mps.VisibleModuleMask VisibleModuleMask controls the visibility of MPS modules com.intellij.mps.modelRootFactory ModelRootFactory factory which creates model roots jetbrains.mps.nodeStructureViewProvider NodeStructureViewProvider provider for the structure tool in the lower left corner com.intellij.mps.editorWarningsProvider EditorWarningsProvider provider for warnings that are shown above the editor (e.g. the node is in a read-only model) mps.CodeNavigationProvider CodeNavigationProvider opener for generated code files mps.ModelValidator ModelValidator validate a list of models com.intellij.mps.modelRootEntry ModelRootEntry UI entry in the module properties dialog corresponding to the specific model root com.intellij.mps.facetTabFactory FacetTabEP custom facets (e.g. ideaPlugin facet) com.intellij.mps.modelTemplateProvider ModelTemplateProvider create new models using a template com.intellij.mps.renameRefactoringContributor RenameRefactoringContributor contribution to the rename refactoring action jetbrains.mps.debugger.PositionProvider PositionProvider source position of current debugger line The following sections are about MPS extension points .","title":"Extension Points"},{"location":"reference/extension_points/#mps","text":"Name Interface Description GeneratorCache GenerationCacheContainer cache container for the generator NodeRenamer lambda rename node action HttpRequestHandlerEP IHttpRequestHandlerFactory handle requests to the HTTP server MoveModelParticipantEP MoveModelRefactoringParticipant move model refactoring action MoveNodeParticipantEP MoveNodeRefactoringParticipant move node refactoring action PersistentRefactoringParticipantsEP Iterable refactoring action RenameNodeParticipantEP RenameNodeRefactoringParticipant rename node action MoveNodesActionEP MoveNodesAction move nodes action customContainers lambda custom collection container ActionIDs List action IDs for tests LanguageAspectsEP LanguageAspectDescriptor automatic gen. language descriptors","title":"MPS"},{"location":"reference/extension_points/#mbeddr","text":"Name Interface Description CustomLayouts LayoutFactory custom layouts for the Java JUNG diagram language ToolsSanityCheckerProvider ToolsAvailabilityChecker check if external tools are available HttpRequestHandlers IRequestHandler handle requests to the HTTP server ServletProvider IServletProvider the provider of the servlet CCMenuExtensionsDescriptors ICCMenuExtensionsDescriptor code completion menu extension customValueRenderer CustomValueRenderer renderer for custom values in the trace explorer MULTILINGUAL_PROVIDERS ILanguageProvider language provider for multilingual InterpreterExtensionPoint IInterpreter custom interpreter implementation HttpServerConfigChangeListener IHttpServerConfigChangeListener listener for config changes of the HTTP server TargetModifiers ITargetCreationActionModifier modify the target creation in the code completion menu TargetSetupExtensions ITargetSetupExtension modify the target setup in the code completion menu wizardExtensions ExtensionProvider add a step to a wizard RichstringEvaluator IRichstringEvaluator evaluate a richstring","title":"Mbeddr"},{"location":"reference/extension_points/#mps-extensions","text":"Name Interface Description IdentityCalculators IdentityCalculator identity calculators for the model merger GlobalDiagramMouseListener MouseListener mouse listeners for diagrams diagramPaletteEntryProvider IPaletteEntryExtensionProvider entry provider for diagrams diagramConnectionTypesProvider IConnectionTypesExtensionProvider connection types provider for diagrams DragSelectionHandlerEP IDragSelectionHandler drag selection handler ModelMergeExt MergePolicySpec merge policy specifications for model merger","title":"MPS-extensions"},{"location":"reference/extension_points/#iets3","text":"Name Interface Description recordIsComparable RecordIsComparable custom comparator for records solverfactories SolverTaskFactory factory for creating solver tasks primitiveTypeMapper PrimitiveTypeMapper basic methods of primitive KernelF types constraintViolationHandler ConstraintViolationHandler handler for KernelF constraint violations mutatorContributions MutatorFactory factory for creating mutators runtimeResolverConfig RuntimeResolverConfig configuration for runtime resolver (e.g. functions resolving) nameCompletionProvider NameCompletionProvider name completion provider for nodes of type INamedConcept + a prefix identifierConfigurator IdentifierConfigurator configuration for identifiers (allow umlauts/paragraphs) nixHandler NixHandler handler for empty (\u2018nothing\u2019) values mandatoryAttributesProviderEP IMandatoryAttributesProvider provider for mandatory attributes","title":"IETS3"},{"location":"reference/gitignore/","text":"There isn\u2019t only one correct .gitignore file for MPS . It\u2019s recommended to ignore generated files but there can also be cases where you can\u2019t execute your generated files, so you have to add them to version control and check the difference manually. This isn\u2019t a complete list Generated files ( MPS ) \u00b6 source_gen : the generated Java files source_gen.caches : dependencies : cache files which list dependencies between used classes and interfaces generated : a list of generated files classes_gen : the generated Java class files test_gen : the generated JUnit Java test files doc_gen : generated files of the mbeddr documentation language (optional) result_gen : *.iws : old MPS project setting files .mps/shelf : local user commits Testing \u00b6 JUnit junitvmwatcher*.properties build.properties TEST*.xml : test results junit*.properties MPS -Gradle-Plugin \u00b6 build/mps : the downloaded MPS version artifacts : the downloaded dependencies Temporary files/folders \u00b6 tmp build/generated .mps-caches /system/ Build tools \u00b6 Gradle .gradle : Project-specific cache directory generated by Gradle .gradletasknamecache **/build/ repo / **/build/distributions **/build/classes Gradle.gitignore Maven Maven.gitignore IntelliJ files \u00b6 .idea : the folder of an IntelliJ project workspace.xml : a file that saves project specific settings JetBrains.gitignore IntelliJ plugins \u00b6 Markdown Navigator plugin (optional) .idea/**/markdown-navigator.xml .idea/**/markdown-navigator-enh.xml .idea/**/markdown-navigator/ MacOS \u00b6 .DS_Store : short for Desktop Service Store; it stores custom attributes of its containing folder, such as folder view options, icon positions, and other visual information ( reference ). macOS.gitignore (optional)","title":"Gitignore file"},{"location":"reference/gitignore/#generated-files-mps","text":"source_gen : the generated Java files source_gen.caches : dependencies : cache files which list dependencies between used classes and interfaces generated : a list of generated files classes_gen : the generated Java class files test_gen : the generated JUnit Java test files doc_gen : generated files of the mbeddr documentation language (optional) result_gen : *.iws : old MPS project setting files .mps/shelf : local user commits","title":"Generated files (MPS)"},{"location":"reference/gitignore/#testing","text":"JUnit junitvmwatcher*.properties build.properties TEST*.xml : test results junit*.properties","title":"Testing"},{"location":"reference/gitignore/#mps-gradle-plugin","text":"build/mps : the downloaded MPS version artifacts : the downloaded dependencies","title":"MPS-Gradle-Plugin"},{"location":"reference/gitignore/#temporary-filesfolders","text":"tmp build/generated .mps-caches /system/","title":"Temporary files/folders"},{"location":"reference/gitignore/#build-tools","text":"Gradle .gradle : Project-specific cache directory generated by Gradle .gradletasknamecache **/build/ repo / **/build/distributions **/build/classes Gradle.gitignore Maven Maven.gitignore","title":"Build tools"},{"location":"reference/gitignore/#intellij-files","text":".idea : the folder of an IntelliJ project workspace.xml : a file that saves project specific settings JetBrains.gitignore","title":"IntelliJ files"},{"location":"reference/gitignore/#intellij-plugins","text":"Markdown Navigator plugin (optional) .idea/**/markdown-navigator.xml .idea/**/markdown-navigator-enh.xml .idea/**/markdown-navigator/","title":"IntelliJ plugins"},{"location":"reference/gitignore/#macos","text":".DS_Store : short for Desktop Service Store; it stores custom attributes of its containing folder, such as folder view options, icon positions, and other visual information ( reference ). macOS.gitignore (optional)","title":"MacOS"},{"location":"reference/icons/","text":"Actions \u00b6 The icons can be used in this repository by inserting the corresponding code in a markdown file. Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-actions-addToVcs: :mps-actions-groupByCategory: :mps-actions-groupByModel: :mps-actions-groupByModule: :mps-actions-groupByRoot: :mps-actions-groupSearched: :mps-actions-importModulesFromFolder: :mps-actions-migrationBulb: :mps-actions-searchedNodes: :mps-actions-showCellInExplorer: :mps-actions-showOnlyStrongSubtypes: Ant \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-ant-build: Cell explorer \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-cellExplorer-cellActionKey: :mps-cellExplorer-cellComponent: :mps-cellExplorer-cellConst: :mps-cellExplorer-cellDefault: :mps-cellExplorer-cellError: :mps-cellExplorer-cellExplorer: :mps-cellExplorer-cellKeyMap: :mps-cellExplorer-cellProperty: :mps-cellExplorer-cells: Ant \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-debugger-addBreakpoint: :mps-debugger-deleteBreakpoint: :mps-debugger-goToSource: General \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-general-dependencies: :mps-general-generatorsPriorities: :mps-general-java: :mps-general-modelChecker: :mps-general-runtime: :mps-general-usedLanguages: Generator \u00b6 Code Icon :mps-generator-copy-operation: :mps-generator-input: :mps-generator-macro: :mps-generator-mapping-script: :mps-generator-output: :mps-generator-rule: :mps-generator-rule-consequence: :mps-generator-switch: :mps-generator-template: Idea Integration \u00b6 Code Icon :mps-ideaIntegration-connected: :mps-ideaIntegration-connected_with_errors: :mps-ideaIntegration-disconnected: :mps-ideaIntegration-trying: Nodes/Models \u00b6 Models \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-models-accessoryModel: :mps-nodes-models-aspect: :mps-nodes-models-templatesModel: :mps-nodes-models-tests: Nodes \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-action: :mps-nodes-behavior: :mps-nodes-constraint: :mps-nodes-dataFlow: :mps-nodes-default: :mps-nodes-devkit: :mps-nodes-editor: :mps-nodes-generator: :mps-nodes-language: :mps-nodes-mappingConf: :mps-nodes-model: :mps-nodes-node: :mps-nodes-projectModels: :mps-nodes-reduction: :mps-nodes-refactoring: :mps-nodes-rootNode: :mps-nodes-rule: :mps-nodes-solution: :mps-nodes-structure: :mps-nodes-textGen: :mps-nodes-transient: :mps-nodes-transientDisable: :mps-nodes-action: :mps-nodes-action: :mps-nodes-action: Project Pane \u00b6 Code Icon Icon_2x :mps-projectPane-logicalView: Public \u00b6 Code Icon Icon_2x :mps-public-about: :mps-public-error: :mps-public-mps: MPS2 :mps-public-mps_16: :mps-public-MPS_welcomeScreen: :mps-public-splash: Tool Windows \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-toolWindows-cellExplorer: :mps-toolWindows-default: :mps-toolWindows-modelChecker: :mps-toolWindows-OpenTerminal_13x13: :mps-toolWindows-typeTraceView:","title":"Icons"},{"location":"reference/icons/#actions","text":"The icons can be used in this repository by inserting the corresponding code in a markdown file. Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-actions-addToVcs: :mps-actions-groupByCategory: :mps-actions-groupByModel: :mps-actions-groupByModule: :mps-actions-groupByRoot: :mps-actions-groupSearched: :mps-actions-importModulesFromFolder: :mps-actions-migrationBulb: :mps-actions-searchedNodes: :mps-actions-showCellInExplorer: :mps-actions-showOnlyStrongSubtypes:","title":"Actions"},{"location":"reference/icons/#ant","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-ant-build:","title":"Ant"},{"location":"reference/icons/#cell-explorer","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-cellExplorer-cellActionKey: :mps-cellExplorer-cellComponent: :mps-cellExplorer-cellConst: :mps-cellExplorer-cellDefault: :mps-cellExplorer-cellError: :mps-cellExplorer-cellExplorer: :mps-cellExplorer-cellKeyMap: :mps-cellExplorer-cellProperty: :mps-cellExplorer-cells:","title":"Cell explorer"},{"location":"reference/icons/#ant_1","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-debugger-addBreakpoint: :mps-debugger-deleteBreakpoint: :mps-debugger-goToSource:","title":"Ant"},{"location":"reference/icons/#general","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-general-dependencies: :mps-general-generatorsPriorities: :mps-general-java: :mps-general-modelChecker: :mps-general-runtime: :mps-general-usedLanguages:","title":"General"},{"location":"reference/icons/#generator","text":"Code Icon :mps-generator-copy-operation: :mps-generator-input: :mps-generator-macro: :mps-generator-mapping-script: :mps-generator-output: :mps-generator-rule: :mps-generator-rule-consequence: :mps-generator-switch: :mps-generator-template:","title":"Generator"},{"location":"reference/icons/#idea-integration","text":"Code Icon :mps-ideaIntegration-connected: :mps-ideaIntegration-connected_with_errors: :mps-ideaIntegration-disconnected: :mps-ideaIntegration-trying:","title":"Idea Integration"},{"location":"reference/icons/#nodesmodels","text":"","title":"Nodes/Models"},{"location":"reference/icons/#models","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-models-accessoryModel: :mps-nodes-models-aspect: :mps-nodes-models-templatesModel: :mps-nodes-models-tests:","title":"Models"},{"location":"reference/icons/#nodes","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-action: :mps-nodes-behavior: :mps-nodes-constraint: :mps-nodes-dataFlow: :mps-nodes-default: :mps-nodes-devkit: :mps-nodes-editor: :mps-nodes-generator: :mps-nodes-language: :mps-nodes-mappingConf: :mps-nodes-model: :mps-nodes-node: :mps-nodes-projectModels: :mps-nodes-reduction: :mps-nodes-refactoring: :mps-nodes-rootNode: :mps-nodes-rule: :mps-nodes-solution: :mps-nodes-structure: :mps-nodes-textGen: :mps-nodes-transient: :mps-nodes-transientDisable: :mps-nodes-action: :mps-nodes-action: :mps-nodes-action:","title":"Nodes"},{"location":"reference/icons/#project-pane","text":"Code Icon Icon_2x :mps-projectPane-logicalView:","title":"Project Pane"},{"location":"reference/icons/#public","text":"Code Icon Icon_2x :mps-public-about: :mps-public-error: :mps-public-mps: MPS2 :mps-public-mps_16: :mps-public-MPS_welcomeScreen: :mps-public-splash:","title":"Public"},{"location":"reference/icons/#tool-windows","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-toolWindows-cellExplorer: :mps-toolWindows-default: :mps-toolWindows-modelChecker: :mps-toolWindows-OpenTerminal_13x13: :mps-toolWindows-typeTraceView:","title":"Tool Windows"},{"location":"reference/issue_trackers/","text":"Reporting bugs \u00b6 This page should help you find existing issues for MPS and the MPS platforms and help you decide which issue tracker an issue belongs to. Most of the time, the package name tells you the correct project. Nearly all editor related languages (diagrams, tables, tree notations\u2026) are located in MPS -extensions. The following list, gives a rough overview: MPS2 MPS jetbrains.* MPS .* collections.runtime.* collections_trove.runtime.* closures.runtime.* mbeddr platform com.mbeddr.core.* com.mbeddr.mpsutil.* com.mbeddr. doc .* mbeddr com.mbeddr.core.* IETS3 org.iets3.* MPS -extensions com.mbeddr.* de.itemis.* de.slisson.* de.q60.* com.dslfoundry.* ( DSLFoundry ) org.modelix.model* (if it related to the API, otherwise go to modelix itself) JetBrains Runtime Environment or OpenJDK com.sun.* java.* javax.* jdk.* org.w3c.* org.xml.sax.* MPS (YouTrack) \u00b6 This is the public issue tracker of JetBrains MPS itself. Consult the documentation for instructions on how to report an issue. open critical/show-stopper issues open critical/major issues open issues sorted by votes open issues sorted by comments search query reference | jetbrains.com MPS X Release Notes (example) tickets which encourage contributions MPS -extensions \u00b6 If you are unsure which languages are part of this platform, please consult full extension list page. open issues reference: search issues and pull requests | github.com diagram:meta issue Mbeddr \u00b6 This is the issue tracker related to mbeddr.core . You can find there issues related to the mbeddr platform which is used, for example, by IETS3 . OS . Please note that nearly all editor-related languages where moved to MPS -extensions, so please submit those tickets in the corresponding issue tracker. open issues open platform issues IETS3 . OS \u00b6 This issue tracker is most of the time needed for tickets related to KernelF . open issue IntelliJ platform \u00b6 This issue tracker contains issue for IntelliJ IDEA/ the IntelliJ platform SDK which MPS is based on. The used IntelliJ platform can be found on the MPS download page or through MPS \u2192 About MPS . The build number consistss of three parts. Example: MPS 2021.3.1 Build: 213.7172.958 . 213 stands for 2021.3, the IntelliJ platform version is 213.7172 which can be checked by visiting the IntelliJ IDEA download page . If a MPS issue is related to the platform, it is forwarded by the MPS team to the platform team. open IntelliJ IDEA issues JetBrains Runtime \u00b6 JetBrains Runtime is a fork of OpenJDK available for Windows, Mac OS X, and Linux. It includes a number of enhancements in font rendering, HiDPI support, windowing/focus subsystems, performance improvements and bugfixes. It\u2019s very unlikely that you have to submit an issue to this tracker yourself. This issue tracker is relevant for JCEF , UI -related glitches and complete Java crashes as MPS is using the JetBrains Runtime instead of the normal JRE . The JetBrains runtime is installed in the jbr folder of the MPS installation. The corresponding JBR version for an IntelliJ platform release can be found in the JetBrainsRuntime readme . open issues open JCEF issues OpenJDK \u00b6 It\u2019s highly unlikely that you have to submit an issue to this tracker yourself. This issue tracker is only listed for reference purposes. If there\u2019s an OpenJDK issue that affects JetBrains products, it will likely be fixed in the JetBrains Runtime. open issues","title":"Issue trackers"},{"location":"reference/issue_trackers/#reporting-bugs","text":"This page should help you find existing issues for MPS and the MPS platforms and help you decide which issue tracker an issue belongs to. Most of the time, the package name tells you the correct project. Nearly all editor related languages (diagrams, tables, tree notations\u2026) are located in MPS -extensions. The following list, gives a rough overview: MPS2 MPS jetbrains.* MPS .* collections.runtime.* collections_trove.runtime.* closures.runtime.* mbeddr platform com.mbeddr.core.* com.mbeddr.mpsutil.* com.mbeddr. doc .* mbeddr com.mbeddr.core.* IETS3 org.iets3.* MPS -extensions com.mbeddr.* de.itemis.* de.slisson.* de.q60.* com.dslfoundry.* ( DSLFoundry ) org.modelix.model* (if it related to the API, otherwise go to modelix itself) JetBrains Runtime Environment or OpenJDK com.sun.* java.* javax.* jdk.* org.w3c.* org.xml.sax.*","title":"Reporting bugs"},{"location":"reference/issue_trackers/#mps-youtrack","text":"This is the public issue tracker of JetBrains MPS itself. Consult the documentation for instructions on how to report an issue. open critical/show-stopper issues open critical/major issues open issues sorted by votes open issues sorted by comments search query reference | jetbrains.com MPS X Release Notes (example) tickets which encourage contributions","title":"MPS (YouTrack)"},{"location":"reference/issue_trackers/#mps-extensions","text":"If you are unsure which languages are part of this platform, please consult full extension list page. open issues reference: search issues and pull requests | github.com diagram:meta issue","title":"MPS-extensions"},{"location":"reference/issue_trackers/#mbeddr","text":"This is the issue tracker related to mbeddr.core . You can find there issues related to the mbeddr platform which is used, for example, by IETS3 . OS . Please note that nearly all editor-related languages where moved to MPS -extensions, so please submit those tickets in the corresponding issue tracker. open issues open platform issues","title":"Mbeddr"},{"location":"reference/issue_trackers/#iets3os","text":"This issue tracker is most of the time needed for tickets related to KernelF . open issue","title":"IETS3.OS"},{"location":"reference/issue_trackers/#intellij-platform","text":"This issue tracker contains issue for IntelliJ IDEA/ the IntelliJ platform SDK which MPS is based on. The used IntelliJ platform can be found on the MPS download page or through MPS \u2192 About MPS . The build number consistss of three parts. Example: MPS 2021.3.1 Build: 213.7172.958 . 213 stands for 2021.3, the IntelliJ platform version is 213.7172 which can be checked by visiting the IntelliJ IDEA download page . If a MPS issue is related to the platform, it is forwarded by the MPS team to the platform team. open IntelliJ IDEA issues","title":"IntelliJ platform"},{"location":"reference/issue_trackers/#jetbrains-runtime","text":"JetBrains Runtime is a fork of OpenJDK available for Windows, Mac OS X, and Linux. It includes a number of enhancements in font rendering, HiDPI support, windowing/focus subsystems, performance improvements and bugfixes. It\u2019s very unlikely that you have to submit an issue to this tracker yourself. This issue tracker is relevant for JCEF , UI -related glitches and complete Java crashes as MPS is using the JetBrains Runtime instead of the normal JRE . The JetBrains runtime is installed in the jbr folder of the MPS installation. The corresponding JBR version for an IntelliJ platform release can be found in the JetBrainsRuntime readme . open issues open JCEF issues","title":"JetBrains Runtime"},{"location":"reference/issue_trackers/#openjdk","text":"It\u2019s highly unlikely that you have to submit an issue to this tracker yourself. This issue tracker is only listed for reference purposes. If there\u2019s an OpenJDK issue that affects JetBrains products, it will likely be fixed in the JetBrains Runtime. open issues","title":"OpenJDK"},{"location":"reference/reading_list/","text":"Reading list \u00b6 This page includes some more resources for working with MPS . This article is a bit dated but maybe still useful. It may be better to start to look for resources at mps.rocks first. Language engineering with MPS \u00b6 If you want to become proficient with language engineering based on MPS , the best approach is to build stuff, work with people and ask questions. The MPS team at itemis is a good environment for doing this. However, we have written a lof of stuff over time. And to increase overall efficiency and to be respectful of the time of the team members, it is recommended to read a few things in advance/in parallel. In this document we describe a list of recommended readings. I suggest you start with the book on DSL Engineering. It\u2019s available as a free PDF from voelter.de/books . In the first part, it discusses some general characterizations of DSLs. Part two is on language design; you should become proficient in the design concerns discussed there. Part three is about language implementation with different tools; you can skip the non- MPS parts, if you want to. The MPS -specific explanations are not quite up to date, but the concepts and approaches explained there are still relevant. One recent extension to MPS we use all the time now is grammar cells, a way to more easily build usable editors for textual notation. We strongly suggest reading this paper: GrammarCells . Next, you may want to take a look at the MPS books by Fabien Campagne . They are essentially a beginner\u2019s guide to language development with MPS . Whenever you want to do something specific, then looking at how to do it in those books is a good starting point for deeper discussions with the colleagues (note: the official documentation might be a better starting point because these book might be outdated in some aspects.) The documentation page also contains videos and tutorials on a variety of specific MPS -related topics. Over the years we have built a lot of useful extensions and utilities to MPS . They are described on the mbeddr platform page. Most of those are not really documented, but you can find examples for all (relevant and stable) utilities in mbeddr itself. Finally, to understand the experiences we have made with MPS over the years, you may want to read this draft paper: Lessons Learned from Developing mbeddr . Working on (extending) mbeddr \u00b6 If, in addition to working with MPS in general, you plan to work on the mbeddr languages, there is more reading we suggest. We suggest reading parts of Markus\u2019 thesis, because it is the most comprehensive and up-to-date description of mbeddr: Generic Tools, Specific Languages . To get a general overview over mbeddr, please read chapter 3. An overview, from a user\u2019s perspective, of the most important features, you can find in chapter 4. Chapters 8 and 9 illustrate how we have implemented mbeddr in MPS . Implicitly, this also gives you a good starting point to understand the structure of mbeddr, as well as how and where to \u201chook in\u201d for building extensions. To learn about specific other topics of mbeddr, such as the integrated verifications, please check out the publications on the mbeddr learn page .","title":"Reading list"},{"location":"reference/reading_list/#reading-list","text":"This page includes some more resources for working with MPS . This article is a bit dated but maybe still useful. It may be better to start to look for resources at mps.rocks first.","title":"Reading list"},{"location":"reference/reading_list/#language-engineering-with-mps","text":"If you want to become proficient with language engineering based on MPS , the best approach is to build stuff, work with people and ask questions. The MPS team at itemis is a good environment for doing this. However, we have written a lof of stuff over time. And to increase overall efficiency and to be respectful of the time of the team members, it is recommended to read a few things in advance/in parallel. In this document we describe a list of recommended readings. I suggest you start with the book on DSL Engineering. It\u2019s available as a free PDF from voelter.de/books . In the first part, it discusses some general characterizations of DSLs. Part two is on language design; you should become proficient in the design concerns discussed there. Part three is about language implementation with different tools; you can skip the non- MPS parts, if you want to. The MPS -specific explanations are not quite up to date, but the concepts and approaches explained there are still relevant. One recent extension to MPS we use all the time now is grammar cells, a way to more easily build usable editors for textual notation. We strongly suggest reading this paper: GrammarCells . Next, you may want to take a look at the MPS books by Fabien Campagne . They are essentially a beginner\u2019s guide to language development with MPS . Whenever you want to do something specific, then looking at how to do it in those books is a good starting point for deeper discussions with the colleagues (note: the official documentation might be a better starting point because these book might be outdated in some aspects.) The documentation page also contains videos and tutorials on a variety of specific MPS -related topics. Over the years we have built a lot of useful extensions and utilities to MPS . They are described on the mbeddr platform page. Most of those are not really documented, but you can find examples for all (relevant and stable) utilities in mbeddr itself. Finally, to understand the experiences we have made with MPS over the years, you may want to read this draft paper: Lessons Learned from Developing mbeddr .","title":"Language engineering with MPS"},{"location":"reference/reading_list/#working-on-extending-mbeddr","text":"If, in addition to working with MPS in general, you plan to work on the mbeddr languages, there is more reading we suggest. We suggest reading parts of Markus\u2019 thesis, because it is the most comprehensive and up-to-date description of mbeddr: Generic Tools, Specific Languages . To get a general overview over mbeddr, please read chapter 3. An overview, from a user\u2019s perspective, of the most important features, you can find in chapter 4. Chapters 8 and 9 illustrate how we have implemented mbeddr in MPS . Implicitly, this also gives you a good starting point to understand the structure of mbeddr, as well as how and where to \u201chook in\u201d for building extensions. To learn about specific other topics of mbeddr, such as the integrated verifications, please check out the publications on the mbeddr learn page .","title":"Working on (extending) mbeddr"},{"location":"reference/tips_for_os_maintainers/","text":"Best practices: Best practices for maintainers | opensource.guide Seven ways to be an effective Open Source Maintainer Code reviews: The Code Reviewer\u2019s Guide | google.github.io The Change Author\u2019s Guide | google.github.io Tools (general): mps-gradle-plugin :Gradle plugin to build & test langauges and to support various tasks related to custom RCP packaging. Material for MkDocs : static documentation generator which uses Markdown Badges for your repository Tools (GitHub): GitHub Actions / Awesome Actions GitHub Pages Find (almost) any GitHub user\u2019s email address! : find out more information about a contributor Publishing Java packages with Maven Reference: Github vs Gitlab vs Bitbucket","title":"Tips for open source maintainers"}]}