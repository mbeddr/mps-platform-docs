{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This website collects practical knowledge about MPS and popular MPS platforms. It's written mainly in the form of a Q&amp;A. It contains questions and answers for  MPS2 MPS \u29c9 and the following platforms:</p> <ul> <li> MPS Extensions  \u29c9</li> <li> mbeddr  \u29c9</li> <li> IETS3  \u29c9</li> </ul> <p>Click on one of the  buttons to go directly to the corresponding documentation.</p> <p>You can open links starting with http://127.0.0.1 with the built-in HTTP support plugin \u29c9. Platform-specific instructions are indicated with an icon when possible. Long answers are collapsed by default. Questions marked with  have answers that are educated guesses that are not confirmed.</p> <p>If you have any suggestions, please write a comment at the bottom of the page or open an issue on GitHub.</p> <ul> <li>MPS versions: 2021.1.4 \u2013 2023.2 (the documentation is most of the time still true for newer versions)</li> </ul> <p>If you aren't already a member, consider joining MPS on Slack \u29c9.</p> <p>A Twitter user</p> <p>\"6 hours of debugging can save you 5 minutes of reading documentation.\"</p>"},{"location":"tags/","title":"Tags","text":"<p>Tags appear at the top of every page and group related topics even if the are not in the same hierarchy.</p>"},{"location":"tags/#aspect","title":"aspect","text":"<ul> <li>Accessory Models</li> <li>Action Aspect</li> <li>Behavior Aspect</li> <li>Constraints Aspect</li> <li>Dataflow Aspect</li> <li>Documentation Aspect</li> <li>Editor Aspect</li> <li>Feedback Aspect</li> <li>FindUsages Aspect</li> <li>Generator Aspect</li> <li>Intentions Aspect</li> <li>Listener Aspect</li> <li>Migration Aspect</li> <li>Plugin Aspect</li> <li>Polymorphic Functions Aspect</li> <li>Refactorings Aspect</li> <li>Scripts Aspect</li> <li>Structure Aspect</li> <li>Test Aspect</li> <li>TextGen Aspect</li> <li>Transformations Aspect</li> <li>Typ System Aspect</li> <li>VCS Aspect</li> <li>Virtual Interfaces Aspect</li> </ul>"},{"location":"tags/#baselanguage","title":"baselanguage","text":"<ul> <li>Deprecation</li> <li>Readability/Maintainability</li> <li>Base Language and Extensions</li> <li>Double Dispatch</li> </ul>"},{"location":"tags/#beginner","title":"beginner","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#best_practise","title":"best_practise","text":"<ul> <li>Java (Base language)</li> <li>Java Style Guide</li> <li>Programming Principles</li> <li>Deprecation</li> <li>Readability/Maintainability</li> <li>Language Design</li> <li>UI Patterns</li> <li>User Experience</li> </ul>"},{"location":"tags/#bugs","title":"bugs","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#build","title":"build","text":"<ul> <li>Build</li> </ul>"},{"location":"tags/#classpath","title":"classpath","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#customization","title":"customization","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#dependencies","title":"dependencies","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#dsl","title":"dsl","text":"<ul> <li>Language Design</li> </ul>"},{"location":"tags/#examples","title":"examples","text":"<ul> <li>Example Actions Using Locks</li> </ul>"},{"location":"tags/#files","title":"files","text":"<ul> <li>External Files and Tools</li> </ul>"},{"location":"tags/#general","title":"general","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#generator","title":"generator","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#guide","title":"guide","text":"<ul> <li>Editing This Guide</li> <li>Creating a Command Line Tool</li> <li>Development Guide</li> </ul>"},{"location":"tags/#iets3","title":"iets3","text":"<ul> <li>KernelF Introduction</li> <li>Platform Essentials</li> <li>Common Concepts and Interfaces</li> <li>Contributing</li> <li>Interpreter, Coverage, and Tracing</li> <li>Platform Build Scripts</li> </ul>"},{"location":"tags/#infrastructure","title":"infrastructure","text":"<ul> <li>CI</li> <li>Git</li> <li>Gradle</li> <li>Building Mbeddr Locally</li> <li>Build Folder</li> <li>Platform Build Scripts</li> <li>Gitignore File</li> </ul>"},{"location":"tags/#intellij","title":"intellij","text":"<ul> <li>IntelliJ UI</li> <li>IntelliJ Integration</li> <li>IntelliJ SDK</li> <li>Writing an MPS Plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Threading</li> <li>Actions</li> <li>Annotations</li> </ul>"},{"location":"tags/#interactive","title":"interactive","text":"<ul> <li>Console</li> </ul>"},{"location":"tags/#internals","title":"internals","text":"<ul> <li>Index</li> <li>Classloading</li> <li>Editor Development</li> <li>IntelliJ UI</li> <li>IntelliJ Integration</li> <li>IntelliJ SDK</li> <li>Navigating the MPS Sources</li> <li>Utility Classes</li> <li>Writing an MPS Plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Threading</li> <li>Named Threads</li> <li>Example Actions Using Locks</li> </ul>"},{"location":"tags/#java","title":"java","text":"<ul> <li>Java (Base language)</li> <li>Java Style Guide</li> <li>Java Chromium Embedded Framework</li> </ul>"},{"location":"tags/#java_integration","title":"java_integration","text":"<ul> <li>Creating a Command Line Tool</li> <li>Classloading</li> <li>Writing an MPS Plugin with Kotlin</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#mac","title":"mac","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#mbeddr","title":"mbeddr","text":"<ul> <li>General</li> <li>BigProject</li> <li>Building Mbeddr Locally</li> <li>Development Guide</li> <li>Miscellaneous Topics</li> <li>Platform Essentials</li> <li>Common Concepts and Interfaces</li> <li>Interpreter, Coverage, and Tracing</li> <li>Platform Build Scripts</li> <li>Mbeddr MPS Utilities</li> </ul>"},{"location":"tags/#mps_extensions","title":"mps_extensions","text":"<ul> <li>Cell Layout</li> <li>General</li> <li>Platform Essentials</li> <li>Common Concepts and Interfaces</li> <li>Platform Build Scripts</li> </ul>"},{"location":"tags/#mps_language","title":"mps_language","text":"<ul> <li>Build</li> <li>Core Languages</li> </ul>"},{"location":"tags/#native","title":"native","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#openapi","title":"openapi","text":"<ul> <li>Open API</li> </ul>"},{"location":"tags/#plugins","title":"plugins","text":"<ul> <li>Classloading</li> <li>Writing an MPS Plugin with Kotlin</li> <li>General</li> </ul>"},{"location":"tags/#reference","title":"reference","text":"<ul> <li>New Pages</li> <li>Original Authors</li> <li>Utility Classes</li> <li>Named Threads</li> <li>Tools</li> <li>Actions</li> <li>Annotations</li> <li>Core Languages</li> <li>Exceptions</li> <li>Extension Points</li> <li>Gitignore File</li> <li>Icons</li> <li>Issue Trackers</li> <li>Tips for Open Source Maintainers</li> </ul>"},{"location":"tags/#safety","title":"safety","text":"<ul> <li>Language Design</li> </ul>"},{"location":"tags/#settings","title":"settings","text":"<ul> <li>Trouble Shooting Guide</li> </ul>"},{"location":"tags/#solution","title":"solution","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#sources","title":"sources","text":"<ul> <li>Navigating the MPS Sources</li> </ul>"},{"location":"tags/#standalone","title":"standalone","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#theory","title":"theory","text":"<ul> <li>Language Design</li> </ul>"},{"location":"tags/#tools","title":"tools","text":"<ul> <li>External Files and Tools</li> </ul>"},{"location":"tags/#troubleshooting","title":"troubleshooting","text":"<ul> <li>Console</li> <li>Debugging</li> <li>General</li> <li>Trouble Shooting Guide</li> <li>Issue Trackers</li> </ul>"},{"location":"tags/#ui","title":"ui","text":"<ul> <li>Visual Guide</li> <li>Editor Development</li> <li>IntelliJ UI</li> <li>Threading</li> <li>UI Patterns</li> <li>User Experience</li> <li>Icons</li> </ul>"},{"location":"tags/#utility","title":"utility","text":"<ul> <li>BigProject</li> <li>Utility Classes</li> </ul>"},{"location":"tags/#windows","title":"windows","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#z3","title":"z3","text":"<ul> <li>Language Design</li> </ul>"},{"location":"about/editing_this_guide/","title":"Editing This Guide","text":"<p>This guide uses MkDocs + Material for MkDocs \u29c9. The markdown version is Python-Markdown. This page \u29c9 contains the reference for the material theme. Install extra MkDocs plugins in build.gradle + mkdocs.yml.</p> <p>If you are using IntelliJ for editing, it is recommended to install the plugin Grazie Professional \u29c9 for spell-checking. </p>","tags":["guide"]},{"location":"about/editing_this_guide/#editing","title":"Editing","text":"<ul> <li>The first header should be <code>#</code>.</li> <li>Inserted images with Markdown, not HTML: <code>![description](url){width=\"600px\"}</code>. Set the with to 600px or 300px, depending on how big or small the image is</li> <li>footnotes syntax \u29c9</li> <li>The <code>target=_blank</code> attribute and an icon for external links get automatically added to links.</li> </ul> <p>The following symbols must be escaped:</p> <ul> <li>$ is <code>&amp;#36;</code> because it collides with inline Latex blocks.</li> </ul> <p>Trees can be created with the terminal command <code>tree</code>. It supports the <code>-I</code> parameter for excluding folders.</p>","tags":["guide"]},{"location":"about/editing_this_guide/#extensions","title":"Extensions","text":"<p>Besides the Material extensions, the project used the following Pymdown \u29c9 extensions:</p> <ul> <li>pymdownx.betterem \u29c9: different emphasis handling</li> <li>pymdownx.inlinehilite \u29c9: inline code highlighting; example: #!js var test = 0;</li> <li>pymdownx.magiclink \u29c9: linkafies URLs</li> <li>pymdownx.smartsymbols \u29c9: inserts commonly used Unicode characters via ASCII representations.</li> <li>pymdownx.superfences \u29c9: extension to Markdown fences</li> <li>pymdownx.details \u29c9: collapsible elements</li> <li>pymdownx.highlight \u29c9</li> <li>pymdownx.snippets \u29c9: include other Markdown or HTML snippets into the current Markdown file</li> <li>pymdownx.keys \u29c9: simplifies inserting key inputs; example: Ctrl+Alt+Del</li> <li>pymdownx.caret \u29c9: superscript text via caret</li> <li>pymdownx.mark \u29c9: enables marking words</li> <li>pymdownx.tilde \u29c9: subscript text via tilde</li> <li>pymdownx.emoji: support for custom Emojis. Some example icons are in MPS Icons \u29c9.</li> <li>pymdownx.tasklist \u29c9: support for lists with checkboxes</li> <li>mk_in_html \u29c9: support for Markdown in HTML</li> <li>pymdownx.magiclink \u29c9: additional link-related features </li> <li>mdx-spanner \u29c9: enables row and column spanning in Markdown tables</li> </ul>","tags":["guide"]},{"location":"about/editing_this_guide/#macros","title":"Macros","text":"<p>The plugin mkdocs-macros-plugin \u29c9 is activated. You can add variables to the extra section of mkdocs.yml (example: <code>mps_latest</code>) and use the available macros:</p> <ul> <li>contribution_by(GitHub_username)</li> <li>question_by(GitHub_username)</li> <li>answer_by(GitHub_username)</li> <li>mps_url(identifier)</li> <li>image_popup()</li> <li>iets3()</li> <li>mbeddr()</li> <li>mbeddr_platform()</li> <li>mps_extensions()</li> <li>mps</li> </ul> <p>Look through main.py to see how they are implemented.</p> <p>The identifier can start with one of the following special identifiers:</p> <ul> <li>@openapi</li> <li>@mps</li> <li>@baselang</li> <li>@mpsutil</li> <li>@itemis</li> <li>@mbeddr</li> <li>@iets3</li> </ul> <p>The special identifiers get translated to the corresponding package names. Only the last part of the identifier has to be the correct name. The identifier can reference classes, interfaces, concepts, and interface declarations in Base Language,  MPS Extensions \u29c9, mbeddr, and iets3. The rest of the identifier only helps to find the correct node and doesn't have to be exact.</p> <p>Example: <code>@mps.ClassConcept</code> will find <code>jetbrains.mps.baseLanguage.structure.ClassConcept</code>. When the wrong node is selected, enter more parts of the full qualified name of the node.</p>","tags":["guide"]},{"location":"about/editing_this_guide/#diagrams","title":"Diagrams","text":"<p>Kroki enables support for diagrams (examples \u29c9). It supports the following diagrams:</p> <ul> <li>BlockDiag \u29c9</li> <li>BlockDiag \u29c9 (simple block diagrams)</li> <li>SeqDiag \u29c9 (simple sequence diagrams)</li> <li>ActDiag \u29c9 (simple activity diagrams)</li> <li>NwDiag \u29c9 (simple network diagrams)</li> <li>PacketDiag \u29c9 (packet header diagrams)</li> <li>RackDiag \u29c9 (rack diagrams)</li> <li>BPMN \u29c9</li> <li>Bytefield \u29c9</li> <li>C4 (with PlantUML) \u29c9</li> <li>Ditaa \u29c9</li> <li>Erd \u29c9</li> <li>Excalidraw \u29c9</li> <li>GraphViz \u29c9</li> <li>Mermaid \u29c9</li> <li>Nomnoml \u29c9</li> <li>Pikchr \u29c9</li> <li>PlantUML \u29c9</li> <li>Structurizr \u29c9</li> <li>SvgBob \u29c9</li> <li>UMLet \u29c9</li> <li>Vega \u29c9</li> <li>Vega-Lite \u29c9</li> <li>WaveDrom \u29c9</li> </ul> <p>They can be embedded by creating a code block and the text <code>kroki-[diagramtype]</code>.</p> <p>The following sections contain ideas for diagrams.</p>","tags":["guide"]},{"location":"about/editing_this_guide/#blockdiag","title":"blockdiag","text":"","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-1","title":"Diagram 1","text":"DiagramCode <pre><code>blockdiag {\norientation = portrait\n\n    R -&gt; A\n    R -&gt; B\n       B -&gt; C\n            C -&gt; E\n       B -&gt; D\n            D -&gt; F\n                 F -&gt; E\n            D -&gt; G\n       A &lt;- C    \n       B -&gt; D\n\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-2","title":"Diagram 2","text":"DiagramCode <pre><code>blockdiag {   \n    default_node_color = 'yellow' \n\n    if [shape=\"roundedbox\", color='white']\n    condition [numbered = 1, shape=\"roundedbox\", description=\"the condition\"]\n    true_block [numbered = 1, shape=\"roundedbox\"]\n    false_block [numbered = 0-1, shape=\"roundedbox\"]\n\n    if -&gt; condition\n    if -&gt; true_block\n    if -&gt; false_block\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#seqdiag","title":"SeqDiag","text":"DiagramCode <pre><code>seqdiag {\n    MPS -&gt; Clipboard [label = \"Copy Node Reference as URL\"]\n    Clipboard -&gt; Browser [label = \"Paste URL\"]\n    http_server [label=\"MPS HTTP Server\"]\n    Browser -&gt; http_server [label = \"Send request\"]\n    http_server -&gt; MPS [label = \"Open Node\"]\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#actdiag","title":"ActDiag","text":"DiagramCode <pre><code>actdiag {\n  createConcept -&gt; createEditor -&gt; createNodes\n\n  lane language {\n    label = \"Language\"\n    createConcept [label = \"Create concept\"]\n    createEditor [label = \"Create editor\"]\n  }\n\n  lane solution {\n    label =\"Solution\"\n    createNodes [label = \"Create nodes\"]\n  }\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#graphviz","title":"Graphviz","text":"DiagramCode <pre><code>digraph finite_state_machine {\n    rankdir=LR;\n        planning -&gt; analysis\n        analysis -&gt; design\n        design -&gt; implementation\n    ti [label=\"testing &amp; integration\"]\n        implementation -&gt; ti\n        ti -&gt; maintenance\n        maintenance -&gt; planning\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#ditaa","title":"Ditaa","text":"DiagramCode <pre><code>      +--------+\n      |        |\n      |  User  |\n      |        |\n      +--------+\n          ^\n  request |\n          v\n  +-------------+\n  |             |\n  |    Kroki    |\n  |             |---+\n  +-------------+   |\n       ^  ^         | inflate\n       |  |         |\n       v  +---------+\n  +-------------+\n  |             |\n  |    Ditaa    |\n  |             |----+\n  +-------------+    |\n             ^       | process\n             |       |\n             +-------+\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#mermaidjs","title":"mermaid.js","text":"DiagramCode <pre><code>graph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#nomnoml","title":"nomnoml","text":"DiagramCode <pre><code>[Pirate|eyeCount: Int|raid();pillage()|\n  [beard]--[parrot]\n  [beard]-:&gt;[foul mouth]\n]\n\n[&lt;table&gt;mischief | bawl | sing || yell | drink]\n\n[&lt;abstract&gt;Marauder]&lt;:--[Pirate]\n[Pirate]- 0..7[mischief]\n[jollyness]-&gt;[Pirate]\n[jollyness]-&gt;[rum]\n[jollyness]-&gt;[singing]\n[Pirate]-&gt; *[rum|tastiness: Int|swig()]\n[Pirate]-&gt;[singing]\n[singing]&lt;-&gt;[rum]\n\n[&lt;start&gt;st]-&gt;[&lt;state&gt;plunder]\n[plunder]-&gt;[&lt;choice&gt;more loot]\n[more loot]-&gt;[st]\n[more loot] no -&gt;[&lt;end&gt;e]\n\n[&lt;actor&gt;Sailor] - [&lt;usecase&gt;shiver me;timbers]\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#plantuml","title":"plantUML","text":"","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-1_1","title":"Diagram 1","text":"DiagramCode <pre><code>@startuml\nleft to right direction\nskinparam packageStyle rectangle\nskinparam monochrome true\nactor customer\nactor clerk\nrectangle checkout {\n  customer -- (checkout)\n  (checkout) .&gt; (payment) : include\n  (help) .&gt; (checkout) : extends\n  (checkout) -- clerk\n}\n@enduml\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-2_1","title":"Diagram 2","text":"DiagramCode <pre><code>@startwbs\nskinparam monochrome true\n\n* Business Process Modelling WBS\n** Launch the project\n*** Complete Stakeholder Research\n*** Initial Implementation Plan\n** Design phase\n*** Model of AsIs Processes Completed\n**** Model of AsIs Processes Completed1\n**** Model of AsIs Processes Completed2\n*** Measure AsIs performance metrics\n*** Identify Quick Wins\n** Complete innovate phase\n@endwbs\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#bpmn","title":"BPMN","text":"DiagramCode <p>``` &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  OrderReceivedEvent _6-652 _6-674 CalmCustomerTask _6-463 _6-514 _6-565 _6-616 _6-630 _6-630 _6-691 _6-693 _6-691 _6-746 _6-748 _6-748 _6-746 _6-693 _6-632 _6-632 _6-634 _6-634 _6-636 _6-636 _6-125 _6-125 _6-178 _6-178 _6-420 _6-420 _6-430 _6-422 _6-424 _6-422 _6-428 _6-424 _6-426 _6-426 _6-430 _6-428 _6-434 _6-434 _6-436 _6-436          &lt;di:waypoint x=\"834\" y=\"111\"### plantUML \u29c9","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-1_2","title":"Diagram 1","text":"DiagramCode <pre><code>@startuml\nleft to right direction\nskinparam packageStyle rectangle\nskinparam monochrome true\nactor customer\nactor clerk\nrectangle checkout {\n  customer -- (checkout)\n  (checkout) .&gt; (payment) : include\n  (help) .&gt; (checkout) : extends\n  (checkout) -- clerk\n}\n@enduml\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-2_2","title":"Diagram 2","text":"DiagramCode <pre><code>@startwbs\nskinparam monochrome true\n\n* Business Process Modelling WBS\n** Launch the project\n*** Complete Stakeholder Research\n*** Initial Implementation Plan\n** Design phase\n*** Model of AsIs Processes Completed\n**** Model of AsIs Processes Completed1\n**** Model of AsIs Processes Completed2\n*** Measure AsIs performance metrics\n*** Identify Quick Wins\n** Complete innovate phase\n@endwbs\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#bpmn_1","title":"BPMN","text":"DiagramCode <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;semantic:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:semantic=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" id=\"_1275940932088\" targetNamespace=\"http://www.trisotech.com/definitions/_1275940932088\" exporter=\"Camunda Modeler\" exporterVersion=\"1.16.0\"&gt;\n  &lt;semantic:message id=\"_1275940932310\" /&gt;\n  &lt;semantic:message id=\"_1275940932433\" /&gt;\n  &lt;semantic:process id=\"_6-1\" isExecutable=\"false\"&gt;\n    &lt;semantic:laneSet id=\"ls_6-438\"&gt;\n      &lt;semantic:lane id=\"_6-650\" name=\"clerk\"&gt;\n        &lt;semantic:flowNodeRef&gt;OrderReceivedEvent&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-652&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-674&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;CalmCustomerTask&lt;/semantic:flowNodeRef&gt;\n      &lt;/semantic:lane&gt;\n      &lt;semantic:lane id=\"_6-446\" name=\"pizza chef\"&gt;\n        &lt;semantic:flowNodeRef&gt;_6-463&lt;/semantic:flowNodeRef&gt;\n      &lt;/semantic:lane&gt;\n      &lt;semantic:lane id=\"_6-448\" name=\"delivery boy\"&gt;\n        &lt;semantic:flowNodeRef&gt;_6-514&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-565&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-616&lt;/semantic:flowNodeRef&gt;\n      &lt;/semantic:lane&gt;\n    &lt;/semantic:laneSet&gt;\n    &lt;semantic:startEvent id=\"OrderReceivedEvent\" name=\"Order received\"&gt;\n      &lt;semantic:outgoing&gt;_6-630&lt;/semantic:outgoing&gt;\n      &lt;semantic:messageEventDefinition messageRef=\"_1275940932310\" /&gt;\n    &lt;/semantic:startEvent&gt;\n    &lt;semantic:parallelGateway id=\"_6-652\" name=\"\"&gt;\n      &lt;semantic:incoming&gt;_6-630&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-691&lt;/semantic:outgoing&gt;\n      &lt;semantic:outgoing&gt;_6-693&lt;/semantic:outgoing&gt;\n    &lt;/semantic:parallelGateway&gt;\n    &lt;semantic:intermediateCatchEvent id=\"_6-674\" name=\"\u201ewhere is my pizza?\u201c\"&gt;\n      &lt;semantic:incoming&gt;_6-691&lt;/semantic:incoming&gt;\n      &lt;semantic:incoming&gt;_6-746&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-748&lt;/semantic:outgoing&gt;\n      &lt;semantic:messageEventDefinition messageRef=\"_1275940932433\" /&gt;\n    &lt;/semantic:intermediateCatchEvent&gt;\n    &lt;semantic:task id=\"CalmCustomerTask\" name=\"Calm customer\"&gt;\n      &lt;semantic:incoming&gt;_6-748&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-746&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-463\" name=\"Bake the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-693&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-632&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-514\" name=\"Deliver the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-632&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-634&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-565\" name=\"Receive payment\"&gt;\n      &lt;semantic:incoming&gt;_6-634&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-636&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:endEvent id=\"_6-616\" name=\"\"&gt;\n      &lt;semantic:incoming&gt;_6-636&lt;/semantic:incoming&gt;\n      &lt;semantic:terminateEventDefinition /&gt;\n    &lt;/semantic:endEvent&gt;\n    &lt;semantic:sequenceFlow id=\"_6-630\" name=\"\" sourceRef=\"OrderReceivedEvent\" targetRef=\"_6-652\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-632\" name=\"\" sourceRef=\"_6-463\" targetRef=\"_6-514\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-634\" name=\"\" sourceRef=\"_6-514\" targetRef=\"_6-565\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-636\" name=\"\" sourceRef=\"_6-565\" targetRef=\"_6-616\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-691\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-674\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-693\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-463\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-746\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-674\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-748\" name=\"\" sourceRef=\"_6-674\" targetRef=\"CalmCustomerTask\" /&gt;\n  &lt;/semantic:process&gt;\n  &lt;semantic:message id=\"_1275940932198\" /&gt;\n  &lt;semantic:process id=\"_6-2\" isExecutable=\"false\"&gt;\n    &lt;semantic:startEvent id=\"_6-61\" name=\"Hungry for pizza\"&gt;\n      &lt;semantic:outgoing&gt;_6-125&lt;/semantic:outgoing&gt;\n    &lt;/semantic:startEvent&gt;\n    &lt;semantic:task id=\"SelectAPizzaTask\" name=\"Select a pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-125&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-178&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-127\" name=\"Order a pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-178&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-420&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:eventBasedGateway id=\"_6-180\" name=\"\"&gt;\n      &lt;semantic:incoming&gt;_6-420&lt;/semantic:incoming&gt;\n      &lt;semantic:incoming&gt;_6-430&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-422&lt;/semantic:outgoing&gt;\n      &lt;semantic:outgoing&gt;_6-424&lt;/semantic:outgoing&gt;\n    &lt;/semantic:eventBasedGateway&gt;\n    &lt;semantic:intermediateCatchEvent id=\"_6-202\" name=\"pizza received\"&gt;\n      &lt;semantic:incoming&gt;_6-422&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-428&lt;/semantic:outgoing&gt;\n      &lt;semantic:messageEventDefinition messageRef=\"_1275940932198\" /&gt;\n    &lt;/semantic:intermediateCatchEvent&gt;\n    &lt;semantic:intermediateCatchEvent id=\"_6-219\" name=\"60 minutes\"&gt;\n      &lt;semantic:incoming&gt;_6-424&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-426&lt;/semantic:outgoing&gt;\n      &lt;semantic:timerEventDefinition&gt;\n        &lt;semantic:timeDate /&gt;\n      &lt;/semantic:timerEventDefinition&gt;\n    &lt;/semantic:intermediateCatchEvent&gt;\n    &lt;semantic:task id=\"_6-236\" name=\"Ask for the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-426&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-430&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-304\" name=\"Pay the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-428&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-434&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-355\" name=\"Eat the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-434&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-436&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:endEvent id=\"_6-406\" name=\"Hunger satisfied\"&gt;\n      &lt;semantic:incoming&gt;_6-436&lt;/semantic:incoming&gt;\n    &lt;/semantic:endEvent&gt;\n    &lt;semantic:sequenceFlow id=\"_6-125\" name=\"\" sourceRef=\"_6-61\" targetRef=\"SelectAPizzaTask\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-178\" name=\"\" sourceRef=\"SelectAPizzaTask\" targetRef=\"_6-127\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-420\" name=\"\" sourceRef=\"_6-127\" targetRef=\"_6-180\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-422\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-202\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-424\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-219\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-426\" name=\"\" sourceRef=\"_6-219\" targetRef=\"_6-236\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-428\" name=\"\" sourceRef=\"_6-202\" targetRef=\"_6-304\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-430\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-180\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-434\" name=\"\" sourceRef=\"_6-304\" targetRef=\"_6-355\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-436\" name=\"\" sourceRef=\"_6-355\" targetRef=\"_6-406\" /&gt;\n  &lt;/semantic:process&gt;\n  &lt;semantic:collaboration id=\"C1275940932557\"&gt;\n    &lt;semantic:participant id=\"_6-53\" name=\"Pizza Customer\" processRef=\"_6-2\" /&gt;\n    &lt;semantic:participant id=\"_6-438\" name=\"Pizza vendor\" processRef=\"_6-1\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-638\" name=\"pizza order\" sourceRef=\"_6-127\" targetRef=\"OrderReceivedEvent\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-642\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-674\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-646\" name=\"receipt\" sourceRef=\"_6-565\" targetRef=\"_6-304\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-648\" name=\"money\" sourceRef=\"_6-304\" targetRef=\"_6-565\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-640\" name=\"pizza\" sourceRef=\"_6-514\" targetRef=\"_6-202\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-750\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-236\" /&gt;\n  &lt;/semantic:collaboration&gt;\n  &lt;bpmndi:BPMNDiagram id=\"Trisotech.Visio-_6\" name=\"Untitled Diagram\" documentation=\"\" resolution=\"96.00000267028808\"&gt;\n    &lt;bpmndi:BPMNPlane bpmnElement=\"C1275940932557\"&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6-53\" bpmnElement=\"_6-53\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"12\" y=\"12\" width=\"1044\" height=\"294\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6-438\" bpmnElement=\"_6-438\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"12\" y=\"372\" width=\"905\" height=\"337\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-650\" bpmnElement=\"_6-650\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"42\" y=\"372\" width=\"875\" height=\"114\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-446\" bpmnElement=\"_6-446\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"42\" y=\"486\" width=\"875\" height=\"114\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-448\" bpmnElement=\"_6-448\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"42\" y=\"600\" width=\"875\" height=\"109\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6_OrderReceivedEvent\" bpmnElement=\"OrderReceivedEvent\"&gt;\n        &lt;dc:Bounds x=\"79\" y=\"405\" width=\"30\" height=\"30\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-652\" bpmnElement=\"_6-652\"&gt;\n        &lt;dc:Bounds x=\"140\" y=\"399\" width=\"42\" height=\"42\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-674\" bpmnElement=\"_6-674\"&gt;\n        &lt;dc:Bounds x=\"218\" y=\"404\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6_CalmCustomerTask\" bpmnElement=\"CalmCustomerTask\"&gt;\n        &lt;dc:Bounds x=\"286\" y=\"386\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-463\" bpmnElement=\"_6-463\"&gt;\n        &lt;dc:Bounds x=\"252\" y=\"521\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-514\" bpmnElement=\"_6-514\"&gt;\n        &lt;dc:Bounds x=\"464\" y=\"629\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-565\" bpmnElement=\"_6-565\"&gt;\n        &lt;dc:Bounds x=\"603\" y=\"629\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-616\" bpmnElement=\"_6-616\"&gt;\n        &lt;dc:Bounds x=\"722\" y=\"647\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-61\" bpmnElement=\"_6-61\"&gt;\n        &lt;dc:Bounds x=\"66\" y=\"96\" width=\"30\" height=\"30\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-74\" bpmnElement=\"SelectAPizzaTask\"&gt;\n        &lt;dc:Bounds x=\"145\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-127\" bpmnElement=\"_6-127\"&gt;\n        &lt;dc:Bounds x=\"265\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-180\" bpmnElement=\"_6-180\"&gt;\n        &lt;dc:Bounds x=\"378\" y=\"90\" width=\"42\" height=\"42\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-202\" bpmnElement=\"_6-202\"&gt;\n        &lt;dc:Bounds x=\"647\" y=\"95\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-219\" bpmnElement=\"_6-219\"&gt;\n        &lt;dc:Bounds x=\"448\" y=\"184\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-236\" bpmnElement=\"_6-236\"&gt;\n        &lt;dc:Bounds x=\"517\" y=\"166\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-304\" bpmnElement=\"_6-304\"&gt;\n        &lt;dc:Bounds x=\"726\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-355\" bpmnElement=\"_6-355\"&gt;\n        &lt;dc:Bounds x=\"834\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-406\" bpmnElement=\"_6-406\"&gt;\n        &lt;dc:Bounds x=\"956\" y=\"95\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-640\" bpmnElement=\"_6-640\"&gt;\n        &lt;di:waypoint x=\"506\" y=\"629\" /&gt;\n        &lt;di:waypoint x=\"506\" y=\"384\" /&gt;\n        &lt;di:waypoint x=\"663\" y=\"384\" /&gt;\n        &lt;di:waypoint x=\"663\" y=\"127\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-630\" bpmnElement=\"_6-630\"&gt;\n        &lt;di:waypoint x=\"109\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"140\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-691\" bpmnElement=\"_6-691\"&gt;\n        &lt;di:waypoint x=\"182\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"200\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"218\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-648\" bpmnElement=\"_6-648\"&gt;\n        &lt;di:waypoint x=\"754\" y=\"145\" /&gt;\n        &lt;di:waypoint x=\"754\" y=\"408\" /&gt;\n        &lt;di:waypoint x=\"630\" y=\"408\" /&gt;\n        &lt;di:waypoint x=\"631\" y=\"629\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-422\" bpmnElement=\"_6-422\"&gt;\n        &lt;di:waypoint x=\"420\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"438\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"647\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-646\" bpmnElement=\"_6-646\" messageVisibleKind=\"non_initiating\"&gt;\n        &lt;di:waypoint x=\"658\" y=\"629\" /&gt;\n        &lt;di:waypoint x=\"658\" y=\"432\" /&gt;\n        &lt;di:waypoint x=\"782\" y=\"432\" /&gt;\n        &lt;di:waypoint x=\"782\" y=\"145\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-428\" bpmnElement=\"_6-428\"&gt;\n        &lt;di:waypoint x=\"679\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"726\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-748\" bpmnElement=\"_6-748\"&gt;\n        &lt;di:waypoint x=\"250\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"268\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"286\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-420\" bpmnElement=\"_6-420\"&gt;\n        &lt;di:waypoint x=\"348\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"366\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"378\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-636\" bpmnElement=\"_6-636\"&gt;\n        &lt;di:waypoint x=\"686\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"704\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"722\" y=\"663\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-750\" bpmnElement=\"_6-750\"&gt;\n        &lt;di:waypoint x=\"328\" y=\"386\" /&gt;\n        &lt;di:waypoint x=\"328\" y=\"348\" /&gt;\n        &lt;di:waypoint x=\"572\" y=\"348\" /&gt;\n        &lt;di:waypoint x=\"572\" y=\"234\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-436\" bpmnElement=\"_6-436\"&gt;\n        &lt;di:waypoint x=\"918\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"936\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"956\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-632\" bpmnElement=\"_6-632\"&gt;\n        &lt;di:waypoint x=\"335\" y=\"555\" /&gt;\n        &lt;di:waypoint x=\"353\" y=\"555\" /&gt;\n        &lt;di:waypoint x=\"353\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"464\" y=\"663\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-634\" bpmnElement=\"_6-634\"&gt;\n        &lt;di:waypoint x=\"548\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"603\" y=\"663\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-125\" bpmnElement=\"_6-125\"&gt;\n        &lt;di:waypoint x=\"96\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"114\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"145\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-430\" bpmnElement=\"_6-430\"&gt;\n        &lt;di:waypoint x=\"600\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"618\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"618\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"576\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"549\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"360\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"360\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"378\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-642\" bpmnElement=\"_6-642\"&gt;\n        &lt;di:waypoint x=\"545\" y=\"234\" /&gt;\n        &lt;di:waypoint x=\"545\" y=\"324\" /&gt;\n        &lt;di:waypoint x=\"234\" y=\"324\" /&gt;\n        &lt;di:waypoint x=\"234\" y=\"404\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-424\" bpmnElement=\"_6-424\"&gt;\n        &lt;di:waypoint x=\"399\" y=\"132\" /&gt;\n        &lt;di:waypoint x=\"399\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"448\" y=\"200\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-638\" bpmnElement=\"_6-638\"&gt;\n        &lt;di:waypoint x=\"306\" y=\"145\" /&gt;\n        &lt;di:waypoint x=\"306\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"94\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"94\" y=\"405\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-426\" bpmnElement=\"_6-426\"&gt;\n        &lt;di:waypoint x=\"480\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"498\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"517\" y=\"200\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-693\" bpmnElement=\"_6-693\"&gt;\n        &lt;di:waypoint x=\"161\" y=\"441\" /&gt;\n        &lt;di:waypoint x=\"161\" y=\"556\" /&gt;\n        &lt;di:waypoint x=\"252\" y=\"555\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-178\" bpmnElement=\"_6-178\"&gt;\n        &lt;di:waypoint x=\"228\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"265\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-746\" bpmnElement=\"_6-746\"&gt;\n        &lt;di:waypoint x=\"370\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"386\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"386\" y=\"474\" /&gt;\n        &lt;di:waypoint x=\"191\" y=\"474\" /&gt;\n        &lt;di:waypoint x=\"191\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"218\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-434\" bpmnElement=\"_6-434\"&gt;\n        &lt;di:waypoint x=\"810\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"834\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n    &lt;/bpmndi:BPMNPlane&gt;\n  &lt;/bpmndi:BPMNDiagram&gt;\n&lt;/semantic:definitions&gt;\n``` /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n    &lt;/bpmndi:BPMNPlane&gt;\n  &lt;/bpmndi:BPMNDiagram&gt;\n&lt;/semantic:definitions&gt;\n</code></pre>","tags":["guide"]},{"location":"about/new_pages/","title":"New Pages","text":"<p>This page lists all new pages since August 2022.</p>","tags":["reference"]},{"location":"about/new_pages/#april-2024","title":"April 2024","text":"<ul> <li>Reference: Annotations</li> <li>KernelF: Physical Unit Language</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#january-2024","title":"January 2024","text":"<ul> <li>Platform Essentials: Breaking Changes</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#september-2023","title":"September 2023","text":"<ul> <li>Platform Essentials: Platform Migration Guide</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#august-2023","title":"August 2023","text":"<ul> <li>Pull Request Checklist</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#july-2023","title":"July 2023","text":"<ul> <li>Home: Overcoming Obstacles</li> <li>KernelF: Tour</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#june-2023","title":"June 2023","text":"<ul> <li>Reference: Being a Good Developer</li> <li>Build: Advanced GitHub Workflow</li> <li>MPS Internals: Platform UI inspector</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#may-2023","title":"May 2023","text":"<ul> <li>Languages: Cell Layout</li> <li>Home: Performance</li> <li>Platform Essentials: Testing</li> <li>Platform Essentials: Accessing the project</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#march-2023","title":"March 2023","text":"<ul> <li>Reference: Included Libraries</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#february-2023","title":"February 2023","text":"<ul> <li>Reference: Standard Plugins</li> <li>MPS Internals: File Format</li> <li>Build: TeamCity</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#january-2023","title":"January 2023","text":"<ul> <li>MPS Internals: Java Design Patterns in MPS Sources</li> <li>Platform Essentials: How Everything is Connected</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#december-2022","title":"December 2022","text":"<ul> <li>Languages: KernelF</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#november-2022","title":"November 2022","text":"<ul> <li>MPS Internals: Editor Eevelopment</li> <li>Platform Essentials: Build Folder</li> <li>Mbeddr: Mbeddr MPS utilities</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#october-2022","title":"October 2022","text":"<ul> <li>Reference: Issue Trackers</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#september-2022","title":"September 2022","text":"<ul> <li>What Happens on MPS Startup (2021.1.4)</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#august-2022","title":"August 2022","text":"<ul> <li>Platform Essentials: Platform Build Scripts</li> <li>Reference: Gitignore File</li> <li>Reference: Core languages</li> <li>Home: Visual Guide</li> <li>Reference: MPS Extension Points</li> <li>Platform Essentials: Common Concepts and Interfaces</li> <li>Platform Essentials: Contributing</li> <li>Platform Essentials: Building Mbeddr Locally</li> <li>Platform Essentials: Interpreters</li> <li>MPS internal: Writing MPS Plugins with Kotlin</li> <li>Reference: Tips for OS Maintainers</li> <li>MPS internal: IntelliJ Integration</li> <li>MPS internal: JCEF</li> <li>MPS internal: Navigating the MPS Sources</li> </ul>","tags":["reference"]},{"location":"about/original_authors/","title":"Original Authors","text":"<p>This site includes documents and contributions from different sites. Please add yourself if you have contributed content and aren't listed on this page. This repository contains knowledge of the following people (and probably more) in alphabetical order:</p> <ul> <li>@abstraktor (internal knowledge base)</li> <li>@AlexeiQ (mbeddr wiki, internal knowledge base)</li> <li>@arimer (internal knowledge base)</li> <li>@coolya (mbeddr wiki, internal knowledge base)</li> <li>@dbinkele (internal knowledge base)</li> <li>@DomenikP (mbeddr wiki)</li> <li>@enikao (mbeddr wiki)</li> <li>@hbaechmann (internal knowledge base)</li> <li>@itnef (internal project)</li> <li>@JanMosigItemis (mbeddr wiki)</li> <li>@joao-silveira (answered questions)</li> <li>@jonaskraemer (internal knowledge base)</li> <li>@joswarmer (mbeddr wiki)</li> <li>@kbirken (mbeddr wiki)</li> <li>@krinara86 (mbeddr wiki)</li> <li>@markusvoelter (mbeddr wiki)</li> <li>@sergej-koscejev (mbeddr wiki, answered questions)</li> <li>@slisson (answers to many questions, internal knowledge base)</li> <li>@szabta89 (mbeddr wiki)</li> <li>@till-f (mbeddr wiki)</li> <li>@wsafonov (internal knowledge base, answered questions)</li> </ul>","tags":["reference"]},{"location":"aspects/accessory_models/","title":"Accessory Models","text":"<ul> <li>Adding builtins for an existing language \u29c9 (Specific Languages' blog)</li> </ul> <p>How do accessory models and utility models differ in terms of dependencies?</p> <p>Utility models are models of a language that don\u2019t have one of the names reserved for the aspects. There is nothing special about them regarding dependencies. Accessory models are automatically part of the imported models if you add the language to the used languages.</p> <p>How do you decide between providing a standard library shipped with the language vs. located in the user repository?</p> <p>It depends on several factors, such as:</p> <ul> <li>The scope of the library: Is it intended to be used by many users across different domains, or is it specific to a particular project or context?</li> <li>The stability of the library: Is it well-tested and documented, or is it still under development and subject to frequent changes?</li> <li>The library's dependencies: Does it rely on other libraries or external resources, or is it self-contained and portable?</li> <li>The size of the library: Is it large or small, and how does it affect the distribution and performance of the language?</li> <li>The maintainability of the library: Is it easy or hard to update and fix bugs, and who is responsible for doing so? Should users be able to edit the library?</li> </ul> <p>What are examples of accessory models in the real world?</p> <ul> <li>a catalog of scenarios</li> <li>a glossary with referenceable terms</li> <li>a container of predefined nodes such as languages, base types, units, modes</li> <li>default styles sheets for the documentation</li> </ul> <p>What are examples of accessory models in MPS?</p> <ul> <li>custom collections containers</li> <li>predefined symbol classes and regular expression</li> <li>lightweight DSL classes that are instantiated by the user and processed in the generator</li> <li>generation plans</li> </ul>","tags":["aspect"]},{"location":"aspects/actions/","title":"Action Aspect","text":"<p>The action aspect defines node factories and copy/paste related handlers.</p> <p>Are node factories used when calling new node? <p>No. Editor Actions | MPS \u29c9 contains more information.</p> <p>Where can you find all key mappings for the editor?</p> <p>MPSEditorActions.xml \u29c9 contains Windows and Mac shortcuts for editor actions.</p> Why is a custom action map not executed on a CellModel_Collection? <p>I can reference an action map from an editor collection cell in MPS.</p> <p></p> <p>However, my defined actions are never executed when the editor is used. Why is this so, and how to fix it?</p> <p>Reason for the Problem</p> <p>In general, the applied actions should be invoked and executed. However, depending on the content of the collection cells, MPS might generate some default actions which will override your custom actions.</p> <p>Example</p> <p>You have a read-only model access cell inside the collection cell:</p> <p></p> <p>In this case, the internal MPS generator for <code>CellModel_ReadOnlyModelAccessor</code> will automatically generate and register some default actions like delete/backspace   \u29c9, which in the end, will prohibit your custom action from being applied.</p> <p>Solution</p> <p>You can use the cell explorer (Language Debug \u2192 Show Cell in Explorer) to see which actions are defined for a cell. Deactivate the automatically applied action with the help of custom editor cells (CellModel_CustomFactory \u29c9). You can use <code>CellModel_CustomFactory</code> to wrap the cells in your collection which generate unwanted actions and deactivate them.</p> <p></p> <p><sub>contributed by: @arimer<sub> <p>Can you create a copy-paste handler/paste wrapper for arbitrary concepts?</p> <p>Yes, the handlers can be created for any concept, e.g. ClassConcept. You don't have to use the language containing the handler in the model.</p> <p>How can I call the copy-and-paste handler programmatically?</p> <ul> <li>Copy: <code>DataTransferManager.getInstance().preProcessNode()</code></li> <li>Paste: <code>DataTransferManager.getInstance().postProcessNode()</code></li> </ul> <p>CopyPasteUtil \u29c9 can help you with those two actions.</p> <p>I have an interface <code>IStatement</code>and two concepts <code>StatementA</code>, and <code>StatementB</code>, that implement that interface. I paste a node of concept <code>StatementA</code> into a node of concept <code>StatementB</code> into a role that accepts <code>IStatement</code>. Why is the paste wrapper not called?</p> <p>A paste wrapper only modifies the pasted node if it can change the source concept to the target concept and if the pasted node is not already an instance of the target concept. In the described case, the node of concept <code>StatementA</code> is already an instance of <code>IStatement</code>, and the paste wrapper is not called.</p> <p>Edit: Not sure if this is really correct. Maybe the problem was rather that the paste wrapper was not implement for the direct concept but for the common interface.</p>","tags":["aspect"]},{"location":"aspects/behavior/","title":"Behavior Aspect","text":"<p>The behavior aspect can be used for defining methods for the concepts of the language.</p> <p>Can you use asynchronous code in behavior methods such as calling external tools?</p> <p>Be careful when doing so. Make sure to not mix concurrent locking aspects such as write and read actions with behavior code.  It should always be assumed that you have the correct lock in these methods. Move the code concerning the concurrent access for example into a background task. More information can be found in Progress indicators | MPS \u29c9.</p> <p>Where can you save temporary information about nodes?</p> <p>Consider saving temporary data about nodes in annotations and user objects (node/.putUserObject, node/.getUserObject \u29c9) instead of introducing properties.  You can store and access Java objects in <code>SNode::putUserObject()</code> as key-value pairs) where you usually could not access them in the MPS context, e.g. keeping them as node members and access them in an editor, a checking rule or anything else. This approach is hard to trace and maintain and should only be used in exceptional cases. For the generator, consult the section Transferring User Data of the generator documentation \u29c9.</p> How to mark a constructor-created child optional? (created by a light quotation) <p>Example:</p> <p></p> <p>Solutions:</p> <ul> <li>Initialize it with <code>null</code> in the light quotation.</li> <li>Create it without a light quotation.</li> <li>Allow the child to be optional (<code>[0..1]</code>).</li> </ul> <p>How can you delete a child node from a node where the child\u2019s concept no longer exists and the parent node's child link is no longer defined?</p> <pre><code>node.getChildren().where(\u2026).foreach {it=&gt; \n    it.delete\n}\n</code></pre> Why does the virtual method have isVirtual=false? <p>Given there is a virtual behavior method <code>getPresentation</code>. When I override <code>getPresentation</code> in a subconcept, it displays the overriding method to be virtual.</p> <p></p> <p>Yet, I see that <code>methodDeclNode.isVirtual</code> is null.</p> <p></p> <p>Why is that?</p> <p>Note that <code>isVirtual</code> and <code>isVirtual()</code> on a method have different semantics.</p> <pre><code>public boolean isVirtual() { \n    return this.isVirtual || this.overridenMethod != null; \n}\n</code></pre> <p>The editor shows that a method is virtual when <code>isVirtual()</code> is true. As a result, overriding methods of virtual methods are not necessarily having <code>isVirtual=true</code>, but will still display virtual.</p> <p>The rationale behind this may be that if one method overrides another one, both must be virtual. This information is needed so that the runtime will find out which of the two implementations to call. So we may read the <code>isVirtual</code> more precisely as \"is explicitly virtual\", and <code>isVirtual()</code> as \"is effectively virtual\".</p> <p><sub>contributed by: @abstraktor<sub>","tags":["aspect"]},{"location":"aspects/behavior/#initialization","title":"Initialization","text":"<p>The constructor in the behavior aspect is a bit confusing to beginners because the node is not yet attached to its parent. In the case of root nodes, it might not even have a parent.</p> <p>Internally, there is also the idea of node owners that the JavaDoc of SNodeOwner \u29c9 and its implementing classes describe. When you create a new node, the owner is an FreeFloatNodeOwner, This is the state any node has at creation time when a node wasn't added to any model yet. When the node is part of a model, it has an AttachedNodeOwner. After calling <code>myNode.detach</code> it has an DetachedNodeOwner \u29c9. The node could go be added back to a model.</p> How do you initialize a node?  <p></p> <p>How can I ensure that all created nodes will have a non-null <code>HTMLDescription</code>?</p> <p>Using a node factory</p> <p>The node factory will be called when</p> <ul> <li>The code completion menu is invoked to create such a node or to replace another one.</li> <li><code>add new initialized</code>, <code>set new initialized</code>, or <code>replace new initialized</code> is called.</li> <li>Such a node is created as a root from the context menu in the project view.</li> </ul> <p>The node factory is not called when</p> <ul> <li>You use quotations to create the node e.g. <code>&lt;Car()&gt;</code>.</li> <li>Viewing the node in the editor.</li> <li>Adding it as a root with <code>model.add root(&lt;Car()&gt;)</code>.</li> <li>Adding it as a root with <code>model.add new root(Car)</code>.</li> </ul> <p></p> <p>Using a behavior constructor</p> <p>Using a behavior constructor will only partially achieve this. Note that it will only be called when</p> <ul> <li>creating nodes with <code>add new initialized()</code>, <code>set new initialized()</code> and similar methods from <code>j.m.lang.actions</code> and <code>j.m.lang.smodel</code>.</li> <li>creating a node with <code>new node&lt;Car&gt;()</code>.</li> </ul> <p>Using a quotation will not call this constructor.</p> <p></p> <p>Using a property getter</p> <p>You could use an <code>initialized</code> variable and a combination of property getters and setters.</p> <p>This solution would work only for properties, not children or references, and requires quotations to set the initialized value if trying to override the default. Furthermore, your quotations will still be marked. </p> <p></p> <p> Usage </p> <p>Can you access the parent in the constructor? </p> <p>No, it doesn't work because the node is not attached yet (Concept constructors | MPS). Use a node factory \u29c9 to access the parent instead.</p> <p>How can you query the context in a node constructor?</p> <p>Does anyone know a way to find the contextExpression from the node constructor?</p> <p>Use node factories instead of constructors and make use of the <code>enclosingNode</code> parameter.  Constructors are invoked always when creating a node. Node factories are executed only by the editor and by the <code>new initialized ...</code> expression.</p> <p>Note: Node factories are invoked in the inverse order of constructors. MPS will first execute the specific node factory and the more generic ones if they exist.</p> <p>Is there a way to call the constructor of a super-concept inside the constructor of a sub-concept?</p> <p>Something like: <code>java constructor { superConcept() }</code></p> <p><code>concept/MyConcept/.new initialized instance()</code> provides this behavior.</p>","tags":["aspect"]},{"location":"aspects/behavior/#bugsmissing-features","title":"Bugs/Missing Features","text":"<p>Behavior methods can only partially be compared to ordinary Java methods. They don't support as many feature because the behavior aspect uses a custom generation plan that doesn't included all Base Language extentions and are internally differently implemented.</p> <p>How can you use generic return types where the returned expressions is cast to concept which is a parameter of the function? <p>This is not possible (MPS-22502). The as cast expects a reference to a concept, the type variable can't be used in this place. There are ways to circumvent this by using lower level code but it won't help. I think you also can't really use the information from the type variable because this information is not available at runtime because of Java type erasure \u29c9.</p> <p>Can you use a more specific return type while overriding a behavior method?</p> <p>No, it is not possible (MPS-27720 \u29c9).</p> <p>Can you use variable arguments (varArgs) in behavior methods?</p> <p>No, it is not possible (MPS-31056 \u29c9).</p> <p>Can you enter a throws clause in behavior methods?</p> <p>No, it is not possible (MPS-22306 \u29c9).</p>","tags":["aspect"]},{"location":"aspects/constraints/","title":"Constraints Aspect","text":"<p>The constraints aspect defines constraints for the concepts of the language.</p>","tags":["aspect"]},{"location":"aspects/constraints/#general","title":"General","text":"<p>You can create new constraints using the concept <code>ConceptConstraints</code>. The \"new\" experimental constraint rules still might not support all the features of the old approach.</p> <p>How do you hide inapplicable operands in dot expressions?</p> <p>Dot expressions: hiding inapplicable operands \u29c9 (Specific Languages' blog)</p> <p>Are there any useful helper classes?</p> <ul> <li>ModelConstraints \u29c9: This class can calculate the constraint/scope of a specific concept/node programmatically.</li> </ul>","tags":["aspect"]},{"location":"aspects/constraints/#properties","title":"Properties","text":"<p>You can use property constraints to add setters, and getters and check if a new property value is valid. The getters are especially useful for setting properties based on other properties. Example: A wrapper concept that referencable a node can use the name of the reference as its name. For a reference r, you can implement INamedConcept \u29c9 in your concept and set the property getter of name to <code>r.name</code>.</p> <p>How can you set default values for properties?</p> <p>Use the language com.mbeddr.mpsutil.propertydefault from  mbeddr platform \u29c9.</p> <p>The property value isn't valid </p> <p>Specific Languages Blog: Invalid property values \u29c9</p>","tags":["aspect"]},{"location":"aspects/constraints/#references","title":"References","text":"<p>You normally add a node reference constraint to set the scope. The inline scopes and inherited scopes both have advantages and disadvantages. You normally use the inline scopes where you can extract the scope into a utility class when you want to reuse it. The inherited scope is often used for references that inherit the referenced concept's scope. It makes finding the original scope declaration harder, though.</p> <p>How can you emulate references?</p> <p>Pseudo-references: emulating references \u29c9 (Specific Languages' blog)</p> <p>How do you check for an unresolved reference programmatically?</p> <pre><code>private static boolean isValidReference(reference ref) {\n    if (ref == null ) return false; }\n    SNode target = SNodeOperations.getTargetNodeSilently(ref);\n    target != null &amp;&amp; target.getModel() != null;\n}\n</code></pre> <p><sub>answered by: @kbirken<sub>","tags":["aspect"]},{"location":"aspects/constraints/#scopes","title":"Scopes","text":"<p>How do you filter scopes? Which scopes are available?</p> <p>FilteringScope takes an existing scope and can do the filtering. Using reference scope | MPS documentation \u29c9 lists some other scope implementations.</p> What's the best way to wrap a list of nodes into a Scope? <p>I have a list of nodes and want to wrap them into a scope. How do you do that?</p> <p>You're probably looking for <code>ListScope.forResolvableElements(sequence&lt;node&lt;&gt;&gt; elements)</code>.</p> <p>forResolvableElements creates list scopes and also implements getName(child) like forNamedElements, yet returning the resolveInfo if the node is an IResolveInfo, the name if it is an INamedConcept \u29c9 or else calls <code>getPresentation()</code>.</p> <p>forNamedElements</p> <p>I'm unsure about the use-case of <code>ListScope.forNamedElements(sequence&lt;node&lt;&gt;&gt; elements)</code>, but it behaves unexpected in some cases:</p> <p>Note that elements with a blank name are not part of the scope created by <code>ListScope.forNamedElements(sequence&lt;node&lt;&gt;&gt; elements)</code>. They'll get silently omitted.</p> <p>Note that elements that are not an instance of INamedConcept \u29c9, will make <code>forNamedElements</code> throw an exception.</p> <p><sub>contributed by: @abstraktor<sub> <p>How can you combine scopes?</p> <p>Use the class CompositeScope \u29c9.</p> <p>What's the difference between parent scope and super.getScope?</p> <p>A parent scope asks your node or up in the hierarchy for the scope until it finds a scope provider. <code>super.getScope</code> will use the implementation from the super-concept.</p> <p>What does the resolve attribute in the XML files is used for? It often shows up in the diff tool or when running migrations.</p> <p>The resolve attribute helps to bind references again. Assume you have a Base Language class that declares a variable myVar that you refer to. Now you delete the variable, which destroys the reference to that variable. Then you create a parameter called myVar. After pressing F5, the variable reference is bound to the parameter again.</p> <p>This rebinding also works after restarting MPS because the reference text string is stored. Now, If you change the name of myVar to myParam, MPS automatically updates the projection. It also updates the reference in the same model, not everywhere (because that would be a global search). Note: You can rename it everywhere if you don't just type over the name of myVar but use rename refactoring (F6) . If you had a reference to myVar in some unrelated model, maybe even in a different module, resolveInfo would not be updated.</p> <p>MPS updates the resolveInfo at some point, most of the time when it rewrites the model. That might happen during migration. You can also force it by choosing main menu \u2192 File \u2192 Save All.</p> <p><sub>contributed by: @enikao<sub>","tags":["aspect"]},{"location":"aspects/dataflow/","title":"Dataflow Aspect","text":"<p>A language's data flow aspect allows you to find unreachable statements, detect unused assignments, or check whether you didn't initialize a variable before it's read.</p> <p>\u2014 MPS documentation</p> <p>Where can you find good examples to understand how dataflow works?</p> <p>Look at the data flow builders of jetbrains.mps.baselanguage. You can also search for usages of DataFlowBuilderDeclaration \u29c9 in general.</p> <p>What other MPS-related dataflow projects exist?</p> <ul> <li>MPS-DF is a dataflow extension for MPS (<code>com.mbeddr.mpsutil.dataflow</code>): An Extensible Framework for Variable-precision Data-flow Analyses in MPS | Tam\u00e1s Szab\u00f3 \u29c9</li> <li>IncA \u29c9 is a program analysis framework.</li> </ul>","tags":["aspect"]},{"location":"aspects/documentation/","title":"Documentation Aspect","text":"<p>The language com.mbeddr.doc in  mbeddr \u29c9 contributes to this aspect. An old documentation of the documentation languages can be found here \u29c9. It allows defining a documentation node that you export to XHTML, Latex, and MarkDown. You can implement new targets quickly. When you invoke the intention Add Reference to Documented Concept while defining a new section as part of a chapter, the Documentation tool at the bottom of the screen shows the documentation for this concept.</p> <p></p> <p>This tool is just one possible way of viewing the documentation that you write with com.mbeddr.doc. You can, for example, also export it as an HTML document that you can publish online or offline, or write a new exporter to support the format that you need.</p> <p>There are also different types of documentation that might require different (non-MPS) tools. On the one hand, onboarding and domain-specific guides might work better outside MPS, for example as a webpage or generated Word document. Domain-specific guides can also contain best practices, naming conventions, design patterns, and other topics. On the other hand, users can view documentation that describes the MPS languages and the RCP itself in the documentation tool.</p> <p>You can also add tips to your RCP \u29c9 (called tip of the day) or add a help URL in the inspector of concepts to better integrate documentation into the tool. Depending on your project, you might also want to provide onboarding training in the form of videos, live trainings or workshops depending on the number of users.</p> <p>To learn more about writing documentation, read 10 Best Practices for Writing Documentation | grammarly.com \u29c9</p> <p>How do you export the documentation?</p> <p>Click Make Model or Rebuild Model in the model's menu containing the documentation. A new folder doc_gen will get generated.</p> <p>Should you write documentation? Is this aspect necessary?</p> <p>Yes, code is only sometimes self-documenting. You have the following possibilities for writing documentation: </p> <ul> <li>JavaDoc (Use javadoc liberally \u29c9)</li> <li>the intention Document \u29c9</li> <li>com.mbeddr.documentation</li> <li>com.mbeddr.doc</li> <li>the short description property of concepts</li> <li>DocumentedNodeAnnotation \u29c9</li> </ul> <p>How can you show the documentation of a concept in the documentation tool?</p> <p>Take a look at the doc.aspect project in  mbeddr \u29c9. A node attribute can be attached to pieces of a document to bind the document to some concept or node. There is also an example project which demonstrates the usage.</p> <p><sub>answered by: @szabta89<sub> <p>Is there a way to resolve references to embedded images (screenshots) across different documents?</p> <p>Add the document containing the reference to the depends on section of the current document.</p>","tags":["aspect"]},{"location":"aspects/editor/","title":"Editor Aspect","text":"<p>The editor aspect defines the projectional editor of a concept.</p> <ul> <li>old cheatsheet \u29c9</li> </ul>","tags":["aspect"]},{"location":"aspects/editor/#general","title":"General","text":"<p>To learn more about internal editor topics, visit MPS Internals: Editor Development.</p> <p>What happens when you press F5 in the editor?</p> <p>F5 in editor \u29c9 (Specific Languages' blog)</p> <p>How can you delete non-existing children, references, or properties from a node?</p> <p>Switch to the reflective editor and remove the offending parts. There is also an enhancement script \u29c9 that can remove properties.</p> <p>Is there a way to prevent users from adding and removing elements in a list in the MPS editor? The elements in the list should still be editable, but adding/removing shouldn't be allowed.</p> <p>There are two solutions:</p> <ol> <li>Use a query list with empty insert/delete handlers.</li> <li>Create an action map/inline action cell with empty blocks for the actions <code>INSERT</code> and <code>INSERT_BEFORE</code>.</li> </ol> <p>I've set a color of type java.awt.Color in a style property query, but the color is different when using the Darcula theme.</p> <p>The return type of those functions indicates that the return type is <code>java.awt.Color</code>, but the generator maps these colors to theme-dependent colors. The only avoid to avoid these mappings is to use custom factories. here \u29c9 contains more information about theme-dependent colors.</p> <p>What is the difference between an empty cell and a simple constant cell without content?</p> <p>Both cells work with an internal text line, but the <code>constant cell</code> supports more styling for the text line. The cursor also looks different.</p> <p>A constant cell supports the cell actions <code>LEFT, RIGHT, LOCAL</code><code>HOME/END,SELECT</code><code>RIGHT/LEFT, SELECT</code><code>LOCAL</code><code>HOME/END, COPY, PASTE, CUT</code>, and <code>CLEAR_SELECTION</code>, which it inherits from the internal label cell class. It has methods to validate the text (the only correct text is the specified text in the editor) and synchronize the cell with the model (that means returning to the original text after editing the text).</p> <p>The empty cell inherits from the  basic internal cell, which supports only left and right transformations (<code>LEFT_TRANSFORM</code>, <code>RIGHT_TRANSFORM</code>). It also doesn't support the <code>editable</code> style sheet item, which means no support for editing the text.</p> <p>An empty cell is a very stripped-down version of a constant cell and also has a somewhat different implementation because of the other base classes.</p> <p>I have actions for mouse clicks in my language, and they also trigger for right mouse clicks. Can we prevent that generally or by manually/programmatically detecting which mouse button fired the event?</p> <p>No, the selection manager executes the click action for the selected cell. You will only get this information with the original MouseEvent that the editor does not forward to the editor cell. You can't restore the event. It would be possible to register a new mouse listener for the editor component through an editor extension that not only creates the click action for the selected cell but also saves the mouse button somewhere. The EditorComponent \u29c9 contains the original implementation.</p> <p>I want to create a DSL using diagrams or a visual programming language. Are there any inspirations?</p> <p>Have a look at Visual Programming Languages - Snapshots | interfacevision.com \u29c9. This page has a lot of examples of visual programming languages dating back to 1963 up to recent languages like Scratch.  MPS Extensions(documentation \u29c9) supports diagrams, and you can use them as the base building block of a new language.</p>","tags":["aspect"]},{"location":"aspects/editor/#menus","title":"Menus","text":"<p>Transformation Menu Language | MPS documentation \u29c9 describes all the menus that can be influenced. If you use Grammar Cells \u29c9 from  MPS Extensions \u29c9, transformation and substitution menus might not be needed at all. When you use the language, you only need to use empty substitutions menus for concepts that shouldn't be substituable at all.</p> <p>Explain the different menu-related terms </p> <ul> <li>Menu definitions have two flavors named and default and can be defined in transformation or substitute menus.</li> <li> <ul> <li> <p>Default substitutions will replace the default menu that MPS shows.</p> <p>Shortcut: Ctrl+Space or Cmd+Space</p> </li> </ul> <p>Default menu</p> <ul> <li>Transformation menus     define UI actions that show up in various locations. The menu consists of a list of sections.     Each section contains a list of menu parts for a set of locations.      At runtime, the menu parts and locations decide the content of the completion menu.     The contents of the completion menu are called menu items.</li> <li>Parameterized actions     allow calculating a list of elements of a specific type to be shown in the completion menu.     They calculate all elements for the substitution menu and influence the node creation.     Moreover, they define the selection of where the cursor should be placed.</li> </ul> </li> </ul> <p>How do you find out where a substitute menu entry is coming from?</p> <p>Use the Menu Trace Tool window. Menu Trace Tool Window | MPS \u29c9 contains more information.</p> <p>How can you add smart references using the transformation menus?</p> <p>Adding smart references using transformation menus \u29c9 (F1RE's blog)</p> What's the best way to improve the autocomplete description of concepts? <p>As you can see in the screenshot, the concepts of both opening braces are indistinguishable.</p> <p></p> <p>I can change the description by modifying the short description in the concept structure.</p> <ol> <li>What's the best format to improve these descriptions?</li> <li>Is this the correct/best way to change the autocomplete concept description?</li> </ol> <p></p> <p></p> <p><sub>asked by: @AlexeiQ<sub> <p>Generally, it's up to the users and specific context to decide what makes sense to put into the description text. It should provide additional semantic information to those unfamiliar with the language to help them pick up the right concept from the code completion menu.</p> <p>The short description in the concept is the original, simple way to provide a static description in the code completion menu. You can also add your substitute action in the substitute menu of the concept (editor aspect) to get complete control over the code completion menu and to be able to generate the text dynamically based on the context.</p> <p></p> <p></p> <p><sub>answered by: @wsafonov<sub>","tags":["aspect"]},{"location":"aspects/editor/#languages","title":"Languages","text":"<p>Many languages were developed over the years that help with creating better editor. Most of the language contain custom editor cells that you can use the same way as standard cells such as constant or collections cells. You only need to import the corresponding language in the editor aspect.</p> <p>I need a specific graphical notation/feature for the editor </p> <p>Have a look at the complete extension list \u29c9 from  MPS Extensions \u29c9.</p> <p>I need hyperlinks </p> <p>Use the language com.mbeddr.mpsutil.hyperlink from the  mbeddr platform \u29c9.</p> <p>How do you create clickable links?</p> <ul> <li>Creating clickable URL links in the editor \u29c9 (Specific Languages' blog)</li> <li>More clickable URL links \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you include non-child relations in the editor?</p> <p>Use the language com.mbeddr.mpsutil.editor.querylist from  MPS Extensions \u29c9.</p>","tags":["aspect"]},{"location":"aspects/editor/#editor-declaration","title":"Editor Declaration","text":"<p>This section contains some more advanced topics and questions when defining editors.</p> <p>Is there a disadvantage to using the indent layout instead of the indent cell mode?</p> <p>No. There used to be performance issues with bigger models that were fixed in MPS 2021.1 \u29c9.</p> <p>How do you use an empty text for empty cells?</p> <p>Use empty text for empty cells \u29c9 (Specific Languages' blog)</p> How do you set the cursor to the first editable cell? <p></p> <ul> <li>(A) What it looks like after creation</li> <li>(B) Initial situation with cursor at (1): pressing Enter leads to (C)</li> </ul> <p>The problem is that in (C), the cursor is at (2), right before a read-only cell, and thus editing or moving to the next cell is impossible. I want the cursor to jump to the first editable cell at position (3).</p> <p>Structure of the new node in (C):</p> <p></p> <p>Editor of the new node in (C):</p> <p></p> <p>Usually, you would set the attracts focus property of the cell, where the cursor should be positioned, to <code>attractsFocus</code> or <code>FirstEditableCell</code>. But, since C.2 and C.3 are error cells, the default behavior is to set the cursor in front of the first error cell, which is (C.2).</p> <p>Therefore, change the first part of your editor to a query list cell (A), which references the \"member\" in the cell properties (B), and set the read-only property on the query list.</p> <p></p> <p><sub>contributed by: @AlexeiQ<sub> <p>Can the selected value of one Java Swing component be accessed from inside another Java Swing component?</p> <p>Yes: Is it possible to access the selected value of one Java Swing component from inside another Java Swing component? | MPS forum \u29c9</p> <p>How can you access an icon stored in a concept?</p> <p>Create a new custom cell: </p> <pre><code>new AbstractCellProvider() {\n    @Override\n    public EditorCell createEditorCell(EditorContext p1) {\n            EditorCell_Image.createImageCell(context, node, {\n                EditorContext context, SNode node =&gt; GlobalIconManager.getInstance().getIconFor(concept); \n            });\n    }\n};\n</code></pre> <p>How can you paint the background of specific editor cells with a different color based on the analysis of the model?</p> <ul> <li>with the help of a conditional editor</li> <li>by using the class <code>NodeHighlightManager</code>:</li> </ul> <pre><code>NodeHighlightManager highlightManager = this.editorComponent.getHighlightManager(); \nEditorMessageOwner messageOwner = this.editorComponent.getHighlightMessagesOwner();\n(...)\nhighlightManager.mark(((SNode) ref), HighlightConstants.INSTANCES_COLOR, \"usage\", messageOwner);\n</code></pre> <p>The second approach performs better because the highlighter runs asynchronously, not during the editor rebuild.</p> <p>How can you hide a custom cell in the editor? (show if property)</p> <p>Custom cells expect only a cell provider in the inspector but don't offer the possibility to specify other attributes to set, for example, \"show if.\" How can I hide a custom cell under a specific condition? (MPS-33195 \u29c9)</p> <p>The meta-model allows specifying the show if property and other attributes on a custom cell, and the generator will generate the correct code for it. The editor for the inspector doesn't include it. You can use the reflective editor to specify the condition.</p> <p>Since these attributes are not visible and you need this knowledge to find them, the alternative for better visibility is to surround the custom cell with a collection and set the show if property on the collection.</p> <p><sub>contributed by: @AlexeiQ<sub> <p>How do you split child collections?</p> <p>Advanced editors: splitting child collection in the editor \u29c9 (Specific Languages' blog)</p> <p>How can I show an editor cell only if the edited node/sub-nodes are currently the active selected nodes?</p> <p>You can implement a cell similar to the cell EditorCell_MathEnd \u29c9 in  MPS Extensions \u29c9.</p>","tags":["aspect"]},{"location":"aspects/editor/#editor-hints","title":"Editor Hints","text":"<p>Is there a utility class related to editor hints?</p> <p>Yes, there is in  mbeddr: EditorHintHelper \u29c9.</p> <p>How can you set editor hints?</p> <ul> <li>You can set hints via <code>editorContext.getEditorComponent().getUpdater()</code><ul> <li>Set explicit hints for nodes.</li> <li>Set initial hints globally. They behave similarly to pushed hints.</li> </ul> </li> <li> <p>Via right-click: Push editor hints and select a specific one.</p> </li> <li> <p>Via an EditorHintToggleAction \u29c9 (e.g., in action declarations)</p> <ul> <li>They are not visible in the push Editor hints menu.</li> <li>If you need the same behavior, for example, in intentions, you can use code from there (via ConceptEditorHintSettingsComponent.HintsState \u29c9)</li> </ul> </li> <li>Set explicit hints for nodes and hints via EditorHintToggleAction \u29c9.   The usage of ConceptEditorHintSettingsComponent.HintsState \u29c9 is not so obvious.</li> </ul> <p>Can I push editor hints with a node attribute?</p> <p>Create a custom factory cell (available in  MPS Extensions \u29c9) with a factory method similar to the following:</p> <pre><code>factory method(editorContext, node, cell)-&gt;EditorCell {\n    node&lt;&gt; n = node;\n    editorContext.getEditorComponent().getUpdater().addExplicitEditorHintsForNode(n.parent/.getReference(), concept editor hint/HintA/);\n    cell\n}\n</code></pre>","tags":["aspect"]},{"location":"aspects/editor/#inspector","title":"Inspector","text":"<p>As a language developer, you often use the inspector in the editor aspect to set styles, or change macros in the editor aspect. Some projects use the inspector nearly not all, but it can be good solution to not clutter the editor: Move rarely needed information to the Inspector \u29c9 (Specific Languages' blog)</p> <p>How can you open the inspector programmatically?</p> <pre><code>editorContext.openInspector()\n</code></pre> <ul> <li>Opening Inspector automatically \u29c9 (Specific Languages' blog)</li> <li>Opening Inspector automatically: Selection listeners \u29c9 (Specific Languages' blog)</li> <li>Opening Inspector automatically: Editor extensions \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you focus on a node in the inspector?</p> <ul> <li>Focusing on a node in the inspector \u29c9 (Specific Languages' blog)</li> </ul> <p>Highlighting constraint errors in the inspector doesn't work.</p> <p>Known bug (MPS-32350 \u29c9). Pressing F5 helps.</p>","tags":["aspect"]},{"location":"aspects/editor/#open-api","title":"Open API","text":"<p>This section contains answers to code-related questions.</p> <p>How can you open the editor for a node programmatically?</p> <pre><code>NavigationSupport.getInstance().openNode()\n</code></pre> <p>How can you override an arbitrary editor?</p> <p>Use the language de.slisson.mps.conditionalEditor from  MPS Extensions \u29c9.</p> <p>How can you get the font of an editor?</p> <pre><code>jetbrains.mps.nodeEditor.EditorSettings#getDefaultEditorFont()\n</code></pre> <p>How can you subscribe to editor changes?</p> <ul> <li>Add a tool that subscribes to editor changes | MPS forum \u29c9.</li> </ul> <p>How do you get the text of an EditorCell programmatically?</p> <pre><code>EditorCell.renderText().getText()\n</code></pre> <p>How can you find out if an editor cell is read-only?</p> <pre><code>ReadOnlyUtil.isCellsReadOnlyInEditor(this.editorComponent, new singleton&lt;EditorCell&gt;(editorCell))\n</code></pre> <p>How do you get an editor for a node as a Java Swing component?</p> <pre><code>HeadlessEditorComponent component = new HeadlessEditorComponent(#project.getRepository()); \ncomponent.editNode(node);\nreturn component;\n</code></pre> <p>How do you get a Project instance for an ActionEvent?</p> <pre><code>button.addActionListener(new ActionListener() {\n    public void actionPerformed(ActionEvent e) {\n    Project mpsProject = UiUtils.getMpsProjectFromActionEvent(e);\n    }\n}\n</code></pre> <p>How do you get the selection/selected node in the editor?</p> <pre><code>editorComponent.getSelectionManager().getSelection() / editorContext.getSelectedNode()\n</code></pre> <p>How can you select a node in the editor?</p> <pre><code>editorContext.getSelectionManager().setSelection/pushSelection\n// or\neditorContext.getNodeEditorComponent().selectNode()\n</code></pre> <p>How do you find all open editors?</p> <p>Finding all open editors \u29c9 (Specific Languages' blog)</p> <p>How do you programmatically collapse editor cells?</p> <pre><code> EditorCell_Collection.fold()/unfold()\n\n// You can check if it is foldable by calling:\nEditorCell_Collection.isFoldable()\n</code></pre> <p>Is there a callback/hook when an editor tab closes?</p> <p>When closing an editor tab, MPS removes the highlighting from all nodes in the editor. I.e., when an editor is opened again for the same root node, all highlighting is gone.</p> <p>In my code, I want to react to this editor-close event. Can a callback or hook be implemented, which the editor calls when an editor tab is closed?</p> <p>You can register an EditorComponentCreateListener, that also receives an editorComponentDisposed event (example \u29c9).</p> <p>How can I customize the behavior when pressing the Tab key in the editor?</p> <p>To override this behavior, you can specify the action <code>NEXT</code> in an action map (MPS source reference). The default action is declared here with its default implementation in NodeEditorActions \u29c9(it jumps to the next editable leaf of the editor cell tree).</p> <p>I am using <code>NodeHighlightManager.mark()</code> to highlight AST nodes. MPS then uses the provided color for the cell's background and a slightly darker shade for an additional border. Can we change this, i.e., only paint the background, but not the border?</p> <p>Yes, but you must create a class that extends DefaultEditorMessage and overwrites the paintWithColor method. Line 203 \u29c9 defined the color of the border. Instead of calling this method:</p> <pre><code>public void mark(SNode node, Color color, String messageText, EditorMessageOwner owner) {\nif (node == null) return;\nmark(new DefaultEditorMessage(node, color, messageText, owner));\n}\n</code></pre> <p>You must initialize your message object and supply it to the mark method.</p>","tags":["aspect"]},{"location":"aspects/feedback/","title":"Feedback Aspect","text":"<p>The feedback aspect defines custom messages to show to the user when an error or a warning is detected in the model.</p> <p>Can I override error messages? Can I customize any messages that way?</p> <p>Yes, in this aspect: Feedback - MPS \u29c9. No, only the messages that  support overriding.</p> <p>Can I use parameters such as the node or concept in the custom message? Can I add new parameters?</p> <p>Use the code completion in the show message part of the editor, for example, <code>%concept</code>. New parameters can't be added because they are hard coded.</p> <p>Where can I find these messages in the MPS source code?</p> <p>Some of those checks come from the structure checker \u29c9. There is also the reference scope checker \u29c9 and the  ConstraintsChildAndPropFacade \u29c9, which applies checks.</p>","tags":["aspect"]},{"location":"aspects/findusages/","title":"FindUsages Aspect","text":"<p>Implement custom finders for discovering related nodes in this aspect.</p> <p>I click Find Usages in the context menu of a node, and it doesn't find anything.</p> <p>The standard search scope is the project. Try to expand it to global in the find usages settings. Check also that you are using the correcting finders in the Finders section of the dialog. </p> <p>I want to execute Find Usages repeatedly, but the result tab gets overridden.</p> <p>Select the option Open in new tab in the section View of the Find usages preferences or pin the result tabs by right-clicking and selecting Pin Tab.</p> <p>How to restrict the scope of a Finder execution?</p> <p>I use this finder \u29c9 and would like to restrict the scope from global to project. </p> <p>How do I do this?</p> <p>You can pass any FindUsages Scope implementation to the expression, for instance, the ProjectScope \u29c9:</p> <pre><code>SearchResults results = execute finders(NodeUsages, node, new ProjectScope(project), &lt;default&gt;);\n</code></pre> <p>How can I invoke the find usages manager programmatically without UI?</p> <p>Use one of the methods in <code>#project.getComponent(FindUsagesmanager.class)</code>. If no project is available, you can use the deprecated method <code>FindUsagesManager.getInstance()</code>. If the function needs a Consumer, use the class CollectConsumer \u29c9 , which adds the results to the provided collection. There is also the method <code>getResults()</code> to get back the collection.</p> <p>A model doesn't support fast usages search.</p> <p>When specifying the scope, exclude models that don't support fast usages search (e.g., temporary models such as the console model). Models are only loaded when accessed, so keep the scope of the find usages. If you are filtering a global or similar scope, the following methods might be helpful: </p> <ul> <li><code>module.isPackaged()</code> to check for installed languages/solutions/devkits</li> <li><code>model.isReadOnly()</code> to check if a model allows updates</li> <li><code>SModelStereotype.isX()</code> to check if the model has a specific stereotype, for example, the model is a test model</li> </ul>","tags":["aspect"]},{"location":"aspects/generator/","title":"Generator Aspect","text":"<p>The generator is a part of the language specification that defines the denotational semantics for the concepts in the language.</p> <p>\u2014 MPS documentation</p> <ul> <li>Getting started with generation in MPS: extracting a generator \u29c9 (Specific Languages' blog)</li> </ul> <p>Are there any best practices for generators?</p> <ul> <li>coolya: Maintainable MPS Generators \u29c9</li> </ul> <p>Can you invoke the generator from an external tool?</p> <p>Yes, it can be run from Ant. Build your build solution in MPS and execute the targets clean, generate and assemble  to build the languages. To run the tests, also execute check. The mps-gradle.plugin is capable of running those targets \u29c9 in Gradle.</p> <p>How can you copy the output to another location?</p> <p>Use the @CopyOutcome \u29c9 annotation.</p> Which variable names aren't available because they are used in the generator? <p>Underlined variables are specific variables that are available.</p> <ul> <li>Console: ConsoleContext context, ConsoleStream console</li> <li>Constraint:<ul> <li>Scope: ReferenceConstraintsContext _context</li> </ul> </li> <li>Type-system:<ul> <li>all rules: IsApplicable2Status status, TypeCheckingContext typeCheckingContext</li> <li>comparison rule: SNode node1, SNode node2, </li> <li>inequation replacement rule<ul> <li>custom condition: SNode subtype, SNode supertype,</li> <li>rule: SNode subtype, SNode supertype, EquationInfo equationInfo, TypeCheckingContext typeCheckingContext, boolean inequalityIsWeak, boolean inequalityIsLessThan</li> </ul> </li> <li>substitute type rule: SNode originalType</li> </ul> </li> <li>Generator:<ul> <li>mapping configuration: CreateRootRuleContext _context</li> </ul> </li> <li>Editor:<ul> <li>General: SNode myNode</li> </ul> </li> </ul> <p>How does the IDE collect generators to engage on a model?</p> <p>How MPS collects generators to engage on a model \u29c9 (Specific Languages' blog)</p> <p>generation plan (in devkit) vs. generator priorities?</p> <p>The generation plan is applied instead of the generator priorities. If your generator should be applied in a model using a generation plan, your generator has to be part of the generation plan. When developing a language, which is used within an aspect, for example, type system, the MPS aspect's generation plan can block the generator.</p> How can you use generated classes which implement an extension point? <p>Let \\(L_A\\) be a language that offers an extension point over class \\(E\\). Then it is pretty simple to provide a static implementation for extension point for \\(E\\), for example, in another language. What if we want to map a concept \\(Q\\) of \\(B\\) to that extension point? We want to be able to generate code \\(C\\) from a concept instance of \\(Q\\), which is a subclass of \\(E\\), such that we can use it for the extension point over class \\(E\\).</p> <ul> <li>Create the extension point in the plugin aspect of a language \\(L_A\\).</li> </ul> <p></p> <ul> <li>In the generator main, you need to create two root mapping rules for \\(Q\\) (which is ModelMerge in our case).</li> </ul> <p></p> <ul> <li>map_ModelMerge maps \\(Q\\) to a class that extends \\(E\\) (here <code>ConceptMergeSpec</code>).</li> <li>map_ModelMerge_extension will generate an extension for \\(Q\\). It is an extension RootMapping which can be selected from the intention. </li> </ul> <p></p> <p>The code for the Reference-Macro in the figure above should look like this. </p> <p>Make sure you have jetbrains.mps.lang.extension included as language in the plugin.</p> <ul> <li> <p>Now create a solution, not a sandbox. Set Solution Kind in the properties to Other. Afterward, create a model named plugin (not optional). Add an instance of \\(Q\\) to your model plugin and build it. Look now at your last transient model. There must be three artifacts related to \\(Q\\):</p> </li> <li> <p>the generated class </p> </li> <li>the generated extension </li> <li> <p>an <code>ExtensionDescriptor</code>, which provides all found extensions</p> </li> <li> <p>Now you should be able to locate your extension with a code fragment like this:</p> </li> </ul> <pre><code>foreach obj in extensionPoint/ModelMergeExt/.objects { \nSystem.out.println(\"---&gt; extension \" + obj); \n}\n</code></pre> <p><sub>contributed by: @dbinkele<sub> <p>Where should you put the classes that you need on the user side and in the generator?</p> <p>Move the classes to a solution and add that solution as a runtime solution to the language (in the module properties).</p> <p>Can you access the output model in a property macro?</p> <p>In reference macros in generators, I can use the provided outputNode parameter as an entry point into the output model of the current transformation and, for example, use this to find the root node my generated reference will be contained in. Can I do something similar in property macros? For those, there is no outputNode. I'd still like to find, for example, the node in my output model that my generated property belongs to. Is there a way to do that?</p> <p><sub>asked by: @jonaskraemer<sub> <p>You can try to use the post-processing function of a <code>$MAP_SRC$</code> macro.   </p> <p>Which generation plan is used: the one of the custom generation facet or from any of the used devkits?</p> <ul> <li>Custom generation facet: If there is a GP defined, this plan is used.</li> <li>Devkits: First, MPS looks if any devkit specifies a GP. The first devKit with an associated plan is consulted, if any, and no further lookup is done.   If there are no devkits with associated plans, MPS checks the facets of the devkit modules, if any is a GP provider.   The first found facet serves as a provider.</li> </ul> <p>What is cross-model generation?</p> <ul> <li>What is cross-model generation, and why do you care? \u29c9  (Specific Languages' blog)</li> </ul> <p>How to get rid of errors for missing generator dependencies?</p> <p>If you use a generation plan, you can add those languages to the end of the generation plan or create a new plan ignoredLanguages that you add to your existing plan. When languages don't generate anything, their generators should also be deleted. Two tickets with some more information: MPS-32687, MPS-33874 \u29c9</p> <p>How do you keep some context when using the <code>$LOOP$</code> macro in the generator?</p> <p>There are a few solutions when you want to save additional information: You can use the <code>VAR</code> macro, which introduces one or more named values into the generator context, which can then be obtained from the <code>genContext</code>. You can save information in the session/step/transient object, which can also be accessed through <code>genContext</code> (this is, for example, a parameter in the <code>$COPY_SRC$</code> macro). When you use the <code>$CALL</code> macro to call a template, you can call the template with parameters. You can also use <code>node/.putUserObject</code> and <code>node/.getUserObject</code> to store additional Java objects directly in nodes.</p> <p>What is the best way to preserve SModelAttributes when weaving in a new node during generation? The newly weaved-in node does not contain the <code>SModelAttributes</code> from the input, and I am looking for a way to add these to the output node.</p> <p>Weaving isn\u2019t a reduction, so MPS doesn\u2019t know if the new node should have the attributes or not. MPS_SRC is the best way, as you have input and output available.</p> <p>What is an alias for a generator?</p> <p>It is just an additional qualifier to distinguish the generator from other generators for the same language.</p> <p>Is there something similar to the <code>outputNode</code> in reference macros in property macros?</p> <p>No, but you can try to use the post-processing function of a <code>$MAP_SRC$</code> macro.</p>","tags":["aspect"]},{"location":"aspects/generator/#how-to-generate-xy","title":"How to Generate XY","text":"<p>The official documentation provides a lot of information about generator and the MPS samples contain good examples for generators. This sections answers some question that still often arise.</p> <p>What can be generated?</p> <p>Have a look at the language repository \u29c9. You might also find other languages on GitHub. In general, there doesn't have to be an existing language. Any text can be generated with TextGen or Plaintextgen from  MPS Extensions \u29c9. It's also possible to generate code from an action or pre/post-processing script in the generator by using an existing Java library such as Apache POI \u29c9. A tutorial  for Excel can be found here \u29c9.</p> <p>I want to create multiple outputs for a language.</p> <ul> <li>You can use a non-root concept in your root mapping rule. For example, use the concept of the children in the root mapping rule. It will create multiple roots as long as the generated files have different names.</li> <li>Use a preprocessing script to create new root nodes (maybe a new concept if necessary) for the children and create a root mapping rule for the newly introduced concept.</li> <li>Use a dummy concept or a generation plan with a fork.</li> </ul> <p>This question is also answered in the generator cookbook \u29c9.</p> <p>How can you generate LaTeX files?</p> <p>The mbeddr documentation language can do this. Have a look at the documentation \u29c9.</p> <p>How can you generate some text?</p> <p>Use the textgen aspect or use mps-plaintextgen \u29c9 from  MPS Extensions \u29c9.</p> <p>Can you use an alternative approach to generating code?</p> <p>You can interpret your models instead. Use mbeddr.mpsutil.interpreter from the  mbeddr platform \u29c9.</p> <p>Should you use generation plans or generator priorities?</p> <p>Have a look at the motivation for generation plans in the official documentation \u29c9. Generation plans should be used when the generation order is simple.</p> <p>How do you generate language X from MPS?</p> <p>Specific Languages blog: How do I generate language XY from MPS? \u29c9</p> How can you make sure that generator B can use the output of generator A? <ol> <li>Define priorities or a fixed generation plan for \\(B\\) (and maybe \\(A\\))</li> <li>If you can't run/don't want to run both generators in the same \"phase,\" configure them to run one after the another.</li> </ol> <p>Solution 1:</p> <ul> <li>Define a \\(MM\\) (structure) (INFO-NODE) in \\(A\\), where you accumulate all required information and pass for all other generators.</li> <li>Configure \\(A\\) to remove INFO-NODE if not required (separate mapping configuration).</li> </ul> <p>Solution 2:</p> <ul> <li>Define an annotation and store all req. infos there</li> <li>Configure \\(A\\) to drop annotation if not required (separate mapping configuration),</li> </ul> <p>Solution 3:</p> <ul> <li>Use user objects to store required information as part of the real AST nodes.</li> <li>User objects are volatile children/properties which are not persisted but survive several generation phases. Use com.mbeddr.mpsutil.genutil to achieve this.</li> </ul> <p>Solution 4:</p> <ul> <li>Define a fixed generation plan with checkpoints.</li> <li>Organize the whole generation process manually.</li> </ul> How to generate large strings? <p>Given I am writing a generator and it generates a Java string for a string property. That property holds more than 64000 characters, and the Java compiler gives me a constant string too long error. What can I do?</p> <p></p> <p>Option 1: Extract into a separate file</p> <p>Of course, it would be better not to fill the Java file too much and instead generate the string into a file that gets loaded at this place.</p> <p>Option 2: Split and join again</p> <p>The restriction only applies to the size of string literals. However, at runtime, it is allowed to have larger strings. So that we can split it into a concatenation that gets assembled at runtime then:</p> <ul> <li>Here we use the Guiva classes Joiner and Splitter \u29c9 from <code>MPS.Core/google.common.base</code> and <code>java.util.Arrays</code>.</li> <li>We split the splitter at generation time into parts of a maximum of 50000 characters.</li> <li>Then we map it onto an arbitrary node with a string property, as <code>$LOOP$</code> requires a node.</li> <li>In the property macro inside the loop, we pull that property out of the node again (the inspector is not visible in the screenshot).</li> <li>It is a coincidence that we create nodes of the same concept and use the same property for the loop content than for the outside context node. You may light-quote anything of type string here.</li> </ul> <p></p> <p><sub>contributed by: @abstraktor<sub> <p>How do I generate a unique numeric id?</p> <p><code>genContext.name from (\"\")0 in context (node)</code> works well for this.</p> <p>Note that the one-based version (<code>genContext.name from (\"\") in context (node)</code>) will yield an empty string in the first iteration. This is because it is designed to generate things like \"myVar\", \"myVar1\", \"myVar2\".</p> <p><sub>contributed by: @abstraktor<sub> <p>How do you report errors in the generator?</p> <p>Use the statement <code>genContext.show error</code> and attach the node as the second parameter. Don't just throw exceptions, as people don't need to see fatal errors in the lower right corner when something in the generator goes wrong. The generator might not stop immediately and finish the current step when using this statement.</p>","tags":["aspect"]},{"location":"aspects/generator/#open-api","title":"Open API","text":"<p>This section is especially relevant when you want to invoke the generator programmatically. Sometimes text generation can be enough, and you don't need to invoke the generator. Make sure to first set the flag Java in the language properties of a language and the Compile in MPS flag in a solution if the compilation doesn't start.</p> <p>How can you preview the generated text programmatically?</p> <p>Use the MPS action TextPreviewModel or call the methods in TextGeneratorEngine \u29c9 if you want to use the text generator, for example, <code>TextGeneratorEngine.generateText(node)</code></p> <p>How do you get the output path for a solution?</p> <ul> <li>To get an IFile \u29c9, call <code>SModelOperations.getOutputLocation(model)</code>.</li> <li>To get a string, call <code>ProjectPathUtil.getGeneratorOutputPath(module.getModuleDescriptor())</code>. You have to first cast the module to an <code>AbstractModule.</code></li> </ul> How can I check if a model requires generation programmatically? <p>The project view shows that generation is required if a model has been changed.. What is the source of this information, and how reliable is it?</p> <p>(regarding the 2<sup>nd</sup> part of the question: sometimes the text in the project view is not up to date, but pressing F5 fixes it.  Is it just the UI is not updated when the underlying state changes, or is it not appropriately updated until I press F5?)</p> <p>ModelGenerationStatusManager \u29c9 provides a corresponding API. This snippets shows how to use it:</p> <pre><code>MPSProject project = /* ... */;\nSModel model = /* ... */;\nModelGenerationStatusManager statusManager = project.getComponent(ModelGenerationStatusManager.class); \nif (statusManager.generationRequired(model)) { /* ... */ } \n</code></pre> <p>Unfortunately, it isn't reliable. For example, when changing something in the model, the API behaves correctly in the first place. But after executing the Synchronize action, MPS believes that generation is not required anymore (even though the change would affect the output and Synchronize doesn't execute the generation). This odd behavior can also be seen in the project view (note: this might be outdated information).</p> <p><sub>contributed by: @till-f<sub> <p>How can you react to changes in generated files?</p> <pre><code>new GenStatusUpdater(#project).getStatusManager().addGenerationStatusListener(new ModelGenerationStatusListener() {\n    void generatedFilesChanged(Collection&lt;SModel&gt; models) {\n        // do something\n    }\n);\n</code></pre> <p>How can you introduce utility methods for a generator, for example, a pre-processing script?</p> <ul> <li>Create a new model in the generator aspect.</li> <li>Make sure to remove the @generator annotation (leave it blank).</li> <li>Add Base Language as a dependency.</li> <li>Create a class in the new model which provides the desired utility methods.</li> <li>In the generator add a dependency to the new model.</li> </ul> <p><sub>contributed by: @sergej-koscejev<sub>","tags":["aspect"]},{"location":"aspects/generator/#troubleshooting","title":"Troubleshooting","text":"<p>In addition to reading the following questions, read Debugging generators \u29c9 (Specific Languages' blog).</p> <p>MPS can't resolve the import XY.</p> <p>The solution that contains the class has to be added as a runtime solution (see here \u29c9).</p> <p>Why are root nodes generated more than once?</p> <p>Have you used one of your root nodes as a child of another node? It will still act as a root node in this case.</p> <p>No output location for XY.</p> <p>Make sure that the Java facet is enabled in the properties of the language or solution. This error can often be seen when opening an old MPS project.</p> <p>java.lang.NoSuchMethodError</p> <ul> <li>NoSuchMethodError \u29c9 (Specific Languages' blog)</li> </ul> <p>The generated code has no debug symbols.</p> <p>Locate the build solution in MPS that is building your languages and adjust the Java settings:</p> <pre><code>java options &lt;project default&gt; \n  generate debug info false \n  generate no warnings false \n  fork false \n  compiler &lt;default compiler&gt; \n  java compliance level 1.8 \n  java compiler options &lt;no additional options&gt; \n  copy resources false\n</code></pre> <p>Then set generate debug info to true.</p> <p>If no Java options exist in your build solution, simply add one to the project structure.</p> How can you debug the differences in generation between the command line and MPS? <p>Given I have an MPS project and it compiles well in my MPS. I see a compile error when I run the same in a command line. How can I debug this?</p> <p>The cause behind this kind of issue usually lies in one of these three things:</p> <p>Issue Area 1: Settings (in place, threading)</p> <p>Try turning off Apply transformations in place in your MPS settings under Build, Execution, Deployment \u2192 Generator \u2192 General, as this is unset in the command line (note that this setting doesn't appear in the search):</p> <p></p> <p>Also, turning off the build in parallel threads may help.</p> <p>Issue Area 2: Dependencies</p> <p>A second issue may originate from the separate class and dependency loading types in the command line.</p> <p>Issue Area 3: Generation plans</p> <p>The command line build runs the generator plans that are included in a model's devkits or explicitly added to the  generator facet+tab of a module. If your code starts the build for an explicit generation plan other than that, consider if a different plan could be the culprit. (Remember, right-click a model and Show Generation Plan to see if all looks as expected).</p> <p>Remark 1: Inplace transformations are on or off, depending on your build script. The same applies to parallel generation. On the command line, if nothing is specified, it defaults to 4 threads. The most significant difference is that no project is opened in the command line build, which means anything that tries to access the project, including virtual files, will fail.</p> <p>Remark 2: One potential source of problems could be the packaging of languages and generators. Because in the command line build generators might need to be loaded from packaged jars, any issues with that packaging could affect the generation. For example, as it may happen due to MPS-32026 \u29c9, whole generator models with templates are not loaded and, therefore, not applied during the generation in the command line.</p> <p><sub>contributed by: @abstraktor<sub> <p>When getting a warning/log message when building an MPS model, I would like to jump to the source of the message.</p> <p>For model generation errors, you can enable Build \u2192 Check models before the generation to catch errors early. If you enable save transient models \u29c9, you can, for example, click on text generation error messages, and it will open the node in the transient model. There, you can `right-click the node -&gt; Language debug -&gt; Reveal Origin Node to go to the original node where the error occurred. For other messages in the messages tool, sometimes there is a stack trace attached that can be found in the right-click menu of the message. Advanced: additional information for other internal exceptions:</p> <p>For other exceptions, such as IDE fatal errors (lower right corner of the window) you can copy the error message from the dialog and go to main menu \u2192 Analyze \u2192 Analyze stack trace. It will provide links to the places in your project where the error happened. For internal exceptions of MPS or the IntelliJ platform, you can do remote debugging (stop on exceptions) with MPS and IntelliJ Community \u29c9 sources locally cloned so that you can jump to the exception directly.</p> <p>Regarding full-text search, you can try edit \u2192 find \u2192 Find Text in Node Properties (Ctrl+Alt+Shift+F). All the node properties in the project are indexed, so it just searches those properties.</p> <p>If there are errors/warnings in the editor, you can do Language Debug \u2192 Go to Rule Which Caused Error from the context menu to find the code which produced the error. A similar feature is Show Node Messages, which allows copying/pasting the message.</p>","tags":["aspect"]},{"location":"aspects/generator/#blog-posts","title":"Blog Posts","text":"<ul> <li>Introduction MPS Generators \u29c9 (F1RE's blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/intentions/","title":"Intentions Aspect","text":"<p>Intentions provide fast access to the most used operations with syntactical constructions of a language.</p> <p>\u2014 MPS documentation</p> <p>How can you go to the declaration of an intention when you open the intention menu?</p> <p>Select the intention and click the arrow/press the right arrow key \u2192 Go to intention declaration.</p> <p>How do you execute an action as an intention?</p> <p>Add the action to the action group ActionsAsIntentions \u29c9.</p> How can you group intentions and give them names? <p>Use com.mbeddr.mpsutil.intentions from  MPS Extensions \u29c9.  Alternatively, you can split the description into multiple literals. The first literal will then be used to group intentions.</p> <p></p> <p></p> <p>I need to get all available intentions for a node.</p> <pre><code>IntentionsManager.getInstance().getAvailableIntentions();\n</code></pre> <p>How can you make intentions visible?</p> <p>Making intentions visible \u29c9 (Specific Languages' blog)</p> <p>How can you show a submenu in the intention menu?</p> <p>Showing a submenu in the intentions menu \u29c9 (Specific Languages' blog)</p> <p>An Intention isn't visible, although it should be. What can you do?</p> <p>Intention X should be visible on Concept Y. However, when I select an instance of Y, it is not listed in the intention menu. What can I do?</p> <p>Make sure the language that declares the intention is in the Used Languages section of the model:</p> <pre><code>- Check if the intention applies to the concept you want it to apply to. (Maybe *visible on child nodes* is not set).\n- Check if the *isApplicable* condition evaluated to true (try to avoid adding `System.err.our` prints to the model).\n</code></pre> <p><sub>contributed by: @coolya<sub>","tags":["aspect"]},{"location":"aspects/listener/","title":"Listener Aspect","text":"<p>This aspect allows the creation of listeners that can react to changes in the model. It can respond to different events, such as adding and removing children or value changes of properties.</p> <p>How do you react to changes in the model?</p> <p>Use com.mbeddr.mpsutil.modellisteners from the  mbeddr platform \u29c9.</p> <p>Is there a way to listen to changes in any descendant?</p> <p>Add a single change listener to BaseConcept \u29c9. You must still define your logic for every type of change (property, reference, child) separately.</p> <p>Are they executed synchronously or asynchronously?</p> <p>They execute synchronously.</p> <p>What are real-world examples of listeners?</p> <ul> <li>update other nodes when children are removed or added</li> <li>add missing references when the model changes</li> <li>update components that preview nodes</li> <li>remove cache entries when you remove a node</li> <li>calculate IDs or updated calculated hashes when the model changes</li> <li>populating the list of results when the specified scope of a node changes that fetches information from the model</li> </ul>","tags":["aspect"]},{"location":"aspects/migration/","title":"Migration Aspect","text":"<p>To nicely support language evolution, migrations automatically upgrade client code to use the latest version of a language or multiple languages.</p> <p>\u2014 MPS documentation</p> <ul> <li>MPS, Feature Branches and Language Migrations: DOs and DON\u2019Ts \u29c9 (languageengineering.io's blog)</li> <li>Preparing migrations with Git rebase \u29c9 (Specific Languages' blog)</li> <li>Checking for pending migrations \u29c9 (Specific Languages' blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/migration/#general","title":"General","text":"<p>Migrations are necessary as part of languages that change over time. Don't create migrations when you are still in the development phase and don't need to execute them. When using the Refactoring menu in a language, deselect Write migration script, and Write refactoring log to not create migrations.</p> <p>How do I search for instances of a deprecated concept?</p> <ul> <li>Migrations: Searching for instances \u29c9 (Specific Languages' blog)</li> </ul> <p>How do I remove migrations?</p> <ul> <li>Removing migrations \u29c9 (Specific Languages' blog)</li> </ul> <p>I want to migrate an MPS project that's many years old. How do you do that?</p> <p>First of all, make sure that you don't skip too many MPS versions; otherwise, the migration won't succeed. For old projects, you have to edit the module files manually because the structure slightly changed. Open the .mpl files in a text editor and change all occurrences of <code>&lt;language id=\"%ID\" fqName=\"%FQNAME\" version=\"%VERSION\" /&gt;</code> into  <code>&lt;language slang=\"l:%ID:%FQNAME\" version=\"%VERSION\" /&gt;</code>. </p> <p>The next step is to start the migration assistant. It will fail because it can't find migrations for some language versions. For example, jetbrains.mps.lang.editor only has a migration starting with version 7. You have to find all occurrences of this language in your project with a text editor and change the attribute version to 7. Then run the migration assistant again and hope that everything works. Some concepts cannot be migrated automatically, such as the substitute and transformation menus. There will also be other issues that have to be fixed manually.</p> <p>I want to replace node A with another node B where A and B share the same super-concept.</p> <p>Use the class RefactoringRuntime \u29c9. This class can be used to set/unset properties or replace nodes with other ones. Example: <code>RefactoringRuntime.replaceWithNewConcept(old, concept/ComponentConfigRef/)</code></p> <p>Are there any best practices for feature branches and language migrations?</p> <ul> <li>languageengineering.io: MPS, Feature Branches and Language Migrations: DOs and DON'Ts \u29c9</li> </ul> <p>How can you detect that migrations are running?</p> <p>I have code that needs to know if migrations are currently executed, for example, model listeners that update the model when a change by the user appears.</p> <p>I would like to detect when migrations are executed to prevent this code from executing in the middle of a migration to prevent manipulating the model in an incomplete state during the migration.</p> <p><code>PersistenceRegistry.getInstance().isFastSearch()</code> returns <code>false</code> while migrations are running. You can check it in the model lister:</p> <p><pre><code>model listener for MyNode { \n    child added in role values (instance, child)-&gt;void {\n    // don't run as part of migrations.\n    if(!PersistenceRegistry.getInstance().isFastSearch()) { return; }\n    }\n}\n</code></pre> <sub>contributed by: @abstraktor<sub> <p>Assuming a migration for language A replaces objects of concept C_old with objects of concept C_new. Further, a concept C_B of language B references an object of type Cold. Therefore, you added a new reference of type C_new and marked the old one as deprecated. But how does this migration find the C_new object for the C_old reference?</p> <p>Read Defining language migrations | MPS documentation \u29c9 and look for produces annotation data. This mechanism also ensures the correct order of dependent migrations.</p> <p>How can you find all references to a specified root node and change these references so they point to another root node?</p> <p>Search through the methods in RefactoringRuntime \u29c9.</p> <p>Example with finders:</p> <pre><code>SearchResults&lt;node&lt;&gt;&gt; results = execute finders(NodeUsages, node, unspecified scope, &lt;default&gt;); \n\nforeach result in results.getSearchResults() {\nnode&lt;&gt; resultObject = result.getObject();\nsequence&lt;reference&gt; references = resultObject.references.where({~it =&gt; it.target :eq: node; });\nreferences.forEach({~it =&gt; resultObject/.setReferenceTarget(it.link, reuseact); });\n}\n</code></pre> <p>What are module versions, and how/why can other modules depend on modules with different versions than the current module version?</p> <p>You start with language and module version 0. Reasons why the language version of a language updates:</p> <ul> <li>A new migration was added manually.</li> <li>You've executed the action \"Correct Language Version.\"</li> <li>You've set it manually in the module properties.</li> <li>A concept was moved to a different language through the refactoring menu, and a migration script was written.</li> </ul> <p>Reasons why the module version of a language updates:</p> <ul> <li>You've set it manually in the module properties.</li> <li>A concept/property/link was moved to a different language through the refactoring menu, and a refactoring log was written.</li> </ul> <p>Reasons why both versions don't update:</p> <ul> <li>The language was renamed.</li> <li>Nodes/models are moved to a different solution.</li> </ul> <p>The module version of a solution can't change automatically. I also don't know why you would change it manually. Devkits don't even have the option to change the module version. A good example of a language with different language and module versions is jetbrains.mps.lang.feedback.problem.scopes (language: 0, module: 1) because it only has a refactoring step but no other migrations.</p>","tags":["aspect"]},{"location":"aspects/migration/#troubleshooting","title":"Troubleshooting","text":"<p>Migrations are not only necessary from one language version to another but also for newer MPS versions. Issues can arise because MPS or the IntelliJ platform changes or an even more drastic change occurs like a new Java version. Still, migrating early is a good idea to not fall behind to many MPS versions. New MPS versions not only mean new features but also many bug fixes. While this topic is only marginally related to the migration aspect, it is mentioned here.</p> <ul> <li>The migration frustration \u29c9 (Specific Languages' blog)</li> </ul> <p>When creating root nodes as part of language migration via java model.add root(someRoot), it throws the exception UnsupportedOperationException.</p> <p>Make sure that the affected model is not non-editable.</p>","tags":["aspect"]},{"location":"aspects/plugin/","title":"Plugin Aspect","text":"<p>Plugins are a way to integrate your code with the MPS IDE functionality.</p> <p>\u2014 MPS documentation</p> <p>This aspect is deprecated, use plugin solutions \u29c9 instead. This page still describes the content of this aspect because its languages are also used in the solution. The name of the solutions ususally end in .pluginSolution or .plugin.</p>","tags":["aspect"]},{"location":"aspects/plugin/#general","title":"General","text":"How do facets work? <p>Red rectangles: marker facets</p> <ul> <li>Do not define dependencies on other facets.</li> <li>They are known to the MPS make process and are available for users.</li> <li>You can define where your facet should fit in and decide if you require some facet.</li> </ul> <p>Usage:</p> <ul> <li>Targets act as filters working on a stream of data delivered to them.</li> <li>The data flowing along targets is called resources.</li> <li>Resources are represented as Java interfaces and tuples.</li> </ul> How do I move a solution? <p>Given I have a project with a test solution open and the solution is stored in <code>code/com.my/solutions/com.my.solution.to.move</code>, which is the wrong place. It should be <code>code/com.my/test/com.my.solution.to.move</code> instead.</p> <p>I want to move the solution in the filesystem to its correct place. How can I move the solution without breaking the project?</p> <ol> <li>Move <code>code/com.my/solutions/com.my.solution.to.move</code> to <code>code/com.my.project/test/com.my.project.solution.to.move</code>.</li> <li>Close the MPS project and reopen it (no need to restart MPS).</li> <li>Add back the .msd files as follows:</li> <li>Right-click on the workspace root node and open Project Paths (Alt+Enter).</li> <li>Click on the red, old solution file, and on -.</li> <li>Click on + and select the new location of this .msd file.</li> <li>Open your build script for CI tests and update the solution path in the project structure.</li> </ol> <p><sub>contributed by: @abstraktor<sub> How do you guide the user through cleaning up after deleting a referenced node? <p>Given I have a concept <code>Ball</code> and I have a reference <code>BallRef</code>. When I have a <code>Ball</code> node, and I have <code>BallRef</code>s to it all over my model. When I delete the ball, then I have a lot of dangling references. How may I get guidance in cleaning up these dangling references?</p> <p>You can show a balloon that says, for example:</p> <pre><code>Deleting the ball has left some dangling references\n_Show_, _Ignore_\n</code></pre> <p>When clicking show, it will open a usage search for the deleted node using <code>ConsoleUtil.show</code>. This functionality is implemented with a model listener in a quite generic fashion.</p> <p>Here are a few insights:</p> <ul> <li>Ensure not to show the node in the searched for part of the window. VCS will try to highlight it and run into an NPE (MPS 2019.3)</li> <li>Consider cut and paste or moving elements: these operations also yield a removal event. Hide the balloon again once the node gets added again.</li> </ul> <p></p> <p><sub>contributed by: @abstraktor<sub> How can you ensure that the IDE loads a JAR exactly once and never again? <p>I have a JAR file that depends on a native library (.dll/.so). To use it in an MPS plugin, I have a stubs solution for it. Unfortunately, without further ado, MPS sometimes tries to reload the jar (e.g., after a rebuild) and it will fail because the JVM does not allow reloading of native libraries.</p> <p>How can I avoid this problem?</p> <p>To prevent that MPS will ever (re-)load .jars / stubs of a solution, you can check the facet \"IDEA Plugin\" in the \"Facets\" tab of the solution properties. This facet will show another tab where you must set the Plugin ID <code>com.intellij</code>.</p> <p>We must ensure that the JARs can be found at runtime (i.e., they must be on the classpath). The most straightforward approach would be to put them into the application's lib directory (e.g., MPS installation / your product RCP).</p> <p><sub>contributed by: @till-f<sub> How can you use an IntelliJ icon for an action? <p>I want to use one of the icons shipped with IntelliJ for my action (<code>jetbrains.mps.lang.plugin.structure.ActionDeclaration</code>). How can I reference the icon? (note: this question might be deprecated for modern MPS versions)</p> <p>You can use <code>IconLoader#getIcon</code> in the reflective editor. Right-click the editor for the icon, use <code>show reflective editor</code>, and enter the expression as shown in the screenshot:</p> <p></p> <p><sub>contributed by: @till-f<sub> How to use a projection mode switcher to alter an editor component? <p>I have a concept editor in which I use an EditorComponent \\(A\\). Using the projection menu entry, I would like to switch to another editor component \\(B\\) upon activation.</p> <p>First \\(B\\) must override \\(A\\), and the <code>applicable concept</code> also must not differ. Then for \\(B\\) in <code>applicable in context</code>, we must provide a concept editor context hint.</p> <p></p> <p>This hint must also be referenced from a Projection Mode Switcher.</p> <p></p> <p>Afterwards, you will find a new entry in the Projection menu.</p> <p>Hint when used with Grammar Cells: you have to disable component inlining, which can be activated by an intention at the position where the include of \\(A\\) happens. Also, in any editor component that inherits from \\(A\\) and \\(A\\) itself, we cannot use Grammar Cells.</p> <p><sub>contributed by: @dbinkele<sub>","tags":["aspect"]},{"location":"aspects/plugin/#languagesfeatures","title":"Languages/Features","text":"<p>Most additional plugins are contributed by languages in  MPS Extensions \u29c9, and  mbeddr platform \u29c9.</p> <p>I want to merge models.</p> <p>Use the language de.itemis.mps.modelmerger from  MPS Extensions \u29c9.</p> <p>I want to verify the structure of a node.</p> <p>Use the language de.slisson.mps.structurecheck from  MPS Extensions \u29c9.</p> <p>I want to store different states/versions of a node inside the model.</p> <p>Use the language de.itemis.mps.nodeversioning from  MPS Extensions \u29c9.</p>","tags":["aspect"]},{"location":"aspects/plugin/#open-api","title":"Open API","text":"<p>This section contains code-related questions and answers.</p> <p>How do you create a new SContainmentLink for a non-existent role?</p> <p>Create it through MetaAdapterFactory \u29c9.</p> <p>How do you check if a model is a generator or a test model?</p> <p>Call the corresponding method in SModelStereotype \u29c9.</p> <p>How do you add imports to a model?</p> <p>Use the class ModelImportHelper \u29c9 and call <code>addImport</code>.</p> <p>How can you open an MPS Editor Tab programmatically?</p> <pre><code>EditorContext.getEditorPanelManager().openEditor(node);\n</code></pre> <p>Is it possible to associate an MPS-Aspect with more than one node?</p> <pre><code>IConceptAspect.getBaseConceptCollection();\n</code></pre>","tags":["aspect"]},{"location":"aspects/plugin/#troubleshooting","title":"Troubleshooting","text":"<p>Plugin troubleshooting topics often overlap with IntelliJ topics. The reason for this is that the languages that deal with plugins often compile down to IntelliJ platform features such as MPS actions that generate into IntelliJ actions \u29c9.</p> <p>A reference to a key in an action context parameter is out of the search scope.</p> <p>You need to add a dependency to MPSCommonDataKeys \u29c9. This class extends PlatformDataKeys \u29c9 , and this class extends CommonDataKeys \u29c9.</p> <p>The action isn't visible.</p> <p>You have to add it to an <code>ActionGroup</code> that can be attached to different places, such as the context or build menu. All action context parameters marked as required must be available <code>isApplicable</code> block must return true for an action to be visible. For debugging purposes, you can set always visible to true to check if your action is registered. </p> <p>You must have a standalone descriptor in your model. Set the solution kind to Other in the Java tab of the solution properties (Plugin | MPS \u29c9).</p>","tags":["aspect"]},{"location":"aspects/polyfun/","title":"Polymorphic Functions Aspect","text":"<p>This aspect allows declaring polymorphic functions and is part of Shadow Models \u29c9 in  MPS Extensions \u29c9. You can declare a function that can have different implementations per language. To get a better understanding, have a look at the corresponding sandbox.</p> <p>Is there a handler that the IDE calls when it loads a language?</p> <p>I have a language \\(K\\) with some languages extending \\(K\\) named \\(A\\), \\(B\\), and \\(C\\). \\(K\\) needs to access some behavior implemented by \\(A\\), \\(B\\) or \\(C\\), depending on which of these are deployed. To do that, I implemented a registry where \\(A\\), \\(B\\), and \\(C\\) can register and which \\(K\\) uses to retrieve a common interface with a specific implementation by \\(A\\), \\(B\\), or \\(C\\).</p> <p>The question remains: How can \\(A\\), \\(B\\), and \\(C\\) register their implementation at the registry? Is there maybe a better mechanism I should use here?</p> <p>The language de.q60.mps.polymorphicfunctions allows you to do that. It provides a new language aspect where you can declare a function in one language and multiple implementations in other languages. It supports polymorphic dispatch \u29c9 and even priority rules in case multiple applicable implementations exist.</p> <p><sub>answered by: @slisson<sub> <p>Alternative</p> <p>Typically you would implement this by using the extension point mechanism:</p> <ul> <li> <p>Language \\(K\\) defines an extension point \\(EP\\) (inside of its plugin aspect) with an interface \\(EPI\\) for the extension implementors.</p> </li> <li> <p>Language \\(A\\), \\(B\\), and \\(C\\) contribute extensions for the <code>EP</code> with specific implementations of the \\(EPI\\) interface (also inside of the plugin aspect).</p> </li> <li> <p>Language \\(K\\) provides a facade for querying current extensions registered for the \\(EP\\) and implements an appropriate strategy for handling multiple implementors of \\(EPI\\) contributed by different extensions from languages \\(A\\), \\(B\\), and \\(C\\):</p> <ul> <li> <p>by returning the implementor from the first extension, if your scenario expects only one deployed language with a specific implementation.</p> </li> <li> <p>by picking up one of the implementors from multiple extensions using some criteria, like a priority.</p> </li> <li> <p>by combining/chaining multiple implementors according to your specific logic.</p> </li> </ul> </li> </ul> <p>Because the facade would typically implement some simple caching of the resulting \\(EPI\\) implementation (not to query the \\(EP\\) every time the functionality is required), this would mean that you might need to implement some additional mechanism to allow for dynamical reload/reset of the current \\(EPI\\) implementation during the development, when a new extension is created and tested.</p> <p><sub>answered by: @wsafonov<sub>","tags":["aspect"]},{"location":"aspects/refactorings/","title":"Refactorings Aspect","text":"<p>You can write simple refactorings using the language jetbrains.mps.lang.refactoring.</p> <p>\u2014 MPS documentation</p> <p>The following questions are related to the old refactoring declarations. Use refactoring participants instead. They are explained in the documentation.</p> <p>Is this aspect widely used?</p> <p>No, there are just a few use cases, even in MPS languages.</p> <p>Can you link to an example that demonstrates this aspect?</p> <p>Rename \u29c9 implements the refactoring. RenameNode \u29c9 implements the action. The action is part of the group CoreNodeRefactorings \u29c9 which belongs to the NodeRefactoring group. Base Language has its group called RefactoringAdditions \u29c9.</p> <p>Can you change the concept of a node while keeping all properties, references, and children?</p> <p>Yes, call RefactoringRuntime.replaceWithNewConcept \u29c9 with your node and new concept as parameters.  In this class, there are other handy methods, such as changePropertyInstance(node, oldProp, newProp) and changeReferenceLinkInstances(node, oldLink, newLink) \u29c9.</p> <p>Changing the concept of a node \u29c9 (Specific Languages' blog)</p> <p>What should I put in the applicable block of the refactoring and its action?</p> <p>For the action, you can use <code>is applicable refactoring&lt;YourRefactoring&gt;()</code>. By default, refactorings are not disabled for read-only editors. Consult the update block of the MoveNodes \u29c9 action for more information.</p>","tags":["aspect"]},{"location":"aspects/scripts/","title":"Scripts Aspect","text":"<p>The scripts aspect lets you perform changes to your models in batches.</p> <p>\u2014 MPS documentation</p> <p>Are enhancement scripts executed as part of the migration process?</p> <p>No, they are not.</p> <p>Where can I find all available enhancement scripts?</p> <p>Go to Tools \u2192 Scripts \u2192 Enhancements and select a script or go to the All Scripts page and select a few of them to run.</p>","tags":["aspect"]},{"location":"aspects/structure/","title":"Structure Aspect","text":"<p>The structure aspect contains all the concept and interface declarations of a language.</p> <ul> <li>old cheatsheet \u29c9</li> <li>Finding examples of MPS features: Link instances \u29c9 (Specific Languages' blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/structure/#concepts","title":"Concepts","text":"<p>Concept declarations are the main root nodes that you add to this aspect. When you use nodes use concepts from your language, and the language has generator configurations, the generator of this language will be invoked by default to transform the languages.</p> <p>How can you create an MPS concept declaration programmatically?</p> <p>Create an MPS concept declaration programmatically \u29c9 (Specific Languages' blog)</p> <p>Concept XY wasn't found in the language </p> <p>Concept not found \u29c9 (Specific Languages' blog)</p> <p>How do you find examples of MPS concepts? </p> <p>Finding examples of MPS concepts \u29c9 (Specific Languages' blog)</p> <p>When a concept extends another concept/implements some interfaces, which method is called when they are defined in more than one concepts/interfaces?</p> <p>The used algorithm is a variant of C3 linearization (source). When the concept doesn't implement the method itself.  First, the implemented interfaces are recursively considered in declaration order, then the extended concept. You can try it yourself, for example, for the concept ClassConcept \u29c9: <pre><code>BehaviorRegistryImpl r = (BehaviorRegistryImpl) ConceptRegistry.getInstance().getBehaviorRegistry();\nBHDescriptor d = r.getBHDescriptor(concept/ClassConcept/);\n#print r.getMRO().calcLinearization(_SAbstractConcept.wrap(concept/ClassConcept/));\n</code></pre> If you want to call a specific <code>type()</code> implementation, you have just to cast the node to the corresponding concept and then call the method, for example, <code>myNode as MyITypeable.type()</code></p> <p>How can you get the short node ID from the node ID and vice versa?</p> <ul> <li>Short one: <code>new IdEncoder().toText(node.getNodeId())</code></li> <li>Long one: <code>new IdEncoder().parseNodeId(nodeId)</code></li> </ul> <p>How can I assign node IDs manually?</p> <p>Read Assigning node IDs explicitly \u29c9 (Specific Languages' blog).</p> <p>The same principal applies to model IDs. The regular model IDs that MPS generate are instances of RegularSModelId and are based on UUIDs \u29c9 (using an optional suffix). They are globally unique. There is also an integer-based solution (IntegerSModelId) where the IDs are not globally unique. They are used, for example, for various descriptor models.</p> <p>Can I find a node by its ID?</p> <p>You can write a script on the console to find it. For example:</p> <p></p> <p>The Navigate main menu also contains an action Go to node by ID.</p> <p>Can I cast concept objects to super-concept objects?</p> <p>I have the following successful boolean check: <code>someConcept.isSubConceptOf(MySuperConcept)</code> But if I put this code below, it fails with an exception that it cannot perform the cast: <code>((concept&lt;MySuperConcept&gt;) someConcept)</code> The type of the expression someConcept is <code>concept&lt;&gt;.</code></p> <p>There is a cast \u29c9 for that. For example: <pre><code>concept&lt;&gt; cls = node/AbstractMethodError/.concept;\n#print cls:BaseConcept.getLanguage().getQualifiedName();\n</code></pre></p> <p>Can I get the ConceptEditorDeclaration for a given concept?</p> <pre><code>concept&lt;&gt; concept = myNode/.getConcept(); \nmodel editorModel = LanguageAspect.EDITOR.get((Language) concept.getLanguage().getSourceModule());\n#print editorModel.roots(ConceptEditorDeclaration).findFirst({~it =&gt; it.conceptDeclaration :eq: concept.asNode; });\n</code></pre>","tags":["aspect"]},{"location":"aspects/structure/#interfaces","title":"Interfaces","text":"<p>Interfaces work the same way as Java interfaces. They can be used to mark common classes, contain common methods and support the same aspects as concepts. A special interface is INamedConcept \u29c9 that defines the name of nodes when a concept implements it.</p> <p>The concept implements ISuppressErrors \u29c9, but the node still contains errors.</p> <p>You have to implement IDontApplyTypesystemRules and ISkipConstraintsChecking. Suppressing Errors | MPS \u29c9 has some more information.</p> <p>What's IMainClass \u29c9 used for?</p> <p>It allows to execute Base Language code. Shapes tutorial - Running the code \u29c9 contains an example.</p>","tags":["aspect"]},{"location":"aspects/structure/#properties","title":"Properties","text":"<p>You can use properties to save data in the model using primitive types, enumerations or regular expressions. string is also considered a primitive type. Think twice before you use this type. Users can type anything as a value if you don't at a constraint to this property.</p> <p>String properties are also not referencable. For example, let's consider a property that defines a root node's kind. When you use a child instead that can be referenced, you can reuse kinds or even provide a predefined list of kinds with certain constraints. Even an enumeration can be a better choice in some cases unless you need the ability to enter any value.</p> <p>Changing this design decision later, means deprecating the string property and introducing a migration. If no standard migration is possible, users might even have to change their models manually.</p> <p>How do you use a list of string properties? </p> <p>Wrap your property into a new concept and use a child collection:</p> <p></p> <p>Can properties be overridden?</p> <p>No, MPS-17143 \u29c9 contains more information.</p> <p>How to get the name of a concept property?</p> <p>The easiest way to do this is via PropertyIdRefExpression \u29c9. Then you can directly reference the property in question like this: <code>property/MyConcept : myProperty/.getName()</code> With this implementation, every property name change is calculated correctly.</p> <p><sub>contributed by: @abstraktor<sub>","tags":["aspect"]},{"location":"aspects/structure/#references","title":"References","text":"<p>To refer to other nodes in the model, use references. They have a scope and can be automatically created (smart references) for nodes that have a name. References that are out of scopes still work, they are part of the model and are affected by generation. As the name it implies, they only reference nodes which means that the referenced node or property won't change when you edit the cell in the editor. There is also a distinction between optional and mandatory references, especially when trying to delete them.</p> <p>How do you get the previous label of a reference?</p> <pre><code>((SReference)node.getReference(link)).getResolveInfo()` \n// or\nnode.reference&lt;ref&gt;.resolveInfo\n</code></pre> <p>Can you use the resolve info to fix a broken reference?</p> <pre><code>ResolverComponent.getInstance().resolve(...)\n</code></pre> <p>How can you find broken references on the console?</p> <pre><code>#instances&lt;scope = global&gt;(BaseConcept).where({~it =&gt; \n    it.references.any({~it =&gt; it.target == null; });\n})\n</code></pre> <p>Deleting references doesn't work when using the editor cell ref. presentation</p> <p>Example: <code>[&gt; thingref [&gt; ( % thing % -&gt; ref. presentation ) &lt;] &lt;]</code></p> <p>Ref presentation automatically uses the name of the interface INamedConcept. If you add <code>auto-deletable: true</code> to the cell and the cardinality is <code>[1]</code>, MPS deletes the name but doesn't remove the reference. When the cardinality is [0..1], it deletes the reference. You expect this behavior because the reference is mandatory in the first case; in the second case, it is optional.</p>","tags":["aspect"]},{"location":"aspects/test/","title":"Test Aspect","text":"<p>Testing is an essential part of a language designer's work.</p> <p>\u2014 MPS documentation</p> <ul> <li>Testing in MPS: What and Why \u29c9 (languageengineering.io's blog)</li> <li>The Language Testing Triangle \u29c9 (Markus Voelter's blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/test/#general","title":"General","text":"<p>Fore more information about testing in general, read MPS Internals | Testing.</p> <p>Can you add an annotation to skip tests like it usually works with JUnit?</p> <p>It isn't supported. You must comment out the test case or add the @Ignore attribute in the reflective editor. The only official statement supporting this functionality is the assert statement of KernelF (AssertTestItem \u29c9).</p> <p>What's the TestInfo node used for? </p> <p>How to create a TestInfo node for your tests \u29c9 (Specific Languages' blog)</p> <p>How do node tests work? </p> <p>How do node tests work? \u29c9 (Specific Languages' blog)</p> <p>Can you invoke an action by ID?</p> <p>Yes, use the statement invoke action by id.</p> <p>How do you enter multiple words when using the type statement in an editor test?</p> <p>Enter them as one long word without spaces in between, for example, publictransientclass.</p> <p>How do you know if some MPS code is inside a test?</p> <p>I am writing some code in MPS that is supposed to run if we're not running tests. How can I detect if I'm running a test?</p> <ol> <li>Consider mocking something out instead or ensuring that you are testing on a low-enough level.</li> <li>Here are two options if you need to do this:</li> </ol> <pre><code>// true if running tests from inside the MPS process or from the command line\njetbrains.mps.RuntimeFlags.getTestMode().isInsideTestEnvironment()\n\n// true if running tests from the command line only\njetbrains.mps.RuntimeFlags.isTestMode()\n</code></pre> <p><sub>contributed by: @abstraktor<sub> <p>How do I access the current project inside a node test case?</p> <p>There is a project \u29c9 expression that you should use.</p> Why does the node ID change during a node test? <p>Given I have a node test case. My test case has a check node called data, and my test case has a test test1 which prints the node ID of data. My test case has a test test2 which prints the node ID of data. When I run the test, test1 and test2 print different node IDs.</p> <p>Why is that?</p> <p></p> <p>Terms used:</p> <ul> <li>check node for these fixture nodes that you enter into the test case under nodes</li> <li>test case for the root node, the chunk that contains the tests</li> <li>tests for the test methods of which we have test1 and test2</li> </ul> <ul> <li>Each test case runs on a copy of its model. </li> </ul> <p>MPS tries to keep tests reproducible and isolated even when being run in-process. For that, MPS copies the whole model into a temporary model. Modifications of one test case will then be invisible to the next test case since it will work on a new temporary model. This solution prevents test cases from interacting.</p> <p>Running tests in a separate model ensures that they will never modify the original model (as long as you don't explicitly start acting on other models).</p> <ul> <li>Check nodes per test</li> </ul> <p>A test case may have multiple tests, though. MPS also isolates single tests within the same test case. For that, the check nodes are copied once for each test. Each test may then act on its copy.</p> <pre><code>// there is one data node in the model for each test\nassert 2 equals data.model.nodes(Data).size\n</code></pre> <ul> <li>All tests of a test case share their referenced nodes</li> </ul> <p>To save memory, these check nodes all lie in the same model for each test case. References to other nodes outside the test case will only need to be copied once and shared by all tests of that test case. As a result, the IDs of check nodes change, and non-check-node IDs are the same as in the original model.</p> <pre><code>// nodes in this model that are not check-nodes of this test case will only be there once\nassert 1 equals dataRef.model.nodes(Chunk).size;\n</code></pre> <p>Consequently, multiple tests of the same test case are only partially isolated. In the following example, both tests assert and do the same, yet test3 passes while test4 fails. The data element is now located in a separate chunk outside the test case, and the check node references it. As a result, test4 is running red because test3 already modified the referenced node.</p> <p></p> <ul> <li> <p>Kinds of tests</p> </li> <li> <p>I checked this behavior in-depth for node tests.</p> </li> <li>I think it is similar for editor tests.</li> <li>I am sure that this does not apply to baseLang-tests since they don't prepare a temporary model for you.</li> </ul> <p>Practical effects of this</p> <p>These are some rules of thumb that result from that:</p> <ul> <li>The tests of a test case may interact, so you should inline all modified nodes into the test case to be check nodes.</li> <li>When modifying many nodes in the model, consider writing a migration and migration test instead.</li> <li>Remember that the console and each test will output separate IDs for the conceptually same node. And they will change from run to run.</li> <li>It is easy to be confused by that and draw false conclusions, especially when stepping through tests.</li> <li>Whenever your code queries for the nodes of a model, be ready to see duplicates for each test (as in the dataRef example). You may test this by asserting that something is included or excluded instead of asserting true equality of the expected and actual lists.</li> <li>Another source for duplicates is if the test model imports itself.</li> <li>If you need full power on the temporary model, consider writing a Base Language test and creating your repository and model by hand. jetbrains.mps.smodel.TestModelFactory allows to do that, for example, the ModelListenerTest \u29c9 uses that TestModelFactory. It is unfortunately not available as stubs, so you'll need to copy it to your project.</li> </ul> <p><sub>contributed by: @abstraktor<sub>","tags":["aspect"]},{"location":"aspects/test/#how-to-test","title":"How to Test","text":"<p>This section deals with practical questions regarding testing. Testing should be a big part of the CI pipeline to ensure that changes don't introduce bugs and new feature work as intended. Not everything needs to be tested and manual testing can not fully be avoided. Still, every single test gives you confidence in your changes, so don't ignore this part of language development. Base Language and KernelF have support for test cases and assert statements.</p> <p>How do you implement custom tests?</p> <p>Implementing custom tests \u29c9 (Specific Languages' blog)</p> How to set up a generator smoke test? <p>I want to write a generator smoke test. Therefore, I have some solutions with models (regular ones, not @test models) built from the command line, and the generators invoked are generating some .c files.</p> <p>In addition, I also have a @test model in the same solution with some unit tests, which checks if the output directories of these models contain any generated files. I don't invoke the generation of the models programmatically but rely on the Ant task which generates the solution.</p> <p>Unfortunately, this setup always leads to broken tests. The unit tests are executed before the models (which are built during the CI run) and though the test fails.</p> <p><sub>asked by: @arimer<sub> <p>When the tests work fine from within the IDE, the problem is that when your tests are executed, they run from the JARs, not the sources. The generator output location points into the jar file that the tests are executed from and not to the real source location.</p> <p>You could change the packaging to include the source_gen folder for your specific test solution.</p> <p>Make this change to the default layout of your build model:</p> <p></p> <p>In this case, you would need to detect if you are running from sources or from a JAR in CI and change the location where you look for the generated files.</p> <p>In this case, you need to detect if you are running from sources or a JAR in CI and change the location where you look for the generated files. You can calculate a relative path for the test solution containing the packed sources.</p> <pre><code>//case running from .jar\nif (module instanceof AbstractModule &amp;&amp; ((AbstractModule) module).getModuleSourceDir() != null) { \n  AbstractModule s = ((AbstractModule) module); \n  if (s.isPackaged() &amp;&amp; s.getModuleSourceDir().getBundleHome() != null) { \n\n    IFile bundleHome = s.getModuleSourceDir().getBundleHome(); \n    return bundleHome.getFileSystem().getFile(bundleHome.getPath() + \"!\" + path); \n  } \n\n// case: running from sources \n  IFile relativePath = s.getModuleSourceDir().getDescendant(path); \n  return relativePath; \n}\n</code></pre> <p>The easier solution is to place the tests in a separate solution and then invoke the make process for the solution that contains your input programmatically, so you can assert over the output. An example implementation of how the make process is invoked can be found in the mbeddr-c part \u29c9.</p> <p><sub>answered by: @coolya<sub> How to write editor tests for context assistants? <p>I need to unit test context assistants \u29c9, ideally with an EditorTestCase, but it is not supported out of the box.</p> <p>This snippet allows to automatically test the context assistant in the code section of the <code>EditorTestCase</code>:</p> <pre><code>// Context assistants take some time to pop up, otherwise getActiveAssistant returns null  \nThread.sleep(3000); \nContextAssistantManager contextAssistantManager = editor component.getEditorContext().getContextAssistantManager(); \nfinal ContextAssistantController controller = ((ContextAssistantController) contextAssistantManager.getActiveAssistant()); \nforeach menuItem in contextAssistantManager.getActiveMenuItems() { \n  if (\"Item Name\" :eq: ((ActionItemBase) menuItem).getLabelText(\"\")) { \n    // Execute it in a BaseEditorTestBody context  \n    final Project project = _this.[Project] &lt;no instance&gt;.getProject(); \n    _this.[void] &lt;no instance&gt;.runUndoableInEDTAndWait(new Runnable() { \n      @Override \n      public void run() { \n        project.getModelAccess().executeCommand({ =&gt; controller.executeActionItem((ActionItemBase) menuItem); }); \n      } \n    }); \n  } \n}\n</code></pre> <p>Note: - \"Item Name\" must be replaced with the name of the item as shown in the editor - \"_this\" is a concept from internalBaseLanguage DSL.</p> <p><sub>contributed by: @cmoine<sub> How do you name check errors with dynamic messages? <p>When I make the error text dynamic:</p> <p></p> <p>Then my error is named <code>UnnamedError</code>, and I have a hard time selecting the right one:</p> <p></p> <p>How do I name errors with dynamic messages?</p> <ol> <li>Go to your error statement in your checking rule.</li> <li>Import the language jetbrains.mps.lang.test.</li> <li>Run the intention Add Message Annotation.</li> <li>Type a nice name.</li> </ol> <p></p> <p></p> <p>Note that this does not work for errors that result from constraints.</p> <p><sub>contributed by: @abstraktor<sub> <p>What's the best way to test the contents of the code completion/substitution menu for a given cursor position using a NodesTestCase or an EditorTestCase?</p> <p>Example for an <code>EditorTestCase</code>:</p> <pre><code>SubstituteInfo si = (editor component.getSelectedCell()).getSubstituteInfo();\nlist&lt;SubstituteAction&gt; actions = si.getMatchingActions(\"\", false);\nassert actions.size == 4;\nassert actions.any({ it =&gt; it.getMatchingText().equals(\"something\"); });\n</code></pre> <p>How do you test with two-step deletion enabled?</p> <p>Example:</p> <pre><code>EditorTestUtil.runWithTwoStepDeletion({ =&gt; \ninvoke action -&gt; Backspace \neditor component.getEditorContext().getRepository().getModelAccess().runReadAction({ =&gt; assert true DeletionApproverUtil.isApprovedForDeletion(editor component.getEditorContext(), node) ; }); \ninvoke action -&gt; Delete \nassert true DeletionApproverUtil.isApprovedForDeletion(editor component.getEditorContext(), editor component.getSelectedNode()) ; \n}, true)\n</code></pre> <p>How do you test with typing over existing text enabled?</p> <p>Example:</p> <pre><code>EditorTestUtil.runWithTypeOverExistingText({ =&gt; type \" final\" }, false)\n</code></pre> <p>How do you test that you use a language?</p> <p>Example:</p> <pre><code>UsedLanguagesUtils.assertLanguageUsed(editor component, language/jetbrains.mps.lang.editor.menus.extras.testLanguage/)\n</code></pre> <p>How do you access the error cells in the inspector?</p> <pre><code>EditorComponent inspector = project.getComponent(InspectorTool.class).getInspector();\nSet&lt;EditorCell&gt; errorCells = inspector.getCellTracker().getErrorCells();\n</code></pre> <p>How do you click on anything in a test?</p> <p>You can execute intentions and actions programmatically. You can use the press mouse(x,y) and release mouse statements for UI elements like buttons.</p> <p>How can you test that code completion works?</p> <p>You can use a scope test to check if all items are visible in the menu. To check the number of actions in the menu, call: </p> <pre><code>assert true editor component.getNodeSubstituteChooser().isVisible() &amp;&amp; editor component.getNodeSubstituteChooser().getNumberOfActions() == n;\n</code></pre> <p>How do I run some checks of the model checker?</p> <p>Example code:</p> <pre><code>IChecker&lt;SNode, NodeReportItem&gt; structureChecker = new  StructureChecker();\nIAbstractChecker&lt;ModelCheckerBuilder.ItemsToCheck, IssueKindReportItem&gt; checker = new  ModelCheckerBuilder(false).createChecker(new arraylist&lt;IChecker&lt;?, ? extends IssueKindReportItem&gt;&gt;{structureChecker, new SuppressErrorsChecker()});\nchecker.check(ModelCheckerBuilder.ItemsToCheck.forSingleModel(modelToCheck), modelToCheck/.getRepository(), new  CollectConsumer&lt;IssueKindReportItem&gt;(), new  EmptyProgressMonitor());\n</code></pre> <p>How do I run unit tests through a run configuration?</p> <p>Example code:</p> <pre><code>command process&lt;jUnit&gt; process = jUnit(project = project,tests = allTests, \n    virtualMachineParameter = vmParams\n    workingDirectory = workingDir);\nint exitcode = process.startAndWait(TimeUnit.MINUTES.toMillis(1));\n</code></pre> <p>Can I test the actions menu?</p> <p>For internal tests in MPS, there is the following code:</p> <pre><code>list&lt;TransformationMenuItem&gt; items = MenuLoadingUtils.loadNamedMenu(editor component, node-ptr/WithExecutableAction/, \"test location\");\nActionItem item = (ActionItem) items.get(0);\nitem.execute(\"\");\n</code></pre> <p>MenuLoadingUtils.java and WithExecutableAction \u29c9 are not public, so they have to be created manually.</p> <p>How can I run a Base Language test (BTestCase \u29c9) in an MPS environment?</p> <p>Add the MPSLaunch annotation to the test case and extend the class EnvironmentAwareTestCase \u29c9.</p> <p>Example:</p> <pre><code>@MPSLaunch \ntest case Test extends EnvironmentAwareTestCase {\n    &lt;&lt;members&gt;&gt;\n\n    &lt;&lt;before test&gt;&gt;\n\n    &lt;&lt;after test&gt;&gt;\n\n\n    test test {\n        read action with MPSModuleRepository.getInstance() {\n            foreach module in MPSModuleRepository.getInstance().getModules() {\n                System.out.println(module.getModuleName());\n            }\n        }\n    }\n}\n</code></pre>","tags":["aspect"]},{"location":"aspects/test/#troubleshooting","title":"Troubleshooting","text":"<p>Some of the issues with testing have to do with the way tests are executed. Tests can be executed in the same MPS instance or a new instance. In the latter case, a complete new environment is started. Some editor test in  MPS Extensions \u29c9 can only be executed in a new instance. This is probably also true for other type of tests.</p> <p>Additionally, the tests are executed in temporary models which results in changed node IDs and root nodes become normal nodes with parents in tests. Avoid adapting your code to work in the test models and avoid adding checks to see if you are in a test model.</p> <p>Tests aren't running at all </p> <p>A test info node \u29c9 has to be added to the model of the tests so that the tests can find the project's path. The project path also has to be set in this node. Ensure you create variables in this path in Preferences \u2192 Appearance &amp; Behavior \u2192 Path Variables (TestInfo | MPS \u29c9).</p> <p>Tests have a long warm-up time and run slowly.</p> <p>When running the tests from a run configuration, enable <code>Execute in the same process</code> in the configuration settings. Check the box Allow parallel run (Running the tests | MPS \u29c9).</p> <p>The tests only work in MPS and not on the command line</p> <p>Why does my test fail when run from Ant but not when run from MPS? \u29c9 (Specific Languages' blog)</p> <p>Why does the test execution fail with \"Test project '$\u2026' is not opened. Aborted\"? </p> <p>It happens because you didn't set the variable in the <code>TestInfo</code>. Go to File \u2192 Settings \u2192 Path Variables and create an entry for your variable with a path to the project location on your hard drive.</p> <p>java.lang.IllegalStateException: The showAndGet() method is for modal dialogs only.</p> <p>One of the reasons why this message pops up is that a dialog should be displayed in a headless environment like a build server. There is only one way to avoid this exception than not showing the dialog. According to the IntelliJ documentation, it can also happen when the dialog is not shown on the EDT thread or the dialog is not modal.</p>","tags":["aspect"]},{"location":"aspects/textgen/","title":"TextGen Aspect","text":"<p>The TextGen language aspect defines a model-to-text transformation.</p> <p>\u2014 MPS documentation</p> <p>How do you get the TextGen for a node?</p> <p>Use the classTextGeneratorEngine \u29c9. It only works for root nodes such as ClassConcept \u29c9 and returns null when no text output exists.</p> <p>Can you also generate the text from the generator aspect?</p> <p>Use the language com.dslfoundry.plaintextgen from  MPS Extensions \u29c9.</p> Can I implement text generation for another language? <p>I want to implement text generation for language A in a separate language B. I need different text generation for some of the KernelF concepts. When I try to do this, I get a compile error because it looks like the generated descriptor does not include \"inherited\" concepts:</p> <pre><code>public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {\n    switch (myIndex.index(concept)) {\n        case LanguageConceptSwitch.Component:\n            return new Component_TextGen();\n        case LanguageConceptSwitch.Contract:\n            return new Contract_TextGen();\n        case LanguageConceptSwitch.EmptyContent:\n            return new EmptyContent_TextGen();\n        case LanguageConceptSwitch.Library:\n            return new Library_TextGen();\n       case LanguageConceptSwitch.Port:\n            return new Port_TextGen();\n</code></pre> <p>Is it not possible to \"override the textgen\" this way?</p> <p><sub>asked by: @markusvoelter<sub> <p>It's not possible this way. So far, the two ways I have found to make this happen are:</p> <ol> <li> <p>Extend the original language (A.ex) and create subconcepts of all the concepts you need to specialize the textgen. You will then need to do M2M transformation to replace the extended concepts. You can do this generically by using a script. The generator that searches for all nodes of concepts that are extended in A.ex and replaces them by using the <code>RefactoringRuntime.replaceWithNewConcept</code> method.</p> </li> <li> <p>Create annotations that override the text generation of the concepts and attach them in a generator. TThen MPS will first call the annotation's text gen, and you can override it there.</p> </li> </ol> <p>There is MPS-22092 \u29c9 which describes this request.</p> <p><sub>answered by: @coolya<sub> <p>Which built-in languages do not use the generator but only text generation?</p> <ul> <li>jetbrains.mps.baseLanguage.javadoc</li> <li>jetbrains.mps.core.properties</li> <li>jetbrains.mps.core.xml</li> </ul>","tags":["aspect"]},{"location":"aspects/transformations/","title":"Transformations Aspect","text":"<p>This language is part of Shadow Models \u29c9 in  MPS Extensions. Consult the documentation \u29c9 for more information.</p> <p>What's a fork?</p> <p></p> <p>It can group a list of applicable rules. If there are nodes in the output where one of the transformations would again be applicable, nothing will happen unless you enable the fixpoint mode. When you use the transform keyword, it will copy the input and all its descendants. If any input concept matches a transformation rule parameter in the auto-apply part, it will transform the input according to the matched transformation.</p> <p>What does the transform statement do?</p> <p>It has the same meaning as a COPY_SRC macro in MPS and will copy the input node and apply a rule.</p>","tags":["aspect"]},{"location":"aspects/typesystem/","title":"Type System Aspect","text":"<p>A type system is part of a language definition assigning types to the nodes in the models written using the language. The type system checks certain constraints on nodes and their types.</p> <p>\u2014 MPS documentation</p> <ul> <li>old cheatsheet \u29c9</li> </ul> <p>Type system rules aren't executing.</p> <p>Turn off the power save mode \u29c9. Make also sure that you use the language that contains the rules. Make sure that under Tool \u2192 Model Checker, the type system checks are enabled. The type system only checks some rules when you invoke Check model. In this case, the option do not apply on the fly is set to true in a checking rule.</p> <p>Are comparison rules often used?</p> <p>They are rarely used (not many results across various code bases).</p> <p>How do you learn more about MPS CodeRules?</p> <p>This new type-system works with logical constraints. Visit JetBrains/mps-coderules for more information. There is also a blog post \u29c9 about this project. The new MPS implementation of the Kotlin language uses CodeRules. JetBrains/mps-kotlin-typesystem contains more information. There is also a free course about it on stepik \u29c9.</p> <p>Type system vs. constraints? </p> <p>Type system vs. constraints \u29c9 (Specific Languages' blog)</p> <p>Subtyping vs. inheritance? </p> <p>Subtyping vs inheritance \u29c9 (Specific Languages' blog)</p> <p>How can you speed up model checks? (&lt; 2021.2)</p> <p>Speeding up model checks with Scope Cache \u29c9 (Specific Languages' blog)</p> How do you build a language extension for checking rules? <p>I built a Base Language extension that you can use in a checking rule (i.e., in the type system aspect of another language). Still, the new language's generator isn't engaged while generating some checking rules using the extension (the generation plan says: \"NOT IN THE PLAN\").</p> <p>The new language's generator must depend on the Base Language generator with the scope set to <code>Extends</code>.</p> <p></p> <p><sub>contributed by: @kbirken<sub> <p>When and why should you copy a type in an inference rule?</p> <p>I've seen the same code, where one time, the type is copied, and another time it's just used (without the copy). When should we copy the type and why?</p> <pre><code>inference rule typeof_Member {\n    applicable for concept = Member as member\n    applicable always\n    overrides false\n\n    do {\n        typeof(member) :==: member.type.copy;\n    }\n}\n</code></pre> <p>Copy the type only if you want to use it in another type as a child.</p> <p>In the example, it should be fine to use <code>member.type</code>. But let's say you have a <code>SetType</code> concept in your language that contains an <code>innerType</code> as a child. If you want to construct an instance of that concept, write code like this:</p> <pre><code>node&lt;SetType&gt; result = new node&lt;SetType&gt;;\nresult.innerType = member.type.copy;\ntypeof(member) :==: result\n</code></pre> <p>If you omit the <code>.copy</code> in the code, you will attempt to \"hijack\" the <code>member.type</code> node from the <code>member</code> and break the model. MPS will complain.</p> <p><sub>contributed by: @sergej-koscejev<sub> <p>How do you suppress errors? </p> <p>I have a piece of embedded demonstration code and don't want it to show warnings (e.g., on unused variables). How can I do that?</p> <p>Make your node implement ISuppressErrors \u29c9. If you don't override any methods, it will suppress all constraint, type system, and cardinality errors and warnings.</p> <ul> <li>You may override <code>#suppress(node&lt;&gt;)</code> to only hide the errors of certain subnodes.</li> <li> <p>You may override <code>#suppress(NodeReportItem)</code> to only hide specific errors. Overriding this will take precedence over overriding <code>#suppress(node&lt;&gt;)</code>. Xou should implement only one of them or manually call <code>#suppress(node&lt;&gt;)</code> from <code>#suppress(NodeReportItem)</code>.</p> </li> <li> <p>If there are nested nodes that implement <code>ISuppressErrors</code>, the error will be suppressed if any of them returns true. You may debug such by copying the error node to the console (e.g., <code>nodeRef@50283</code>) and running this line:</p> </li> </ul> <pre><code>&gt; nodeRef@50283.ancestors&lt;concept = ISuppressErrors&gt;.select({~it =&gt; [it, it.suppress(nodeRef@50283)]; });\n\n[[dummy, false], [&lt;no name&gt;[LiteralProgramFragment]: dummy():void, false], [Demo1, true]]\n</code></pre> <p>The result is the path from that node to the top and will tell you which node is suppressing that error. The concept IAntisuppressErrors \u29c9 also plays a role there, although it is deprecated (implement the <code>suppress</code> method instead).</p> <p><sub>contributed by: @abstraktor<sub> Is there an elegant way to express inference rules on lists? <p>If you want to calculate the common type of more than one node you can use a type system variable for that. Example:</p> <pre><code>var x;\n\nforeach it in self.items {\n    infer x :&gt;=: typeof(it)\n}\n\ntypeof(self) :==: operation type(self, x, null);\n</code></pre> <p>Given that you need the operation type in the end. You probably need to change the implementation of the rules contributing to the <code>operation type</code> only to use \"one side.\" If the type of the expression is simply the type of the variable <code>x</code>, you can omit it.</p> <p><sub>answered by: @coolya<sub> <p>What's Helgins?</p> <p>It's the old name of the type system. The name is nowadays not used anymore.</p> <p>What is the relation between null and other types?</p> <p>Null is a subtype of every reference \u29c9 type in Base Language/Java but not of primitive types.</p> <p>What does variance mean?</p> <p>Detailed explanation:</p> <ul> <li>StackOverflow answer \u29c9</li> <li>Covariance and Contravariance in Java \u29c9</li> </ul> <p>It concerns the relationship between types and subtypes, type conversion, and deciding whether a method is overwritten or overloaded.</p> <p>Simple explanation:</p> <ul> <li>covariance<ul> <li>subtypes are allowed instead of a type</li> <li>examples: method return type, parameter type, variable assignment</li> </ul> </li> <li>contravariance:<ul> <li>supertypes are allowed instead of a type</li> <li>parameter of function types \u29c9</li> </ul> </li> <li>invariance: neither covariance nor contravariance<ul> <li>examples: generics (e.g <code>List&lt;String&gt;</code>is not a subtype of <code>List&lt;Object&gt;</code>)</li> </ul> </li> </ul> <p>For overridden methods, the signature has to be the same (name + parameters), and the return type can be a subtype of the original return type:</p> <pre><code>class MyCollection {\n    Iterator iterator() {\n        null;\n    }\n}\n\nclass MyList extends MyCollection {\n    @Override\n    *package* ListIterator iterator() {\n        null;\n    }\n}\n</code></pre> <p>The class MyList is allowed to specify a different return type (ListIterator).</p> <p>What's autoboxing in Base Language/Java?</p> <pre><code>In some cases, there is an automatic conversion between primitive and reference types called [autoboxing/unboxing](https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html).\n</code></pre> <pre><code>Integer z1 = 1;\nint z2 = new Integer(1);\n</code></pre> <p>Autoboxing doesn't apply to array types \u29c9, and the type checker behaves differently in Java (J) and Base Language (B):</p> <pre><code>Integer[] a = new int[]{1, 2}; // disallowed in both\nInteger z = 1; // allowed in both\nInteger[] b = {1}; // allowed in J, disallowed in B\nint[] c = {new Integer(1)}; // allowed in J, disallowed in B\nint[] d = new Integer[]{new Integer(1)}; // disallowed in both\nObject d = new int[]{1}; // allowed in both\n</code></pre>","tags":["aspect"]},{"location":"aspects/vcs/","title":"VCS Aspect","text":"<p>The VCS merge aspect language aspect defines strategies to automatically resolve merge conflicts for nodes, their children, references, and properties.</p> <p>\u2014 MPS documentation</p> <p>I pulled some changes or made some other VCS-related stuff, and strange errors appeared, or changes weren\u2019t visible.</p> <p>There might be a bug related to caching or VCS in general. Invalidating the cache or restarting the project might help. There are quite some bugs in VCS \u29c9.</p> <p>How do you avoid merge conflicts?</p> <p>Avoiding merge conflicts \u29c9 (Specific Languages' blog)</p> <p>What are some real-world use cases of merge hints?</p> <ul> <li>accepting our node when it contains a calculated hash or calculated result</li> <li>accepting our node for nodes where the graphical representation changed (e.g., diagrams)</li> <li>accepting our node when it contains additional information, such as node attributes</li> </ul>","tags":["aspect"]},{"location":"aspects/virtualinterfaces/","title":"Virtual Interfaces Aspect","text":"<p>This aspect allows declaring virtual interfaces and is part of Shadow Models \u29c9 in  MPS Extensions \u29c9. To get a better understanding, have a look at the corresponding sandbox.</p>","tags":["aspect"]},{"location":"build/","title":"Build Language","text":"<ul> <li>Escaping to Ant from the build language \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you override the build directory name build to something different?</p> <p>You can do it when you invoke Ant by passing <code>-Dbuild.dir=otherDir</code>.</p> <p>Dependencies on a module are not visible from the current build project.</p> <p>Build script error: \"Dependency on a module not visible from current build project\" \u29c9 (Specific Languages' blog)</p> <p>Build script error: unsatisfied dependency </p> <p>Build script error: \"Unsatisfied dependency\" \u29c9 (Specific Languages' blog)</p> <p>Build script error: can't find used language in dependencies.</p> <p>Build script error: \"Cannot find used language in dependencies\" \u29c9 (Specific Languages' blog)</p> <p>Can't find extended language in dependencies.</p> <p>Check this answer \u29c9.</p> <p>How do you build an MPS project with Maven?</p> <p>Specific Languages blog: Building MPS projects using Maven - a sample \u29c9</p> <p>How can you find out the supported MPS version of a project?</p> <p>Search the readme for this information. You can find this information in the file build.gradle (for example, in this line \u29c9 if the project uses Gradle. in  MPS Extensions \u29c9). For older MPS projects, there is no way of finding out the version.</p> <p>What do you need to put into the .gitignore file?</p> <p>Have a look at this .gitignore \u29c9 file.</p> <p>Why is it possible to successfully build models with missing imports?</p> <p>Why can I successfully build models with missing imports? \u29c9  (Specific Languages' blog)</p> <p>X errors before generation </p> <p>3358 errors before generation \u29c9 (Specific Languages' blog)</p> <p>How do you clean the generated files in MPS?</p> <p>Possible solutions:</p> <ul> <li>Specific Languages Blog: mpsclean \u29c9</li> <li>Have a dedicated clean task (gradle example \u29c9) when using a build script.</li> </ul> <p>The idea of having such a task is not only to make it easier to clean the generated files but also keep downloaded dependencies. If you have, for example, MPS as dependency in your project, git clean -xdf will remove all dependencies including MPS.</p> <p>The files from \u29c9 operation from the MPS build model changes the access permissions of the copied-over files.</p> <p>You can use Buildlayout_Filemode \u29c9 as a workaround or unzip the files using Gradle.</p> <p>How can you unpack JAR files?</p> <ul> <li>Build language tricks: Unpacking JAR files \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you measure code coverage?</p> <ul> <li>Measuring code coverage with the MPS build language \u29c9 (Specific Languages' blog)</li> </ul>","tags":["mps_language","build"]},{"location":"build/#mps-build-script","title":"MPS Build Script","text":"<p>The build language is one of the oldest parts of MPS, designed to generate the Apache Ant files and stayed the same over the years. The generator of the build language has to find out what, for example, the solution needs Base Language means at the runtime level. The JVM needs the file baselanguage.jar on the classpath to execute code from the solution. The more dependencies the solution has, the more complex the generated Ant file becomes because the generator must consider all these transitive dependencies. The generator needs to know what artifact a module generates and how the generated artifact/module is used at runtime. Therefore, the JARs must be on the classpath.</p> <p>The modules in the mps-groups in the MPS build script contains information from the serialized descriptors (.msd files, .mpl files, \u2026). The Reload all modules from disk intention loads them explicitly. MPS doesn't read the descriptor files before generation, so you should always verify whether your MPS build scripts are up-to-date before you push. For every dependency added to a module or a changed reexport flag, this intention has to be triggered by hand.</p> <p>There is a problem with the language: The current implementation of the build language isn't extensible, because it always looks into the original model. The central part of the Ant file generation is the dependency analysis (for the modules), and for this, it needs to access the original model for some technical reasons. This approach limits you to languages that MPS provides. For example, You can't use your patterns and write an extension that picks all modules from a folder, generates an IntelliJ plugin, stores the result in a zip file, and generates all the code required for the command-line build.</p> <p>The code generator of the build language has to verify for dependencies like JARs in stub models and JARs at runtime, but the error messages aren't well-designed. For example, you have a JAR file xyz.jar entered as a Java runtime dependency of the language abc. Instead of something like \"you have to enter xyz.jar to your build layout plugin-123, cause language abc specifies it as java runtime dependency\", you get, for example, \"jar stub library should be extracted into build-script: <code>${my.project}/very/long/path/lib/xyz.jar</code>\"\u201a which isn't helpful.</p> <p>The model checker could also find many problems the generator finds, but the checks are done at generation time and implemented as \"gencontext.show error\" in the generator.</p>","tags":["mps_language","build"]},{"location":"build/#generated-ant-scripts-buildxml","title":"Generated Ant Scripts (build.xml)","text":"<p>MPS build scripts generate Ant scripts, which generate the modules. The Ant script starts a headless MPS instance with all required dependencies, puts JARs on the classpath, and does some further magic. You can pass tasks to the Ant script, like the generate task.</p> <p>Modules have several models with dependencies. For example, for a language, the behavior uses the structure aspect; the type system uses the behavior aspect, etc., which can result in complex dependencies between these models. These have to be considered when the models are generated and compiled. The order is derived by the code generator of the build language and results in an execution plan where the compile units are grouped in chunks. Chunks with bootstrap dependencies are explicitly marked, which means all modules in the chunk have to be compiled at the same time.</p> <p>MPS consists of hundreds of JAR files that must be on the classpath for the code generation and compilation, which leads to giant Ant scripts (with some thousand lines). Even simple MPS build scripts, which only use Base Language, result in big Ant scripts.</p> <p>The build layout in the MPS build script defines the packaging of your modules, for example, as Zip files containing multiple plugins, as a simple plugin folder, as a lib folder with a flat list of JARs, etc.</p> <p>The Ant script needs to know the path to the local MPS installation and where your modules and dependencies are. This is usually done using folder macros in the MPS build script, generated as \"properties\" in the Ant script. This approach makes the build independent of your local machine, and you can execute the Ant script on the CI or any other machine.</p> <p>The headless MPS, started by the Ant script, sometimes behaves differently than an IDE/MPS. For example, the IDE can resolve circular dependencies by applying Make Project multiple times, which doesn't work on the command line and thus also fails on the CI. Dependencies in the IDE are only sometimes visible in the MPS build script/Ant script and can result in failing builds. MPS holds one global repository with all modules loaded into the modules pool (project libraries, global libraries, etc.). Everything's always visible in the IDE, and the IDE can resolve wrong dependencies, but the build can fail on the command line because the referenced model isn't loaded. The build language generator doesn't check the nodes, for example, that references out of scope (like the model-checker does). It only looks into metadata/model properties and relies on that information.</p>","tags":["mps_language","build"]},{"location":"build/#shell-scripts","title":"Shell Scripts","text":"<p>Some scripts, like MPS's start scripts, are developed using Windows Batch Scripting on Windows and Bash Shell Scripting on Mac/Linux. To learn more about those two scripting languages, consult the following list:</p> <ul> <li>Windows Batch Scripting | wikibooks.org \u29c9</li> <li>Using batch files | learn.microsoft.com \u29c9</li> <li>Bash Shell Scripting | wikibooks.org \u29c9</li> <li>Bash Reference Manual | gnu.org \u29c9</li> </ul>","tags":["mps_language","build"]},{"location":"build/advanced_github_workflow/","title":"Advanced GitHub Workflow","text":"<p>The following workflow suits small projects and projects with hundreds of developers. This guide assumes that you host the project on GitHub and that the CI pipeline also runs on GitHub. Additionally, one or more teams work on the project and have some form of agile software development \u29c9 implemented. New feature/bug fixes are developed based on a ticket \u29c9 system.</p>"},{"location":"build/advanced_github_workflow/#codeowners-file","title":"CODEOWNERS File","text":"<p>GitHub supports CODEOWNERS \u29c9 files which you have to place in the .github subfolder. An MPS language can generate it.  For solutions, add a root node to describe the owners. For example:</p> <p>Solution Code Owners</p> <p>The following maintainers should be added to pull requests changing this solution</p> <pre><code>- team1\n- team2\n</code></pre> <p>Add this information to the documentation aspect if you use the  com.mbeddr.doc. For example:</p> <p>Maintainer </p> <p>The following maintainers should be added to pull requests changing this language.</p> <pre><code>ownerslist {\n\n- team1\n- team2\n}\n</code></pre> <p>Specify that the corresponding team must review pull requests before merging them in the branch protection rules on GitHub.</p>"},{"location":"build/advanced_github_workflow/#merge-queue","title":"Merge Queue","text":"<p>When you merge all branches into a main branch, and there are many pull requests simultaneously, enabling the merge queue \u29c9 feature on GitHub. Pull requests with reviews and no failing checks can be added to the merge queue. PRs show the position in the merge queue and the expected merge time.</p> <p>When the previous PRs in the merge queue conflict with the current PR, GitHub removes the current PR from the merge queue. You can do this manually when accidentally adding a PR to the merge queue. There is also the option Merge when ready at the bottom of the PR to automatically add it to the merge queue when all other checks succeed.</p>"},{"location":"build/advanced_github_workflow/#issue-and-pull-request-templates","title":"Issue and Pull Request Templates","text":"<p>Add issue templates to a repository to make it easier for developers and users to submit issues. stevemao/github-issue-templates contains a few ready-to-use templates. If you use a help desk, some other tool like Jira, YouTrack, or a platform like GitLab, you should turn off issues \u29c9 instead.</p> <p>For developers, a pull request template \u29c9 helps them create better pull requests. When you open a new PR, GitHub uses the template. It can explain naming conventions that the developer has to follow or provide a checklist of things to pay attention to before opening a new PR, for example, adding the change to the changelog, updating the documentation, or checking that tests exist for a new feature.</p>"},{"location":"build/advanced_github_workflow/#github-actions-and-workflows","title":"GitHub Actions and Workflows","text":"<p>GitHub supports automating the workflow through GitHub Actions \u29c9.</p>"},{"location":"build/advanced_github_workflow/#release-notes","title":"Release Notes","text":"<p>GitHub supports automatically generating release notes; many actions \u29c9 on the GitHub marketplace support this feature. While a common approach is to extract the information from the commit messages, it might be better to manually write a release notes file or extract the information from the PR description if it has a pre-defined format.</p> <p>It's important to differentiate between a changelog and release notes (amoeboids.com \u29c9): the changelog communicates technical changes, and the release notes  inform the users about new features, improvements, and bug fixes in a non-technical way.</p>"},{"location":"build/advanced_github_workflow/#workflows","title":"Workflows","text":"<p>Workflows are located in the .github/workflows directory. You can trigger them by events and schedule them automatically or manually. For many workflows, at least the default environment variables GITHUB_ACTOR and GITHUB_TOKEN are necessary. Use nektos/act \u29c9 to run GitHub Actions locally. Depending on the project, the following workflows might be helpful:</p> <ul> <li>Building the project using the gradle-build-action in combination with the mps-gradle-plugin \u29c9</li> <li>Checking that issues or PRs are not stale \u29c9 (e.g., as a cronjob)</li> <li>Checking that PR conventions are followed when a PR changes or the PR is added to the merge queue. Some possible checks:<ul> <li>valid PR title</li> <li>valid PR description</li> <li>valid branch name</li> </ul> </li> <li>Publishing the MPS languages and RCP as snapshots when a snapshot Git tag \u29c9 exists</li> <li>Building and testing the languages when you create a PR or the PR is added to the merge queue.</li> <li>Building the RCP when a change is pushed to main</li> <li>Creating a release (e.g., manually triggered)<ul> <li>building the RCP</li> <li>generating the release notes</li> <li>deploying the RCP to a repository, for example, JFrog Artifactory, Sonatype Nexus Repository, or GitHub Packages \u29c9</li> </ul> </li> <li>Collecting repository metrics</li> <li>scanning the code for vulnerabilities and errors automatically on GitHub or using a proprietary solution like Black Duck Software Composition Analysis \u29c9 (e.g., as a cronjob)</li> <li>uploading coverage reports (e.g., JaCoCo) and test results generated by MPS (JUnit \u29c9) to a server (e.g., as a cronjob)</li> </ul>"},{"location":"build/advanced_github_workflow/#metrics","title":"Metrics","text":"<p>Use a GitHub action like floric/repo-monitor-action \u29c9 to get an overview of project statistics. You can generate custom metrics reports for MPS projects, including the last releases using GitHub Pages. In the following snippets, languages and solutions are in the code folder:</p> number of languages<pre><code>$(find code/languages/*/languages/* -maxdepth 0 -type d | wc -l)\n</code></pre> number of solutions<pre><code>$(find code/languages/*/solutions/* -maxdepth 0 -type d | wc -l)\n</code></pre> number of models<pre><code>$(find code/languages/*/*/*/models/*.mps -maxdepth 0 -type f | wc -l)\n</code></pre> number of concepts<pre><code>$(grep -ro \"&lt;node concept=\\\"1TIwiD\\\"\" code/languages/*/languages/*/models --include *structure.mps | wc -l)\n</code></pre> number of interfaces<pre><code>$(grep -ro \"&lt;node concept=\\\"PlHQZ\\\"\" code/languages/*/languages/*/models --include *structure.mps | wc -l)\n</code></pre> number of deprecated nodes (DeprecatedNodeAnnotation)<pre><code>$(grep -ro \"&lt;node concept=\\\"asaX9\\\"\" code/languages/*/languages/*/models --include *structure.mps | wc -l)\n</code></pre> <p>Other interesting statistics that can be collected:</p> <ul> <li>code coverage</li> <li>duration of workflow</li> <li>build duration</li> <li>model check \u29c9 duration</li> <li>number of added files in the latest commit</li> <li>number of modified files in the latest commit</li> <li>number of removed files in the latest commit</li> </ul>"},{"location":"build/advanced_github_workflow/#from-the-ticket-to-the-merged-pr","title":"From the Ticket to the Merged PR","text":"<p>The developer creates a new branch from the default branch \u29c9 usually called main or master. It is the stable branch that contains all the latest changes. Use the ticket numbers in the branch name to connect code changes to ticket numbers. There are many different branch naming conventions (example \u29c9). One possible pattern is to start the branch with a category such as feature, bugfix, or refactor, then include the ticket number, and a branch description \u2014 for example, <code>feature/TASK-123_implement_awesome_feature</code>.</p> <p>For the commits, sometimes also naming conventions are used. A simple approach is to start the commit message with the ticket number and describe the change, for example, <code>TASK-123: implement the feature</code>. GitHub should execute some of the described workflows automatically when the branch is ready and pushed. The PR should be reviewed from a white box and black box perspective (see: testing), and when all checks succeed, you can add the PR to the merge queue. When the PR is at the top of the merge queue, GitHub will build and test it again, and execute all the checks will be executed once again. If everything succeeds, GitHub will finally merge the PR into one of the stable branches, like the default branch.</p> <p>In the meantime, depending on the used agile workflow, the state of the ticket might change from Todo to In Progress to Code Review and then to Done when you merge the PR. Depending on the release cycle \u29c9, you might release a new version regularly (e.g., four weeks).</p>"},{"location":"build/advanced_github_workflow/#an-example-of-a-different-workflow","title":"An Example of a Different Workflow","text":"<p>While the described workflow has proven successful for big projects, you can use many other workflows. For example, the MPS platforms don't use ticket numbers in commit messages. Tickets come from different (customer) projects. Linking existing tickets can also be difficult because the platforms are Open Source, and the tickets sometimes are not. The platforms are released whenever a change is pushed to the master or maintenance branches (rolling release) instead of using a fixed release cycle. The projects are also not built on GitHub but on a TeamCity \u29c9 server.</p>"},{"location":"build/ci/","title":"Continuous Integration","text":"<p>Continuous integration (CI) is a software development practice integrating code changes from multiple contributors into a single software project. It\u2019s a primary DevOps best practice, allowing developers to frequently merge code changes into a central repository where builds and tests are run. Automated tools assert the new code\u2019s correctness before integration. A VCS is the crux of the CI process. The version control system also has other checks like automated code quality tests, syntax style review tools, and more.</p> <p>The main benefits of continuous integration are:</p> <ul> <li>It reduces the risk of integration conflicts and bugs by detecting them early and often.</li> <li>It improves the quality and reliability of the software by ensuring that every change is tested and verified.</li> <li>It speeds up the delivery and deployment of the software by automating the build and test process.</li> <li>It enhances collaboration and communication among the developers and other stakeholders by providing a shared and consistent view of the code.</li> </ul>","tags":["infrastructure"]},{"location":"build/ci/#tools","title":"Tools","text":"<p>Some MPS projects used the following CI tools in the past:</p> <ul> <li>Jenkins \u29c9 is an open-source CI server that supports various plugins and integrations.</li> <li>Bamboo \u29c9: is a commercial CI server that integrates with Jira, Bitbucket, and other Atlassian products.</li> </ul> <p>Some MPS projects used the following popular CI tools:</p> <ul> <li>TeamCity \u29c9 is a commercial CI server that supports various languages, platforms, and technologies. It offers real-time feedback, smart triggers, code quality analysis, and more. Itemis and JetBrains use it.</li> <li>GitLab CI \u29c9 is a cloud-based or self-hosted CI service that integrates with GitLab, a web-based Git repository manager. It allows you to define your pipelines as code, run tests in parallel, deploy to any environment, and more.</li> <li>GitHub Actions \u29c9 is a cloud-based CI service that integrates with GitHub, a web-based Git repository hosting service. It allows you to create workflows that automate your software development lifecycle, such as building, testing, and deploying your code. You can also use pre-built actions from the GitHub Marketplace or create custom actions.</li> </ul>","tags":["infrastructure"]},{"location":"build/ci/#challenges","title":"Challenges","text":"<p>CI with MPS projects can provide some challenges:</p> <ul> <li>MPS projects are not text-based but use an abstract syntax tree (AST) representation that MPS stores in XML files. That means that you have to review all model-related changes in MPS. When opening PRs, you can still do other checks: incorrect merges/rebasing can be detected manually by examining the commit history. The CI tool will detect conflicting files, and failing tests or model check errors can be reported as typical JUnit test results. Compilation errors when building the MPS modules will also fail the build. Advanced GitHub workflow mentions other checks that can be automated or done manually.</li> <li>MPS projects may depend on external libraries or plugins that must be installed and configured on the CI agents. Those dependencies may require additional steps or scripts to ensure compatibility and availability. A good approach is to use isolated environments where you install all the dependencies. A standard solution is doing CI with Docker. When using the model check \u29c9 plugin from the mps-gradle-plugin, additional plugins might need to be loaded through pluginsProperty if your MPS languages depend on one of the core MPS plugins. This Gradle plugin starts MPS only with a bare minimum number of plugins.</li> <li>MPS projects may generate code in different languages or formats, such as Java, C, XML, HTML, and more. These additional languages may require other tools or plugins to compile, test, and deploy the generated code. Example: Most MPS platforms, including mbeddr, use this DockerFile \u29c9 for building.</li> </ul>","tags":["infrastructure"]},{"location":"build/ci/#blog-posts","title":"Blog Posts","text":"<ul> <li>Setting up CI with MPS: self-contained projects \u29c9 (Specific Languages' blog)</li> <li>Maturity levels of MPS deployment \u29c9 (Specific Languages' blog)</li> <li>The Business-DSL DevOps Process \u29c9 (Markus Voelter's blog)</li> </ul> How to attach the debugger to a CI build on GitHub actions? <p>Note: GitHub actions can be run locally with act \u29c9.</p> <p>The plan is first to teach the build to open up a reachable SSH connection and then tunnel a local port onto it so that we can connect IntelliJ to it.</p> <ul> <li>Sign up with ngrok and get your auth token</li> </ul> <p>Since build agents usually are not reachable from the web, we'll need someone to bridge the build agents' firewalls. A common solution for that seems to be https://ngrok.com/ \u29c9 which requires free signup. I tried tmate as well, but that doesn't support port forwarding.</p> <ul> <li>Open ssh from your <code>.github/workflows/build.yml</code></li> </ul> <p>There are prepared GitHub actions that start sshd with ngrok. I used debug-via-ssh \u29c9. All we need to give it is our <code>ngrok authtoken</code> from above and our public ssh key of the key we want to use to get into the machine.</p> <p>Given we already have <code>.github/workflows/build.yml</code>, I added a step right before the failing step:</p> <pre><code># \u2026\n\n- name: Start SSH session\nuses: luchihoratiu/debug-via-ssh@main\nwith:\n    NGROK_AUTH_TOKEN: 2343953890afgaegaewgi\u00f6oio2332\u00e4\u00e4\u00e4\n    SSH_PASS: ssh-rsa AAAJOAKJFLJWKLJLEKJLEFKJLFEKJLK\u2026JAOIFJOFA bkruck@itemis.com\n# \u2026\n</code></pre> <p>Since this is a private repository, I was fine with pasting my authtoken and public SSH key into it (I didn't have permission to add secrets to the repo). After the whole session, I reset my ngrok auth token.</p> <p>Another note worth mentioning is that we trust the author of the action and ngrok to not man-in-the-middle us.</p> <ul> <li>Tell MPS to wait for us.</li> </ul> <p>Now we can run the GitHub build and see that ngrok is stopping the build at the desired location, being ready for us to connect. Our agent should be listed with a domain name and port in the endpoints list \u29c9. Taking the two, we can now ssh into it:</p> <pre><code># SSH through ngrok onto the build machine, already forwarding local 5020 to the remote machine\nssh -L 5020:localhost:5020 -p11720 runner@4.tcp.ngrok.io\n</code></pre> <p>If you are asked for a password, fix the casing of -p. If still asked for a password, check which user runs the build. On GitHub, that user is called runner right now. Even though he has sudo rights.</p> <p>We now want to teach MPS to open the debug ports and wait for us to connect before running any tests. On CLI, this doesn't work with .vmoptions files. Instead, we're running the tests from an ant-file in this project.</p> <p>Since the allScripts generation was already performed, we only need to open the ant-file and add a JVM argument. I like to open <code>build/myProject/build-tests.xml</code> with Vim and then execute the following search expression: <code>%s/&lt;\\/jvmargs&gt;/  &lt;arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/&gt;\\r      &lt;\\/jvmargs&gt;/g</code>. In other terms: Look for <code>&lt;/jvmargs&gt;</code> and add <code>&lt;arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/&gt;</code> right in front of it. The <code>suspend=y</code> will tell Java not to start doing anything before we are connected, while the <code>address=5020</code> tells it to welcome us on port 5020.</p> <pre><code>--- build/myProject/build-tests.xml    2021-09-17 21:15:50.000000000 +0200\n+++ build/myProject/build-tests.xml.before 2021-09-17 21:32:09.000000000 +0200\n@@ -342,7 +342,6 @@\n    &lt;jvmargs&gt;\n        &lt;arg value=\"-ea\" /&gt;\n        &lt;arg value=\"-Xmx3072m\" /&gt;\n\n-        &lt;arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5020\" /&gt;\n    &lt;/jvmargs&gt;\n    &lt;macro name=\"mps_home\" path=\"${mps_home}\" /&gt;\n    &lt;macro name=\"myProject.home\" path=\"${myProject.home}\" /&gt;\n</code></pre> <ul> <li>Run the tests from within SSH</li> </ul> <p>Since I don't know how to move ngrok into the background while proceeding with the build, I just ran the next GitHub action by hand:</p> <pre><code>$ cd worker/myProject\n$ ./gradlew testLanguages\n\u2026\n\u2026\nListening for transport dt_socket at the address: 5020\n</code></pre> <p>We should now see the MPS start-up command line and say it is waiting for us on 5020.</p> <ul> <li>Connect with your local IntelliJ instance.</li> </ul> <p>Assuming that you have the MPS sources checked out, opened it in IntelliJ, and added the sources of your project as a module, we should be ready to connect now:</p> <p>Just start a remote debugging session on port 5020. It will forward the requests over SSH to the agent machine. Once connected, you can set breakpoints (for example, I set an Exception breakpoint for <code>StackOverflowError</code>) and then proceed the build to run into the breakpoint.</p> <ul> <li>Cleanup</li> </ul> <p>After you find your issue and everything is shiny, remember to remove the step from your GitHub workflow again and reset your ngrok auth token.</p> <p>The build fails with exit code 137</p> <p>Specific Languages blog: Exit code 137 \u29c9</p>","tags":["infrastructure"]},{"location":"build/command_line_tool/","title":"Creating a Command Line Tool","text":"<p>Basic code:</p> <pre><code>public class CommandLineTool { \n\n  public static void main(string[] args) throws Exception {\n    final string projectPath = YOUR_PATH /* (1) Get project path, for example, from args or system properties */;\n\n    final EnvironmentConfig config = EnvironmentConfig\n      .emptyConfig()\n      .withDefaultPlugins()\n      .withBootstrapLibraries();\n    config.addPlugin(\"http-support\", \"jetbrains.mps.ide.httpsupport\");\n    final IdeaEnvironment env = new IdeaEnvironment(config);\n    env.init();\n\n    final Project project = env.openProject(new File(projectPath));\n    Throwable thrown = null;\n    try {\n        doSomething(); // 2\n    } catch (Exception e) {\n      thrown = e;\n    } finally {\n      env.dispose();\n    }\n    if (thrown != null) {\n      System.err.println(\"ERROR:\");\n      thrown.printStackTrace();\n      System.exit(1);\n    } else {\n      // You need `System.exit` even in a successful case to stop threads that MPS plugins may be leaving behind.\n      System.exit(0);\n    }\n  }\n}\n</code></pre> <p>What can you do with the project (at point 2)? Here is how you invoke a static method <code>foo()</code> on class <code>Bar</code> in module <code>Baz</code>:</p> <pre><code>class InvokeMethod {\n    void execute() {\n        ModuleRepositoryFacade facade = new ModuleRepositoryFacade(project);\n        ReloadableModule module = (ReloadableModule) (facade.getModule(module-reference/Baz/));\n        Class&lt;?&gt; classToInvoke = module.getClass(\"some-package.Bar\");\n        Method methodToInvoke = classToInvoke.getMethod(\"foo\");\n        methodToInvoke.invoke(null);       \n    }\n}\n</code></pre> <p>Why are all the reflection tricks needed, and why not call the class directly instead? The answer is that when MPS is initialized and a project opens, it sets up classloaders and puts any dependencies module <code>Baz</code> might have on the classpath so that you don't have to specify them ourselves.</p> <p>We still need to have the initial set of JARs on the classpath to run our class and start MPS. Here is how you would run our tool from Gradle:</p> <pre><code>task runCommandLineTool(type: JavaExec) { \n    main = 'CommandLineTool' \n    classpath file('solutions/commandline/classes_gen') // Location of CommandLineTool.class\n    classpath fileTree(\"$mps_home/lib\") // $mps_home points to the MPS installation\n}\n</code></pre> <p>You can also add MPS to the Gradle dependencies block:</p> <pre><code>dependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'\n    implementation fileTree(\"$mps_home/lib\")\n}\n</code></pre>","tags":["guide","java_integration"]},{"location":"build/git/","title":"Git","text":"<p>Git is a free and open-source  distributed version control system that allows developers to manage their code and collaborate on projects. While MPS supports the version control systems Git and Subversion, Git is the de-facto standard for MPS projects. Read Version control | MPS documentation \u29c9 first to get a better understanding.</p>","tags":["infrastructure"]},{"location":"build/git/#git-problems","title":"Git problems","text":"<p>The following short sections describe common issues that you encounter with the Git integration in MPS. Except for the visual difference viewer, you are not forced to use the UI to work with Git in MPS. If you are comfortable using the command line, you can switch to the Terminal tool and use ordinary Git commands.</p>","tags":["infrastructure"]},{"location":"build/git/#invisible-git-change","title":"Invisible Git Change","text":"<p>Some changes in models can't be visualized by the MPS diff viewer. Switch to the Unified viewer or Side-by-side viewer in the diff window to see the changes. Examples of invisible changes are version changes in language dependencies, changes in the node ID, and resolve info changes \u29c9. node ID, and resolve info changes \u29c9.</p> <p></p>","tags":["infrastructure"]},{"location":"build/git/#merge-conflicts","title":"Merge Conflicts","text":"<p>Use the button &gt;&gt;&lt;&lt; at the top next to Accept Yours to accept all non-conflicting changes for the root nodes, and do the same for the changes in the root nodes below. Then use the &gt;&gt; or &lt;&lt; button to accept the change from the left or right side. You can reject changes with the x button.  In other dialogs, there is a magic wand symbol to automatically apply non-conflicting changes. Alternatively, you can use the All option to accept the changes. You only have to resolve merge conflicts, all other changes can be resolved automatically. </p> <p></p> <p>You can also edit the node in the center, but can't make changes like resolving references and importing dependencies.</p>","tags":["infrastructure"]},{"location":"build/git/#local-change-in-node-but-the-node-is-deleted-on-the-server","title":"Local Change in Node but the Node is Deleted on the Server","text":"<p>You can reject the deletion on the server by clicking Select Left or accept the deletion by clicking Accept Right. Don't click the arrow in the right window to accept the change from the server. You will end up with an empty file that can't be loaded.</p>","tags":["infrastructure"]},{"location":"build/git/#checkout-would-overwrite-local-changes","title":"Checkout would overwrite local changes","text":"<p>When you hover with the mouse over the buttons, MPS explains what they do. Force Checkout switch to the new branch and discards any local changes; Smart Checkout shelves the changes \u29c9, switches to the branch, and then unshelves the changes. Don't checkout does nothing and closes the dialog.</p>","tags":["infrastructure"]},{"location":"build/git/#checking-out-a-remote-branch-while-having-local-commits","title":"Checking Out a Remote Branch While Having Local Commits","text":"<p>The first two options are self-explanatory. Rebase onto Remote checks out the remote branch and appends the local commits to the end.</p>","tags":["infrastructure"]},{"location":"build/git/#local-branch-name-already-exists","title":"Local Branch Name Already Exists","text":"<p>If you don't need the old branch, use the overwrite option or find the branch in the lower right corner and click Rename\u2026 or Delete.</p>","tags":["infrastructure"]},{"location":"build/git/#failed-merge-or-rebase","title":"Failed Merge or Rebase","text":"<p>You can click Resolve in the Merge Conflicts change list or go to Main menu -&gt; Git -&gt; Abort Merge/Rebase to undo the action.</p>","tags":["infrastructure"]},{"location":"build/git/#applying-a-patch-but-the-base-is-missing","title":"Applying a Patch, but the Base is Missing","text":"<p>After creating a patch \u29c9, you can't apply the patch because you've selected the wrong base path in the Patch File Settings. The base path must be the path of the project displayed in the logical view.</p> <p>How do you compare Git branches?</p> <p>Have a look at this guide.</p> <p>How should you configure Git?</p> <p>Generated files should not be checked into Git (classes_gen, source_gen) unless the output of generators should be checked.</p> <p>Example from  MPS Extensions \u29c9:</p> <ul> <li>.gitignore \u29c9</li> <li>.gitattributes \u29c9.</li> </ul> <p>Is there a hook in MPS that it will call when switching branches?</p> <p>Register a BranchChangeListener \u29c9 in an application or project plugin. Example:  <pre><code>ProjectHelper.toIdeaProject(#project).getMessageBus().connect().subscribe(BranchChangeListener.VCS_BRANCH_CHANGED, new MyListener()).\n</code></pre></p> <p>How can you find the Git commit that deleted a concept?</p> <p>Assuming the concept is named <code>Foo</code>, search with Git Log in the corresponding structure model: <code>git log -SFoo -- path/to/structure.mps</code></p> <p>How can I go to the first commit in a project on GitHub?</p> <p>Use the book on the following page: http://farhadg.github.io/init/landing/ \u29c9</p> <p>During conflict resolution, what does Resolve automatically and Exit do exactly?</p> <p>This button merges non-conflicting changes in roots and the metadata.</p> <p>A) A change in roots is not conflicting if:</p> <ul> <li>there are merge hints \u29c9</li> <li>the node ID changed \u29c9</li> <li>the resolve info changed \u29c9</li> </ul> <p>B) Metadata changes are:</p> <ul> <li>a dependency was deleted/added</li> <li>do not generate flag was set</li> <li>an engaged language on generated was added/removed</li> <li>an imported model was added/deleted</li> <li>a model attribute was changed (e.g., model user objects)</li> <li>a module dependency was added/deleted</li> <li>a used language was added/deleted/changed</li> </ul> <p>Those are two different merge sessions. TODO: How does the automatic resolving work with the metadata changes? (Are A and B applied to the metamodels?)</p> <p>When I shut down MPS, change files on disk (e.g., git pull), and restart MPS, it asks me if I want to reload the files from disks or use the cached models. Why?</p> <p>Excerpt from MPS documentation:</p> <p>MPS automatically saves changes that you make in your files. Various events trigger saving, such as compiling, running, debugging, performing version control operations, closing a file or a project, or quitting the IDE. Saving files can also be triggered by third-party plugins.</p> <p>An external change could be done by accident, for example, the project is on a shared drive, and someone else changes some files but not on purpose. You might also edit some MPS files with a different editor to fix some issues, so there must be the option to decide which version to use. The feature itself comes from the IntelliJ platform and is not MPS-specific:</p> <p>If an external process changes a file that was opened and unsaved in IntelliJ IDEA, it results in two conflicting versions.</p> <p>How can I undo a merge or pull?</p> <p>You can use 'git reset \u2013hard ORIG_HEAD' to go back. To keep the local changes, use  <code>git reset --merge</code>.</p>","tags":["infrastructure"]},{"location":"build/git/#general","title":"General","text":"<ul> <li>Git cheat sheet \u29c9</li> <li>git-tips \u29c9</li> <li>Flight rules for Git \u29c9 (troubleshooting)</li> <li>On undoing, fixing, or removing commits in Git \u29c9</li> <li>git-extras \u29c9 (extra git commands)</li> <li>Commit Often, Perfect Later, Publish Once: Git Best Practices \u29c9</li> </ul>","tags":["infrastructure"]},{"location":"build/git/#github-publishing-checklist","title":"GitHub Publishing Checklist","text":"<p>Here is a list of links to help you get started with publishing projects to GitHub, especially in the context of open source projects.</p> <ul> <li>Ready to use templates<ul> <li>Template #1 \u29c9</li> <li>Template #2 \u29c9</li> </ul> </li> <li>Necessary files/text<ul> <li>README.md \u29c9</li> <li>LICENSE \u29c9</li> <li>description in the About section of the GitHub repository</li> </ul> </li> <li>More extensive checklists<ul> <li>Open Source Checklist \u29c9</li> <li>Am I ready to Open Source This? \u29c9</li> </ul> </li> </ul>","tags":["infrastructure"]},{"location":"build/gradle/","title":"Gradle","text":"<p>gradle.org \u29c9 contains documentation about Gradle. A Groovy Build Script Primer \u29c9 explains the used features of the Groovy languages. If you want to use Kotlin instead, start with the Gradle Kotlin DSL Primer. Migrating build logic from Groovy to Kotlin might also be helpful. To automatically convert between Groovy and Kotlin syntax, you can use Gradle Kotlinize \u29c9. Many manual corrections are still necessary.</p> <p>Why do we use Gradle? Gradle build scripts have the advantage that you write code instead of XML, like it's the case using Maven or Ant. We use Gradle to download MPS and the dependencies in the correct version and put them in the right place, generate the Ant scripts from the MPS build scripts using a <code>build-allScripts.xml</code> Ant script and then start Ant with correct parameters (where is MPS on disc, where are the dependencies on disc, \u2026). You can define the Gradle scripts using Groovy (<code>build.gradle</code>) or Kotlin (<code>build.gradle.kts</code>). Groovy is enough for smaller building scripts, but it's dynamically typed and thus fails late when the Gradle task executes. Kotlin provides type checking; auto-completion works better with Kotlin than Groovy inside IntelliJ IDEA.</p> <p>To get a better idea how our build scripts look like, head over to Platform Essentials: Platform Build Scripts.</p>","tags":["infrastructure"]},{"location":"build/gradle/#useful-gradle-plugins-for-mps-projects","title":"Useful Gradle Plugins for MPS Projects","text":"<ul> <li>mps-gradle-plugin \u29c9 contains miscellaneous practical tasks when building MPS-based projects with Gradle. Many projects use this plugin.</li> <li>Maven publish plugin \u29c9: a Gradle plugin for publishing build artifacts to Apache Maven repositories (such as nexus repositories)</li> <li>nu.studer.credentials \u29c9: a Gradle plugin for storing and accessing encrypted credentials</li> <li>github-release-gradle-plugin \u29c9: a Gradle Plugin to send releases to GitHub</li> </ul>","tags":["infrastructure"]},{"location":"build/gradle/#questions","title":"Questions","text":"<p>How do you set up a Gradle build for an MPS project?</p> <p>There is a gist for a minimal build, and there is a mps-gradle-plugin. Look at the build scripts of big projects, such as MPS Extensions \u29c9, for more complex setups.</p> <p>I need help understanding the dependencies between Gradle tasks.</p> <p>Read the Gradle documentation about authoring tasks \u29c9. For visualizing task graphs to understand a task's dependencies, use the Gradle plugin gradle-taskinfo \u29c9.</p> <p>Is there a Gradle plugin for downloading things?</p> <p>Yes, gradle-download-task \u29c9.</p> <p>Is there a Gradle plugin for making HTTP requests?</p> <p>Yes, gradle-http-plugin \u29c9.</p> <p>The Gradle build fails with exception: incremental build fails during generation on no changed models.</p> <p>Run <code>git clean -xdf</code> and rebuild everything (MPS-33541 \u29c9.)</p> <p>How can you fetch dependencies using Gradle?</p> <p>Fetching dependencies with Gradle \u29c9 (Specific Languages' blog)</p> How to get dependencies from private GitHub repositories within a GitHub action? <p>Follow the default way for GitHub Packages access, as described in GitHub Actions \u29c9. It may work if the other private repository is part of the same organization.</p> <p>If not, ensure the GITHUB_TOKEN permissions are correct: Permissions for the GITHUB_TOKEN \u29c9.</p> <p>DDepending on the organizational settings, obtaining the artifact via the generic GITHUB_TOKEN. In this case, you must create a new personal access token \u29c9 (PAT).</p> <p>Next, add this token as a secret to the project (e.g., as PRIVATE_REPO_ACCESS_ACTOR and PRIVATE_REPO_ACCESS_TOKEN): Granting additional permissions \u29c9</p> <ul> <li> <p>Ensure this secret is not in an environment but is generally available.</p> <ul> <li> <p>Also, add the username. Even though no username is required for token access, an error will occur if you leave it empty.</p> </li> <li> <p>Ensure you authorize the PAT for the SSO org (warning: this resets when changing permissions!)</p> </li> </ul> </li> </ul> <p>Next, you need to access this special token in your workflow yaml file, for example:</p> <pre><code>    name: Build and Test Languages\n\n    [...]\n\n    # Obtain tokens and secrets from GitHub repository secrets\n\n    env:\n      GITHUB_ACTOR: ${{ github.actor }}\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      PRIVATE_ACTOR: ${{ secrets.PRIVATE_REPO_ACCESS_ACTOR }}\n      PRIVATE_TOKEN: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}\n\n    [...]\n\n    jobs:\n      buildAndTest:\n\n    [...]\n\n\n        - name: Build with Gradle\n          uses: gradle/gradle-build-action@v1.3.3\n          with:\n            arguments: buildLanguages\n</code></pre> <p>Within your Gradle file, you can then access these variables via:</p> build.gradle.kts<pre><code>    [...]\n    repositories {\n\n        val gpr_user: String? by extra\n        val gpr_token: String? by extra\n        val githubUsername = System.getenv(\"GITHUB_ACTOR\") ?: gpr_user\n        val githubToken = System.getenv(\"GITHUB_TOKEN\") ?: gpr_token\n\n        if(githubUsername == null || githubUsername == \"\" ) {\n            throw GradleException(\"No credentials found via envrionment variable (\\$GITHUB_ACTOR) or via Gradle properties (gpr_user) for auth towards Github packages\")\n        }\n\n        if(githubToken == null || githubToken == \"\") {\n            throw GradleException(\"No credentials found via envrionment variable (\\$GITHUB_TOKEN) or via Gradle properties (gpr_token) for auth towards Github packages\")\n        }\n\n        maven {\n            url = uri(\"https://maven.pkg.github.com//mbeddr/mbeddr.core\")\n            credentials {\n                username = githubUsername\n                password = githubToken\n            }\n        }\n\n        val private_user: String? by extra\n        val private_token: String? by extra\n        val privateUsername = System.getenv(\"PRIVATE_ACTOR\") ?: private_user\n        val privateToken = System.getenv(\"PRIVATE_TOKEN\") ?: private_token\n\n        if(privateUsername == null || privateUsername == \"\") {\n            throw GradleException(\"No private credentials found via envrionment variable (\\$PRIVATE_ACTOR) or via Gradle properties (private_user) for auth towards Github packages\")\n        }\n\n        if(privateToken == null || privateToken == \"\") {\n            throw GradleException(\"No credentials found via environment variable (\\$PRIVATE_TOKEN) or via Gradle properties (private_token) for auth towards Github packages\")\n        }\n\n        maven {\n            url = uri(\"https://maven.pkg.github.com/ORGANIZATION/PRIVATE-PROJECT/\")\n            credentials {\n                username = privateUsername\n                password = privateToken\n            }\n        }\n    [...]\n</code></pre> <p>You can locally set the token by adding the following entries to your gradle.properties file (assuming your token has the correct access rights for the repositories):</p> <pre><code>gpr_user=XXX\ngpr_token=YYY\nprivate_user=XXX\nprivate_token=YYY\n</code></pre> <p><sub>contributed by: @nkoester<sub> <p>How to run a Gradle task from Java code?</p> <p>Use the Gradle wrapper or the Gradle tooling API as described in this StackOverflow answer \u29c9.</p>","tags":["infrastructure"]},{"location":"build/gradle/#mps-gradle-tips","title":"MPS Gradle Tips","text":"<p>A common question with Gradle in MPS is: how to you pass values to Ant scripts. In general, there are two types of properties:</p>","tags":["infrastructure"]},{"location":"build/gradle/#project-properties","title":"Project Properties","text":"<ul> <li>can be defined as ext.myPropName</li> <li>can be passed through PmyPop_name from the command line</li> <li>can be accessed like variables in the build projects</li> <li>can be checked if they are set or not</li> </ul>","tags":["infrastructure"]},{"location":"build/gradle/#system-properties","title":"System Properties","text":"<ul> <li>can be passed through -D from the command line</li> <li>are available in the Gradle build file through normal Java mechanism: <code>System.getProperty()</code></li> <li>Project properties can be specified as system properties. Prefix them with org.gradle.project.NAME.</li> </ul> <p>The properties in this file are by default project properties. If they are prefixed with <code>systemProp.</code>, they are system properties.</p>","tags":["infrastructure"]},{"location":"build/gradle/#gradle-wrapper-gradlewgradlewbat","title":"Gradle Wrapper (gradlew/gradlew.bat)","text":"<p>The Gradle wrapper script downloads Gradle in the specified version, independent of your locally installed Gradle, and then starts the downloaded Gradle. It consists of a small java program (located under <code>./gradle/wrapper/gradle-wrapper.jar</code>), an init-file that contains the Gradle version (<code>./gradle/wrapper/gradle-wrapper.properties</code>), and start scripts for Windows, Mac, and Linux (<code>./gradlew</code> and <code>./gradlew.bat</code>).</p>","tags":["infrastructure"]},{"location":"build/gradle/#location-of-dependencies","title":"Location of Dependencies","text":"<p>Read more about BuildScripts Blocks in Gradle \u29c9. Dependencies inside the build script block are placed on the classpath of the build script itself (for the current Gradle file, which will also be compiled like Java). To be able to compile the build script into bytecode, Gradle needs to resolve its dependencies.</p> <p>Dependencies outside the build script block are project dependencies. These dependencies are added to the project code's classpath. For example, Gson is used inside a Gradle project and needs to be on the project's classpath to compile the project.</p> <p>If the dependency is only used in the build script (i.e., only from the <code>build.gradle</code> file), then it should be in a <code>buildscript { }</code> block. Dependencies used in both project code and build scripts will effectively need to be listed twice.</p> <p>Gradle Configurations Explained: What is the difference between API and Implementation? | medium.com \u29c9 contains a good explanation of Gradle configurations.</p>","tags":["infrastructure"]},{"location":"build/gradle/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>To delay the execution of code in Groovy build script, use closures. They will delay the value propagation to execution instead of configuration time (documentation \u29c9).</li> <li>Creating a custom Gradle Plugin is described in Developing Custom Gradle Plugins | gradle.org \u29c9.</li> <li>A standalone project defines all dependencies in the Gradle file. Create a properties file in the resource folder with the same name as the plugin id, for example, <code>org.samples.greeting.properties</code> in <code>src/main/resources/META-INF/gradle-plugins/</code></li> <li>plugin IDs are full qualified identifiers, similar to Java packages Use the pattern component/company/plugin-name form them,   for example, <code>com.github.[name].[plugin-name]</code> or <code>com.github.[arimer].[migration-checker]</code>.</li> </ul>","tags":["infrastructure"]},{"location":"build/teamcity/","title":"TeamCity","text":"<p>All platforms use TeamCity for continuous integration. Extensive official documentation is available for TeamCity on the web. The TeamCity server is reachable at build.mbeddr.com. When you push a new commit to a branch in one of the Git repositories, the platforms are built on the server, tested, and published to the itemis Nexus repository \u29c9. This automatic building is configured through VCS triggers \u29c9.</p> <p>The test results are collected from Ant JUnit reports making the builds fail if not all tests pass. You can mute tests. Muting might be necessary when tests return passes and failures despite no changes (flake tests). This situation can happen, for example, if the test is timing-dependent, an algorithm is not deterministic \u29c9, or a timeout occurs.</p> <p>All GitHub repositories are connected directly to TeamCity and show the build status at the bottom of pull requests and next to pushed commits with the help of the Commit Status Publisher \u29c9. The main repositories require the build to succeed before a pull request can be merged:</p> <p></p> <p>One or multiple build configurations exist per platform. This page describes them only superficially because they might change in the future. Each sub-item is a separate build configuration. Some configurations depend on other configurations (snapshot dependencies \u29c9).</p> <ul> <li> <p>MPS-Extensions</p> <ul> <li>Build the project: <code>gradle build</code><ul> <li>Changes in the documentation do not trigger it.</li> </ul> </li> <li>Build the documentation</li> <li>Build and publish to Nexus/GitHub: <code>gradle build publish</code><ul> <li>only executed once a day</li> </ul> </li> </ul> </li> <li> <p>mbeddr platform</p> <ul> <li>Build and publish: <code>gradle publishMbeddrPlatformPublicationToMavenRepository publishMbeddrAllScriptsPublicationToMavenRepository</code><ul> <li>depends on  MPS Extensions \u29c9</li> </ul> </li> </ul> </li> <li>mbeddr<ul> <li>Build and publish: <code>gradle build:com.mbeddr:languages:publish</code><ul> <li>depends on the  mbeddr platform \u29c9</li> </ul> </li> <li>analyses test: <code>gradle test_mbeddr_analysis</code></li> </ul> </li> <li>iets3<ul> <li>Build and publish: <code>gradle build publish</code><ul> <li>depends on the  mbeddr platform \u29c9</li> <li>Builds are only triggered for specific naming conventions and some special branches: master, feature/*, bugfix/*, refactor/*, maintenance/*</li> </ul> </li> <li>Publish to GitHub</li> </ul> </li> <li>Publish JDK (build.publish.jdk \u29c9)<ul> <li>Publish to Nexus</li> </ul> </li> <li>Update MPS (build.publish.mps \u29c9)<ul> <li>Publish to Nexus and GitHub</li> </ul> </li> <li>MPS Gradle plugin (mps-gradle-plugin \u29c9)<ul> <li>Publish to Nexus and GitHub</li> </ul> </li> </ul> <p>The following diagram shows a simplified version of the build chain \u29c9 that shows the dependencies between the projects/configurations:</p> <p></p> <p>Although all these repositories use Gradle for build management, TeamCity has a lot of bundled plugins. Configuring Build steps | TeamCity On-Premises describes many of them. Build agents execute the build. mbeddr.build.docker \u29c9 contains the agent's Docker image.</p> <p>About ten agents are available for running builds simultaneously. They are hosted at multiple different locations (in server rooms and the cloud). The agents are running Linux, except one agent, which is running Windows 10, and one is running Mac OS X.</p>"},{"location":"build/teamcity/#docker","title":"Docker","text":"<p> mbeddr \u29c9,  MPS Extensions \u29c9,  IETS3 \u29c9</p> <p>Docker is a Linux container technology that the platform projects use a lot. You can think of it as a lightweight virtual machine. Besides the container runtime, Docker also includes the tools required to build preconfigured images that are then executed in the container. These images are built from a Dockerfile.</p> <p>Everything in the infrastructure is provisioning using Docker from the TeamCity front end over the database to the build agent. For the built agent, this approach allows us to keep the build agents consistent with their installed software and their versions. The docker image build from the docker file is published to Docker Hub, a hosting service for images, and then used in our build server.</p> <p>GitLab hosts our complete docker configuration. It also included the scripts that download/update the docker image and run the agent. Since our TeamCity setup uses multiple containers, a separate container for the database, or the web server that handles the encrypted connection, we use docker-compose \u29c9 as an orchestration tool. </p>"},{"location":"clean_code/java/","title":"Java (Base language)","text":"<p>To learn more about advanced Java topics such as the Java virtual machine, collections language, and many more topics, visit baeldung.com \u29c9.</p> <p>Refactoring.guru \u29c9 has information about general code smells.</p> <ul> <li>Be aware of common Java gotchas \u29c9.</li> <li>Avoid acronyms and abbreviations that may not be clear to others.</li> <li>Name methods and variables after what they mean. Before giving a name, consider the responsibility of that piece of code (Naming 101: A Programmer's Guide on How to Name Things \u29c9).</li> <li>Return empty collections instead of returning null elements (reference \u29c9). It saves the efforts needed for testing on null elements.</li> <li>Efficiency: Use StringBuilder or StringBuffer \u29c9 for String concatenation</li> <li>Refactor your code regularly, especially when your classes or methods become too big (Rule of 30 \u2013 When is a Method, Class, or Subsystem Too Big? and Avoid basic style errors \u29c9)</li> <li>Remember to test the parameters of public methods for illegal values. These methods shouldn't crash because of a NullPointer.</li> <li>Order class members by scope from private to public (Ordering Class Members by Scopes and Separate public and private members \u29c9)</li> <li>Minimize the accessibility of class members. It enforces information hiding or encapsulation \u29c9.</li> <li>Avoid hardcoded values.</li> <li>Use lazy initialization if performance is critical, or use caching \u29c9 if necessary.</li> </ul>","tags":["java","best_practise"]},{"location":"clean_code/java/#utility-and-helper-classes","title":"Utility and Helper Classes","text":"<ul> <li>Utility class: They include only static methods and are stateless. Don't create an instance of such a class.</li> <li>Helper class: They can be utility classes, or they can be stateful or require an instance. It can be any class whose design is to aid another class.</li> <li>Try to make the name of the utility or helper class more specific (e.g., AdministrationHelper, LoginHelper instead of Helper).</li> </ul>","tags":["java","best_practise"]},{"location":"clean_code/java/#more-tips","title":"More Tips","text":"<ul> <li>If you use functional interfaces, use the standard Java ones. If you want to understand the functional style, consult the page: Understand the functional style \u29c9.</li> <li>If you want to use newer Java features, look at Modernize old code \u29c9.</li> <li>Have a look at common sources of complexity \u29c9.</li> </ul>","tags":["java","best_practise"]},{"location":"clean_code/java/#stack-exchange-software-engineering","title":"Stack Exchange: Software Engineering","text":"<ul> <li>When do you use float, and when do you use double \u29c9</li> <li>What's wrong with circular references? \u29c9</li> <li>Are null references really a bad thing? \u29c9</li> <li>Exceptions: Why throw early? Why catch late? \u29c9</li> <li>How do quick &amp; dirty programmers know they got it right? \u29c9</li> <li>Why is Global State so Evil? \u29c9</li> <li>How would you know if you've written readable and easily maintainable code? \u29c9</li> <li>How do you know you're writing good code? \u29c9</li> </ul>","tags":["java","best_practise"]},{"location":"clean_code/java/java_style_guide/","title":"Java Style Guide","text":"<p>These are some points taken from the Google Java Style Guide \u29c9 that make sense in MPS.</p> <ul> <li>Fall-through: commented \u29c9: Write a comment on why a fall-through is necessary inside a switch statement.</li> <li>The default case is present \u29c9: Always write a default case for switch statements.</li> <li>Rules common to all identifiers \u29c9: Identifiers use only ASCII letters and digits and, in a few cases noted below, underscores. Don't use prefixes or suffixes with particular meanings. For example, these names don't adhere to the style: name_, mName, s_name, and kName.</li> <li>Package names \u29c9 are all lowercase, with consecutive words concatenated together (no underscores). For example, com.example.deepspace, not com.example.deepSpace or com.example.deep_space.</li> <li>Class names \u29c9: should be in UpperCamelCase. Class names are typically nouns or noun phrases, for example, Character or ImmutableList. Interface names may also be nouns or noun phrases (for example, List) but may sometimes be adjectives or adjective phrases instead (for example, Readable). Test classes should start with the name of the class they're testing and end with Test, e.g., HashTest or HashIntegrationTest.</li> <li>Method names \u29c9: should be in lowerCamelCase. Method names are typically verbs or verb phrases, for example, <code>sendMessage or stop</code>. Underscores may appear in JUnit test method names to separate logical components of the name, with each component written in lowerCamelCase. One typical pattern is _, e.g., pop_emptyStack. No correct way exists for naming test methods. <li>Constant names \u29c9: Use all uppercase letters, with each word separated from the next by a single underscore</li> <li>Non-constant field names \u29c9: Non-constant field names (static or otherwise) should be lowerCamelCase. These names are typically nouns or noun phrases, for example, computedValues or index.</li> <li>Parameter names \u29c9 should be lowerCamelCase. Avoid one-character parameter names in public methods.</li> <li>Local variable names \u29c9 should be in lowerCamelCase. Even when final and immutable, local variables are not considered constants, and you should not style them as constants.</li> <li>Type variable names \u29c9: Each type variable should adhere to one of two styles: a single capital letter, optionally followed by a single numeral (such as E, T, X, T2), or a name in the form used for classes, followed by the capital letter T (examples: RequestT, FooBarT).</li> <li>Camel case: defined \u29c9: tutorial on how to write camelcase</li> <li>Don't ignore caught exceptions \u29c9   (see also: Avoid empty catch blocks \u29c9)</li> <p>javapractices.com \u29c9 contains additional java practices.</p>","tags":["java","best_practise"]},{"location":"clean_code/java/programming_principles/","title":"Programming Principles","text":"<p>These are some general programming principles taken from this article \u29c9 that you can also apply to MPS:</p> <ul> <li>KISS (Keep It Simple, Stupid): At the beginning of their journey, you may notice that developers try to implement complicated, ambiguous designs.</li> <li>DRY (Don\u2019t Repeat Yourself): Try to avoid any duplicates. Instead, you put them into a single part of the system or a method.</li> <li>YAGNI (You Ain\u2019t Gonna Need It): If you run into a situation where you are asking yourself, \"What about adding extra (feature, code, \u2026etc.)?\", you probably need to rethink it.</li> <li>Clean code over clever code: Speaking of clean code, leave your ego at the door, and forget about writing clever code.</li> <li>Avoid premature optimization: The problem with premature optimization is that you can never know where a program\u2019s bottlenecks will be until after the fact.</li> <li>Single responsibility: Every class or module in a program should only provide one bit of specific functionality.</li> <li>Fail fast, fail hard: The fail-fast principle stands for stopping the current operation as soon as any unexpected error occurs. Adhering to this principle generally results in a more stable solution.</li> </ul> <p>refactoring.guru \u29c9 describes general Java design patterns and includes very nice illustrations.</p>","tags":["best_practise"]},{"location":"clean_code/mps/","title":"Index","text":"<p>This document lists some recommendations for code written in MPS. For a general introduction to code smells, go to Code Smells | Coding Horror and How To Write Unmaintainable Code. Clean code has many benefits. Clean Code: Writing maintainable, readable, and testable code | https://blogs.sap.com/ \u29c9 describes those benefits.</p>"},{"location":"clean_code/mps/#implementation","title":"Implementation","text":"<ul> <li>Prefer composition over inheritance \u29c9 (Specific Languages' blog)</li> <li>Implement INamedConcept \u29c9 in concepts that should have a name. The name property will be returned when you call <code>node.getName()</code>. MPS uses the name in editor tabs, the logical view, as the default presentation for references and other places.</li> <li> <p>Use isInstanceOf \u29c9 to check if a node is an instance of a concept instead of using the Java instanceof operator, for example, <code>node.isInstanceOf(IfStatement)</code>. Alternatively, use the <code>ifInstanceOf</code> statement to save the converted expression in a variable directly. For example:  <pre><code> ifInstanceOf (node is IfStatement ifStatement) {\n\n       }\n</code></pre></p> </li> <li> <p>Use the built-in collection classes such as collections, set, list, and map (documentation \u29c9). Null-safe languages implement those classes.   For example:   <pre><code>list&lt;string&gt; listOfStrings = new linkedlist&lt;string&gt;(copy: new string[]{\"ab\", \"ba\", \"aaaa\"}); \n#print listOfStrings.where({it =&gt; it.startsWith(\"a\"); }).join(\",\");\n</code></pre>   For lists of nodes, there is the particular list type <code>nlist</code>, for example, <code>nlist&lt;ClassConcept&gt; classes = new nlist&lt;ClassConcept&gt;;</code> Choose the right collection \u29c9 for your task.</p> </li> <li>Use the access language instead of directly calling ModelAccess \u29c9 methods.   For example:   <pre><code>node&lt;ClassConcept&gt; classNode = new node&lt;ClassConcept&gt;(); \ncommand with #project.getRepository() {\n  classNode.member.add(&lt;argument&gt;);\n}\n</code></pre></li> <li>Write tests for new features that you have developed and bugs that you have fixed. Always test generators, sometimes also the type system. You can even start by writing the tests first (test-driven-development \u29c9).</li> <li>Don't try to use features in MPS at places that don't officially support them. Not supported means that the official documentation doesn't mention it, and you can access the feature only through hacks and workarounds. Examples:<ul> <li>invoking the generator in type system rules</li> <li>UI code in the behavior aspect</li> <li>accessing the project instance in unsupported places, for example, the generator</li> </ul> </li> <li>Avoid strict node casts \u29c9 (Specific Languages' blog)</li> <li>Use Java Streams to Write Clean Java Code \u29c9. Warning: While streams   can be helpful, consider using the MPS collections language \u29c9 for most cases. It   is better understood by MPS developers and easier to use. Switch to Java streams only when the collections language is   not powerful enough.</li> <li>Use logging for troubleshooting purposes. Remove logging statements from production code or reduce the log level   to debug. Do not output log messages when they are not necessary.</li> </ul>"},{"location":"clean_code/mps/#null-safety","title":"Null Safety","text":"<ul> <li>Use the language checkedDots for saver access of possible null values. You can check nodes for null: node.isNull \u29c9</li> <li>Use the annotations <code>@NotNull</code> and <code>@Nullable</code> for the Base Language code. A specific type system rule in MPS checks these annotations. The annotations are also enforced at runtime by the compiler.</li> <li>Use :eq: (NPE safe equals operation) and :ne:(NPE safe not equals operation) instead of == \u29c9 and <code>equals</code>.</li> <li>You can still return optional values instead of null in Base Language code (Java explanation \u29c9).</li> </ul> <p>Some languages, such as the smodel and collections \u29c9 languages, are also null-safe. The following code will correctly return false: <pre><code>node&lt;ClassConcept&gt; n = null;\n#print n.member.first as IfStatement.forceOneLine;\n</code></pre></p> <p>MPS also has a null analyzer for Java that is part of the data flow analysis (nullable analyzer, short explanation of how it works \u29c9). The type system checks it, and you get a warning when, for example, a method call might throw a <code>NullPointerException</code>.</p>"},{"location":"clean_code/mps/#exceptions-and-warnings","title":"Exceptions and Warnings","text":"<ul> <li>Use checked exceptions (e.g., IOException) for recoverable conditions and runtime exceptions (e.g., NullPointerException) for programming errors (Checked versus unchecked exceptions \u29c9).</li> <li>Consider alternative ways of showing errors than throwing exceptions, such as showing notifications \u29c9. Examples of such notifications are balloons and dialogs.</li> <li>Attach exceptions to log statements. The stack trace will print in the log file if it is a low-level log statement (e.g., log error).   For ordinary log statements (e.g., message log error), you can open the stack trace through the right-click menu in the messages view. Example:   <pre><code>log error \"This is an error\", myException\n</code></pre></li> <li>Clean up in the finally-block of a try statement. The try-with-resources \u29c9 statement is also supported. An example of cleaning up could be a   temporary model only needed in a test. When the test fails, the model still needs to be disposed of. To tie an object to the lifecycle of a parent,   use the classes Disposer and Disposable \u29c9 from the IntelliJ platform.</li> <li>Treat Warnings As Errors \u29c9, and also don't ignore warnings/errors. Warnings might become errors or even make the compilation fail in the future. For example, the repository parameter in the access language (e.g., read action with global repository {}) was optional in the past but later became mandatory because using the global repository is discouraged.   Ignoring too many messages can also hide real errors you must address. For example, a warning that a NullPointerException can happen might reveal that   not tested situations exist where an object is null and will crash something. That can happen, for example, when code is executed on the command line   instead of inside MPS, where it can never fail.</li> <li>Warnings should not replace documentation \u29c9 (Specific Languages' blog)</li> </ul>"},{"location":"clean_code/mps/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Be careful when using Unicode characters inside MPS. It might break something (MPS-33687, MPS-31835 \u29c9).</li> <li> <p>Use Gradle for creating build scripts (minimal example). They are better supported (e.g., mps-gradle-plugin). They can express the build logic more cleanly through Groovy or Kotlin than other solutions such as Maven or Ant (article comparing all three solutions \u29c9). While the MPS build language generates Ant scripts, you can abstract away this layer nicely with Gradle + the MPS Gradle Plugin. For example:   <pre><code>  task buildLanguages(type: BuildLanguages, dependsOn: prebuild) {\n  script \"$buildDir/scripts/build-languages.xml\"\n  }\n</code></pre>   Most MPS projects that used Maven in the past were migrated to Gradle.</p> </li> <li> <p>Do not leave debug statements in production code, including MPS log statements and System.out statements.   Especially in tests, outputs can not only be annoying but can also fail the test with an UncleanTestExecutionException   The only acceptable debug statements are those that have the log level set to debug or lower because they are not visible   by default.</p> </li> </ul>"},{"location":"clean_code/mps/deprecation/","title":"Deprecation","text":"<p>You can find deprecated code through Main menu \u2192 Migration \u2192 Deprecated Code. Many found instances in the MPS codebase are deprecated for many years. They could get unsupported or removed in any new MPS version, so make sure to find a replacement for such code early.</p>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/deprecation/#srepository","title":"SRepository","text":"<p>SRepositories store modules and needs to be referenced directly when you don't want to use the deprecated concepts. The automatically used global repository that was used in earlier MPS versions is deprecated and might be unsupported in the future.</p> <ul> <li>Don't use commands from the access language without a repository (see: access language \u29c9). </li> <li>Don't use node/myNode. Use node-ptr \u29c9(myNode).resolve(repository) instead.</li> <li>Don't use model/myModel. Use model-ptr \u29c9(myModel).resolve(repository) instead.</li> <li>Don't use module/myModule or language-module. Use module-reference/myModule \u29c9 instead.</li> </ul>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/deprecation/#other-deprecation","title":"Other deprecation","text":"<p>This section lists some other common deprecated code.</p> <ul> <li>Don't use linkNode/concept:link/. Use link:concept:link/ \u29c9 instead.</li> <li>Don't use conceptNode/concept/. Use concept/concept/ \u29c9 instead.</li> <li>Don't use node.delete. Use node.detach \u29c9 instead.</li> <li>Don't use node.containingRole. Use node.getContainmentLink \u29c9 instead.</li> <li>Don't use the interface IDon'tSubstituteByDefault \u29c9. Create an empty default substitute menu for the concept instead.</li> <li>Don't use print, <code>System.out</code> or <code>System.err</code> for logging. Use log for low-level logging or message \u29c9 for high-level logging instead.</li> <li>Use the explicit presentation of a node when used in a string. For example: <code>\"my node: \" + node.getPresentation()</code> instead of <code>\"my node: \" + node</code>.</li> <li>Don't use counter variables in LoopMacro. Use <code>LOOP index</code> in the code instead.</li> <li>Don't use IOperationContext \u29c9. You can find more info in the attached comment on the interface.</li> </ul>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/","title":"Readability/Maintainability","text":"<p>This page focuses on creating MPS code that is easy to read but also deals with the topic of maintainability. Too often, code is written by one person but has to be maintained by someone else. Understanding the mindset of other people can be difficult, especially if they don't follow any patterns and the code is (visually) hard to read.</p> <p>Maintaining code means dealing with technical debt, reducing it, and cleaning up the codebase periodically. That also means that sometimes code must be deprecated and removed after some time. Or it must be rewritten when it uses deprecated code, for example, after upgrading to a new MPS version. Neglecting those tasks makes maintaining the code more difficult in the future.</p>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/#readability","title":"Readability","text":"<p>Establishing a coding style is essential for Base Language code and other parts of your code, such as the language aspects. When the code is consistent, it is also easier for other people to understand because they can see patterns in the code. For writing names, read: Write short code with good names | Sandi Metz's Rules for OOP. Read the MPS Java style guide \u29c9 for more ideas. In addition to consistency, short code helps readability.</p> <p>Learning to write readable code takes time and must be practiced. Coding standards can help enforce specific patterns, but sometimes code reviews are necessary so that others can help improve your code.</p> <ul> <li>Simplicity: You should strive to make your code as simple as possible. Unnecessary complexity will make the code hard to understand and prone to errors. The code can be clever if it focuses on readability and maintainability. If the code is kept short, it is easier to go through, but if it's too smart, it will take too much time to understand and edit.</li> <li>Use the same naming scheme for concepts (e.g., start interfaces with the letter \"I\"), intentions, or actions. Always place code in behavior methods   or utility classes with similar naming patterns. Follow standard naming conventions such as camelCase for variables.</li> <li>Name temporary variables such as counter variables consistently. Read this StackOverflow answer \u29c9   for some ideas on how to name variables.</li> <li> <p>Create methods if the code becomes too long and avoid boilerplate code. For example: Use setters and getters for classes: <pre><code>  public int a {get; private set;} \n  public int b {get;\n    set(value) {\n      System.out.println(\"\" + a + b + this.a);\n    }\n  }\n</code></pre> A property can be created by typing <code>property</code> at the same place where fields are declared.</p> </li> <li> <p>Extract long, boolean expressions that you use as conditions into variables. For example:   <pre><code>if ((object.size &gt; 20 &amp;&amp; object.shape.equals(\"rectangle\")) &amp;&amp; (object.color.equals(\"black\") || object.color.equals(\"gray\")) &amp;&amp; (object.buttons.contains(\"power\") &amp;&amp; object.buttons.contains(\"volume\") &amp;&amp; object.buttons.contains(\"channel\")) &amp;&amp; (object.hasPowerCord())) {\n// The object is a TV\n} \n</code></pre>   Split up boolean expressions into variables:   <pre><code>boolean hasScreen = object.size &gt; 20 &amp;&amp; object.shape.equals(\"rectangle\");\nboolean hasRemote = object.color.equals(\"black\") || object.color.equals(\"gray\");\nboolean hasSpeakers = object.buttons.contains(\"power\") &amp;&amp; object.buttons.contains(\"volume\") &amp;&amp; object.buttons.contains(\"channel\");\nboolean hasPowerCord = object.hasPowerCord();\n\nif (hasScreen &amp;&amp; hasRemote &amp;&amp; hasSpeakers &amp;&amp; hasPowerCord) {\n// The object is a TV\n}\n</code></pre>   You can reduce conditions by saving them in closures or functions. For example:   <pre><code>{int =&gt; boolean} isEven = {int number =&gt; number % 2 == 0; };\n#print isEven(1); \n</code></pre>   If statements can also improve readability when you use them as guard clauses, also known as assert or precondition. Compare the following snippets:   The first one doesn't use guard clauses.   <pre><code>public void updateData(Data data) {\n  if (data == null) {\n    return;\n  } else if (data.isPresent()) {\n    // do stuff here\n  } else {\n    throw new Exception(msg);\n  }\n}\n</code></pre>   The second snippet uses them and is more readable.   <pre><code>public void updateData(Data data) {\n  if (data == null) return;\n  if (!data.isPresent()) trow new Exception(msg);\n  // do stuff here\n}\n</code></pre></p> </li> <li> <p>Functional interfaces accept lambdas \u29c9 as parameters. For example, a thread that accepts a Runnable object can also be called like this: <pre><code>new Thread({ =&gt; System.out.println(\"Thread\"); }).start()\n</code></pre></p> </li> <li> <p>Use enhanced for loops instead of for loops with counters. For example:   <pre><code>for(type variable:iterable) {}\n\nforeach(variable in iterable) {}\n</code></pre>   The second statement doesn't even need a type for the variable. For lists, other ways exist: <code>list.forEach({it =&gt; })</code> for iterating the list and <code>list.select({it =&gt; &lt;no statements&gt; })</code> or <code>list.selectMany({it =&gt; &lt;no statements&gt; })</code> for transforming the list. For adding many elements to a list, use <code>list.addAll(elements)</code>.</p> </li> <li> <p>Use empty lines between statements for readability (StackOverflow discussion). When a line becomes too long, you can use a few Base Language refactorings \u29c9, such as introducing variables or extracting code into a method.   You might also want to experiment with the default text width of the editor (preferences \u2192 Editor \u2192 MPS Editor), which is set to 120 by default.   This value is relatively low and can be increased depending on your monitor size.</p> </li> <li>Use virtual packages to organize your code. How you arrange the modules is up to you. Some suggestions:<ul> <li>Arrange type of module: lang, test, build, etc.</li> <li>Arrange by a group of languages: tables, tooltips, widgets\u2026 or core, expr, trace, etc.</li> <li>Arrange by language maturity: stable, staging, rest, etc.</li> <li>Arrange by a numbering system + other criteria: _10_build, _50_active, _60_demo, _70_attic, etc.</li> </ul> </li> <li>Avoid double negation as they are hard to understand. Also, use a positive tone to help with understanding statements more intuitively. Example:   <pre><code>boolean isDisabled = true; \nif (!isDisabled) { // bad\n}\nx.setDisabled(true) // bad\nx.setEnabled(true) // good\n</code></pre></li> <li>Avoid deep nesting like a chain of calls (<code>nodea.nodeb.nodec.property</code>). Consider providing a method to access deeper nested nodes or directly jump to the nested node. For example:   <pre><code>#print classNode.getAllIfStatements()\n#print classifier.ancestor&lt;concept = ClassConcept&gt;\n#print classNode.descendants&lt;concept = Classifier&gt;\n</code></pre>   The nesting is also relevant for if conditions, loops, and nested method calls. Keep them flat, or use only a few levels of nesting.</li> <li>Four-parameter rule: a method accepting many parameters is hard to follow. A good maximal number of parameters is four. Refactor methods into smaller methods. You can use MPS builders \u29c9 to avoid many parameters.</li> <li> <p>Group your code: Group the fields and methods of Base Language classes by their visibility and purpose. For example, group the private fields and methods, and group the public fields and methods together. Also, group the fields and methods related to each other by their functionality or logic. Also, break down big tasks into smaller chunks. You can split up long (behavior) methods into multiple methods. You can place helper methods   as static methods into separate classes. Call them more easiliy using Extension methods \u29c9 For example:   <pre><code>extension methods String {\n  public void customMethod() for String {\n  }  \n}\n\npublic class S {\n\n  public static void main(string[] args) {\n      \"test\".customMethodx();\n  }\n}\n</code></pre>   Group code into multiple root nodes, models, or modules. If the generation is across multiple models,    cross-model generation \u29c9 applies.</p> </li> <li> <p>Prefer Readable Code to Comments | ncrcoe.gitbooks.io \u29c9</p> </li> </ul>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/#maintainability","title":"Maintainability","text":"<ul> <li>Mark classes/concepts etc., as deprecated when you don't want others to use them, and you will remove them in the future. When you add a deprecation date, you can use it as a reminder to remove deprecated code in regular intervals or enforce it through a linter \u29c9.</li> </ul> <p>DeprecatedNodeAnnotation \u29c9</p> <p> </p> <p>DeprecatedBlockDocTag and Java Deprecated annotation \u29c9</p> <ul> <li>Use the text TODO, FIX, or FIXME in the comments. The TODO tool can find those strings and the commit dialog when the option Check TODO (all) is activated.   Other texts not supported by the tool but common are NOTE, XXX, HACK, and BUG \u29c9.</li> <li>Don't repeat code. You can write the same code twice but consider creating a method when you duplicate the code again.   Repeated code breaks the reading flow and makes updating the code more complex.</li> <li>Delete unnecessary and unused code. If you use version control and need to return to   the old code, you can still find it in the history.</li> <li>Use comments to document complex code. Don't use them if the method signature contains all the necessary information.   You don't have to place every piece of information next to the code. You can use documentation, such as this website, or documentation created with   com.mbeddr.doc (+ optional com.mbeddr.aspect) can be used not only for user documentation but also for technical guides for   developers.</li> <li>Avoid using magic numbers which are direct usages of numbers in the code. Example:   <pre><code>double x = 0.2; // What does this variable represent?\ndouble y = 100; // And this one?\ndouble z = 0.1; // And this one?\ndouble w = y * (1 - z) * (1 + x); // What is the meaning of this expression?\nSystem.out.println(\"The result is \" + w); // What is the result \n</code></pre></li> </ul>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/#stack-exchange-software-engineering","title":"Stack Exchange: Software Engineering","text":"<ul> <li>What's wrong with comments that explain complex code? \u29c9</li> <li>When is a BIG Rewrite the answer? \u29c9</li> <li>How can I convince management to deal with technical debt? \u29c9</li> <li>How do I know how reusable my methods should be? \u29c9</li> </ul>","tags":["baselanguage","best_practise"]},{"location":"home/console/","title":"Console","text":"<p>The MPS console, not to be confused with the terminal, provides the ability to execute (mainly Base Language code) on the command line. It supports special commands starting with a hash sign to achieve common tasks such find nodes (<code>#nodes</code>) or cleaning the generates files (<code>#clean</code>). It is meant to be used by developers, but might be useful for users it they get stuck. Additional to the provided commands, you can use it for the following common tasks:</p> <ul> <li>Selecting a node in the editor and modifying it: In certain cases, the console can be the only way to make changes when even   the reflective editor fails.</li> <li>Writing new code faster: The <code>#print</code> statements can, for example, provide detailed feedback when testing new code. New Ideas   can be quickly prototyped and executed by a single mouse click.</li> <li>Exploring: You can check the output of single expressions or query nodes/models/modules to learn more about them. When dealing with   unknown nodes, it makes sense to output their concept (<code>myNode.concept</code>) or navigate to it by clicking on it. You can access node annotations   through myNode.@annotationRole. Make sure to import the annotation's dependency or it its role won't be visible   (e.g. import SuppressErrorsAnnotation \u29c9 to have <code>myNode.@suppress</code> available)</li> <li>Debugging: Like exploring, the console is a great tool for figuring out why something doesn't work. Paste short code snippets    directly into the console and observe the intermediate results if you don't want to use a debugger. One common source of errors   are model queries that return an empty list because of wrong conditions or structural assumptions (e.g. concept X is not a descendant of concept Y).   Play around with your query. Remove parts of the query, check the scope or output intermediate returned results.</li> <li>Search for usages of concepts or nodes with a condition: <code>#instances</code> and <code>#nodes</code> can be combined with a scope and further   queries to constrain the amount of results. Ensure to not use too expensive queries (e.g. <code>#nodes&lt;scope = global&gt;</code>) or else    you might wait for your results for a while.</li> </ul>","tags":["interactive","troubleshooting"]},{"location":"home/console/#example-queries","title":"Example queries","text":"<p>Find the action declaration for Show Node in Explorer: </p> <pre><code>#instances&lt;scope = global&gt;(ActionDeclaration).where(\n  {~it =&gt; it.caption != null &amp;&amp; it.caption.contains(\"Show Node in Explorer\"); })\n</code></pre> <p>Delete all instances of a deprecated node in the project (with preview):</p> <pre><code>#instances(ClassConcept).refactor({~node =&gt; node.detach; })\n</code></pre> <p>Delete all generates files in the project.</p> <pre><code>{ \n  #clean(&lt;project&gt;); \n  #removeGenSources(&lt;project&gt;); \n}\n</code></pre> <p>Query classes for a specific property and collect some results.</p> <pre><code>{\n    nlist&lt;&gt; results = new nlist&lt;&gt;; \n    #instances(ClassConcept).where({~it =&gt; it.getFqName().startsWith(\"com.mbeddr\") &amp;&amp; it.constructors().isNotEmpty; }).forEach({~it =&gt; results.addAll(it.fields()); });\n    #print results;\n}\n</code></pre> <p>Find all installed modules and their descriptor files:</p> <pre><code>#modules&lt;scope = global&gt;.where({~it =&gt; it.isPackaged(); }).select({~it =&gt; \n  AbstractModule module = ((AbstractModule) it); \n  module.?getDescriptorFile().?toRealPath(); \n})\n</code></pre> <p>I can't enter the print statement </p> <p>Nested structures don't support it (MPS-34656 \u29c9). Use it at the top level instead. If you need to output multiple objects, save them to a list first and output the list at the top level.</p> <p>How can you enter more than one statement into the console?</p> <p>Enter an opening curly brace \u29c9 (this starts a new statement list in Base Language) and enter your statements.</p> <p>How can you find all System.out.println statements?</p> <p>Code snippet: \u29c9</p> <p>]</p> <p>#nodes, #models, #usages, etc., don't show any result </p> <p>Make sure that your query is correct. You must also set a scope for these statements in square brackets, such as <code>#nodes&lt;scope = global&gt;</code>, to find all the nodes in the global scope.</p> <p>Is the console a regular root node?</p> <p>Yes, it is an instance of ConsoleRoot \u29c9 and belongs to a temporary model. It is possible to open it in a regular tab. Right-click in the console (for example, at the top) and click  Show Node in Explorer. Click the ConsoleRoot to open it in a new tab  (keyboard shortcuts such as run line won't work here).</p> <p>After executing the current line, an error says that the compiler couldn't find the console class.</p> <p>You might have a dependency on some model, that interferes with the console's classpath. Make sure that you don't have any   broken references in previous console items or press Clear to delete all items except the current one. If nothing helps,   restart MPS.</p> <p>This error can also happen when the console's compilation of the model is unsuccessful or if you import a custom generation plan into the console that turns off some generators. It can also occur if you import a solution that doesn\u2019t enable the Java facet or has a different solution (e.g., other).</p> <p>What does the expression #internalMode do?</p> <p>It tells you if the internal mode is activated. Activate it by calling RuntimeFlags.setInternalMode(true) \u29c9 or setting a system variable. Start MPS with argument <code>-Dmps.internal=true</code> or add <code>mps.internal=true</code> to the mps.vmoptions file: use Main menu -&gt; Help -&gt; Edit Custom VM Options. The MPS sources \u29c9 contain references to this flag in various places. One of the new action groups that it adds is called Internal. There is also an Internal Actions Menu in the IntelliJ IDEA. Consult the documentation \u29c9 for more info.</p> <p>How do you open the selected node in the console? </p> <p>Given I have a node selected in the editor. How can I reference it to manipulate it in the MPS console?</p> <p><sub>asked by: @AlexeiQ<sub> <p>You can copy the node and paste it into the console:</p> <ol> <li>Copy a node in the editor (Cmd+C or Ctrl+C)</li> <li>Go to the console.</li> <li>Paste the content   (Cmd+V or Ctrl+V)</li> <li>MPS pastes a node reference that you can use to manipulate the node directly:</li> </ol> <p></p> <p><sub>answered by: @coolya<sub>","tags":["interactive","troubleshooting"]},{"location":"home/debugging/","title":"Debugging","text":"<p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.</p> <p>(Brian Kernighan)</p> <p>If you need help with general debugging topics, read: How do I Debug my Program? \u29c9 For more in-depth explanations regarding debugging in MPS, visit:</p> <ul> <li>Debugging in MPS \u29c9 (Specific Languages' blog)</li> <li>White paper on Debugging in MPS \u29c9 (DSLFoundry's blog)</li> <li>Debugging MPS with IntelliJ setup</li> </ul> <p>The following list shows some debugging tips:</p> <ul> <li>The menu entry Tools \u2192 Internal Actions provides many useful debugging features, for example, the UI Inspector (Swing debugging).</li> <li>Right-click \u2192 Preview Generated Text: Show the result of the M2T transformation (for example, generated code) for the current node</li> <li>To inspect the node, right-click \u2192 Show Node in Explorer</li> <li>To open the inspector, right-click \u2192 Inspect Node</li> <li>Right-click in the editor and select Language Debug:<ul> <li>Show Type: Show the type system type of the current node.</li> <li>Rule which caused Error: Find the checking rule/constraint which caused the error.</li> <li>Cell in Explorer: Debug editor cells and collections.</li> <li>Generation Traceback: Debug the generator. In transient models, you can find the generated (intermediate) node's source node.</li> </ul> </li> <li>Find Action: Help \u2192 Find Action or Ctrl+Shift+A if you forgot the name of your action.</li> <li>Changing IDE settings<ul> <li>2 locations: bin folder (MPS/IDE folder) and preferences folder (overwrites bin folder)</li> <li>JVM: bin/mps.vmoptions (RAM/Xmx, debugger port, \u2026)</li> <li>Log-level (Log4J): bin/log.xml </li> <li>IDEA properties: bin/idea.properties: change default paths, advanced IDE settings</li> </ul> </li> <li>Log file: is stored in the logs folder, for example, <code>Logs/&lt;My-MPS-/My-RCP-Identifier&gt;/idea.log</code></li> </ul> <p>How do I debug action maps?</p> <p>Set a breakpoint in CellActionExecutorFinder \u29c9.</p>","tags":["troubleshooting"]},{"location":"home/debugging/#free-java-debugging-tools","title":"Free Java Debugging Tools","text":"<p>Since MPS is a Java application, you can use standard Java debugging tools. Not all of them work well. Tools that pause threads can also cause issues with MPS. Especially VisualVM tends to freeze MPS. A better profiler is YourKit \u29c9 which is a commercial product.</p> <ul> <li> <p>VisualVM \u29c9</p> <ul> <li>display process configuration and environment (e.g., Java/MPS version, JVM arguments, system properties)</li> <li>monitor process performance and memory (e.g., CPU/heap usage, loaded classes, threads)</li> <li>visualize process threads (e.g., dispatch thread)</li> <li>profile performance and memory usage (e.g., CPU usage)</li> <li>take and display thread dumps (e.g., find deadlocks \u29c9)</li> <li>take and browse heap dumps (e.g., find memory leaks)</li> <li>analyze core dumps (e.g., crashed Java processes)</li> </ul> <p></p> </li> <li> <p>Memory Analyzer (MAT) \u29c9</p> <ul> <li>find memory-related issues such as memory leaks</li> </ul> <p></p> </li> <li> <p>JDK Mission Control \u29c9</p> <ul> <li>troubleshoot memory leaks \u29c9</li> <li>Troubleshoot Performance Issues Using Flight Recorder \u29c9</li> </ul> <p></p> </li> <li> <p>jstack.review - Java Thread Dump Analyzer \u29c9</p> </li> </ul>","tags":["troubleshooting"]},{"location":"home/debugging/#decompiler","title":"Decompiler","text":"<p>Decompiling jar files usually shouldn't be necessary because the source code of MPS, IntelliJ Community, JetBrainsRuntime \u29c9, and the MPS platforms is open source and available on GitHub. For all other cases, use the JD Java Decompiler. The Java Decompiler IntelliJ plugin \u29c9 also is capable of doing this task.</p>","tags":["troubleshooting"]},{"location":"home/debugging/#general-blog-posts","title":"General Blog Posts","text":"<ul> <li>24 debugging tips and tricks \u29c9</li> <li>The Debugger Checklist \u2013 Part I \u29c9</li> <li>The Debugger Checklist \u2013 Part II \u29c9</li> <li>Debugging tips \u29c9</li> <li>10 Debugging Tips for Beginners \u29c9</li> </ul>","tags":["troubleshooting"]},{"location":"home/external_files_and_tools/","title":"External Files and Tools","text":"","tags":["files","tools"]},{"location":"home/external_files_and_tools/#importexport","title":"Import/Export","text":"<p>An often asked questions is about how to integrate MPS with existing tools, or how to import their data and use existing frameworks or libraries. When you come from the Java world, you can reuse your code directly in MPS since Base Language is a Java clone and the IntelliJ platform that MPS builds on is written in Java and Kotlin.</p> <p>If MPS completely replaces existing tools, it is better to write an importer for existing data. Data that needs to be processed by a different tool can be exported or generated by MPS/your RCP can also be exported. This case can happen if you introduce it as part of a chain of tools that each use the previous exported data as input.</p> <p>Generators are not the only solution to export data. Other files such as Word or Excel documents can still be generated through a Java library. If no library supports a special output format, you can still use mps-plaintextgen \u29c9 from  MPS Extensions \u29c9 to generate the files.</p> <p>How do you write an importer?</p> <ul> <li>Writing an importer: Introduction \u29c9 (Specific Languages' blog)</li> <li>Writing an importer: Adding the action to a menu \u29c9 (Specific Languages' blog)</li> <li>Writing an importer: Invoking from the editor \u29c9 (Specific Languages' blog)</li> <li>Writing an importer: Error handling considerations \u29c9 (Specific Languages' blog)</li> <li>Writing an importer: Updating existing nodes \u29c9 (Specific Languages' blog)</li> </ul> <p>Alternatively, custom persistence \u29c9 can be employed (rarely used).</p> <p>How do you deal with errors when writing an importer?</p> <ul> <li>Create a new tab in the messages view and show the errors.</li> <li>Create error concepts in the language. If the import fails for a particular node, replace it with one of these error nodes in the output model. You can append some error messages. This way, you can also implement checking rules for the error nodes to display the errors as part of model checking. You can also use finders to find all occurrences of errors in the model.</li> </ul> <p>Is a wizard available to set up an MPS language based on an XML schema (defined in .xsd files)?</p> <p>No, not possible at the moment, but you can create new projects from local or GitHub-hosted templates with Lochkarte \u29c9(experimental).</p> <p>Where do I put the Java JARs that I want to use as dependencies?</p> <p>Where do I put my JARs? \u29c9 (Specific Languages' blog)</p>","tags":["files","tools"]},{"location":"home/external_files_and_tools/#tools","title":"Tools","text":"<p>Introducing MPS as a new tool can be challenging because there are concerns about integrating MPS with existing tools. You can find more details about this topic in Language Design | Patterns.</p> <p>While MPS is not a database or can replace certain tools, it can be used in the Web and also integrate tightly with existing tools. For example, Integrating into the MPS Make Framework | MPS documentation \u29c9 shows how you can compile and execute generated C code with external tools. Similar approaches have been done for other tools in the past. You can also send generated code to an external tools, get the result back and further process them in MPS. To achieve this, call the MPS generator directly (see: MPS Utilities: Generator) and send the data via <code>Runtime#getRuntime#.exec</code> or similar code to the external tool. Parse/import the result then back to MPS.</p> <p>Alternatively, you can create a run configuration \u29c9 to make root nodes executable by external tools. When you generate Java code, you can get this functionality for free through the Base Language implementation.</p> <p>How can you run an LSP server for MPS grammars?</p> <p>IntelliJ products have no support for LSP servers (see IDEABKL-7409 \u29c9), and no implementation exists in MPS.</p> <p>How can you use databases in MPS?</p> <ul> <li>MPS has no dedicated support for databases or frameworks such as Spring Boot (unlike IntelliJ IDEA).</li> <li>MPS is not a (relational) database \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you create a standalone utility (not a complete IDE) for language generation with MPS?</p> <p>This feature is not available at the moment, but you can interact with MPS models from Java when you set up the necessary dependencies:</p> <pre><code>import jetbrains.mps.smodel.ModelAccess;\nimport jetbrains.mps.tool.environment.EnvironmentConfig;\nimport jetbrains.mps.project.Project;\nimport jetbrains.mps.tool.environment.MpsEnvironment;\nimport org.jetbrains.mps.openapi.model.SModel;\nimport org.jetbrains.mps.openapi.module.SModule;\n\nimport java.io.File;\n\npublic class Test {\n    static String projectDir = \"your MPS project path\";\n\n    public static void main(String[] args) {\n        EnvironmentConfig config = EnvironmentConfig.emptyConfig();\n        MpsEnvironment ourEnv = new MpsEnvironment(config);\n        ourEnv.init();\n        Project myProject = ourEnv.openProject(new File(projectDir));\n        myProject.getModelAccess().runReadAction(() -&gt; {\n            for(SModule module:myProject.getProjectModules()) {\n                for(SModel model:module.getModels()) {\n                System.out.println(model.getName());\n                }\n            }\n        });\n    }\n}\n</code></pre> <p>How can you share MPS snippets?</p> <p>You can use Skadi Cloud Gists \u29c9.</p> <p>How can you run MPS in the browser?</p> <p>You can try Skadi Cloud. There is also Modelix and JetBrains Projector. LIonWeb is the newest project with some information \u29c9 about other projects.</p> <p>How can you embed a web browser in MPS?</p> <p>Since IntelliJ 2020.1, it is possible to use the Java Chromium Embedded Framework \u29c9. Create a new Java Swing component in the editor: <pre><code>JBCefBrowser myBrowser = new JBCefBrowser(myUrl);\nreturn myBrowser.getComponent();\n</code></pre></p> <p>For more information, read the page about JCEF.</p> <p>What is the future of MPS, especially regarding the cloud?</p> <ul> <li>What is the future of MPS? \u29c9 (Specific Languages' blog)</li> </ul>","tags":["files","tools"]},{"location":"home/general/","title":"General","text":"<p>This page answers some general questions about MPS and is most useful for  beginners.</p> <p>Who is MPS for? </p> <p>Who is MPS for? \u29c9 (Specific Languages' blog)</p> <p>I am an MPS beginner. Where do I start? </p> <p>If you are new to MPS and want to learn more about MPS, start with the following links:</p> <ul> <li>Learn MPS | official JetBrains landing page \u29c9</li> <li>Get started with MPS | mps.rocks \u29c9</li> <li>Learning MPS | mps.rocks \u29c9</li> <li>Getting Started: Part I (F1RE's blog), Part II \u29c9 (F1RE's blog)</li> </ul> Is there a high-level presentation that I can have a look at?  <p>Yes, there is a presentation from 2020 by V\u00e1clav Pech \u29c9.</p> <p></p> <p>Are there any video tutorials besides the official videos? </p> <p>Yes, Heavy Meta TV \u29c9 hosts in-depth tutorials about MPS for a total length of 20 hours. @coolya filmed the tutorials as part of a series of live streams in 2018/2019.</p> <p>I want to learn more about domain-specific languages. Where do I start?</p> <p>Start with the slides: Introduction to Domain-Specific Languages by Markus V\u00f6lter. On the books page \u29c9, there are also a few relevant books like DSL Engineering (2013) and How to Understand Almost Anything - A Practitioner's Guide to Domain Analysis (2013).</p> <p>What are the essential shortcuts? </p> <p>JetBrains MPS Shortcuts \u29c9 (F1RE's blog)</p> <p>Which directory contains the MPS project? </p> <p>Which directory contains the MPS project? \u29c9 (Specific Languages' blog)</p> <p>What can you do if a problem isn't on this list?</p> <p>Try invalidating the cache \u29c9 and restarting MPS (same menu). Search the forum and issue tracker \u29c9.  Ask a question on Slack \u29c9.</p> <p>I changed something in the preferences, and nothing changed.</p> <p>There might be a bug related to caching. Reopening the dialog, invalidating the cache, or restarting the project might help.</p> <p>Which standard IDE settings should you change?</p> <p>When using many languages or plugins, the maximum heap size \u29c9 should be changed to a higher value, such as 8 GB. Another reason for high memory usage can be many (poorly) implemented checking rules. </p> <p>I am running low on memory, or the IDE is running slow. What can you do without restarting MPS?</p> <p>When you have enabled the loaded models' indicator in the lower right corner of the screen, you can click on the text to unload not needed models \u29c9. To free memory, use the memory indicator. As a last resort, enable the power-saving mode \u29c9. It turns off background tasks like the model checker (not recommended).</p> <p>What are modules, models, nodes, and concepts? </p> <ul> <li>What goes where: the basic architecture of MPS projects \u29c9 (Specific Languages' blog)</li> <li>Ambiguous terms: Modules and models \u29c9 (Specific Languages' blog)</li> <li>How MPS Identifies Things \u29c9 (log verbose's blog)</li> </ul> <p>Can you explain the MPS technology stack, project concepts, and OpenAPI relations? </p> <p>MPS technology stack, project concepts, and OpenAPI relations explained visually \u29c9 (DSLFoundry's blog)</p> <p>What's an SRepository, and how's it structured? </p> <p>The MPS sources \u29c9 contain the answer. Multiple repositories could be available in the future. If you have a repository, it can resolve references to modules, models, and nodes. There's no need to make IDs globally unique as each subsystem knows which exact repository to use at any moment (e.g., the type system knows where it stores its type nodes, so it will not try to resolve references to them).</p> <p>A repository contains modules, modules have model roots, and each model root can load models. A module can also be a model container itself (without a model root). A model is then a set of root nodes. Each root node is a root of a tree of nodes. Overall, a repository is a tree structure.</p> <p></p> <p>Is there an existing expression/scripting language?</p> <p>MPS ships with the expressions sample project. A complete and evaluable language is KernelF \u29c9 which is available at  IETS3 \u29c9.</p> <p>How do you organize large projects?</p> <p>Read the two answers in this thread \u29c9.</p> <p>How do you debug MPS projects?</p> <p>Have a look at this blog post or this guide \u29c9.</p> <p>Where are the log messages?</p> <p><code>log info</code> logs to the MPS log file idea.log \u29c9,  and <code>message info</code> logs to the messages tool window \u29c9.</p> <p>Which log level should you use?</p> <p>Have a look at this Stack Overflow answer \u29c9.</p> <p>How do you export data from MPS?</p> <ul> <li>The simplest way to export your data from MPS \u29c9 (Specific Languages' blog)</li> <li>Good and bad ways of exporting DSL models \u29c9 (Specific Languages' blog)</li> <li>Translation vs export \u29c9 (Specific Languages' blog)</li> </ul> <p>Why is a project read-only?</p> <p>Why is my project suddenly read-only? \u29c9 (Specific Languages' blog)</p> How do you work with more than one project in MPS? <p>Given that, I want to work on an MPS project that uses other projects and switch between tasks that sometimes need changes on both the dependent and the root projects. I want to switch back and forth between using the default prepackaged project dependencies and my repository of them, where I build them myself. How could I do that?</p> <p>Option 0: Open multiple projects in MPS at the same time</p> <ul> <li>Works when doing small changes</li> <li>fast</li> <li>Unreliable: When changing dependencies in my source models, this leads to a reload operation on the repository, which sometimes messes up the loaded repository and caches</li> </ul> <p>Option 1: Publish and pull from local maven ( IETS3 \u29c9)</p> <ul> <li>reliable</li> <li>example \u29c9</li> <li>The gradle script needs to be told to pull from a local repository e.g. by providing <code>-PforceLocalDependencies</code> to IETS3 or use dependency overrides</li> </ul> <p>Option 3: Changing project libraries</p> <ul> <li>does not affect command-line builds</li> </ul> <p>Option 3a: Command line setup Task ( IETS3 \u29c9) We usually have a <code>./gradlew setup</code> task in our projects that replaces your <code>.mps/libraries.xml</code>. When you want to change the project, you'll need to change the configuration of that command line setup task and rerun it.</p> <p>Option 3b: MPS Path variables in settings (deprecated)</p> <p>In the MPS settings, you can configure path variables that can be used in <code>.mps/libraries.xml</code> to pinpoint the location of a target project.</p> <p>They will only configure the MPS behavior and not affect the command line builds. So in most cases, you don't want to use them and instead let your build script set up these files.</p> <p><sub>contributed by: @abstraktor<sub> <p>Can I configure MPS path variables per project?</p> <p>No, this is not possible. This problem often arises when MPS should open multiple instances (e.g., different branches) of the same project. It is possible to create localized MPS configurations that enable running numerous independent instances of various MPS versions. For Linux you can use nkoester/mps-zookeeper \u29c9.</p> <p>As a general solution, you can download multiple instances of MPS and edit the following paths in bin/idea.properties \u29c9: idea.config.path, idea.system.path, idea.plugins.path, and idea.log.path. When you have a repository \"repo,\" you can, for example, replace the name of the MPS version with repo1, repo2, repo3, or a different naming scheme. When using remote debugging \u29c9, use other ports for the MPS instances (e.g.5005, 5006\u2026500n), or MPS won't start.</p> <p>Why is MPS shipped with JBR instead of an installed JDK/JRE?</p> <p>JBR is a fork of OpenJDK with specific bug fixes and improvements for JetBrains IDEs. JetBrains/JetBrainsRuntime contains more information about this topic. In some platform build scripts, the environment variable <code>JB_JAVA11_HOME</code> can set the JDK home. For older MPS versions that used Java 8, there was the environment variable <code>JB_JAVA8_HOME</code>.</p> <p>Are there any resources/communities about domain-specific languages and MPS?</p> <ul> <li>DSL &amp; MPS books \u29c9 by Markus Voelter. Note: Some of these books might be outdated and do not cover the latest features of MPS.</li> <li>The complete guide to (external) Domain Specific Languages \u29c9 (Strumenta's blog)</li> <li>68 Resources To Help You To Create Programming Languages \u29c9 (Strumenta's blog)</li> <li>Strumenta Virtual Meetups \u29c9</li> </ul>","tags":["general","beginner","troubleshooting"]},{"location":"home/performance/","title":"Performance","text":"<p>This page is about advanced topics. Please skip it if you are a beginner.</p> <p>This page explains typical MPS memory consumption and performance bottlenecks and how to solve those problems. If you want to know about slow software in general (e.g., hardware-related slowness), read Slow Software | Ink &amp; Switch \u29c9.</p> <p>How are expensive model traversals handled in MPS?</p> <p>There is no API for indexing model traversal results (e.g., getParent(), getAncestors()) the way frameworks like Xtext implement it.</p> <p>The implementation of Find usages of concepts is efficient, though. The internal class FastNodeFinderManager can efficiently return the list of instances of a concept for a model. ConceptDescendantsCache \u29c9 also caches the descendants of a concept.</p> <p>The startup indexing collects information about MPS models, such as instances of concepts, imports, and property values (used for the Find Text in Node Properties action). The virtual files \u29c9 representing root nodes in the filesystem are probably also indexed.</p> <p>The initial indexing also integrates Base Language into the IntelliJ search functionality (implementation in MPS). As an IntelliJ plugin, MPS should allow the standard search for usages and structural search \u29c9 to work with Base Language classes and interfaces.</p>"},{"location":"home/performance/#general","title":"General","text":"<ul> <li>Read the page Advanced Configuration \u29c9 in the official documentation. You are especially interested in setting <code>-Xmx</code> and <code>-Xms</code>.</li> <li>Do not invalidate the cache when restarting the project if it isn't necessary. The reindexing can take a while for large projects.</li> <li>Speeding up model checks with Scope Cache \u29c9 (&lt; MPS 2021.2)</li> <li>Often accessed data should be cached (How to implement caching in Java \u29c9)</li> <li>Don't recalculate expensive calculations but rather save the results in variables.</li> <li>Different data structures have other time and space complexities. For example, selecting a different list implementation can have significant improvements on performance (Big-O Cheat Sheet \u29c9). Do not always use lists. Check  if another data structure might be better suitable such as hash maps.</li> <li>The collections language has a significant overhead in comparison to plain Java. If you need better performance, use the Java <code>foreach</code> statement and not <code>collection.forEach</code> and consider avoid the language in general for performance-critical code. You can improve especially list iteration that way.</li> <li>Make sure to iterate nodes or editor cell trees efficiently. Narrow down the nodes that you want to iterate over, for example, <code>model.roots(ClassConcept)</code> instead of  <code>model.nodes(&lt;all&gt;)</code>. <code>nodesIncludingImported()</code> can also create immense scopes. The same is true for searching in the console: avoid snippets such as <code>#nodes&lt;scope = global&gt;</code> should be avoided. For deep structures, <code>node.descendants</code> can also be expensive.</li> <li>When using scopes, avoid using a GlobalScope \u29c9. Try to also use the following snippets for filtering models that often shouldn't be searched because they are not indexed:<ul> <li><code>#modules.where({~it =&gt; it.isPackaged() })</code>to filter out modules that are installed</li> <li><code>#models.where({~it =&gt; TemporaryModels.isTemporary(it) })</code> to filter temporary models</li> </ul> </li> <li>Throwing exceptions and especially fatal errors shown in the window's lower right corner is slow. Short freezes before MPS throws the errors are sometimes the result of that.</li> </ul>"},{"location":"home/performance/#generator","title":"Generator","text":"<ul> <li> <p>Disabling transient models through the button in the bottom right corner of the MPS frame will increase generation performance significantly, especially with the generator option Apply transformations in place.</p> </li> <li> <p>TODO: Add generator performance slides from the MPS Meetup</p> </li> </ul>"},{"location":"home/performance/#model-pruning","title":"Model Pruning","text":"<p>Often, the generator doesn't have to process all nodes. You might have different build configurations where you are interested in only a subset of nodes or don't use cross-model generation \u29c9. You copy nodes from other models to the current model instead. Sometimes additional information is attached to nodes. MPS doesn't have to generate such attributes or nodes. Having too many nodes to be processed can impact memory and slow the generator.</p> <p>You can achieve Model pruning using an allowlist or blocklist approach: specify which nodes should or shouldn\u2019t be processed. Both approaches are combinable. The following simplified approach is one possible solution to achieve this:</p> <ol> <li>Collect all original root nodes: <code>model.roots(&lt;all&gt;).select({~it =&gt; genContext.get original copied input for (it); })</code></li> <li>Create a pruning condition that decides which nodes can be pruned and collect the other nodes (relevant nodes). Also, list pertinent root concepts the generator shouldn't prune.</li> <li>Start from a specific node, iterate through its descendants, and follow only the references allowed by the pruning condition. You should also include other nodes that the generator needs that are not reachable by reference.</li> <li>Make copies of the roots of nodes that are relevant, and the generator shouldn't prune.</li> <li>Iterate through the children of the copies. If a child is not a relevant node, detach it from its parent node.</li> <li>Clear the original content from the input model and add the relevant roots to the input model.</li> </ol>"},{"location":"home/performance/#editor","title":"Editor","text":""},{"location":"home/performance/#big-roots-render-slowly","title":"Big Roots Render Slowly","text":"<p>The initial rendering time increases with the size of the AST. MPS tries to cache parts of the editor once built, and after the initial render, it will only update the cells that require changes, but collecting the necessary dependency information to achieve this incrementality takes time. How big is too big? Thousands of descendants are going to take several seconds to render. Calling the relayout method should be invoked sparingly (manually or programmatically).</p> <p><sub>contributed by: @sergej-koscejev<sub>"},{"location":"home/performance/#long-running-checking-rules-on-big-roots","title":"Long-Running Checking Rules on Big Roots","text":"<p>When the editor displays a root node, checking rules are run in the background. The background checker can be interrupted between rules rather than during the execution of them. When checking rules are too expensive for live checking, set the flag do not apply on the fly to true. The Type system caches calculations by default, which can also impact performance when recalculated too often. </p> <p><sub>contributed by: @sergej-koscejev<sub>"},{"location":"home/performance/#mps-extensions","title":"MPS Extensions","text":"<ul> <li>The diagram \u29c9 language saves layout information in node attributes. That means that automatically laying out the diagram causes a lot of changes in the diff view for this root node.. An option in the editor's diagram definition can influence auto layouting.</li> <li>Tables and diagrams turn off incremental rendering. That means the editor will not be updated incrementally, causing a full update on each typed character. It might also affect the type system calculations (MPS_EXTENSIONS-579 \u29c9)</li> <li>When you use horizontal or vertical lines or any styles from  de.itemis.mps.editor.celllayout.styles language (such as _grow-x or _grid-layout-flatten), a top-down layout algorithm activates for the editor. This algorithm is slower than the usual MPS re-layout, slowing down the incremental editor update.</li> </ul>"},{"location":"home/performance/#kernelf","title":"KernelF","text":"<ul> <li>The code coverage collection \u29c9 is global. That means you either have to empty it after some time with <code>DefaultCoverageAnalyzer.reset()</code> or start the interpreter without coverage. The class IETS3ExprEvalHelper \u29c9 has methods for evaluating nodes with and without coverage.</li> <li>The interpreter \u29c9 framework can be slow when you invoke the interpreter often.   There may be faster alternatives \u29c9 that are currently not  implemented.</li> </ul>"},{"location":"home/performance/#startup","title":"Startup","text":"<p>You can analyze MPS's startup with a standard Java profiler like YourKit. For IntelliJ components, services, and extensions \u29c9, it is also possible to use the IntelliJ Report Analyzer \u29c9. Click on the button Get from running instance to fetch the data from the opened MPS instance. Ensure that the productCode in the left text area says MPS because other IntelliJ IDEs, such as IntelliJ IDEA, use the same port.</p> <p></p>"},{"location":"home/performance/#java","title":"Java","text":"<p>If you are interested in internal performance-related topics about Java and its compiler, you might find the following articles helpful:</p> <ul> <li>How the JIT compiler optimizes code | ibm.com \u29c9</li> <li>The Java HotSpot Performance Engine Architecture | oracle.com \u29c9</li> <li>Optimizing compiler | wikipedia.com \u29c9</li> <li>How the JIT compiler boosts Java performance in OpenJDK | developers.redhat.com \u29c9</li> <li>Microbenchmarking with Java | baeldung.com \u29c9</li> </ul>"},{"location":"home/platform_specific_bugs/","title":"OS-Specific Bugs","text":"<p>Bugs that only occur for certain operating systems or platforms are not common and are most of the time results of OS-specific limitations or missing tools. Still, you might encounter a few bugs, mentioned on this page.  The low amount of such bugs is as follows: Java (Base Language) is a platform-independent language. MPS and the IntelliJ platform also only contain a small amount of OS-specific code.</p> <p>You only encounter serious issues with native code which is dependent on the platform. The JDK or JBR that you use, and the Java version can also play a role. For the last two factors, ensure everybody uses the same versions to not have to deal with sometimes odd error messages.</p>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#windows","title":"Windows","text":"<p>Based on the market share, you can assume that users and especially end users are Windows users. While it make sense in some companies to only focus on Windows, and use Windows-specific code, please consider the possibility that there might be other users in the future. Many MPS developers also use macOS. In other words: Don't use Windows fonts in the editor and deal with file paths in a generic way \u29c9. Various file systems also handle permissions and case sensitivity differently. If you have the change, test your languages on multiple platforms.</p> <p>Compilation from the command line might fail due to none ASCII chars.</p> <p>The error message looks something like this:</p> <p><pre><code>[generate] NewLanguage\\behavior\\rtzj__BehaviorDescriptor.java : Invalid character constant (line: 27) \n</code></pre> If this happens, set the environment variable JAVA_TOOL_OPTIONS to <code>-Dfile.encoding=UTF8</code> (MPS-23526 \u29c9).</p> <p>Tests are failing with a message that a filename or extension is too long (Windows).</p> <p>The error message looks like this: <code>Caused by: java.io.IOException: CreateProcess error=206, The filename or extension is too long</code>. It can also look like this: <code>Process fork failed.</code> There is a path that is too long for Windows in the build script.  Choose the option compressArgs in the test modules node to fix the issue (MPS-24137 \u29c9).</p> <p>Cannot run MPS.bat on Windows 10/11.</p> <p>Create a link that runs the MPS.bat script and start this one instead. The Link target should look like this: <code>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -command \"&amp; 'C:\\Program Files\\JetBrains\\MPS_YOUR_VERSION\\bin\\mps.bat'\"</code></p> <p><sub>contributed by: @HeikoBecker<sub>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#mac","title":"Mac","text":"<p>You might run into issues with newer macOS versions. One of them is notarizing macOS software before distribution which is not supported by the mps-gradle-plugin. There were also changes introduced with the M1 chips (new architecture: arm64). MPS already provides additional downloads for the latest Macs (.dmg Apple Silicon). The commit can be found here \u29c9. If you want to provide your own RCP, you might want to look at this commit. A separate version of JBR called jbr-osx-aarch64 might also be needed.</p> <p>How do I get my defined environment variables?</p> <p>Execute <code>printenv</code> on a shell.</p> <p>Using com.mbeddr.mpsutil.datepicker doesn't work when the Look and Feel is set to macOS Light.</p> <p>Use the default light theme. There is no other workaround at the moment (MPS-3388, MBEDDR-2203 \u29c9).</p> <p>Can't find TBItem with uid 'XY'.</p> <p>This is an issue with MacBook Pros with touch bars. No workaround at the moment (MPS-31728 \u29c9).</p> <p>What other active bugs are there?</p> <ul> <li>Standalone application: impossible to define application icon (MPS-32971 \u29c9)</li> </ul>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#linux","title":"Linux","text":"<p>Autocompleting doesn't work with MPS + i3 (Linux window manager).</p> <p>No solution at the moment (MPS-30499 \u29c9).</p> <p>The completion menu appears on the wrong screen in a multi-monitor setup (Linux+i3).</p> <p>No solution at the moment (MPS-33689 \u29c9).</p>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#native-crashes","title":"Native Crashes","text":"<p>Native crashes are crashes where MPS crashes internally (C/C++ code), and an error dialog is shown. First, search the following Youtrack projects:</p> <ul> <li>MPS \u29c9: MPS-related crashes</li> <li>IntelliJ IDEA \u29c9: IntelliJ platform-related crashes</li> <li>JetBrains Runtime \u29c9: mostly UI and JCEF-related issues</li> </ul> <p>For crashes on macOS, have a look at Identifying the Cause of Common Crashes | developer.apple.com \u29c9.</p>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/plugins/","title":"Plugins","text":"<p>The term plugin can refer to different things: A plugin solution is a language aspect that you can use to integrate your code with the MPS IDE functionality. The preferred way is to create a custom plugin solution instead which provides the same functionality. When you export your languages, you can also create plugins that others can install. In this case, the term plugin refers to IntelliJ IDEA plugins. You can install other plugins such as the Java plugin or a Markdown plugin in IntelliJ IDEA the same way you install MPS plugins. They use the same mechanisms from the IntelliJ platform. This page answers only general questions about plugins. You can find more information about plugins in Plugins which deals with the plugin aspect.</p> <p>Where can you use a created language? </p> <p>Use them in MPS or a custom IDE based on MPS (a so-called RCP). You need to create a build script, so you can export your plugins as real IntelliJ plugins that others can install. To ship all the plugins together with a custom branding, create an RCP. It has the advance that it can be provided to the end users as a single download or preinstalled on his computer. He doesn't have to install plugins himself through the market place or other storage locations and also doesn't have to deal with dependencies between plugins.</p> <p>Are MPS languages often used as plugins in IntelliJ IDEs instead of MPS itself? (an IntelliJ IDEA plugin, not custom RCP)</p> <p>The MPS community uses this functionality only sparingly or not at all. Most of the time, developers create custom RCPs for the end users.</p> <p>How can you find plugins on the JetBrains marketplace usable in MPS? </p> <p>Searching for the word MPS \u29c9 in all categories should do the trick.</p> <p>Why do many IntelliJ plugins don't work with MPS? </p> <p>Many of these plugins operate on the lines in text files. MPS uses a projectional editor, which is incompatible with regular text editors. It doesn't use a document model or PSI \u29c9 because MPS models are not text-based. Plugins that don\u2019t officially support MPS can interfere with certain features of MPS (e.g., find usages might not work while using a plugin).</p> <p>Are there any general-purpose plugins for MPS from the community?</p> <p>Have a look at the plugin section of mps.rocks \u29c9.</p> <p>Which kinds of plugins are there? </p> <ul> <li>Two kinds of MPS plugins \u29c9 (Specific Languages' blog)</li> <li>MPS plugins vs. IDEA plugins \u29c9 (Specific Languages' blog)</li> </ul> <p>How do I turn off notifications for fatal errors?</p> <p>Add <code>idea.fatal.error.notification=disabled</code> to idea.properties \u29c9.</p> <p>Are there existing projects regarding MPS on the web?</p> <p>Look at deployment options for MPS, this list, and WebMPS \u29c9 by JetBrains.</p> <ul> <li>Web-based projectional editing is moving forward \u29c9 (Specific Languages' blog)</li> <li>MPSServer and WebEditKit \u29c9 (Specific Languages' blog)</li> </ul> <p>How do you translate every part of MPS?</p> <p>You can install a language pack \u29c9 for IntelliJ-based projects. A complete translation of MPS is not feasible because some parts are hard coded.  There are also known bugs with extended characters (MPS-31835) and Unicode \u29c9 if you want to use special characters. The article Localizing an IntelliJ Plugin \u29c9 contains further information.</p> <p>Can you get information about an MPS installation via an HTTP request?</p> <p>Getting information is possible through the IntelliJ Platform REST API \u29c9: Send a GET request (or enter it into the browser address bar): http://localhost:63342/api/about?more=true \u29c9. Ensure that you don\u2019t have IntelliJ opened simultaneously, as it has the same API. Example output:</p> <pre><code>{\n    \"name\": \"MPS 2021.2.5\",\n    \"productName\": \"MPS\",\n    \"baselineVersion\": 212,\n    \"buildNumber\": \"212.5284.1355\",\n    \"vendor\": \"JetBrains s.r.o.\",\n    \"isEAP\": false,\n    \"productCode\": \"MPS\",\n    \"buildDate\": 1647561654804,\n    \"isSnapshot\": false,\n    \"configPath\": \"/Users/user/Library/Application Support/JetBrains/MPS2021.2\",\n    \"systemPath\": \"/Users/user/Library/Caches/JetBrains/MPS2021.2\",\n    \"binPath\": \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents/bin\",\n    \"logPath\": \"/Users/user/Library/Logs/JetBrains/MPS2021.2\",\n    \"homePath\": \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents\"\n}\n</code></pre> <p>How can you compare two nodes?</p> <ul> <li>Select them in the logical view, right-click \u2192 Compare two nodes.</li> <li>Use the language com.mbeddr.mpsutil.nodediff:<ul> <li>Select the first node: Set as First Node in Diff.</li> <li>Select the second node: Show Diff with First Node.</li> </ul> </li> </ul> <p>How do I access the current project from anywhere?</p> <ul> <li>How to get the current project from anywhere \u29c9 (Specific Languages' blog)</li> </ul> <p>jetbrains.mps.module.ModuleClassLoaderIsNullException: ClassLoader of module XY could not be found.</p> <p>Make sure to avoid setting the solution kind to none.</p>"},{"location":"home/rcp/","title":"RCP","text":"<p>RCP stands for Rich Client Platform and means creating a custom MPS version with your selection of plugins and custom branding. Building standalone IDEs for your languages | MPS \u29c9 explains this topic in detail.</p> <p>When building an RCP, you can consider three operating systems: Windows, Mac, and Linux.It is recommended to have a Windows RCP and, depending on the user base, also a Mac RCP. Ideally, you only have to create them once, and don't have any issues. In practise, some (native) libraries or tools might not be available on other systems. Additionally, for Macs, signing the application and supporting different architectures such as the M1 chip, means some extra work.</p> <p>A plugin is incompatible with the current RCP version.</p> <p>Fixing the 'Plugin incompatible with the current [CUSTOM RCP] version' error \u29c9 (Specific Languages' blog)</p> <p>How can you customize the welcome screen in an RCP?</p> <ul> <li>Customizing your RCP welcome screen: removing unwanted tabs \u29c9 (Specific Languages' blog)</li> </ul> <p>The used library xml-patch uses XPath path selectors. https://devhints.io \u29c9 has a cheat sheet for the syntax. </p> <ul> <li>Customizing your RCP welcome screen: stripping down even further \u29c9 (Specific Languages' blog)</li> <li>A fully custom welcome screen \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you reduce the size of an RCP?</p> <ul> <li>Remove all packaged plugins that you don't need.</li> <li>Use a JBR version without JCEF if you don't need an embedded browser (jbr_nomod).</li> </ul> <p>How can I deactivate a preference page?</p> <ul> <li>Remove the plugin that contains the preference page.</li> <li><code>SPreference</code> pages are project plugins. You can find them through <code>ProjectPluginManager.getPlugins</code> and then call <code>dispose</code> , or you could unregister the preference pages themselves. For example: <pre><code>Project ideaProject = ProjectPluginManager.getInstance(ProjectHelper.toIdeaProject(#project);\nlist&lt;BaseProjectPlugin&gt; plugins = new arraylist&lt;BaseProjectPlugin&gt;(copy: ideaProject.getPlugins());\nBaseProjectPrefsComponent component = plugins.findFirst({~it =&gt; it.toString().startsWith(\"path_to_your._ProjectPlugin\"); }).getPrefsComponents()  get(0);\ncomponent.getPages().get(0).unregister();\n</code></pre></li> </ul> <p>For preference forms: they can be found through <code>Configurable.APPLICATION_CONFIGURABLE.getPoint().getExtensionList</code> and removed by calling <code>unregisterExtension</code>.</p> <p>How can you replace the logical view on the left side with a custom one?</p> <p>Use the language com.mbeddr.mpsutil.projectview from  MPS Extensions. You can find an example that replicates the logical view in mbeddr \u29c9.</p> How can you tell which IntelliJ version MPS runs with? <p>Which version of IntelliJ Community \u29c9 is my MPS built from? How can I know?</p> <p> mbeddr \u29c9: The easiest way to get the correct platform for an MPS version is by running ant in the root of your MPS sources:</p> <p><code>ant -f build/getDependencies.xml download-platform</code></p> <p>It will place the platform in the folder mps-platform of the repository and is automatically imported into the IntelliJ project where you can read the sources and step into them when debugging.</p> <p>If you're looking at an RCP: <code>build.number</code> and <code>build.txt</code> provide this information and more, for example, <code>idea.platform.build.number=MPS\u2014203.7717.56</code>.</p> <p>The platform version is part of the build information, for example, <code>MPS\u2014211.7442.1291</code>.</p> <p>To get the baseline version, for example, 211, programmatically: <code>ApplicationInfo.getInstance().getBuild().getBaselineVersion()</code></p> <p>To get the full version, for example, 211.7442.1291, programmatically: <code>ApplicationInfo.getInstance().getBuild().currentVersion().asString()</code></p> How can you show a custom-implemented project view instead of the MPS logical view? <p>Assume that you built the view with com.mbeddr.mpsutil.projectview:    </p> <pre><code>ApplicationManager.getInstance().invokeLater(new Runnable() { \n    public void run() {\n        list&lt;AbstractProjectViewPane&gt; viewsToRemove = new linkedlist&lt;AbstractProjectViewPane&gt;;\n        ProjectView projectView = ProjectView.getInstance(project.getProject());\n        foreach paneID in projectView.getPaneIds() {\n        if (paneID.endsWith(ProjectViewHelper.YOUR_PROJCET_VIEW_ID)) {\n        if (!projectView.getCurrentViewId().equals(paneID)) {\n        projectView.changeView(paneID);\n        }\n        } else if (this.viewsToKeep.asSequence.any({~it =&gt; paneID.endsWith(it); })) {\n        continue;\n        } else {\n        viewsToRemove.add(projectView.getProjectViewPaneById(paneID));\n        }\n        }\n        viewsToRemove.forEach({~it =&gt;\n        projectView.removeProjectPane(it);\n        it.dispose();\n        });\n        ProjectPane.getInstance(project).activate();\n    }\n    })\n</code></pre> <p>How can you customize the New Roots (mbeddr.platform) or New dialog of MPS/mbeddr?</p> <pre><code>CreateRootFilterEP.getInstance().addFilter\n</code></pre> <p>How can you change or turn off the exception submission dialog?</p> <ul> <li>Remove all error handlers like this \u29c9.</li> <li>Remove <code>&lt;appender name=\"DIALOG\" class=\"com.intellij.diagnostic.DialogAppender\"&gt;</code> from the log.xml file. This change will also turn off error pop-ups in the IDE, where you can see the exception. Note: There were some changes related to the logging configuration \u29c9 in MPS 2022.2, where this answer is not valid anymore.</li> </ul> <p>Where can you find the latest MPS and IntelliJ icons?</p> <ul> <li>MPS: mps-icons \u29c9</li> <li>IntelliJ: Icons list \u29c9</li> </ul> <p>How can you restart MPS programmatically?</p> <pre><code>ApplicationEx app = ApplicationManagerEx.getApplicationEx(); \napp.restart(true,true);\n</code></pre> <p>How can I install a custom editor color scheme?</p> <p>Follow the guideline Export IntelliJ editor themes as plugins | JetBrains blog \u29c9 to export a jar file. You can copy this JAR file to the plugins folder of the RCP. You can enable the color scheme by default with the following code in an application plugin:</p> <pre><code>EditorColorsScheme colorScheme = EditorColorsManager.getInstance().getAllSchemes().asSequence.findFirst({~it =&gt; it.getDisplayName() :eq: \"[NAME_OF_YOUR_SCHEME]\"; }); \nEditorColorsManager.getInstance().setGlobalScheme(colorScheme);\n</code></pre> <p>How do you deactivate an MPS/IntelliJ tool window?</p> <pre><code>Project ideaProject = ProjectHelper.toIdeaProject(project);\n\n// MPS tool \nBaseTool mpsTool = ideaProject.tool&lt;YourTool&gt;; \nif (mpsTool != null &amp;&amp; mpsTool.isAvailable()) {\n    mpsTool.makeUnavailable();\n}\n\n// IntelliJ Tool\n\n/* The toolID can be found through ToolWindowManager.getInstance(ProjectHelper.toIdeaProject(#project)).getToolWindowIds().asSequence on the console*/\nToolWindow toolWindow = ToolWindowManager.getInstance(ideaProject).getToolWindow(toolID)\nif(toolWindow.isAvailable()) {\n    toolWindow.remove();\n}\n</code></pre> <p>How do you add an action to the menu bar of an IntelliJ tool window?</p> <p>The example is based on the project view:</p> <pre><code>ToolWindow window = ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.PROJECT_VIEW);\nif (window != null) {\n    window.setTitleActions(titleActions);\n}\n</code></pre> <p>How can you set the position of a tool window?</p> <p>Example based on the MPS inspector:</p> <pre><code>InspectorTool inspectorTool = ideaProject.getComponent(InspectorTool.class); \nif (inspectorTool != null) {\n    ToolWindow inspectorToolWindow = inspectorTool.getToolWindow();\n    inspectorToolWindow.setAnchor(ToolWindowAnchor.RIGHT, null);\n}\n</code></pre>","tags":["standalone","customization"]},{"location":"home/trouble_shooting_guide/","title":"Troubleshooting guide","text":"<p>This is a non-exhaustive list of common problems with MPS and platform projects. It is assumed that Gradle is used for building the project. For general MPS problems, read Finding your way out \u29c9 first. If you are still stuck with your problem, read overcoming obstacles next.</p>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#mps-and-mps-platforms","title":"MPS and MPS Platforms","text":"<p>The following questions assume that you use Gradle to build your project. The README file of your project should have more information about common issues and how to build the project.</p> <p>When you build an MPS project, it can make a big difference between removing all generated files first and building the project (clean build), or skipping the first step (dirty build). When doing CI, you have to do a clean build or certain kind of errors can't be detected.</p> <p>For checking out a different branch, a dirty build or rebuilding the languages manually can be the faster option. When you didn't do any generator changes or other changes that require a rebuild, calling make on the changed languages can be even enough.</p> <p>Which type of build you choose is up to you and highly depends on the project. Experience with it in your team, and compare if the risky dirty build is worth the time you save.</p> <p>The IDE is sluggish and doesn't work the way it should.</p> <p>Edit the file mps(64).vmoptions and give it sufficient heap space: <code>-Xmx8g</code></p> <p>MPS behaves strangely </p> <p>For instance: claims that a method is missing, although it exists.</p> <ol> <li>Check if you have mixed dependencies for different MPS versions or are opening the project with the wrong MPS version.</li> <li>Tools \u2192 Reload All Classes.</li> <li>File \u2192 Invalidate Caches, then restart.</li> <li>File \u2192 Invalidate Caches, shutdown MPS; in the repository in question: run <code>git clean -fxd -e build.properties -e gradle.properties</code>, rebuild with Gradle (<code>./gradlew</code>), restart MPS.</li> </ol> <p>Try invalidating the cache \u29c9 and check what other non-MPS plugins you have installed. Some IntelliJ plugins that can be found on the marketplace can interfere with MPS plugins, for example, make the indexing break or throw errors because they expect a text editor and not the projectional editor from MPS. Firewalls and proxies \u29c9 could also affect MPS negatively.</p> <p>MPS freezes on startup.</p> <p>There can be multiple reasons for freezes at startup:</p> <ul> <li>an infinite loop in an application/project plugin</li> <li>wrong usage of threading mechanisms that lead to a deadlock \u29c9.</li> <li>the startup module maker compiles not built modules</li> <li>a deadlock occurs because some code interferes with indexing \u29c9 files</li> </ul> <p>If you know the offending module/model, the simplest solution is to delete the generated files in the file explorer (source_gen/classes_gen). Then fix the error and recompile the module/module.When you are unsure where the error comes from, you can do remote debugging \u29c9. There is also the <code>dontReopenProjects</code> command line flag to not open the last project when starting MPS. It helps to access the general settings or to remove plugins.</p> <p>MPS cannot find languages/solutions.</p> <p>For instance: \"language X is not deployed\" errors.</p> <ol> <li>File \u2192 Invalidate Caches, shutdown MPS.</li> <li>Run <code>./gradlew setup --refresh-dependencies</code>.</li> <li>Start MPS again.</li> </ol> <p>There could also be some other reasons:</p> <ul> <li>A wrong version of the platform is used, for example,  MPS Extensions \u29c9 2021.1 with MPS 2021.2. The major and minor versions have to be the same. Bug fix versions (e.g., 2021.1.4) should be compatible with the major/minor version of the platform. In rare cases, there can be an incompatibility because a bugfix/feature was backported from a newer MPS version, and the change is a breaking change.</li> <li>Make sure that MPS is started with the correct Java version (execute the Choose Boot Runtime for the IDE action) and check that the bundled JBR or an external JBR/JRE is used. Another runtime could be selected by accident (e.g., a GraalVM \u29c9 runtime)</li> <li>If you want to use JCEF \u29c9, it must be a JBR runtime that includes JCEF.</li> <li>An MPS plugin was disabled (e.g., Java Debugger for MPS) that a language depends on.</li> <li>For mbeddr, three plugins need to be installed \u29c9 to avoid languages that can't be loaded because they have dependencies on one of the three plugins.</li> </ul> <p>The IDE doesn't let you enter some text / an intention isn't visible that should be there.</p> <ol> <li>Check: Was the intention disabled by the user by accident?</li> </ol> <p></p> <p>In this case, the intention can be enabled through preferences \u2192 MPS intentions and manually searching for the disabled intention:</p> <p></p> <ol> <li>Check: Is the concept/intention visible in the model? (open a context menu where Base Language code is allowed and search for classes/concepts from the same language)<ul> <li> \u2192 Use Edit \u2192 Add Language Import to import the language containing the concept / the intention.</li> </ul> </li> <li>Check the concept: Is the concept's type suitable for the place where you want to create an instance? Does it implement the right interface?</li> <li>Check the intention: Is the <code>isApplicable()</code> method called? (add a <code>System.err.println()</code> to the method and check what MPS outputs)<ul> <li> \u2192 The intention is most probably not visible in the model \u2192 see above</li> <li> \u2192 Make sure the method returns true</li> </ul> </li> <li>Concept: Does a constraint on one of the ancestor nodes prohibit you from creating it?</li> </ol> <p>MPS build fails </p> <ol> <li>Does the MPS Model-Checker report problems?  \u2192 Fix identified problems.</li> <li>Does the build log report intelligible problems?  \u2192 Fix identified problems.</li> <li>Does it build in Gradle?  \u2192 See: Gradle-Build fails.</li> </ol> <p>MPS can't be started at all.</p> <p>There could be multiple reasons:</p> <ul> <li>One reason could be a wrong Java version. That could be a different Java runtime like the GraalVM or an incorrect Java version. MPS 2022.2 and newer need JDK 17, older ones need JDK 11, and ancient versions of MPS need JDK 8.</li> <li>Through external changes, files of an MPS project could get deleted or corrupted by accident (such as deleting model files). There should be an exception that should give a hint of why the startup fails. The log file \u29c9 should also contain an error message.</li> </ul> <p>Basic MPS functionality stops working (e.g., typing doesn't work, the editor has an incorrect layout, or the window turns blank).</p> <p>If you are not using one of the platforms, you should report the issue to the MPS issue tracker \u29c9. Most of the bugs are caused by languages or plugins in  MPS Extensions \u29c9/ mbeddr platform \u29c9.</p> <p>For editor-related issues, try pressing F5 and check if the relayout method of the editor fixes the editor. If it does, report an issue in  MPS Extensions \u29c9. The most likely culprit is the cell layout \u29c9 language. If another basic editor functionality like typing doesn't work anymore, the same language or another language in the same repository can cause such issues. For all other issues, check if a fatal error was thrown in the lower right corner.</p> <p>Visit the issue tracker reference page to find the right issue tracker when you can't identify the repository based on the package name in the error message. Please don't just report the issue to the JetBrains MPS issue tracker \u29c9 because the issue will likely be marked as invalid and doesn't land in the right issue tracker.</p>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#gradle","title":"Gradle","text":"<p>Gradle | Build gives some more details about working with this build tool. When working with Gradle, make sure that you know which versions you are using. Different Gradle versions support different Java versions. Another topic that often leads to syntax issue, is lazy configuration \u29c9 which delay calculations until it's actually required.</p> <p>Gradle build fails.</p> <ol> <li>Did you call <code>git clean -fxd -e build.properties</code> before <code>./gradlew</code>?  \u2192 Do it, retry.</li> <li>Did you call <code>./gradlew</code> with <code>--refresh-dependencies</code>?  \u2192 Retry with <code>--refresh-dependencies</code>.</li> <li>Does the error message start with: dependencies should be extracted into the build script?<ul> <li>In MPS, apply the model-checker to the \"build\"-package. Many problems can be fixed by applying the intention \"Reload modules from disk.\"</li> <li>Rebuild the \"build\"-package.</li> <li>Retry the gradle build.</li> </ul> </li> <li>Do you have local changes?<ul> <li> \u2192 Use <code>git stash</code> to stash them away and retry.</li> <li>When the build works without your changes, then your changes are the problem. Redo them one by one to find the one that causes the problem.</li> </ul> </li> <li>Does it work on CI?<ul> <li> \u2192 Is it a recent CI build?<ul> <li> \u2192 Retrigger via a whitespace-only commit.</li> <li> \u2192 Search for differences between your local Gradle build and the CI build (versions).</li> </ul> </li> <li> \u2192 Is it the same error message?<ul> <li> \u2192 Search for differences between your local Gradle build and the CI build (versions).</li> </ul> </li> <li>Is the main build green on CI?<ul> <li> \u2192 Find out who broke it and make him fix it. After it is fixed, continue.</li> </ul> </li> <li>Is the main build recent?<ul> <li> \u2192 Retrigger it via a whitespace-only commit.</li> <li> \u2192 Merge main into your branch and retry.</li> </ul> </li> </ul> </li> <li>If nothing helped: try cloning your repo again.</li> <li>You are out of options. Ask somebody for help.</li> </ol>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#ci","title":"CI","text":"<p>Tests are failing on CI but are green in the local MPS installation.</p> <p>What about the local Gradle build? The tests can be executed locally with <code>./gradlew ant-build-tests -Dmps.home=PATH_TO_YOU_MPS_INSTALLTION</code>. The test results can be found in <code>build/iets3-allScripts</code> ( IETS3 \u29c9).</p> <ul> <li>If it runs (green), then there is a discrepancy between the CI and your local Gradle build.<ul> <li>Make sure you are on the same branch/commit as the CI,</li> </ul> </li> <li>If it shows the same test failures as the CI, then there is a discrepancy between the MPS Build and the Gradle Build.<ul> <li>Rebuild the build scripts in MPS.</li> <li>Try running the tests in a separate process (edit the run configuration in MPS).</li> <li>Make sure your MPS uses the same (versions of the) dependencies as the gradle build.<ul> <li>This can be achieved in 2 different ways:<ul> <li>Run <code>./gradlew dependencies</code> to see which versions of which dependency gradle uses and   make sure the OS and Mbeddr repos are checked out on the right branches/commits ( IETS3 \u29c9).</li> <li>Remove the file projectlibraries.overrides.properties from your repo and execute   <code>./gradlew setup</code> in both. This configures MPS to directly use the Java class files from the Gradle artifacts instead of the checked-out repos.</li> </ul> </li> </ul> </li> </ul> </li> </ul>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#explanations","title":"Explanations","text":"<ul> <li>git clean -xdf<ul> <li>removes untracked files from the working tree (= also files generated by MPS)</li> <li>x: Remove only files ignored by Git. This may be useful to rebuild everything from scratch but keep manually created files.</li> <li>d: Remove untracked directories and untracked files.</li> <li>f: If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to delete files or directories unless given -f, -n or</li> <li>e: Use the given exclude pattern besides the standard ignore rules.</li> </ul> </li> </ul>","tags":["troubleshooting","settings"]},{"location":"home/visual_guide/","title":"Visual Guide","text":"<p>This visual guide should help you get familiar with how elements of the UI are called and how to find information about them. It is useful for developers but also users. Hover over a green rectangle to show a short description. Reload the page if they don't appear. When you click the shape, you are redirected to the corresponding documentation when it's available.</p> <p></p>","tags":["ui"]},{"location":"home/overcoming_obstacles/debugging_problems/","title":"Debugging Problems","text":"<p>Different kinds of problems can occur in MPS. Some of them are bugs that you have to fix. Other issues might be unfixable or caused by an unusual approach to tackling a problem (e.g., accessing a project instance from unsupported places). For debugging purposes, you can add log statements to the code, execute tests, analyze stack traces, run code on the MSP console, or use remote debugging \u29c9.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#deal-with-errors","title":"Deal With Errors","text":"<p>Error messages come in all forms and sizes and can appear in different places. While some error messages can be ignored because users can't face them easily, for example, class loading issues when reloading modules, most error messages shouldn't be ignored. As a developers, the most import part is navigating to the code which causes the error through the UI or a stack trace. In the worst cast scenario, you must find the text of the error message in the sources of the offending project, to figure out what's going on.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#errors-in-the-editor","title":"Errors in the Editor","text":"<p>Those errors (red squiggly lines) are caused by checking rules \u29c9 or type system rules. Right-click the offending cell in the editor \u2192 Language Debug \u2192 Go to Rule Which Caused Error to navigate to the statement that causes the error. When calculating a type fails, the type system trace \u29c9 can be helpful. The same debug menu also contains a Show Type entry showing the computed type. Most of the time, using this action and understanding the type system check is more straightforward than using the tracing tool.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#ide-fatal-errors","title":"IDE Fatal Errors","text":"<p>You can find fatal errors by clicking on the error icon in the bottom right corner of the window.</p> <p></p> <p>This dialog contains exceptions your language, MPS platforms, or MPS itself might cause. In the provided example, the source of the error is deceptive: the plugin that contains the exception is MPS core, but looking at the package name, we see that the exception comes from Shadow Models \u29c9. If you need help determining where an error comes from, look at the page issue trackers. Only report the error to the JetBrains MPS Tracker if MPS causes the exception. To analyze the exception, open the error dialog and copy the message. Then click in the main menu on Analyze \u2192 Analyze Stack Trace and press ok. The run window will display the stack trace. It also provides links to the corresponding sources for lines where it is available.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#errors-in-the-log-file","title":"Errors in the Log File","text":"<p>Log statements, MPS platforms, MPS, and the IntelliJ platform can write error messages to this file. You can fix many exceptions quickly if they don't come from your languages, but sometimes they can still contain valuable hints. Example: When the startup's automatic module maker fails, only the error tooltip shows only the number of errors and warnings. The error log contains the exact stack trace. This file also saves messages about unloadable models.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#the-editor-cant-be-rendered","title":"The Editor Can\u2019t Be Rendered","text":"<p>When the editor can't create an editor cell, the stack trace can be analyzed by clicking on Stacktrace. Editor-related exceptions can have more severe consequences than other exceptions like fatal errors: in the worst-case scenario, you can't open the editor, or MPS freezes completely. When this happens, locate the MPS module that causes the freeze in your local file explorer, delete the _gen folders so that MPS can't load the module, and restart. Now the module is not active anymore, and you can start debugging. The same approach works for application and project plugins that crash the MPS instance. If your language does not cause the exception, please report the issue to the language's developer.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#dealing-with-wrong-outputs","title":"Dealing With Wrong Outputs","text":"<p>Wrong outputs can occur in many places:</p> <ul> <li>A Base Language method calculates an incorrect value.</li> <li>An intention creates an incorrectly initialized node.</li> <li>A checking rule shows null instead of the expected message.</li> <li>A generator generates the wrong output.</li> </ul> <p>The list goes on. Most of those cases can be checked automatically with the testing languages. The quick navigation table \u29c9 provides information on how to test certain language aspects.</p> <p>There are generator tests for generators, but they are often not fine-grained enough because you usually want to partly compare models and ignore specific children, properties, or references. An alternative approach is to invoke the generator yourself \u29c9 and compare the structure of the input and output model with your asserts. If the command line doesn't run the tests, it is possible to show differences between nodes graphically through: <pre><code> StructDifferenceDialog.showNodeDifference(ProjectHelper.toIdeaProject(project),\n        oldNode, newNode, oldTitle, newTitle)\n</code></pre></p> <p>The language com.mbeddr.mpsutil.comparator can help compare nodes programmatically while ignoring some children, properties, or references.</p>"},{"location":"home/overcoming_obstacles/general_tips/","title":"General Tips","text":"<p>No matter what type of challenge you face, some tips always help you to make progress or remove your blocker.</p>"},{"location":"home/overcoming_obstacles/general_tips/#search-the-existing-documentation-and-issue-trackers","title":"Search the Existing Documentation and Issue Trackers","text":"<p>The MPS User's Guide \u29c9 and this website contain much information about MPS. Search the MPS Slack workspace or the MPS forum for similar problems or questions. A script automatically saves older messages of the Slack channels to the forum. For more technical problems, searching the issue tracker might reveal existing bug reports and sometimes contain technical explanations.  StackOverflow also includes a few MPS questions with the tag mps. The page Reference: Issue trackers \u29c9 mentions all the other issue trackers. If you are a developer, you can also locate the code author \u29c9 directly inside MPS if you have the Git history available for a project. Some projects also contain readme files or release notes/a changelog that includes important notes about compatibility or bug fixes and general information about the project.</p>"},{"location":"home/overcoming_obstacles/general_tips/#remove-all-distractions","title":"Remove All Distractions","text":"<p>Make sure to remove everything that distracts you:</p> <ul> <li>Turn off all notifications, such as notifications from mail or other communication channels.</li> <li>Set your status to offline or busy, and turn off your phone or notifications.</li> <li>Sit in a quiet room or use earplugs.</li> </ul> <p>For challenging problems, it might be beneficial to not listen to music and even close all windows to make it as quiet as possible (but remember: you still need enough oxygen to think clearly). Thoughts and feelings can also be distracting: if you are angry or frustrated with the situation or feel the pressure, take a break or do something else to clear your mind.</p>"},{"location":"home/overcoming_obstacles/general_tips/#step-away-from-the-problem","title":"Step Away From the Problem","text":"<p>Sometimes focusing on a problem for a long time doesn't yield results. Switch to a different task so you don't have the mental capacity to think about the first problem. This task switch has the effect of clearing your mind. There is a downside to this approach: context switching. When switching tasks, you lose the problem's context and need time to dive into the topic again. To mitigate this, create an \"investigation log\" for any non-trivial problem and take detailed notes of what you saw and tried. With MPS, you also have the issue of switching between different projects and branches, which can take a lot of time, especially when you have to rerun the build. If it is technically possible, try to partially build the project or run it on the command line without cleaning (e.g., <code>gradle clean</code> or <code>git clean</code>). You can also work with multiple MPS instances at the same time.</p> <p>You can also step away from the computer: walk the dog, shower, or take a toilet break: walk the dog, take a shower, or go for a toilet break. A 2014 study \u29c9 by Oppezzo and Schwartz at Stanford showed that walking increased participants\u2019 creative divergent thinking,\u201d which is vital for creative problem-solving. For example: taking just a quick walk for 5 minutes might lead to a solution in 2 minutes instead of sitting in front of the computer for an hour without making any progress. You should experiment with the most beneficial activity: Some people stay away from cell phones, books, magazines, and other forms of entertainment, while others read books, play games or answer questions. The latter group prefers anything requiring active mental engagement, so they can't think about anything else.</p>"},{"location":"home/overcoming_obstacles/general_tips/#get-enoughsome-sleep","title":"Get Enough/Some Sleep","text":"<p>Sleep, in general, significantly impacts the ability to solve problems and make fewer mistakes. A 2009 study by Denise Cai et al. at the University of California San Diego showed that REM sleep enhances the integration of unassociated information for creative problem-solving. Getting enough quality sleep can help your job performance. That doesn't mean you must be in bed at 10 pm. Some people prefer to wake up early (early bird), while others stay up late at night (night owls). Is It Better to Be a Night Owl or Early Bird? | healthline.com \u29c9 describes the differences in more detail.</p> <p>After implementing a feature or fixing a bug, there comes a time when you open a pull request in your project when you are using version control, and depending on the team, someone will review your changes. Before opening the PR, consider sleeping over it the night and look at your changes with fresh eyes the next day. You will often find issues that way because you\u2019ve cleared your mind and were able to process all your thoughts in the meantime.</p>"},{"location":"home/overcoming_obstacles/general_tips/#thinking-out-loudasking-for-help","title":"Thinking Out Loud/Asking for Help","text":"<p>Grab a colleague, a friend, a pet, or a rubber duck, and explain the problem you are having out loud to them. Explaining the situation to someone who might not even be familiar with the topic helps get a deeper understanding of the topic. If this is impossible, you can write a message or ask questions in one of the MPS Slack channels or the MPS forum. StackOverflow has a good article about how to ask a good question \u29c9.</p> <p>Don't hesitate to ask senior developers questions if you are a junior developer. If they have time, they happily answer your questions (if they have time) and might even learn something new about your problem.</p>"},{"location":"home/overcoming_obstacles/general_tips/#pair-programming","title":"Pair Programming","text":"<p>Pair programming \u29c9 is an Agile software development technique originating from Extreme programming (XP) in which two developers team together on one computer. The two people work together to design, code, and test user stories. Ideally, the two people would be equally skilled and have equal time on the keyboard.</p> <p>While the linked article perfectly describes the technique, a particular form of pair programming often occurs in the MPS community with customers and colleagues: pair debugging. Before spending hours on a problem, it is better to describe it to someone. Asynchronous communication via Slack, StackOverflow, or a forum may work out. Getting a second pair of eyes to look at your screen or remotely sharing your screen is often much better and faster. When doing so, give the second person enough context to understand or explain the problem by an example.</p> <p>When the other person is not in the room, prefer a screen-sharing software that supports drawing on the presenter's screen. This way, explaining what UI elements to click is much easier. Especially when working in cross-platform environments, install the IntelliJ plugin n Presentation Assistant \u29c9 to show the pressed keyboard shortcuts in the IDE. When explaining MPS actions, Windows and Mac users are rarely familiar with the keyboard shortcuts of a different OS's user.</p>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/","title":"Overcoming Obstacles","text":"<p>You probably already read the troubleshooting guide, Finding your way out | MPS User's Guide and Debugging \u29c9 but you still need help with an issue. The following pages combine the issue of getting stuck while developing in MPS with struggling with general programming problems. Whether you are working on a new feature, fixing a bug, or just playing around with a toy project doesn't matter. Recognizing that you can't move forward before spending unnecessary time and not making any progress is essential. If you are already annoyed or frustrated, try to calm down before taking further steps. Note: The words problem, issue, bug, and obstacle are synonyms on the following pages.</p> <p>Getting unstuck | Python Principles \u29c9 identifies four different causes for getting stuck:</p> <ul> <li>understanding the problem</li> <li>debugging problems</li> <li>syntax problems</li> <li>thinking problems</li> </ul> <p>After reading through the different causes and the general tips page, continue with the following sections.</p>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/#reproducibility","title":"Reproducibility","text":"<p>Some problems can't be reproduced at all or only under certain conditions. Try to create a minimal example or let a colleague open the project containing the issue on his computer. A few other factors that have caused issues in the past that affect the reproducibility of problems are:</p> <ul> <li>the operating system<ul> <li>Windows (particular fonts, file system issues such as case-insensitivity or locked files)</li> <li>Mac (particular fonts, case-insensitivity with files, special handling of M1 and M2 chips)</li> <li>Linux (rendering issues)</li> </ul> </li> <li>the Java Runtime Environment<ul> <li>Don't start MPS with a normal JRE or JDK, especially not an OpenJDK. Use the provided JBR. Some of the weirdest errors can be explained this way (maybe this is related to the Java compiler itself).</li> <li>Make sure to avoid mixing Java versions by accident.</li> <li>Use a JBR that supports JCEF when you intend to integrate JCEF into MPS.</li> </ul> </li> <li>External conditions such as race conditions, non-deterministic code, different development environments</li> <li>Only partially and cleanly build projects: A common issue when regenerating MPS modules/models is to make the module instead of rebuilding them, which is necessary for certain aspects, such as the generator aspect.</li> </ul>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/#implementing-a-non-perfect-solution","title":"Implementing a Non-Perfect Solution","text":"<p>You are now at the stage where you can solve the problem but are still trying to achieve a perfect or standard solution. As a developer, you might always strive for perfection, but one of the following factors might prevent you from achieving your goal:</p> <ul> <li>a technical limitation (MPS, IntelliJ platform, Java)</li> <li>a technical limitation (existing code)</li> <li>a temporarily unfixable bug</li> <li>a deadline that you have to follow</li> </ul> <p>Implementing a non-perfect solution, a workaround, or even a hack is still better than no solution. As a developer, you want to consistently deliver high-quality, performant code that follows best practices and is reusable. . Sometimes this non-perfect solution can be the best as long as you make things work and the code doesn't fail. While this solution might introduce technical debt \u29c9 that you have to deal with in the future, it can be a different way: the implementation might be just overengineered, pre-optimized, or deals with use cases that might not even occur. The code might get thrown out in the next release if it is a rapidly changing project. If you decide to ship this solution, document somewhere (e.g., in the code, ticket, a design document) why you implemented the code the way you did.</p>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/#let-it-go","title":"Let It Go","text":"<p>There will be obstacles you can't overcome, problems you can't fix, and features you can't develop. Some issues exist in MPS platforms or MPS where no workaround exists or the issue's priority is so low that it doesn't impact the user's experience or compromise business logic. In other cases, the problem is so complex that nobody can solve it or isn't reproducible.</p> <p>Moving forward is sometimes okay. Stop working on the problem. When you have to drop a feature, explain why you dropped it. The problem can also be put into a backlog so that you can implement it in a future release or mark it as won't fix if you can do nothing about it. Not finding a solution at the moment doesn't mean there won't be a solution or workaround in the future. Bug fixes in a new MPS version or platform or new knowledge might load to finding a solution, or you find time to tackle the problem again.</p> <p>As a junior developer, you might also face issues where you are not up to the task. In those cases, ask a more senior developer for help or pass the problem along to another developer who can look at it with a fresh mind. You can also give it back to the more senior developer who assigned the ticket to you in the first place.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/","title":"Syntax Problems","text":""},{"location":"home/overcoming_obstacles/syntax_problems/#syntax-problems-in-the-editor","title":"Syntax Problems in the Editor","text":"<p>Caused by the projectional editing approach, syntax problems don\u2019t exist in MPS. Sometimes it takes work to enter text, though. A general technique that often works is to search for instances of a concept in the current project or globally to figure out how it works if there is no documentation. Open a concept \u2192 right-click \u2192 Find Usage Settings \u2192 Check Concept Instances and select the scope to find instances of the concept. The following list contains some common reasons why you might be stuck entering text:</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#a-constraint-prevents-you-from-entering-code","title":"A Constraint Prevents You From Entering Code","text":"<p>If you know the concept's name, you can navigate to the constraints aspect to find the reasons. It is generally better to allow users to enter text and tell them afterward that their action was incorrect or invalid at the inserted location than to restrict them from entering text. From a usability perspective, there is nothing more frustrating than not being able to enter information and not knowing why you can't enter some text. Another solution would be to show read-only text in the code completion menu, in the side transformation popup, or some other place but make the entries inactive. Those entries should contain descriptions explaining why they can't be selected.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#you-cant-enter-a-reference-because-of-its-scope","title":"You Can\u2019t Enter a Reference Because of Its Scope","text":"<p>Please read the documentation about scopes \u29c9 first. A common mistake is not adding an import to the model containing the node you want to reference. Depending on how the scope works, you might also need to add an extends scope in the module's dependencies tab (e.g., required for conditional editors), or the scoping is tied to some import mechanism (e.g., import declarations in KernelF libraries). References will still work if they can't find their target but will show an out-of-scope error. Don't ignore the error. Example: In a node test, you might reference a type system statement in the has error check while you want to use the has type system error check.</p> <p>Partially related to scopes: Sometimes, checking why a particular item appears in the code completion menu can help determine why another one doesn't appear. Open the code completion menu and press the mentioned shortcut at the bottom of the list to open the menu trace tool \u29c9.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#style-sheet-itemsactions-prevent-entering-text","title":"Style Sheet Items/Actions Prevent Entering Text","text":"<p>For side transformations to work, cells must not have the punctuation-left or punctuation-right item set to false on the side where the side transformation should be available; otherwise, you can't enter text because the cursor is not allowed at that position. To figure out the available input options and actions, right-click in the editor \u2192 Go To \u2192 Editor Declaration to open the corresponding editor of the concept. For more detailed information, right-click in the editor -&gt; Language Debug \u2192 Show Cell in Explorer. The cell explorer shows the entire tree of editor cells that describe the currently opened editor.</p> <p></p> <p>On the right side, you can see the basic properties of the editor cell, such as the referenced node or the position and dimension of the cell. The following section, Actions, shows the available editor actions you can invoke. For example, the action SELECT_LOCAL_END is implemented as the editor action SelectLocalEnd and has a keyboard shortcut attached. <code>editorComponent.getSelectionManager().getSelection().executeAction(CellActionType.SELECT_LOCAL_END)</code> forwards it to the current selection in the editor, where you can handle it in an action map. For most actions, default implementations exist. You can locate them in the MPS sources, e.g., LocalHome \u29c9. The last section deals with style items such as the text color or the focus policy. Some crucial properties concerning debugging are punctuation-left, punctuation-right, editable, and read-only because they affect the ability to enter text.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#the-editing-is-supposed-to-be-done-differently","title":"The Editing Is Supposed to Be Done Differently","text":"<p>Many ways exist to change MPS models. You can enter text directly in the editor or use</p> <ul> <li>side transformations \u29c9 to make changes</li> <li>context assistant \u29c9 buttons</li> <li>the context actions tool \u29c9</li> <li>intentions \u29c9</li> <li>entries in the main menu to invoke actions</li> <li>the context menu of the editor to invoke actions</li> <li>buttons in the editor</li> </ul> <p>Make sure to read the documentation or look at the implementation of the concepts of the used language to figure out how it works. As a last resort, you can always use the MPS console to modify a model. Click a cell in the editor, use the copy shortcut, and paste it into the console. The node should be an instance of PastedNodeReference and can manipulate it. For entering more complex nodes, use the quotation \u29c9 language. Make sure to enter a curly brace in the console to start a Base Language statement block so that you can enter multiple statements.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#syntax-errors-on-compilation","title":"Syntax Errors on Compilation","text":"<p>Before the generation fails, run the model checker to check if the model is in a valid state. Errors can still happen for various reasons:</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#the-generator-of-the-language-has-a-bug-that-must-be-fixed","title":"The Generator of the Language Has a Bug That Must Be Fixed","text":"<p>A common error source is incorrectly handled cross-references to other models. Wrong assumptions about which parts of the model are optional and mandatory can lead to incorrectly generated code. Depending on the target of the generator, the target language can also help catch errors through the type system. Even if the code is outside a template fragment, the code in the generator shouldn't display any errors. For example, when a method needs an argument of type string, don't call it with a different argument type in the template, even if the generator replaces the parameter with a reference macro. Casting nodes to a different concept should also be done carefully. An as-cast will return null if it can't cast the node to the referenced concept.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#the-base-language-code-is-not-valid-java-code","title":"The Base Language Code Is Not Valid Java Code","text":"<p>Despite the similarities between Java and Base Language, they are not fully compatible. Read the page MPS Java compatibility \u29c9 in the MPS documentation. Build scripts can also have a section called java options which lets you select the used compiler. Some compilers better handle cyclic dependencies in the generated Java code than others. That also means the compilation will fail with some of them when accidentally switching the compiler.</p> <p>In rare cases, the generation fails because a generated variable clashes with a variable in the current context, e.g., variables named node or _context are good examples (more info).</p>"},{"location":"home/overcoming_obstacles/thinking_problems/","title":"Thinking Problems","text":"<p>You can do it without much thought when you have an easy coding problem. When you have to deal with a new topic that you are unfamiliar with or have to dive into a large code base (with little documentation), you start guessing and trying things with the hope that something will eventually work. Especially with unfamiliar domains and unclear requirements, there is the risk of getting overwhelmed. You start throwing the dice to make decisions or get stuck on a problem for a long time. When your approach fails and you become frustrated, it's better to step back and think. Ensure your mental model is clear before proceeding. Read Mental Models: Learn How to Think Better and Gain a Mental Edge | James Clear \u29c9 to learn more about mental models.</p> <p>When the code base is complex or has some technical debt, it can be challenging to find and focus on the relevant part of the code. Create a minimal, reproducible example \u29c9 or extract the code into a toy project or class. You can also play around with the code by executing it on the MPS console. If the problem is too big, split it into a few tasks or solve one small task. Once you get that working, add the layers of complexity back in one at a time until you solve the problem as the problem statement asked.</p> <p>Finding the root cause of your problem should always be done before implementing a workaround or writing poorly designed code. In the MPS platforms, this can be a challenging task. The current project can be the source of the problems, any of the MPS platforms, or even MPS itself. Don\u2019t focus only on the code you think contains the bug but also consider all other platforms. Try disabling offending languages and methodically go through all layers of code that might be responsible for the problem. Comment out chunks of code to see if the problem persists. To rule out MPS itself, try a simple example in MPS itself, without any additional languages and plugins installed. Also, check if the issue still arises in the latest MPS version if you are still using an older version.</p>"},{"location":"home/overcoming_obstacles/thinking_problems/#devise-a-strategy","title":"Devise a Strategy","text":"<p>Write down in plain English what you want to achieve before writing code. You can even go a step further as described in Stuck on a Coding Problem? Here are 5 Steps to Solve It|Adrian Prieto \u29c9:</p> <ul> <li>Read the problem several times until you can explain it to someone else</li> <li>Solve the problem manually</li> <li>Make your manual solution better</li> <li>Write pseudocode</li> <li>Replace pseudocode with running code</li> </ul> <p>Ideally, though, you have a ticket that specifies the problem. It should describe the issue/feature in detail, including all edge cases. Tickets that deal with bugs should contain images, GIFs, or videos to showcase the problem. The ticket description should compare the actual with the expected behavior. It can also include concrete ideas for solving the problem. It can even explain how the UI should look and how the user interaction will work.</p> <p>Depending on the nature of the project, customers, domain experts, or a member of your team who is very familiar with the target domain can create tickets. Ideally, the domain expert and the developers are different people so that the developers don\u2019t have to write specifications and can focus on developing features and fixing bugs.</p>"},{"location":"home/overcoming_obstacles/understanding_the_problem/","title":"Understanding the Problem","text":"<p>Not understanding the problem 100% is often the problem. Read the task/issue several times until you can explain it to someone else. If you don't fully understand a problem, you can't solve it. Here are some questions that you can ask yourself:</p> <ul> <li>Did you read the full description of the ticket or problem?</li> <li>Was anything unclear about it?</li> <li>Can you restate it in your own words?</li> </ul>"},{"location":"home/overcoming_obstacles/understanding_the_problem/#tickets","title":"Tickets","text":"<p>Solve for the goal, not what you\u2019re given in the ticket. Contact the ticket submitter and ask for clarification if something is unclear: you might misinterpret the meaning, or he explained something poorly. People that specify tickets/problems sometimes miss edge cases, don\u2019t go into detail, or don\u2019t provide enough information. Try to ask them early. It saves you a lot of time.</p> <p>If the ticket contains the specification for a feature, read How to Constructively Read a Spec | hackernoon.com \u29c9 first if need help understanding a giant wall of text or learning to read a specification carefully.</p>"},{"location":"home/overcoming_obstacles/understanding_the_problem/#exceptions","title":"Exceptions","text":"<p>When you are a developer using an open-source library, read the source code and look at the latest changes in the offending files to figure out what\u2019s happening. Make sure to look at the code of the correct branch. For the MPS platforms, the naming scheme is most often maintenance/mpsX; for MPS itself, it is just mpsX. If you are dealing with an exception, try to google it first, especially if it is a standard Java exception. The page exceptions explains some MPS-specific exceptions.</p> <p>To make the problem more reproducible, write a test for it. When you fix the code, and the test is green, the code coverage rises, and you can be more confident when making changes to the code in the future.</p>"},{"location":"language_reference/","title":"IETS3.opensource Language Reference (WIP)","text":"<p>This is a WIP language reference, currently under review on GitHub \u29c9.</p> <p>Included languages:</p> <ul> <li> <p>org.iets3.core.expr.base</p> </li> <li> <p>org.iets3.core.expr.collections</p> </li> <li> <p>org.iets3.core.expr.toplevel</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/","title":"org.iets3.core.expr.base","text":""},{"location":"language_reference/org.iets3.core.expr.base/#included-languages","title":"Included Languages","text":"<ul> <li>com.mbeddr.mpsutil.blutil</li> <li>com.mbeddr.mpsutil.editor.querylist</li> <li>com.mbeddr.mpsutil.framecell</li> <li>com.mbeddr.mpsutil.grammarcells</li> <li>com.mbeddr.mpsutil.intentions</li> <li>com.mbeddr.mpsutil.modellisteners</li> <li>com.mbeddr.mpsutil.refactoring</li> <li>de.itemis.mps.editor.celllayout</li> <li>de.slisson.mps.conditionalEditor</li> <li>de.slisson.mps.richtext</li> <li>de.slisson.mps.richtext.customcell</li> <li>jetbrains.mps.baseLanguage</li> <li>jetbrains.mps.baseLanguage.closures</li> <li>jetbrains.mps.baseLanguage.collections</li> <li>jetbrains.mps.baseLanguage.javadoc</li> <li>jetbrains.mps.baseLanguage.lightweightdsl</li> <li>jetbrains.mps.baseLanguage.logging</li> <li>jetbrains.mps.baseLanguage.tuples</li> <li>jetbrains.mps.baseLanguageInternal</li> <li>jetbrains.mps.ide.httpsupport</li> <li>jetbrains.mps.lang.access</li> <li>jetbrains.mps.lang.actions</li> <li>jetbrains.mps.lang.behavior</li> <li>jetbrains.mps.lang.constraints</li> <li>jetbrains.mps.lang.constraints.msg.specification</li> <li>jetbrains.mps.lang.constraints.rules</li> <li>jetbrains.mps.lang.constraints.rules.kinds</li> <li>jetbrains.mps.lang.constraints.rules.skeleton</li> <li>jetbrains.mps.lang.context</li> <li>jetbrains.mps.lang.context.defs</li> <li>jetbrains.mps.lang.core</li> <li>jetbrains.mps.lang.dataFlow</li> <li>jetbrains.mps.lang.descriptor</li> <li>jetbrains.mps.lang.editor</li> <li>jetbrains.mps.lang.editor.tooltips</li> <li>jetbrains.mps.lang.extension</li> <li>jetbrains.mps.lang.findUsages</li> <li>jetbrains.mps.lang.generator</li> <li>jetbrains.mps.lang.generator.generationContext</li> <li>jetbrains.mps.lang.intentions</li> <li>jetbrains.mps.lang.migration</li> <li>jetbrains.mps.lang.migration.util</li> <li>jetbrains.mps.lang.pattern</li> <li>jetbrains.mps.lang.plugin</li> <li>jetbrains.mps.lang.plugin.standalone</li> <li>jetbrains.mps.lang.quotation</li> <li>jetbrains.mps.lang.refactoring</li> <li>jetbrains.mps.lang.resources</li> <li>jetbrains.mps.lang.rulesAndMessages</li> <li>jetbrains.mps.lang.scopes</li> <li>jetbrains.mps.lang.script</li> <li>jetbrains.mps.lang.sharedConcepts</li> <li>jetbrains.mps.lang.smodel</li> <li>jetbrains.mps.lang.smodel.query</li> <li>jetbrains.mps.lang.structure</li> <li>jetbrains.mps.lang.text</li> <li>jetbrains.mps.lang.textGen</li> <li>jetbrains.mps.lang.typesystem</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#defined-concepts","title":"Defined Concepts","text":""},{"location":"language_reference/org.iets3.core.expr.base/#abstractminmaxexpression-abstract-node-url","title":"AbstractMinMaxExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children","title":"Children","text":"<ul> <li>values</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#altoption-node-url","title":"AltOption (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_1","title":"Children","text":"<ul> <li> <p>when</p> </li> <li> <p>then</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#alternativesexpression-alt-node-url","title":"AlternativesExpression (alt, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_2","title":"Children","text":"<ul> <li>alternatives</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#alwaysvalue-always-node-url","title":"AlwaysValue (always, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#andtag-node-url","title":"AndTag (&amp;&amp;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#assignmentexpr-node-url","title":"AssignmentExpr (:=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#attempttype-attempt-node-url","title":"AttemptType (attempt, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_3","title":"Children","text":"<ul> <li> <p>successType</p> </li> <li> <p>errorLiterals</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#bangop-node-url","title":"BangOp (!, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_4","title":"Children","text":"<ul> <li>optionValue</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#binaryarithmeticexpression-abstract-node-url","title":"BinaryArithmeticExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#binarycomparisonexpression-abstract-node-url","title":"BinaryComparisonExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#binaryequalityexpression-abstract-node-url","title":"BinaryEqualityExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#binaryexpression-abstract-node-url","title":"BinaryExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_5","title":"Children","text":"<ul> <li> <p>left</p> </li> <li> <p>right</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#binarylogicalexpression-abstract-node-url","title":"BinaryLogicalExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#castexpression-cast-node-url","title":"CastExpression (cast, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_6","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>expectedType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#checktypeconstraintsexpr-check-node-url","title":"CheckTypeConstraintsExpr (check, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties","title":"Properties","text":"<ul> <li>failIfInvalid</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_7","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>tp</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#coloncast-node-url","title":"ColonCast (:, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_8","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>type</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#constraintanderrornode-node-url","title":"ConstraintAndErrorNode (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references","title":"References","text":"<ul> <li> <p>expression</p> </li> <li> <p>source</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#contract-node-url","title":"Contract (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_9","title":"Children","text":"<ul> <li>items</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#contractitem-abstract-node-url","title":"ContractItem (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_1","title":"Properties","text":"<ul> <li>warning</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_10","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>err</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#convenientboolean-node-url","title":"ConvenientBoolean (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_11","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#convenientbooleanvalue-abstract-node-url","title":"ConvenientBooleanValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#convenientvaluecond-if-node-url","title":"ConvenientValueCond (if, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_12","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#dereftarget-deref-node-url","title":"DeRefTarget (deref, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#defaultvalueexpression-default-node-url","title":"DefaultValueExpression (default, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_13","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#divexpression-node-url","title":"DivExpression (/, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#docwordref-node-url","title":"DocWordRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references_1","title":"References","text":"<ul> <li>node</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#dotexpression-node-url","title":"DotExpression (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_14","title":"Children","text":"<ul> <li>target</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#emptyexpression-node-url","title":"EmptyExpression (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#emptytype-emptytype-node-url","title":"EmptyType (emptytype, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#emptyvalue-empty-node-url","title":"EmptyValue (empty, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_15","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#equalsexpression-node-url","title":"EqualsExpression (==, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#errorexpression-error-node-url","title":"ErrorExpression (error, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_16","title":"Children","text":"<ul> <li>error</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#errorliteral-node-url","title":"ErrorLiteral (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#errortarget-err-node-url","title":"ErrorTarget (err, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#exprincontract-abstract-node-url","title":"ExprInContract (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#expression-abstract-node-url","title":"Expression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#failexpr-fail-node-url","title":"FailExpr (fail, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_17","title":"Children","text":"<ul> <li> <p>message</p> </li> <li> <p>contextExpression</p> </li> <li> <p>type</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#genericerrortype-error-node-url","title":"GenericErrorType (error, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#greaterequalsexpression-node-url","title":"GreaterEqualsExpression (&gt;=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#greaterexpression-node-url","title":"GreaterExpression (&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#hasvalueop-hasvalue-node-url","title":"HasValueOp (hasValue, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iallowdeletionofdot-abstract-node-url","title":"IAllowDeletionOfDot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iallowdotonleft-abstract-node-url","title":"IAllowDotOnLeft (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iallowsdocinchildexpressions-abstract-node-url","title":"IAllowsDocInChildExpressions (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iassertconstraints-abstract-node-url","title":"IAssertConstraints (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iattempttype-abstract-node-url","title":"IAttemptType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ibigexpression-abstract-node-url","title":"IBigExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iblocklike-abstract-node-url","title":"IBlockLike (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icanbelvalue-abstract-node-url","title":"ICanBeLValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icollectiontype-abstract-node-url","title":"ICollectionType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icomplextypesupportsequals-abstract-node-url","title":"IComplexTypeSupportsEquals (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontainmentstackmember-abstract-node-url","title":"IContainmentStackMember (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontextassistanttypeprovider-abstract-node-url","title":"IContextAssistantTypeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontexttypeprovider-abstract-node-url","title":"IContextTypeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontexttypedop-abstract-node-url","title":"IContextTypedOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontracted-abstract-node-url","title":"IContracted (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_18","title":"Children","text":"<ul> <li>contract</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#icontroladvancedfeatures_old-abstract-node-url","title":"IControlAdvancedFeatures_old (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ideclarativelyinterpretable-abstract-node-url","title":"IDeclarativelyInterpretable (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#idocumentablewordcontainer-abstract-node-url","title":"IDocumentableWordContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#idocumentablewordprovider-abstract-node-url","title":"IDocumentableWordProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#idottarget-abstract-node-url","title":"IDotTarget (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iemptyliteral-abstract-node-url","title":"IEmptyLiteral (abstract, node url)","text":"<p>Marker interface used to mark literals that at runtime evaluate to empty value.</p>"},{"location":"language_reference/org.iets3.core.expr.base/#ihasbasetype-abstract-node-url","title":"IHasBaseType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iignoretrivialerrorscontext-abstract-node-url","title":"IIgnoreTrivialErrorsContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iissinglesymbol-abstract-node-url","title":"IIsSingleSymbol (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ijointypecontext-abstract-node-url","title":"IJoinTypeContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iliteral-abstract-node-url","title":"ILiteral (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imainslot-abstract-node-url","title":"IMainSlot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imayalloweffect-abstract-node-url","title":"IMayAllowEffect (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imayhaveeffect-abstract-node-url","title":"IMayHaveEffect (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imayreadmutablestate-abstract-node-url","title":"IMayReadMutableState (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imultitraceroot-abstract-node-url","title":"IMultiTraceRoot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#inamequalifier-abstract-node-url","title":"INameQualifier (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ineverallowdot-abstract-node-url","title":"INeverAllowDot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ioptionderefcontext-abstract-node-url","title":"IOptionDerefContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ioptionallytyped-abstract-node-url","title":"IOptionallyTyped (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_19","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#iparameterizedtypesupportsequals-abstract-node-url","title":"IParameterizedTypeSupportsEquals (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iprogramlocationprovider-abstract-node-url","title":"IProgramLocationProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iprovidepathconstraints-abstract-node-url","title":"IProvidePathConstraints (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ireducableexpression-abstract-node-url","title":"IReducableExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iref-abstract-node-url","title":"IRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ireferenceabletype-abstract-node-url","title":"IReferenceableType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#irunninginterpretercontext-abstract-node-url","title":"IRunningInterpreterContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issconstrainedvalue-abstract-node-url","title":"ISSConstrainedValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issconstrainedvalueref-abstract-node-url","title":"ISSConstrainedValueRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issdelegatingtype-abstract-node-url","title":"ISSDelegatingType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issitvalueref-abstract-node-url","title":"ISSItValueRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iscopefilterer-abstract-node-url","title":"IScopeFilterer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#isinglesymbolref-abstract-node-url","title":"ISingleSymbolRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#istructuredsyntax-abstract-node-url","title":"IStructuredSyntax (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itargetthatcandealwithnix-abstract-node-url","title":"ITargetThatCanDealWithNix (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itraceroot-abstract-node-url","title":"ITraceRoot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypefrommultiple-abstract-node-url","title":"ITypeFromMultiple (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypeoverridingcontext-abstract-node-url","title":"ITypeOverridingContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypesupportsdefaultvalue-abstract-node-url","title":"ITypeSupportsDefaultValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypesupportsproposals-abstract-node-url","title":"ITypeSupportsProposals (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypeable-abstract-node-url","title":"ITypeable (abstract, node url)","text":"<p>Nodes that have a defined type but not necessarily specified explicitly in a child</p>"},{"location":"language_reference/org.iets3.core.expr.base/#ityped-abstract-node-url","title":"ITyped (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_20","title":"Children","text":"<ul> <li>type:</li> </ul> <p>type is actually required, but is 0..1 here to improve editor usability</p>"},{"location":"language_reference/org.iets3.core.expr.base/#ivalidotherwisecontainer-abstract-node-url","title":"IValidOtherwiseContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ivoidcontext-abstract-node-url","title":"IVoidContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iwantnewline-abstract-node-url","title":"IWantNewLine (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ifelsesection-else-node-url","title":"IfElseSection (else, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_21","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#ifexpression-if-node-url","title":"IfExpression (if, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_22","title":"Children","text":"<ul> <li> <p>condition</p> </li> <li> <p>thenPart</p> </li> <li> <p>elsePart</p> </li> <li> <p>elseSection</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#implicitvalidityvalexpr-it-node-url","title":"ImplicitValidityValExpr (it, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_23","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#inlinemessage-message-node-url","title":"InlineMessage (message, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_24","title":"Children","text":"<ul> <li>text</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#invariant-inv-node-url","title":"Invariant (inv, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issomeexpression-issome-node-url","title":"IsSomeExpression (isSome, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_25","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#jointype-join-node-url","title":"JoinType (join, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_26","title":"Children","text":"<ul> <li>types</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#lessequalsexpression-node-url","title":"LessEqualsExpression (&lt;=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#lessexpression-node-url","title":"LessExpression (&lt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalandexpression-node-url","title":"LogicalAndExpression (&amp;&amp;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicaliffexpression-node-url","title":"LogicalIffExpression (&lt;=&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalimpliesexpression-node-url","title":"LogicalImpliesExpression (=&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalnotexpression-node-url","title":"LogicalNotExpression (!, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalorexpression-node-url","title":"LogicalOrExpression (||, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#makereftarget-ref-node-url","title":"MakeRefTarget (ref, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#maxexpression-max-node-url","title":"MaxExpression (max, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#messagevaluetype-message-node-url","title":"MessageValueType (message, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#minexpression-min-node-url","title":"MinExpression (min, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#minusexpression-node-url","title":"MinusExpression (-, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#modexpression-mod-node-url","title":"ModExpression (mod, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#mulexpression-node-url","title":"MulExpression (*, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#multag-node-url","title":"MulTag (*, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#nevervalue-never-node-url","title":"NeverValue (never, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#nonstrictequalsexpression-node-url","title":"NonStrictEqualsExpression (===, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#noneliteral-none-node-url","title":"NoneLiteral (none, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_27","title":"Children","text":"<ul> <li>optionalBaseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#nonetype-none-node-url","title":"NoneType (none, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#notequalsexpression-node-url","title":"NotEqualsExpression (!=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#oktarget-ok-node-url","title":"OkTarget (ok, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#oneoftarget-oneof-node-url","title":"OneOfTarget (oneOf, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_28","title":"Children","text":"<ul> <li>values</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#operatorgroup-join-node-url","title":"OperatorGroup (join, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_29","title":"Children","text":"<ul> <li> <p>expressions</p> </li> <li> <p>tag</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#operatortag-abstract-node-url","title":"OperatorTag (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#optionorexpression-node-url","title":"OptionOrExpression (?:, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#optiontype-opt-node-url","title":"OptionType (opt, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_30","title":"Children","text":"<ul> <li>baseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#ortag-node-url","title":"OrTag (||, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#parensexpression-node-url","title":"ParensExpression ((, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_31","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#plainconstraint-node-url","title":"PlainConstraint (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#plusexpression-node-url","title":"PlusExpression (+, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#plustag-node-url","title":"PlusTag (+, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#postcondition-post-node-url","title":"Postcondition (post, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#pragmadisablecaching-disable-caching-globally-node-url","title":"PragmaDisableCaching (\u00a7disable-caching-globally, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#pragmaexpression-abstract-node-url","title":"PragmaExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_32","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#precondition-pre-node-url","title":"Precondition (pre, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#primitiveliteral-abstract-node-url","title":"PrimitiveLiteral (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#primitivetype-abstract-node-url","title":"PrimitiveType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#programlocationop-abstract-node-url","title":"ProgramLocationOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#programlocationtype-loc-node-url","title":"ProgramLocationType (loc, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#programlocationurlop-url-node-url","title":"ProgramLocationUrlOp (url, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#rangetarget-inrange-node-url","title":"RangeTarget (inRange, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_2","title":"Properties","text":"<ul> <li> <p>upperExcluding</p> </li> <li> <p>lowerExcluding</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_33","title":"Children","text":"<ul> <li> <p>min</p> </li> <li> <p>max</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#reductioninspector-node-url","title":"ReductionInspector (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_34","title":"Children","text":"<ul> <li>reduced</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#referencetype-ref-node-url","title":"ReferenceType (ref, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_35","title":"Children","text":"<ul> <li>baseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#revealer-node-url","title":"Revealer (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_36","title":"Children","text":"<ul> <li>condition</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#revealerthis-revealed-node-url","title":"RevealerThis (revealed, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#simpleexpressionvalueinspector-node-url","title":"SimpleExpressionValueInspector (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_3","title":"Properties","text":"<ul> <li> <p>onlyLast</p> </li> <li> <p>showOnTop</p> </li> <li> <p>showOnConsole</p> </li> <li> <p>optionalLabel</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#somevalexpr-node-url","title":"SomeValExpr (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references_2","title":"References","text":"<ul> <li>someQuery</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#specificerrortype-error-node-url","title":"SpecificErrorType (error[, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_37","title":"Children","text":"<ul> <li>error</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#successexpression-success-node-url","title":"SuccessExpression (success, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_38","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#successtype-success-node-url","title":"SuccessType (success, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_39","title":"Children","text":"<ul> <li>baseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#successvalueexpr-node-url","title":"SuccessValueExpr (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references_3","title":"References","text":"<ul> <li>try</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#thisexpression-this-node-url","title":"ThisExpression (this, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#tracerexpression-node-url","title":"TracerExpression (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_4","title":"Properties","text":"<ul> <li>traceLabel</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_40","title":"Children","text":"<ul> <li>traced</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#references_4","title":"References","text":"<ul> <li>target</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tryerrorclause-error-node-url","title":"TryErrorClause (error, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_41","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>errorLiteral</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tryexpression-try-node-url","title":"TryExpression (try, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_5","title":"Properties","text":"<ul> <li>complete</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_42","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>successClause</p> </li> <li> <p>errorClauses</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#trysuccessclause-node-url","title":"TrySuccessClause (=&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_43","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tupleaccessexpr-node-url","title":"TupleAccessExpr (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_6","title":"Properties","text":"<ul> <li>index</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_44","title":"Children","text":"<ul> <li>tuple</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tupletype-node-url","title":"TupleType ([, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_45","title":"Children","text":"<ul> <li>elementTypes</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tuplevalue-node-url","title":"TupleValue ([, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_46","title":"Children","text":"<ul> <li>values</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#type-abstract-node-url","title":"Type (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#unaryexpression-abstract-node-url","title":"UnaryExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_47","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#unaryminusexpression-node-url","title":"UnaryMinusExpression (-, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#validitytype-validity-node-url","title":"ValidityType (validity, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#voidtype-void-node-url","title":"VoidType (void, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/","title":"org.iets3.core.expr.collections","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#included-languages","title":"Included Languages","text":"<ul> <li>com.mbeddr.mpsutil.grammarcells</li> <li>jetbrains.mps.baseLanguage</li> <li>jetbrains.mps.baseLanguage.closures</li> <li>jetbrains.mps.baseLanguage.collections</li> <li>jetbrains.mps.baseLanguage.javadoc</li> <li>jetbrains.mps.baseLanguage.logging</li> <li>jetbrains.mps.baseLanguage.tuples</li> <li>jetbrains.mps.baseLanguageInternal</li> <li>jetbrains.mps.lang.actions</li> <li>jetbrains.mps.lang.behavior</li> <li>jetbrains.mps.lang.constraints</li> <li>jetbrains.mps.lang.constraints.msg.specification</li> <li>jetbrains.mps.lang.constraints.rules</li> <li>jetbrains.mps.lang.constraints.rules.kinds</li> <li>jetbrains.mps.lang.constraints.rules.skeleton</li> <li>jetbrains.mps.lang.context</li> <li>jetbrains.mps.lang.context.defs</li> <li>jetbrains.mps.lang.core</li> <li>jetbrains.mps.lang.dataFlow</li> <li>jetbrains.mps.lang.descriptor</li> <li>jetbrains.mps.lang.editor</li> <li>jetbrains.mps.lang.findUsages</li> <li>jetbrains.mps.lang.generator</li> <li>jetbrains.mps.lang.generator.generationContext</li> <li>jetbrains.mps.lang.intentions</li> <li>jetbrains.mps.lang.migration</li> <li>jetbrains.mps.lang.pattern</li> <li>jetbrains.mps.lang.quotation</li> <li>jetbrains.mps.lang.refactoring</li> <li>jetbrains.mps.lang.resources</li> <li>jetbrains.mps.lang.rulesAndMessages</li> <li>jetbrains.mps.lang.scopes</li> <li>jetbrains.mps.lang.script</li> <li>jetbrains.mps.lang.sharedConcepts</li> <li>jetbrains.mps.lang.smodel</li> <li>jetbrains.mps.lang.structure</li> <li>jetbrains.mps.lang.text</li> <li>jetbrains.mps.lang.textGen</li> <li>jetbrains.mps.lang.typesystem</li> <li>org.iets3.core.expr.lambda</li> <li>org.iets3.core.expr.simpleTypes</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#defined-concepts","title":"Defined Concepts","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#abstractstringlistjoiner-abstract-node-url","title":"AbstractStringListJoiner (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#allop-all-node-url","title":"AllOp (all, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#allwithindexop-all_with_index-node-url","title":"AllWithIndexOp (all_with_index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#anyop-any-node-url","title":"AnyOp (any, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#anywithindexop-any_with_index-node-url","title":"AnyWithIndexOp (any_with_index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#asimmutablelistop-tolist-node-url","title":"AsImmutableListOp (toList, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#asimmutablesetop-toset-node-url","title":"AsImmutableSetOp (toSet, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#asmapop-tomap-node-url","title":"AsMapOp (toMap, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#assingletonlist-tolist-node-url","title":"AsSingletonList (toList, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#atop-at-node-url","title":"AtOp (at, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#bracketop-node-url","title":"BracketOp (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children","title":"Children","text":"<ul> <li>index</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#collectionsizespec-node-url","title":"CollectionSizeSpec (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#properties","title":"Properties","text":"<ul> <li> <p>min</p> </li> <li> <p>max</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#collectiontype-collection-node-url","title":"CollectionType (collection, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_1","title":"Children","text":"<ul> <li> <p>sizeConstraint</p> </li> <li> <p>baseType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#containsop-contains-node-url","title":"ContainsOp (contains, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#distinctop-distinct-node-url","title":"DistinctOp (distinct, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#elementtypeconstraintmap-node-url","title":"ElementTypeConstraintMap (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_2","title":"Children","text":"<ul> <li> <p>typeConstraint1</p> </li> <li> <p>typeConstraint2</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#elementtypeconstraintsingle-node-url","title":"ElementTypeConstraintSingle (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_3","title":"Children","text":"<ul> <li>typeConstraint</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#findfirstop-findfirst-node-url","title":"FindFirstOp (findFirst, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#firstnop-firstn-node-url","title":"FirstNOp (firstN, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#firstop-first-node-url","title":"FirstOp (first, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#flattenop-flatten-node-url","title":"FlattenOp (flatten, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#foldleftop-foldleft-node-url","title":"FoldLeftOp (foldLeft, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#foldop-abstract-node-url","title":"FoldOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_4","title":"Children","text":"<ul> <li> <p>seed</p> </li> <li> <p>combiner</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#foreachop-foreach-node-url","title":"ForeachOp (foreach, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#icollectionop-abstract-node-url","title":"ICollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#icontexttypedcollop-abstract-node-url","title":"IContextTypedCollOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#ielementtyped-abstract-node-url","title":"IElementTyped (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#ilistoneargop-abstract-node-url","title":"IListOneArgOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_5","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#imaponeargop-abstract-node-url","title":"IMapOneArgOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_6","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#iorderedcollection-abstract-node-url","title":"IOrderedCollection (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#iorderedcollectionop-abstract-node-url","title":"IOrderedCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#iprovideindex-abstract-node-url","title":"IProvideIndex (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#isetoneargop-abstract-node-url","title":"ISetOneArgOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_7","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#indexexpr-index-node-url","title":"IndexExpr (index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#indexofop-indexof-node-url","title":"IndexOfOp (indexOf, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#isemptyop-isempty-node-url","title":"IsEmptyOp (isEmpty, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#isnotemptyop-isnotempty-node-url","title":"IsNotEmptyOp (isNotEmpty, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#keyvaluepair-node-url","title":"KeyValuePair (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_8","title":"Children","text":"<ul> <li> <p>key</p> </li> <li> <p>val</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#lastnop-lastn-node-url","title":"LastNOp (lastN, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#lastop-last-node-url","title":"LastOp (last, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listinsertop-insert-node-url","title":"ListInsertOp (insert, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_9","title":"Children","text":"<ul> <li> <p>index</p> </li> <li> <p>arg</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#listliteral-list-node-url","title":"ListLiteral (list, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_10","title":"Children","text":"<ul> <li> <p>typeConstraint</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#listpickop-pick-node-url","title":"ListPickOp (pick, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_11","title":"Children","text":"<ul> <li>selectorList</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#listtype-list-node-url","title":"ListType (list, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listwithallop-withall-node-url","title":"ListWithAllOp (withAll, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listwithop-with-node-url","title":"ListWithOp (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listwithoutop-without-node-url","title":"ListWithoutOp (without, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapcontainskeyop-containskey-node-url","title":"MapContainsKeyOp (containsKey, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapkeysop-keys-node-url","title":"MapKeysOp (keys, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapliketype-maplike-abstract-node-url","title":"MapLikeType (mapLike, abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_12","title":"Children","text":"<ul> <li> <p>keyType_DEPRECATED</p> </li> <li> <p>valueType_DEPRECATED</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#mapliteral-map-node-url","title":"MapLiteral (map, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_13","title":"Children","text":"<ul> <li> <p>typeConstraint</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#mapop-map-node-url","title":"MapOp (map, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapsizeop-size-node-url","title":"MapSizeOp (size, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#maptype-map-node-url","title":"MapType (map, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_14","title":"Children","text":"<ul> <li> <p>keyType</p> </li> <li> <p>valueType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#mapvaluesop-values-node-url","title":"MapValuesOp (values, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapwithop-with-node-url","title":"MapWithOp (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapwithoutop-without-node-url","title":"MapWithoutOp (without, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#maxop-max-node-url","title":"MaxOp (max, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#minop-min-node-url","title":"MinOp (min, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#noargcollectionop-abstract-node-url","title":"NoArgCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#oneargcollectionop-abstract-node-url","title":"OneArgCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_15","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#oneargpredicatecollectionop-abstract-node-url","title":"OneArgPredicateCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#onecollbasetypedargcollectionop-abstract-node-url","title":"OneCollBaseTypedArgCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#reverseop-reverse-node-url","title":"ReverseOp (reverse, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setdiffop-diff-node-url","title":"SetDiffOp (diff, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setliteral-set-node-url","title":"SetLiteral (set, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_16","title":"Children","text":"<ul> <li> <p>typeConstraint</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#settype-set-node-url","title":"SetType (set, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setunionop-union-node-url","title":"SetUnionOp (union, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setwithop-with-node-url","title":"SetWithOp (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setwithoutop-without-node-url","title":"SetWithoutOp (without, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#simplesortop-sort-node-url","title":"SimpleSortOp (sort, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#properties_1","title":"Properties","text":"<ul> <li>order</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#sizeop-size-node-url","title":"SizeOp (size, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#stringjoinop-join-node-url","title":"StringJoinOp (join, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#stringterminateop-terminate-node-url","title":"StringTerminateOp (terminate, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#sumop-sum-node-url","title":"SumOp (sum, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#tailop-tail-node-url","title":"TailOp (tail, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#twoargpredicatecollectionop-abstract-node-url","title":"TwoArgPredicateCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#unpackoptionsop-unpackoptions-node-url","title":"UnpackOptionsOp (unpackOptions, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#uptotarget-upto-node-url","title":"UpToTarget (upto, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_17","title":"Children","text":"<ul> <li>max</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#whereop-where-node-url","title":"WhereOp (where, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/","title":"org.iets3.core.expr.toplevel","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#included-languages","title":"Included Languages","text":"<ul> <li>com.mbeddr.mpsutil.contextactions</li> <li>com.mbeddr.mpsutil.editor.querylist</li> <li>com.mbeddr.mpsutil.grammarcells</li> <li>com.mbeddr.mpsutil.intentions</li> <li>com.mbeddr.mpsutil.modellisteners</li> <li>de.itemis.mps.editor.celllayout</li> <li>de.itemis.mps.editor.collapsible</li> <li>jetbrains.mps.baseLanguage</li> <li>jetbrains.mps.baseLanguage.checkedDots</li> <li>jetbrains.mps.baseLanguage.closures</li> <li>jetbrains.mps.baseLanguage.collections</li> <li>jetbrains.mps.baseLanguage.javadoc</li> <li>jetbrains.mps.baseLanguage.lightweightdsl</li> <li>jetbrains.mps.baseLanguage.logging</li> <li>jetbrains.mps.baseLanguage.tuples</li> <li>jetbrains.mps.baseLanguageInternal</li> <li>jetbrains.mps.lang.actions</li> <li>jetbrains.mps.lang.aspect</li> <li>jetbrains.mps.lang.behavior</li> <li>jetbrains.mps.lang.constraints</li> <li>jetbrains.mps.lang.constraints.msg.specification</li> <li>jetbrains.mps.lang.constraints.rules</li> <li>jetbrains.mps.lang.constraints.rules.kinds</li> <li>jetbrains.mps.lang.constraints.rules.skeleton</li> <li>jetbrains.mps.lang.context</li> <li>jetbrains.mps.lang.context.defs</li> <li>jetbrains.mps.lang.core</li> <li>jetbrains.mps.lang.dataFlow</li> <li>jetbrains.mps.lang.descriptor</li> <li>jetbrains.mps.lang.editor</li> <li>jetbrains.mps.lang.extension</li> <li>jetbrains.mps.lang.findUsages</li> <li>jetbrains.mps.lang.generator</li> <li>jetbrains.mps.lang.generator.generationContext</li> <li>jetbrains.mps.lang.intentions</li> <li>jetbrains.mps.lang.migration</li> <li>jetbrains.mps.lang.pattern</li> <li>jetbrains.mps.lang.plugin</li> <li>jetbrains.mps.lang.quotation</li> <li>jetbrains.mps.lang.refactoring</li> <li>jetbrains.mps.lang.resources</li> <li>jetbrains.mps.lang.rulesAndMessages</li> <li>jetbrains.mps.lang.scopes</li> <li>jetbrains.mps.lang.script</li> <li>jetbrains.mps.lang.sharedConcepts</li> <li>jetbrains.mps.lang.smodel</li> <li>jetbrains.mps.lang.structure</li> <li>jetbrains.mps.lang.text</li> <li>jetbrains.mps.lang.textGen</li> <li>jetbrains.mps.lang.typesystem</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#defined-concepts","title":"Defined Concepts","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstractfunctionadapter-abstract-node-url","title":"AbstractFunctionAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children","title":"Children","text":"<ul> <li>fun</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstractfunctionlikeadapter-abstract-node-url","title":"AbstractFunctionLikeAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_1","title":"Children","text":"<ul> <li>functionLike</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstracttoplevelexpradapter-abstract-node-url","title":"AbstractToplevelExprAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_2","title":"Children","text":"<ul> <li>toplevelExprContent</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstracttypedeclaration-abstract-node-url","title":"AbstractTypeDeclaration (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#alllitlist-literals-node-url","title":"AllLitList (literals, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_3","title":"Children","text":"<ul> <li>enumType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#builderadapter-abstract-node-url","title":"BuilderAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#builderelement-abstract-node-url","title":"BuilderElement (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#builderexpression-build-node-url","title":"BuilderExpression (build, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_4","title":"Children","text":"<ul> <li> <p>adapted</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#constant-val-node-url","title":"Constant (val, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_5","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#constantref-node-url","title":"ConstantRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references","title":"References","text":"<ul> <li>constant</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#emptymember-node-url","title":"EmptyMember (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#emptytoplevelcontent-node-url","title":"EmptyToplevelContent (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumdeclaration-enum-node-url","title":"EnumDeclaration (enum, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#properties","title":"Properties","text":"<ul> <li>qualified</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_6","title":"Children","text":"<ul> <li> <p>type</p> </li> <li> <p>literals</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumindexop-index-node-url","title":"EnumIndexOp (index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumisinselector-node-url","title":"EnumIsInSelector (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_1","title":"References","text":"<ul> <li>literal</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumisintarget-isin-node-url","title":"EnumIsInTarget (isIn, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_7","title":"Children","text":"<ul> <li>selectors</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumistarget-is-node-url","title":"EnumIsTarget (is, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_2","title":"References","text":"<ul> <li>literal</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumliteral-node-url","title":"EnumLiteral (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_8","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumliteralref-node-url","title":"EnumLiteralRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_3","title":"References","text":"<ul> <li>literal</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumtype-node-url","title":"EnumType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_4","title":"References","text":"<ul> <li>enum</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumvalueaccessor-value-node-url","title":"EnumValueAccessor (value, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#extensionfunctioncall-node-url","title":"ExtensionFunctionCall (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_9","title":"Children","text":"<ul> <li>args</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_5","title":"References","text":"<ul> <li>extFun</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#fieldsetter-node-url","title":"FieldSetter (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_10","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_6","title":"References","text":"<ul> <li>field</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#funref-node-url","title":"FunRef (:, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#function-fun-node-url","title":"Function (fun, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#properties_1","title":"Properties","text":"<ul> <li>ext_old</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#functioncall-node-url","title":"FunctionCall (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#groupbyop-groupby-node-url","title":"GroupByOp (groupBy, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#groupkeytarget-key-node-url","title":"GroupKeyTarget (key, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#groupmemberstarget-members-node-url","title":"GroupMembersTarget (members, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#grouptype-group-node-url","title":"GroupType (group, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_11","title":"Children","text":"<ul> <li> <p>keyType</p> </li> <li> <p>memberType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#iconstantscopeprovider-abstract-node-url","title":"IConstantScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ideclarationextensioncontext-abstract-node-url","title":"IDeclarationExtensionContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ienumscopeprovider-abstract-node-url","title":"IEnumScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ifunctioncontainer-abstract-node-url","title":"IFunctionContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ifunctionlikecontainer-abstract-node-url","title":"IFunctionLikeContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ifunctionscopeprovider-abstract-node-url","title":"IFunctionScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecorddeclaration-abstract-node-url","title":"IRecordDeclaration (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_12","title":"Children","text":"<ul> <li>members</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordmember-abstract-node-url","title":"IRecordMember (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordmemberscopeprovider-abstract-node-url","title":"IRecordMemberScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordscopeprovider-abstract-node-url","title":"IRecordScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordtype-abstract-node-url","title":"IRecordType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itoplevelcontainer-abstract-node-url","title":"ITopLevelContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itoplevelexprcontent-abstract-node-url","title":"IToplevelExprContent (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itoplevelexprcontentcontainer-abstract-node-url","title":"IToplevelExprContentContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itypedefscopeprovider-abstract-node-url","title":"ITypedefScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#inlinerecordmemberaccess-node-url","title":"InlineRecordMemberAccess (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#inlinerecordtype-node-url","title":"InlineRecordType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_13","title":"Children","text":"<ul> <li>members</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#library-node-url","title":"Library (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_14","title":"Children","text":"<ul> <li> <p>contents</p> </li> <li> <p>imports</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#newvaluesetter-node-url","title":"NewValueSetter (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_15","title":"Children","text":"<ul> <li>newValue</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_7","title":"References","text":"<ul> <li>member</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#oldmemberref-node-url","title":"OldMemberRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_8","title":"References","text":"<ul> <li>member</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#oldvalueexpr-old-node-url","title":"OldValueExpr (old, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#projectit-it-node-url","title":"ProjectIt (it, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#projectmember-node-url","title":"ProjectMember (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_16","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#projectop-project-node-url","title":"ProjectOp (project, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_17","title":"Children","text":"<ul> <li>members</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#qualifierref-node-url","title":"QualifierRef (node url)","text":"<p>Auxiliary concept used only when creating EnumLiteralRefs to qualified enums (replaced by EnumLiteralRef when EnumLiteral is selected)</p>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_9","title":"References","text":"<ul> <li> <p>enum</p> </li> <li> <p>lit</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordchangetarget-with-node-url","title":"RecordChangeTarget (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_18","title":"Children","text":"<ul> <li>setters</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recorddeclaration-record-node-url","title":"RecordDeclaration (record, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_19","title":"Children","text":"<ul> <li> <p>members_old</p> </li> <li> <p>refFlag</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordliteral-node-url","title":"RecordLiteral (#, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_20","title":"Children","text":"<ul> <li>memberValues</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordmember-node-url","title":"RecordMember (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordmemberrefinconstraint-node-url","title":"RecordMemberRefInConstraint (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_10","title":"References","text":"<ul> <li>member</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordtype-node-url","title":"RecordType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_11","title":"References","text":"<ul> <li>record</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordtypeadapter-node-url","title":"RecordTypeAdapter (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_21","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#referenceableflag-referenceable-node-url","title":"ReferenceableFlag (referenceable, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_12","title":"References","text":"<ul> <li>idMember</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#sectionmarker-node-url","title":"SectionMarker (-----, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#properties_2","title":"Properties","text":"<ul> <li>label</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#typedef-type-node-url","title":"Typedef (type, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_22","title":"Children","text":"<ul> <li>originalType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#typedefcontractvalexpr-it-node-url","title":"TypedefContractValExpr (it, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#typedeftype-node-url","title":"TypedefType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_13","title":"References","text":"<ul> <li>typedef</li> </ul>"},{"location":"languages/","title":"Index","text":"<p>What's the major difference between the mbeddr library and the platform library that are shared in the repository? What is the relation to  MPS Extensions \u29c9? </p> <p>You have mbeddr itself in the repository, an integrated approach to embedded development where C programming, DSLs, domain-specific extensions to C, product line variability, requirements traceability, and model checking are supported directly. The reusable parts were grouped together as the mbeddr platform where most of the modules start with the prefix com.mbeddr.mpsutil (documentation \u29c9)</p> <p>A few of the better ones (especially the editor-related extensions) were moved to MPS-Extensions quite a few years ago (full extensions list). The mbeddr platform depends on MPS-Extensions. This page \u29c9 should help a bit to find the right platform based on the package name.</p> <p>Another notable subproject of the platform is com.mbeddr.doc together with com.mbeddr.doc.aspect for writing exportable documentation and showing documentation in MPS itself respectively. The (unfortunately) outdated documentation about the documentation language can be found here. Some Common interfaces and generic concepts of mbeddr like assessments or cycle detection are located in com.mbeddr.core.base (documentation \u29c9) which is part of the platform as well.</p> <p>Why are some of these languages not migrated to  MPS Extensions \u29c9?</p> <p>Some languages have dependencies that we must migrate to  MPS Extensions \u29c9. Other languages need to be more stable and vital so that we migrate them.</p>"},{"location":"languages/baselanguage/","title":"Base Language and Extensions","text":"","tags":["baselanguage"]},{"location":"languages/baselanguage/#base-language","title":"Base Language","text":"<p>jetbrains.mps.baselanguage</p> <p>Look at this ticket search \u29c9 for a complete list of Base Language bugs and feature requests.</p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#blog-posts","title":"Blog Posts","text":"<ul> <li>Get feedback from users with generic comments \u29c9 (Specific Languages' blog)</li> <li>Empty lines and comments \u29c9 (Specific Languages' blog)</li> </ul> <p>Paste as Java class doesn't work.</p> <p>You can't paste some newer Java features, such as the double colon operator(::). Loops with more than one variable also don't work.</p> <p>Set the Export flag at the moduleX import.</p> <p>You are using a class that extends another class located in another solution. That means that the export flag for the other solutions should be set in the current module so that there is automatically a dependency on this module. Dependencies: export flag contains some more information.</p> <p>What Java language features aren't supported in Base Language?</p> <p>The following features are not supported (yet):</p> <ul> <li>local classes \u29c9</li> <li>multiline strings/text blocks \u29c9</li> <li>records \u29c9</li> <li>sealed classes \u29c9</li> <li>pattern matching for switch statements \u29c9</li> <li>pattern matching for instanceof \u29c9</li> <li>double brace initialization \u29c9</li> </ul> <p>A function with Base Language code doesn't return anything when called.</p> <p>Base Language permits implicit returns. Methods automatically return the last statement. In some places, implicit returns aren't supported, such as when returning a new <code>ListScope</code> class. Make sure to add a return statement in those cases.</p> <p>What library does MPS use to parse Java code?</p> <p>It uses the parser of the Eclipse Java Development Tools (JDT). Eclipse JDT - Abstract Syntax Tree (AST) and the Java Model \u29c9 describes the AST.    </p> <p>How do you know if you've commented out a node? How can I comment out nodes programmatically?</p> <p>Use the class CommentUtil \u29c9. It has methods for commenting/uncommenting and checking if the node is commented out (<code>CommentUtil#isCommentedOut</code>).</p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#var-variable","title":"Var Variable","text":"<p>jetbrains.mps.baselanguage.varVariable</p> <p>This extension allows declaring local variables with the type automatically inferred from the initializer, which must not be empty. Example:</p> <pre><code>var value = (ISimple) {var input =&gt; return 1; }\nvar x=0c710\n</code></pre> <p>TextGen is not found for concept of X language.</p> <p>A wrong generator order of languages can be the issue. Example: The generators of language x execute first, and then the generator of the var variable of the same language is called. It should be the other way around. You can specify a custom generation plan to fix this issue.</p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#closures","title":"Closures","text":"<p>jetbrains.mps.baselanguage.closures</p> <p>Exception when passing closure literal as a parameter in a behavior method call</p> <p>You can use closures for functional interface types such as <code>java.util.Runnable</code> in behavior methods (see MPS-31866 \u29c9)</p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#collections","title":"Collections","text":"<p>How can you create a sequence with one element?</p> <p>Use the singleton constructor: <pre><code>new singleton&lt;string&gt;(\"single\")`\n</code></pre></p> <p>How do you convert from a Java ArrayList to a Base Language list?</p> <p>Use the copy constructor:  <pre><code>new arraylist&lt;string&gt;(copy: yourArrayList)`\n</code></pre></p> <p>How do you convert Base Language collections to Java streams?</p> <p>First, convert your collection to a list you downcast to a Java list. Then you can convert it into a stream <code>StreamSupport.stream(list/.spliterator(), false)</code></p> <p>Why doesn't yield work inside a select operation?</p> <p>Given I have this code: <code>myNode.items.select({~it =&gt; yield it.index})</code> When I run it, then I expect the result <code>[0,1,2,3,4]</code>, but unexpectedly, I get the same list of nodes as if I ran <code>myNode.items</code> What's happening?</p> <p><code>Yield</code> does not work with <code>.select({\u2026})</code>. It will do what you expected if you call <code>.selectMany({\u2026})</code> instead. That'll also clarify what happens if you <code>yield</code> multiple times during an iteration and that the control flow doesn't end when you're yielding.</p> <p><sub>contributed by: @abstraktor<sub> <p>How do you sort a collection of children?</p> <p>Given I have a node <code>myNode</code> with a child collection <code>myNode.children</code>. How do I sort them by their <code>toString()</code>? I tried <code>myNode.children/.sort(Ordering.lexical())</code>, but that doesn't do anything. Stepping revealed that it creates a copy of that list and sorts that one.</p> <p>Use the bold sort, call <code>toList</code> to materialize the result, and then <code>.clear</code> and <code>.addAll</code> it:</p> <pre><code>sequence&lt;T&gt; sorted = list.sort({~a,~b =&gt; ORDERING.compare(a, b); }, asc).toList;\nlist.clear;\nlist.addAll(sorted);\n</code></pre> <p><sub>contributed by: @abstraktor<sub>","tags":["baselanguage"]},{"location":"languages/baselanguage/#checked-dots","title":"Checked Dots","text":"<p>jetbrains.mps.baselanguage.checkeddots</p> <ul> <li>It voids <code>NullPointerException</code> when Java executes a method call on a null variable. For example, it won't throw a <code>NullPointerException</code>, if <code>myObject</code> is null.</li> <li>Bold methods or dot-expressions are null safe, for example, <code>new arraylist&lt;string&gt;()</code>.where<code>({~it =&gt; })</code></li> </ul>","tags":["baselanguage"]},{"location":"languages/baselanguage/#access-language","title":"Access Language","text":"<p>jetbrains.mps.lang.access</p> <ul> <li>Managing concurrent access | MPS \u29c9</li> </ul>","tags":["baselanguage"]},{"location":"languages/baselanguage/#transactional-property-cells","title":"Transactional Property Cells","text":"<p>jetbrains.mps.lang.editor.structure</p> <ul> <li>An intention can mark a regular property cell such as string, int, and boolean as transactional.</li> <li>MPS updates the editor when the cursor leaves the cell (= commit).</li> <li>Define the commit handler in the inspector. The benefit is that the editor doesn't permanently update after every keyboard event.</li> <li>For example, this cell can be helpful if you dynamically set your text color.</li> </ul>","tags":["baselanguage"]},{"location":"languages/baselanguage/#images","title":"Images","text":"<p>jetbrains.mps.lang.editor.figures</p> <ul> <li>Statically embed images into the editor.</li> </ul> <p> </p> example: image cell","tags":["baselanguage"]},{"location":"languages/baselanguage/#base-language-internal","title":"Base Language Internal","text":"<p>Specific Languages blog: Poor man's cross-model generation: baseLanguageInternal \u29c9</p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#sax-parser","title":"Sax Parser","text":"<p>jetbrains.mps.core.xml.sax</p> <p>You can use SAX \u29c9, also known as the Simple API for XML, for parsing XML documents. This language allows the creation of SAX parsers. The parser can take parameters and save data into variables. You start by specifying the root element and then at rules for XML tags.</p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#rules","title":"Rules","text":"<p>The rule can have an optional creator, which creates a Java object from the current element. They support a complete and compact view. You can then declare attributes (attr), and children who take can have an optional handler. It has two arguments: the result, which has the same type as the type of the rule, and the child, which is the parsed child object. The attribute can be mandatory, and the child can override the tag and supports conditional invocation. Use the default child block for children with any tags. Next, there can be a text handler that supports an optional handler that can process the text content of an XML element. At last, you can validate the element in the validate method, which should return a boolean value depending on if the validation succeeds or fails. You can also handle text through the global text handler text.  Example:</p> <pre><code>sax parser ModelReader8 { \n  parameters \n    interfaceOnly : boolean \n    ...\n  variables \n    model : DefaultSModel \n    ...\n\n  root model \n\n  rule model for tag model() -&gt; ModelLoadResult { \n    create()-&gt;ModelLoadResult throws SAXException { \n      model = new  DefaultSModel(PersistenceFacade.getInstance().createModelReference(modelUID), header); \n      hasSkippedNodes = false; \n      helper = new  ReadHelper(model.getReference()); \n      return new  ModelLoadResult((SModel) model, ModelLoadingState.NOT_LOADED); \n    } \n\n    required attr modelUID \n\n    ...\n\n    child with tag devkit =&gt; module_reference() \n      (result, child)-&gt;void throws SAXException { \n        model.addDevKit(child); \n      } \n\n    ...\n\n    validate(result)-&gt;boolean throws SAXException { \n      result.setState(hasSkippedNodes ? (interfaceOnly ? ModelLoadingState.INTERFACE_LOADED : ModelLoadingState.NO_IMPLEMENTATION) : ModelLoadingState.FULLY_LOADED); \n      return true; \n    } \n  } \n  ...\n\n  compact rule ignoredLink for tag link() -&gt; &lt;no type&gt; { \n    &lt;no creator&gt; \n    attr role \n    ...\n  } \n\n  global text handler &lt;no globalText&gt; \n}\n</code></pre> <p>Use InternalClassCreator \u29c9 from Base Language Internal to use the generated parser. Example:</p> <p><code>new [ XMLSAXHandler ] jetbrains.mps.smodel.persistence.def.v8.LineToContentMapReader8Handler (withPropertyValues, withAssociationTarget)</code></p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#property-references","title":"Property References","text":"<p>jetbrains.mps.lang.checkedName</p> <p>Use this language to reference properties. <code>property/&lt;node&gt;,&lt;role&gt;/</code>is the main expression that has the type <code>propRef&lt;&gt;</code>. To access the value, use <code>.value</code>. Example:  <pre><code>propRef&lt;string&gt; property = property/node/Class/ | name/;\n#print property.value;\n</code></pre> This expression is the node pendant for the <code>property/&lt;concept&gt;:&lt;name&gt;/</code> expression from <code>jetbrains.mps.lang.smodel</code> which takes a concept as an argument and returns an instance of class SProperty \u29c9.</p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#properties-file","title":"Properties File","text":"<p>jetbrains.mps.core.properties</p> <p>This language adds support for Java .properties \u29c9 files. The generator automatically escapes the keys and values when they contain special characters. The generated properties file has the encoding ISO-8859-1. Example: <pre><code>mps_home=/Applications/MPS.app \ndeploy.dir=./artifacts \n\n# locale \nencoding=utf-8 \nlocale=en_US\n</code></pre></p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#forms-checkbox","title":"Forms (Checkbox)","text":"<p>jetbrains.mps.lang.editor.forms</p> <p>This language adds support for checkboxes. Text-based checkboxes (text checkbox UI) and image checkboxes (platform checkbox UI) are available. You can style the text-based checkbox like any other constant text. The checkbox cell has an ui parameter which allows switching between both styles. A boolean property backs the state. The label specifies the visible text. The checkbox can be toggled by clicking and pressing space.</p> <p></p>","tags":["baselanguage"]},{"location":"languages/baselanguage/#image-generation-for-nodes","title":"Image Generation for Nodes","text":"<p>jetbrains.mps.lang.editor.imageGen</p> <p>The single concept ImageGenerator can generate an image for a node. It accepts a file name and a scale (1 is 100%) and needs a reference to a node. You must provide a node ID if you didn't set the reference. The facet GenerateImages \u29c9 generates the image. The facet executes after the generate facet. Execute the following code on the console to get the list of supported file formats: <pre><code>IIORegistry registry = IIORegistry.getDefaultInstance(); \nStringBuilder builder = new  StringBuilder(); \nIterator&lt;ImageWriterSpi&gt; serviceProviders = registry.getServiceProviders(ImageWriterSpi.class, false); \nwhile (serviceProviders.hasNext()) { \n  ImageWriterSpi next = serviceProviders.next(); \n  builder.append(String.format(\"description: %-27s   format names: %s%n\", next.getDescription(Locale.ENGLISH), Arrays.toString(next.getFormatNames()))); \n} \n#print builder.toString();\n</code></pre></p>","tags":["baselanguage"]},{"location":"languages/cell_layout/","title":"Cell Layout","text":"<p>This page is an addition to Cell Layout | MPS-extensions. Editor development \u29c9 explains some terminology of this page, so please read it first. Additionally, when the variable or argument doesn't have a type in a diagram, it is assumed to be int. Methods without a return type have a type of void.</p> <p>In the MPS layout algorithms, the children decide their width and height, and the parent cell can only arrange the already laid-out children. The algorithms from the cell layout language are similar to the ones from the Java Swing layout managers. The parent asks the child for its min/max/preferred size, but the parent decides about the child's size, and the child has to fit into these bounds. The table and diagram language uses this language, but the language de.itemis.mps.celllayout also defines some styles. The Java MigLayout \u29c9 was partially an inspiration for this language.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#box-model","title":"Box Model","text":"<p>The box model defines how you model the editor elements in the cell layout language. It is like a simplified version of the CSS box model \u29c9.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layout-box","title":"Layout Box","text":"<p>A layout box has a position (x,y) and a dimension (width, height). A Bounds \u29c9 object can save these properties together, which also has methods for checking if other bounds or points would fit into it.</p> <p></p> <p>Change the size with the growN methods and the position with the move methods. All of those methods take relative values. Add a listener to listen to changes in the mentioned properties. The default implementation is DefaultLayoutBox which extends AbstractlayoutBox \u29c9. Whenever you call a setter method, the corresponding method of the listener is triggered. The language calculates the ascent by subtracting the descent from the height.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layoutboxframe","title":"LayoutBoxFrame","text":"<p>A LayoutBoxFrame \u29c9 is a box that has a frame around an inner box:</p> <p></p> <p>Setting the frame size sets it for all sides (left, right, bottom, top).</p> <p></p> <p>AbstractLayoutBoxFrame \u29c9 extends this class. The position equals the inner box's position minus the frame size and the inner box's dimension plus the frame size. The default implementation is DefaultLayoutBoxFrame \u29c9. It contains a layout box with the frame size split into left, right, bottom, and top.</p> <p>CalcOnWriteFrame \u29c9 is a layout box frame that contains an inner and result layout box. The position and dimension are returned from the result box while the same setter methods set the properties of the inner box. When the inner box changes, the listener propagates those changes to the result box. When you modify the left/right/bottom or top size, the property of the result box changes by a delta.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#boxmodel","title":"BoxModel","text":"<p>A BoxModel \u29c9 consists of four boxes. The innermost box contains the content; the outermost box is the margin.</p> <p></p> <p>The default implementation is DefaultBoxModel which EditorCellBoxModel \u29c9 uses. </p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#editorcellboxmodel","title":"EditorCellBoxModel","text":"<p>The corresponding cell's user object stores this box model under the key EditorCellBoxModel. Besides the mentioned boxes, it has a box for additional padding and a bracket box  for when the cell has enabled the stylesheet item drawBrackets. The brackets have a width of 7 pixels. </p> <p></p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#synchronization","title":"Synchronization","text":"<p>The read synchronization method initializes the boxes based on the information from the editor cell. The padding equals the gap minus the additional padding. If the padding is negative, it acts as additional padding; otherwise, it is part of the padding box. If the dimension is less than the total frame size of the bracket box, the additional padding is set to 0. The dimension is the maximum of the current dimension and the total frame size of the bracket box. The default behavior of MPS is not to reserve any space for the border and let it overlap. Therefore, the position equals the border size minus 1. The write synchronization method sets the left and right gaps. They equal the padding plus the additional padding. Depending on the useMove flag, the cells are then moved, or only the position is set.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layout","title":"Layout","text":"<p>The immutable class Size \u29c9 has methods for supporting unlimited sizes, which are just large numbers that are larger than every practically used size. This approach reduces the potential for overflow errors. Use the limitedX for limiting either the width or height. The deriveN methods change the width or height separately.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#ilayouter","title":"ILayouter","text":"<p>ILayouter \u29c9 has a layout method and a method to move the children of a layoutable container by a delta.</p> <p></p> <p>All the size methods and the ascent calculation method take a container as the first parameter and a size constraint as a second parameter to restrict the returned size. toText() returns a string when copying the cells to the system clipboard. usesPunctuation() determines if you use punctuation stylesheet items. The class AbstractLayout \u29c9 extends this interface. It has a method for checking and returning the gap in pixels between two ILayoutables. There is no gap if the left ILayoutable has the stylesheet item punctuation-right or the right item punctuation-left enabled. If one of the two ILayoutables has a border on the conjoined side, there is also no gap.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#ilayoutable","title":"ILayoutable","text":"<p>ILayoutable \u29c9 inherits some methods of LayoutBox, and some of ILayouter. The main method <code>relayout</code> calculates an editor cell's new position and dimension. Additionally, the interface has methods for the special celllayout properties such as growX and column-span, and methods for checking and setting the changed flag.  In AbstractLayoutable, all those properties are set to false, and the column and row spans are set to 1 by default.</p> <p>The ILayoutableContainer \u29c9 inherits from ILayoutable and has a layouter and children:</p> <p></p> <p>There are innerX methods for getting the position and dimension, as well as a method for setting the inner bounds. There is also support for the flatten-grid and base-line-child properties.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#grid","title":"Grid","text":"<p>A Grid is a 2D structure with GridElement \u29c9s and has a dimension. Internally a 1D array is used to store the elements.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#extending-and-scaling","title":"Extending and Scaling","text":"<p>Each row has an ascent and descent, and all columns can have different widths. The column's width is extendable. It stays the same if the new with is smaller than the existing width. It can also extend to an unlimited size. The row's height is extendable by providing a new ascent and descent. The sum of both values has to be greater than zero. When the old values are greater, nothing changes. The contained cells of the grid are extendable by providing a size getter that determines a new size for each ILayoutable.</p> <p>The widths are scaleable by providing new values and weights for the columns. The widths of the columns are percentages of the new width based on the weights (possible rounding errors are compensated). The same scaling method exists for the height: it works the same way, except that the ascents and descents of the rows are recalculated. The provided weights don't have to add up to 1 as they are automatically normalized. Example calculation<pre><code>float availableWidth=500;\nfloat newColumnWidths=[2,2,1];\n// calculation:\nfloat[] weighths= [0.4,0.4,0.2];\nfloat[] newColumnSizes=[200,200,100];\n</code></pre></p> <p>The method applyLayout(x, y) takes a position as an argument and sets new bounds for the individual valid elements of the grid. An element is valid when it has a ILayoutable. <pre><code>float element.baseLine = y + element.y + ascent(row[y]);\nfloat element.x = x + element.x;\nfloat element.y = element.baseLine - element.ascent;\n</code></pre></p> <p>When you set the alignment center or alignment right property is set, the x position is changed accordingly based on the remaining space. The position is equal to the size of the elements minus the result size, which is calculated in the following way: the minimum size of the elements and the preferred size is calculated, then the minimum of this size and the maximum size. If the overflowN property is set, the corresponding size direction will be set to unlimited.</p> <p>The main method of the grid is growElement which takes a grid element, an offset, and the two directions as arguments. If the elements' dimension is lower than the maximum size of the ILayoutable, the ILayoutable's dimension becomes the element's dimension. Otherwise, the additional padding of the layout's box model grows the element. For horizontal growing, the alignment is taken into account.</p> <p>A GridElement \u29c9 has a ILayoutable and different extendN methods: extendSize works by changing the ascent of the ILayoutable. The descent equals the height minus the ascent. There are other methods for extending the width and extending the columns.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#standard-layouts","title":"Standard Layouts","text":"<p>The language provides default implementations for the standard MPS layouts:</p> <ul> <li>HorizontalLayout \u29c9 (grid with 1 row)</li> <li>VerticalLayout \u29c9 (grid with 1 column)</li> <li>IndentLayout \u29c9 (layout based on lines that consist of words)</li> <li>ICellLayoutWrapper \u29c9</li> </ul> <p>ICellLayoutWrapper can wrap an existing cell layout. Unwrap it by calling CellLayout.unwrapAll. IEditorCellBasedLayoutable \u29c9 extends ILayoutable and contains an editor cell, a method to check if an indent is present, and a <code>readSyncAll</code> and <code>writeSyncAll</code> method. ISupportsTopDownLayout \u29c9 is an editor cell that has a top-down layoutable (IEditorCellBasedLayoutable).</p> <ul> <li>GridLayout \u29c9</li> </ul> <p>This class uses the class DynamicGrid \u29c9 to store the grid. DynamidGrid stores the elements in a 1D array and automatically grows the array when the grid size changes. This layout respects the grid and row span properties and automatically adjusts the spans when the value is negative. The new values become the maximum number of available spans. It also has a method to load a sub-grid into a DynamicGrid. The grid elements come from an ILayoutableContainer \u29c9.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#flattening","title":"Flattening","text":"<p>An ILayoutable is intermediate if</p> <ul> <li>it has a horizontal layout, and the parent is a grid layout</li> <li>it has a grid layout, horizontal or vertical layout, and you've set the flatten-grid stylesheet item.</li> </ul> <p>This method plays a role in the flattening of the grid. When using this item, all ancestor elements of the grid that have this property enabled are placed directly in the main grid and are not sub-grids. In the following example, all children enable this property:</p> <p></p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#runtime","title":"Runtime","text":"","tags":["mps_extensions"]},{"location":"languages/cell_layout/#cells","title":"Cells","text":"<p>The EditorListenerCellProvider class has a reference to a node and creates a new EditorListenerCell \u29c9. This class can forward two events of the editor to the provider: onEditorloaded and onEditorUnloaded. This cell is not visible in the editor.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#abstractlayoutableadapter","title":"AbstractLayoutableAdapter","text":"<p>AbstractLayoutableAdapter \u29c9 has a parent LayoutableCollectionAdapter and handles reading all cell layout-specific stylesheet items (readSyncAll). All items are cached. The writing of the items (writeSyncAll) is forwarded to the box model. It also contains an editor cell box model. All setter and getter work with the margin box of this box model. The only special implementations are the size methods: the preferred size is the size of the box model's margin box. The maximum and minimum sizes are equivalent to the preferred size.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#borderpainter","title":"BorderPainter","text":"<p>BorderPainter is an AbstractAdditionalPainter \u29c9 that gets the information from the border box of the editor cell's box model. There is support for border thickness and color for each side of the box. The editor paints the border only when the specified rectangular area intersects with the current clipping area of the graphics object. The border's position and dimension get changed because there is one pixel less reserved than required for the border. Paint requests are added to a queue which is then processed in order of thickness and brightness (light gray is the default color and has the  lowest priority). In the following example, the painter was enabled for all editor cells:</p> <p></p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layoutableadapter","title":"LayoutableAdapter","text":"<p>LayoutableAdapter extends AbstractLayoutableAdapter \u29c9.</p> <p>It forwards writeSync to the box model and calls relayout on the cell if a relayout was requested. In the method readSync, relayout is requested if you've set one of the growN properties. Then the relayout method is called.</p> <p></p> <p>When the expected bounds are not equal to the actual bounds, a relayout is requested, or the cell is marked as changed, the cell is relaid out again. The size method takes a width and height, calculates the delta for the old dimension compared to the new dimension, and assigns it to the additional padding box of the box model. The horizontal alignment is also taken into account.</p> <p>The preferred and minimum sizes are equal to the dimension of the box model's padding minus the additional padding. The maximum size is equal to the preferred size unless the cell is an Editor_Label \u29c9 or you've set one of the grow stylesheet items: in those cases, the width or the height, or both can be unlimited.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layoutableadapters","title":"LayoutableAdapters","text":"<p>The LayoutableAdapters \u29c9 class manages adapters. In the method createAdapter, it returns the TopDownLayoutable for editor cells that support laying out in a top-down manner, creates a LayoutableCollectionAdapter for the layouter of the cell and the cell itself, or creates a new LayoutableAdapter for the cell instead. The method getAdapter calls this method if there is no existing adapter or receives it from the user object of the cell with the key LayoutableAdapter.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layoutablecollectionadapter","title":"LayoutableCollectionAdapter","text":"<p>LayoutableCollectionAdapter \u29c9 is a layout adapter for collections that supports the pushN stylesheet items and grid-layout-flatten. It caches the calculated inner sizes and ascents and also has a method to return a list of children of type ILayoutable.</p> <p>The <code>relayout</code> method calculates the layout bounds based on a size constraint and the current position. If the position or dimension has changed in compared to the last calculation</p> <ul> <li><code>relayout</code> is called if the size has changed.</li> <li><code>moveChildren</code> is called when the position has changed.</li> </ul> <p>When one of those two events has occurred but no layouter is present, relayout is called. The getLayouter method returns a suitable ILayouter based on the existing layout, for example, HorizontalLayout for CellLayout_Horizontal. If the cell or any of its superclasses overwrites the method relayoutImpl, null is returned.</p> <p>The inner position and dimension methods are based on the box model's content box. The total gap is the content's position minus the margin's position. To switch between the outer and inner sizes, use the the methods toInnerSize and toOuterSize.  The ascent equals the children's ascent plus the total gap at the top. When the different sizes, like maximum, minimum, and preferred size, are calculated, the values are first looked up in the cache. If no value can be found, the sizes are guessed from the cached values: if the size was already smaller for a more strict constraint, that value is used. If there is still no value returned, the value is calculated.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layoutengine","title":"LayoutEngine","text":"<p>LayoutEngine \u29c9 is the main entry point for laying out editor components, the root cell, single cells, or a subtree of a cell.  layoutSubtree requires the cell itself and a function that sets the bounds of the ILayoutable. For a normal cell, the size is calculated as the desired dimension constraint by the minimum and maximum size of the ILayoutable. For the root cell, the calculation is different: The preferred width is the x position of the cell minus the text width settings of the editor + the hardcoded 15-pixel left margin or the unlimited width if it is bigger. The preferred width of the root layoutable constraint then calculates the preferred size.</p> <p><code>layoutSubtreeUnsafe</code> reads all the necessary information from the processed cell, preprocesses the layoutables (e.g., setting margin and padding), lays out the cell again, sets all margins, and writes back the calculated result to the editor cell. Ultimately, the position and dimensions are fixed for editor cell collections based on the overflow stylesheet items, and the request layout flags set in previous steps are cleared. All those methods are invoked inside a watchdog that stops the layout process after a certain time if no stable layout can be found.</p>","tags":["mps_extensions"]},{"location":"languages/cell_layout/#layoutinterceptor","title":"LayoutInterceptor","text":"<p>LayoutInterceptor \u29c9 replaces the cell layout of cells that use stylesheet items of the cell layout language with a custom layout from this language. The interceptor is installed in the project plugin \u29c9 through different methods: as an editor update listener, an additional painter, and an editor component creation listener.</p>","tags":["mps_extensions"]},{"location":"languages/double_dispatch/","title":"Double Dispatch","text":"<p>This article explains the language jetbrains.mps.baselanguage.doubleDispatch. The used example comes from this article \u29c9:</p> <p>Most OOP programming languages support single dispatch, commonly known as virtual methods. For example, consider the following code:</p> Single dispatch<pre><code>public class SpaceShip {\n    public string GetShipType() {\n        return \"SpaceShip\";\n    }\n}\n\npublic class ApolloSpacecraft extends SpaceShip {\n    public string GetShipType() {\n        return \"ApolloSpacecraft\";\n    }\n}\n\nSpaceShip ship = new ApolloSpacecraft();\nSystem.out.println(ship.GetShipType()); // output: (1)\n</code></pre> <ol> <li>ApolloSpacecraft</li> </ol> <p>The actual method implementation, which the interpreter should call, is chosen at runtime based solely on the actual type of ship. The interpreter only uses the type of a single object to select the method, hence the name single dispatch.</p> <p>Note: Single dispatch is one form of dynamic dispatch. For example, the interpreter chooses the method at runtime. If the compiler decides the method at compile time (valid for all non-virtual methods), it's called static dispatch.</p> <p>Now add some asteroids:</p> Double dispatch<pre><code>public class Asteroid {\n    public void collideWith(SpaceShip s) {\n    System.out.println(\"Asteroid hit a SpaceShip\");\n    }\n\n    public void collideWith(ApolloSpacecraft a) {\n    System.out.println(\"Asteroid hit an ApolloSpacecraft\");\n    }\n}\n\npublic class ExplodingAsteroid extends Asteroid {\n    public void collideWith(SpaceShip s) {\n    System.out.println(\"ExplodingAsteroid hit a SpaceShip\");\n}\n\npublic void collideWith(ApolloSpacecraft a) {\n    System.out.println(\"ExplodingAsteroid hit an ApolloSpacecraft\");\n    }\n}\n\npublic class DoubleDispatch {\n\n    public static void main(string[] args) {\n    Asteroid theAsteroid = new Asteroid();\n    SpaceShip theSpaceShip = new SpaceShip();\n    ApolloSpacecraft theApolloSpacecraft = new ApolloSpacecraft();\n\n    theAsteroid.collideWith(theSpaceShip); // output: (1) \n    theAsteroid.collideWith(theApolloSpacecraft); // output: (2)\n\n    System.out.println(); \n\n    ExplodingAsteroid theExplodingAsteroid = new ExplodingAsteroid(); \n    theExplodingAsteroid.collideWith(theSpaceShip); // output: (3)\n\n    theExplodingAsteroid.collideWith(theApolloSpacecraft); // output: (4)\n\n    System.out.println(); \n\n    Asteroid theAsteroidReference = theExplodingAsteroid; \n    theAsteroidReference.collideWith(theSpaceShip); // output: (5)\n    theAsteroidReference.collideWith(theApolloSpacecraft); // output: (6)\n\n    System.out.println(); \n\n    // Note the different data types  \n    SpaceShip theSpaceShipReference = theApolloSpacecraft; \n    theAsteroid.collideWith(theSpaceShipReference); // output: (7)\n    theAsteroidReference.collideWith(theSpaceShipReference); // output: (8)\n    }\n}\n</code></pre> <ol> <li>Asteroid hit a SpaceShip</li> <li>Asteroid hit an ApolloSpacecraft</li> <li>Exploding Asteroid hit a SpaceShip</li> <li>Exploding Asteroid hit anApolloSpacecraft</li> <li>Exploding Asteroid hit a SpaceShip</li> <li>Exploding Asteroid hit an ApolloSpacecraft</li> <li>Asteroid hit an ApolloSpacecraft</li> <li>ExplodingAsteroid hit a SpaceShip</li> </ol> <p>The desired result here would be ExplodingAsteroid hit an ApolloSpacecraft, but instead, you get ExplodingAsteroid hit a SpaceShip. To support double dispatch, import the dispatch language and include dispatch modifiers in ExplodingAsteroid:</p> <pre><code>public class ExplodingAsteroid extends Asteroid {\n    public dispatch void collideWith(SpaceShip s) {\n    System.out.println(\"ExplodingAsteroid hit a SpaceShip\");\n    }\n\n    public dispatch void collideWith(ApolloSpacecraft a) {\n    System.out.println(\"ExplodingAsteroid hit an ApolloSpacecrat\");\n    }\n}\n</code></pre> <p>The last method now correctly returns ExplodingAsteroid hit an ApolloSpacecraft.</p>","tags":["baselanguage"]},{"location":"languages/mps_extensions/","title":"General","text":"<p>GitHub \u29c9 contains the official documentation.</p>","tags":["mps_extensions"]},{"location":"languages/mps_extensions/#richtext","title":"Richtext","text":"<p>slisson.richtext</p> <p>This language provides an extendable multi-line text block (e.g., for images). The mbeddr doc language uses it for generating XHTML, Latex, and markdown.</p> <p>The ordering of text and IWords can't be arbitrary,</p> <p>A checking rule enforces that the text is normalized: There has to be at least one child, it must start with a <code>Word</code>, a <code>Word</code> must always be between two embedded nodes, and there are no two consecutive Words.</p>","tags":["mps_extensions"]},{"location":"languages/mps_extensions/#diagram","title":"Diagram","text":"<p>de.itemis.mps.editor.diagram</p> <p>What Java libraries are used by the diagram language?</p> <p>For the graphs itself, it uses JGraphX.Eclipse Layout Kernel (ELK) \u29c9 layouts the diagram.</p> <p>I encountered a bug.</p> <p>Check the meta Issue \u29c9 on GitHub.</p> <p>How do you use this language?</p> <p>Have a look at the samples of this language in  MPS Extensions. There is also an external tutorial series \u29c9.</p> <p>What's the edge ID in the diagrams used for?</p> <p>It\u2019s used in the map that contains the layout data. It can be any unique string. LayoutMapEntry.key is the property where this string is used (source \u29c9).</p>","tags":["mps_extensions"]},{"location":"languages/mps_extensions/#tables","title":"Tables","text":"<p>de.slisson.mps.tables</p> <p>Use slisson-tables instead of mps-tables because the language is more flexible (and not deprecated). The language displays content in a tabular format. The table can be hard-coded or contain complex queries/dynamic content. You must add new cells and rows in the editor (they can be read-only). They include the following features:</p> <ul> <li>table cell queries</li> <li>partial tables</li> <li>grid queries</li> </ul> <p>Tabular projections in Jetbrains MPS: Let's start building an accounting system \u29c9 (Strumenta's blog)</p> How do you get rid of the small little extra grid lines on the outside of the table rows? (original question \u29c9) <p>Change these properties to true. </p> <p></p> <p>How can I improve my tables?</p> <ul> <li>even-odd coloring of rows</li> <li>coloring of columns and row headers</li> <li>group columns by color</li> <li>multi-column headers</li> <li>annotations for cells</li> <li>pagination + other UI buttons</li> </ul>","tags":["mps_extensions"]},{"location":"languages/mps_extensions/#grammar-cells","title":"Grammar Cells","text":"<p>de.itemis.mps.grammarcells</p> <p>Grammar cells need a dummy component. Is this necessary?</p> <p>Yes, it is. Otherwise, the generator doesn't get used (source \u29c9).</p> <p>What combinations of cells aren't supported?</p> <p>The following combinations are not allowed:</p> <ul> <li>optional and constant</li> <li>optional and reference</li> </ul> <p>How can you enter enumerations easier?</p> <p>Entering enumerations easier with grammar cells \u29c9 (Specific Languages' blog)</p> <p>How can I use the transformation language together with this language?</p> <p>Do hide the substitute menu for a concept, create an empty substitute menu for it. When you want to add entries the traditional way through substitute menus, you have to use substitute menu contribution \u29c9 to not overwrite the automatically generated entries by the Grammar cells language.</p>","tags":["mps_extensions"]},{"location":"languages/mps_extensions/#querylist","title":"Querylist","text":"<p>com.mbeddr.mpsutil.editor.querylist</p> <p>You can use nodes in the editor which aren't directly available in the current context. The language is more  powerful than (read-only) model access (displays a string). You can have editor cells with actions and all other regular cell features. queryListNode \u29c9 allows accessing the surrounding context node in the editor definition (otherwise unavailable).</p> <p>How do I fold collections returned by a query list?</p> <p>Surround the query list with a vertical collection and set the cell layout of the query list (not its content) to vertical.</p> How do I make cells in query lists navigatable? <p>I'm creating a list of navigatable cells via a query list from mpsutil.</p> <p>The query lists query collects some nodes from my model, and I'd like to make it so that each cell produced with this query list navigates to its respective node.</p> <p>Using the navigatable-node style attribute (returning <code>node</code>, the node from the query) ) on these cells doesn't work, though - ctrl+clicking them doesn't do anything.</p> <p>How can I make the cells in a query list navigatable to that node?</p> <p>The <code>navigatable-node</code> style attribute won't allow you to point directly to the node from the query list's query.  Instead, you can use the hyperlink-node style attribute (also from mpsutil) to make the navigation work    and the <code>hyperlink-style</code> attribute to make it look like a regular reference:</p> <p> </p> <p>A common workaround to get similar behavior with navigatable-node is to point it to a child or parent of the desired node instead of that node itself.</p> <p><sub>contributed by: @jonaskraemer<sub> How Do I make sure that the elements are also read-only in the Inspector? <p>I have a concept A which has children b of concept B. Another concept C references A. C uses a querylist in the editor to show the list b of children.  As C does not own the list b (A owns it) we aim to restrict access to 'read-only'. We are setting the 'read-only' style on the query-list. This ensures that the list b cannot be changed. But if the concept B has a property, which is editable in the inspector, then this apporoach does not work. We can still edit the property, even if the concept instances of B are displayed via a query-list.  To achieve this you have to setup a 'read-only' style in the inspector editor for B with a query: </p> <p></p> <p>This code snippet finds the main editor of C where the query-list is. Then it looks for the simple true/false 'read-only' style set on the query-list.</p> <p><sub>contributed by: @dbinkele<sub>","tags":["mps_extensions"]},{"location":"languages/mps_extensions/#tooltips","title":"Tooltips","text":"<p>de.itemis.mps.tooltips.structure</p> <p>This language is deprecated. Use the language jetbrains.mps.lang.editor.tooltips instead. It provides tooltips on hover. You have to define a regular editor and a hover editor.</p>","tags":["mps_extensions"]},{"location":"languages/kernelf/kernelf/","title":"KernelF Introduction","text":"<p>Please start with the readme file of the iets3.opensource \u29c9 repository. The primary documentation is the book DESIGN, EVOLUTION, AND USE of KernelF by Markus Voelter. There's also a short reference \u29c9 with only 27 pages.</p>","tags":["iets3"]},{"location":"languages/kernelf/kernelf/#language-implementations","title":"Language Implementations","text":"<ul> <li>Unpacking Options Values: A Case Study in Language Design \u29c9</li> <li>The Evolution of Decision Tables \u29c9</li> </ul> <p>Multi-Party boolean decision table:</p> <ul> <li>A Smart Contract Development Stack \u29c9</li> <li>A Smart Contract Development Stack, Part II: Game Theoretical Aspects \u29c9</li> </ul>","tags":["iets3"]},{"location":"languages/kernelf/kernelf/#mutable-state","title":"Mutable State","text":"<ul> <li>Dealing with Mutable State in KernelF \u29c9</li> </ul>","tags":["iets3"]},{"location":"languages/kernelf/kernelf/#functional-programming","title":"Functional Programming","text":"<ul> <li>Some Concepts in Functional Languages \u29c9 (languageengineering.io)</li> <li>Introduction to the functional programming jargon (general) \u29c9</li> <li>Awesome functional programming (general) \u29c9</li> <li>Funclerative Programming \u29c9(Markus Voelter)</li> </ul>","tags":["iets3"]},{"location":"languages/kernelf/kernelf/#tracing","title":"Tracing","text":"<p>The execution trace is helpful if you want to follow the execution path of an interpreter. Right-click an interpreted node and click Show Trace. The trace explorer now opens in the lower left corner. When you click one of the lines in the trace explorer, the node in the editor gets replaced by the trace. You can manipulate the trace through the trace expression.</p> <p></p>","tags":["iets3"]},{"location":"languages/kernelf/kernelf/#nix","title":"Nix","text":"<p>KernelF doesn't allow returning null values (intermediate null values that the same or other evaluators catch are fine). Instead, it supports so-called nix handlers (there's a nixHandler extension point). The default handler for KernelF is DefaultNixHandler \u29c9. A nix value (interface INixValue) represents an empty (nothing) value. There is, for example, a DefaultNix class; for dates, there's EmptyDateRangeValue \u29c9. Use the handler's method process to handle values that might be nix. To use this feature call <code>new NixSupport(Object value node&lt;&gt; node {NixSupport =&gt; Object} calculator).run()</code> where the calculator returns the value:</p> <p></p>","tags":["iets3"]},{"location":"languages/kernelf/tour/kernelf_tour_introduction/","title":"KernelF Tour","text":"<p>The following pages give a tour of the language feature of KernelF. The tour is separated info basic and advanced languages. The separation is not equivalent to the devkits which all have the prefix org.iets3.core.expr.:</p> <ul> <li>core.devkit: core expressions + interpreters</li> <li>advanced.devkit: core expressions + interpreters</li> <li>stateful.devkit: stateful expressions + interpreters</li> <li>genjava.core.devkit: java generation of core expressions</li> <li>genjava.advanced.devkit: java generation of advanced expressions</li> <li>genjava.stateMachineExample.devkit: java generation of state machine example</li> <li>genall.core.devkit: all core generation devkits</li> <li>genall.advanced.devkit: all advanced generation devkits</li> <li>org.iets3.req: requirements</li> </ul> <p>The tour shows the interpreter outputs but doesn't dive into the Java generator languages (org.iets3.core.expr.genjava) on purpose. To use the mentioned languages, use either the core or advanced devkit. If you want to generate Java code, use the genall.core or genall.advanced devkit.</p> <p>You can find the corresponding MPS project in this GitHub repository. It needs to be opened with JetBrains MPS 2023.2 and a corresponding version of IETS3.opensource.</p> <p>If the font size of the screenshots is too small, click the images to make them appear in a popup. You can then click on the images to zoom in. If the images are too long, you can drag the images to scroll down or up.</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Algebraic_1_Basic/Algebraic_1_Basic/","title":"Basic","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Algebraic_2_Quoting/Algebraic_2_Quoting/","title":"Quoting","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Algebraic_3_Example_Calculate_Salary/Algebraic_3_Example_Calculate_Salary/","title":"Calculate Salary (example)","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Algebraic_4_Example_Trafo/Algebraic_4_Example_Trafo/","title":"Trafo (example)","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Algebraic_5_Example_Interpreter/Algebraic_5_Example_Interpreter/","title":"Interpreter (example)","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Block_1_Defining_Blocks/Block_1_Defining_Blocks/","title":"Defining Blocks","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Block_2_Usage_And_Composite_Blocks/Block_2_Usage_And_Composite_Blocks/","title":"Usage and Composite Blocks","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Boxes_1_Basics/Boxes_1_Basics/","title":"Basics","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Boxes_2_Update_With_Check/Boxes_2_Update_With_Check/","title":"Update With Check","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Boxes_3_Time/Boxes_3_Time/","title":"Time","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_1_Creation/Collections_1_Creation/","title":"Creation","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_2_Access/Collections_2_Access/","title":"Access","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_3_Checks/Collections_3_Checks/","title":"Checks","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_4_Properties/Collections_4_Properties/","title":"Properties","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_5_Map/Collections_5_Map/","title":"Map","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_6_Set/Collections_6_Set/","title":"Set","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_7_Changing_The_Structure/Collections_7_Changing_The_Structure/","title":"Changing the Structure","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_8_Filtering_And_Grouping/Collections_8_Filtering_And_Grouping/","title":"Filtering and Grouping","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Collections_9_Querying/Collections_9_Querying/","title":"Querying","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Contracts/Contracts/","title":"7. Contracts","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Date/Date/","title":"Date","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/DecisionTree/DecisionTree/","title":"9. Decision Tree","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_1_Simple/Decision_1_Simple/","title":"Simple","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_2_WithTimeout/Decision_2_WithTimeout/","title":"Without","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_3_WithYesNo/Decision_3_WithYesNo/","title":"With Yes/No","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_4_Salesprocess/Decision_4_Salesprocess/","title":"Sales Process","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_5_SalesProcessMultiParty/Decision_5_SalesProcessMultiParty/","title":"Sales Process Multi Party","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_6_WithDynamicGroup/Decision_6_WithDynamicGroup/","title":"With Dynamic Group","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_7_DynamicGroupAndInterceptor/Decision_7_DynamicGroupAndInterceptor/","title":"Dynamic Group and Interceptor","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Decision_8_Gameplay/Decision_8_Gameplay/","title":"Game Play","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Error/Error/","title":"8. Error Handling","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Expressions_1_ControlFlow/Expressions_1_ControlFlow/","title":"Control Flow","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Expressions_2_Math/Expressions_2_Math/","title":"Math and Real Numbers","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Expressions_3_Operations/Expressions_3_Operations/","title":"Operations","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Expressions_4_Other_Expressions/Expressions_4_Other_Expressions/","title":"Other Expressions","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Functions_1_General/Functions_1_General/","title":"General","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Functions_2_Variables/Functions_2_Variables/","title":"Variables","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Functions_3_Lambda/Functions_3_Lambda/","title":"Lambda","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Functions_4_OperatorGroups/Functions_4_OperatorGroups/","title":"Operator Groups","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Messages/Messages/","title":"3. Messages","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/NixSupport/NixSupport/","title":"6. Null Handling","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/","title":"10. Unit Language","text":"PhysicalUnitsDocumentation"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid5750357924870581735","title":"1 Introduction","text":"<p>         The new language org.iets3.core.expr.typetags.phyunits was created as a replacement for          org.iets3.core.expr.typetags.units         ,           org.iets3.core.expr.typetags.units.quantity          and its helper modules          org.iets3.core.expr.typetags.units.si          and          org.iets3.core.expr.typetags.units.interpreter         . The standard library of this language is called          org.iets3.core.expr.typetags.phyunits.si         . Both languages can be used separately and there is no automatic migration. Only console scripts exist (MigrateToNewUnitsLanguage and MigrateUnitConceptRefsAndSiReferences). Some manual migration is still needed. To go back to the old concepts, extension methods can be used (e.g. <code>newUnit.tolOldUnitx()</code>). They are located in the plugin solution of          org.iets3.core.expr.typetags.units          and need to be imported.                   The following references are helpful to understand the design decisions that where made in this language:       </p> <ul> <li> SI base unit \u29c9 </li> <li> SI derived unit \u29c9 </li> <li> Non-SI units mentioned in the SI \u29c9 </li> <li> Metric prefix \u29c9 </li> <li> Binary prefix \u29c9 </li> <li> List of physical quantities \u29c9"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid5750357924870713446","title":"2 Concepts","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid5750357924870883496","title":"2.1 Quantity","text":"<p>           A quantity is a term that describes how much or how many of something there is. Quantities can be compared (equals, less, more) or assigned a numerical value multiple of a unit of measurement. The term can be customized through the extension point PhysUnitLangConfig \u29c9. They have a symbol and an optional name. Another similar term that we have to differentiate with is measure. A measure is a way of expressing a quantity using a unit or a standard. For example, the quantity of water in a glass can be measured by using a unit of volume, such as milliliters or liters. This term is not used in this language.                        Quantities as well as Section Units support multiplication, division, and exponents with integers or fractions in their specification. There are intentions to simplify them and convert between different operations. All operations are implemented as operations of a mathematical group. Exponents in specifications are automatically sorted in  ascending order for positive exponents and descending order for negative exponents. This behavior can be overwritten through the extension point.         </p> <p>Figure                 2.1-A: Example: Quantity Declarations \u29c9</p> <p>           In the inspector, the same formula can be read with SI base quantities. The specification can also be edited in                      terms of quantity symbols instead of names.          </p> <p>Figure                 2.1-B: Example: Inspector of a Derived Quantity \u29c9</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid5750357924870884103","title":"2.2 Units","text":"<p>           A physical unit is a standardized value that is used to measure and compare physical quantities. For example, the meter is a unit of length, and the kilogram is a unit of mass. length and mass are the quantities.                       Units must have a symbol name and can also have an optional unit name. The must reference a quantity that can be automatically derived via an intention.                       They support different scaling methods: no-scaling, metric scaling (= metric prefixes), and binary scaling (= binary prefixes), and have their type derived from the referenced quantity:         </p> <p>Figure                 2.2-A: Example: Unit Declarations \u29c9</p> <p>           There is special handling for kilogram because it is a base unit with a metric prefix.                      Units can also be derived by adding the derived keyword and adding a specification for the unit:         </p> <p>Figure                 2.2-B: Example: Derived Units \u29c9</p> <p>The SI unit equivalents are shown in the inspector:</p> <p>Figure                 2.2-C: Example: Inspector of a Derived Unit \u29c9</p> <p>The type of the unit is derived from the quantity specification and the unit specification is checked against the quantity specification:</p> <p>Figure                 2.2-D: Incompatible Units</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid8938656833755503269","title":"2.3 Conversion Rules","text":"<p>Conversion rules define how the convert expressions (convertand convertTo) should execute the conversion between 2 referenced units. They reference a source and a target unit that each can have an optional prefix. The valexpression refers to the converted value itself. The return type can be specified as well:</p> <p>Figure                 2.3-A: Example: Conversion Rule from Kilogram to Centigram \u29c9</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid1300401771334714738","title":"2.4 Conversion Expressions","text":"<p>They reference a target unit and have an expression with a unit reference attached to it as the source. The unit references that now also contain the prefixes are converted to the prefix-less version:</p> <p>Figure                 2.4-A: Example: Scaling Meters to Other Prefixes \u29c9</p> <p>This information is also visible in the inspector:</p> <p>Figure                 2.4-B: Example: The Inspector of a Convert Expression  \u29c9</p> <p>This also works for expressions with binary prefixes:</p> <p>Figure                 2.4-C: Example: Scaling Expressions with Binary Prefixes \u29c9</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid8938656833755474589","title":"2.4.1 Implicit Conversions","text":"<p>When no convert expression is used, implicit conversions between different prefixes are executed automatically by the interpreter. This can be deactivated through an extension point or by surrounding the expression with a <code>noConvert</code> expression:</p> <p>Figure                   2.4.1-A: Example: Implicit Conversions \u29c9</p> <p>             Integer literals sometimes use BigIntegers for the conversion which can result in overflows or 0 as the result.                          The editor will show a warning in those cases. The fourth assert item shows this issue. In such cases, cast the expression to use floating point numbers or use floating point literals.                           Existing rules can be marked with the implicit keyword to provide custom implicit conversion rules. The visible implicit rule with the highest priority in the current scope will be chosen. The automatically generated implicit rules have a priority of 0. The priority can be set in the inspector of the rule:           </p> <p>Figure                   2.4.1-B: Example: Implicit Conversion Rule \u29c9</p> <p></p> <p>Figure                   2.4.1-C: Example: Implicit Property Visible in the Inspector of a Conversion Rule \u29c9</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid8938656833755494420","title":"2.4.2 Eager Conversion Rules","text":"<p>Eager conversion rules have the keyword eager at the start of the rule. In those rules, the val still has the original unit attached to it.</p> <p>Figure                   2.4.2-A: Example: Eager Conversion Rule \u29c9</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid1300401771334714183","title":"3 Standard Library","text":"<p>The standard library is conform to the international standard for SI base and derived units as well as units that are often used with SI units. For a few cases, Unicode symbols are used which means that in those cases the code completion menu has to be used.</p> <p>Also part of the standard library is now a class StandardUnitHelper \u29c9 for checking if a unit is a SI unit, the \"unitless\" unit and so on.</p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid1300401771334714441","title":"3.1 Units Of Digital Information","text":"<p>There is also some additional support for units of digital information because they use binary prefixes instead of decimal prefixes. </p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/PhysicalUnitsLanguage/PhysicalUnitsLanguage/#sid1300401771334714472","title":"3.1.1 Example","text":"<p> <code>1Kbyte = 1000 byte but  1kib =  1024 b</code>              Translated into English: 1 kilobyte equals 1000 bytes and 1 kibibyte (binary kilobyte) equals 1024 binary bytes.           </p>"},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Statemachines_1_Basic/Statemachines_1_Basic/","title":"Basics","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Statemachines_2_Automatic_Transition/Statemachines_2_Automatic_Transition/","title":"Automatic Transition","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Statemachines_3_Interceptor/Statemachines_3_Interceptor/","title":"Interceptor","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Statemachines_4_Hierarchical/Statemachines_4_Hierarchical/","title":"Hierarchical","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tables_1_DataTable/Tables_1_DataTable/","title":"DataTable","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tables_2_MultiDecisionTable/Tables_2_MultiDecisionTable/","title":"Multi-Decision Table","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tables_3_Otherwise_Literal/Tables_3_Otherwise_Literal/","title":"Otherwise Literal","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tables_4_DecisionTable_ranges/Tables_4_DecisionTable_ranges/","title":"Decision Table Ranges","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tables_5_LookupTable/Tables_5_LookupTable/","title":"Lookup Table","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Temporal_1_Basics/Temporal_1_Basics/","title":"Basics","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Temporal_2_Booleans/Temporal_2_Booleans/","title":"Booleans","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Temporal_3_Advanced/Temporal_3_Advanced/","title":"Advanced","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tests_1_Asserts/Tests_1_Asserts/","title":"Asserts","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tests_2_ConstrainedFail/Tests_2_ConstrainedFail/","title":"Constrained Fail","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Tests_3_StringValidation/Tests_3_StringValidation/","title":"String Validation","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Time/Time/","title":"Time","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Transaction_1_Basics/Transaction_1_Basics/","title":"Basics","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Transaction_2_Advanced/Transaction_2_Advanced/","title":"Advanced","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_1_Boolean/Types_1_Boolean/","title":"Boolean","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_1_Definition/Types_1_Definition/","title":"Definition","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_2_DefaultValues/Types_2_DefaultValues/","title":"Default Values","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_2_Number/Types_2_Number/","title":"Number","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_3_String/Types_3_String/","title":"String","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_4_Enumeration/Types_4_Enumeration/","title":"Enumeration","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_Option_1_General/Types_Option_1_General/","title":"General","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_Option_2_Expressions/Types_Option_2_Expressions/","title":"Expressions","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_Record_1_Declaration/Types_Record_1_Declaration/","title":"Declaration","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_Record_2_Projection/Types_Record_2_Projection/","title":"Projection","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_Record_3_Grouping/Types_Record_3_Grouping/","title":"Grouping","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_Record_4_Reference/Types_Record_4_Reference/","title":"Reference","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Types_Tuples/Types_Tuples/","title":"Tuples","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Typetags/Typetags/","title":"2. Type Tags","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Units_1_Basics/Units_1_Basics/","title":"Basics","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Units_2_DerivedAndScaled/Units_2_DerivedAndScaled/","title":"Derived Units","text":""},{"location":"languages/kernelf/tour/solutions/KernelFTour/screenshots/Units_3_Converting/Units_3_Converting/","title":"Converting Units","text":""},{"location":"mbeddr/","title":"General","text":"<p>The old homepage at mbeddr.com and the mbeddr user guide \u29c9 are still a good introduction to  mbeddr \u29c9 itself. Most of the time, you will only be interested into the  mbeddr platform \u29c9, the reusable parts of mbeddr that don't deal with C code. The platform comes with a dependency on  MPS Extensions \u29c9.</p> <p>Why are there two context action tools? </p> <p>The context actions tool from com.mbeddr.mpsutil.contextactions came first. Later, JetBrains developed a tool that works the same as the one from mpsutil. Nowadays, both tool windows coexist.</p> <p>I am using some mbeddr languages in my project, but some aren't deployed </p> <p>There might be some additional plugins that you need to install:</p> <ul> <li>com.mbeddr.mpsutil.actionsfilter</li> <li>mbeddr.spawner</li> </ul> <p>You can install them by calling <code>gradlew.bat install \"-PMPS_Installation=&lt;path to MPS&gt;\"</code> from the root folder of the mbeddr.core repository when building from source. The actions filter plugin is necessary for the actions filter language.</p>","tags":["mbeddr"]},{"location":"mbeddr/big_project/","title":"BigProject","text":"<p>If you have introduced a migration to mbeddr and need to execute it, you need to execute it on all MPS projects contained in mbeddr. Otherwise, migrations pop up for people working on other parts of mbeddr. This workflow would be unclean. To avoid this, you could open all the projects in <code>mbeddr.core\\code\\languages</code> individually and run the migration wizard, but this is tedious. A better approach is to use the BigProject contained in the mbeddr repository. This project loads all languages and solutions available in individual projects. Thus you can run a migration once that executes on all these modules.</p>","tags":["mbeddr","utility"]},{"location":"mbeddr/big_project/#new-usage","title":"New Usage","text":"<ul> <li>From the command line: run <code>gradlew.bat :BigProject:run</code> or <code>./gradlew :BigProject:run</code> from the Git checkout root.</li> <li>From IntelliJ IDEA: Open the Git checkout root as a (Gradle) project in IDEA and run Generate Big Project run configuration.</li> </ul>","tags":["mbeddr","utility"]},{"location":"mbeddr/big_project/#old-usage","title":"Old Usage","text":"<ol> <li>Open project <code>mbeddr.core\\tools\\BigProject</code> with IntelliJ IDEA community edition.</li> <li>In IntelliJ IDEA, click in the menu on Run \u2192 Run BigProjectGenerator.<ol> <li>If you didn't configure an SDK, follow the error message in the bottom right corner or via project settings and select a Java 11/17 SDK (depending on the MPS version) installed on your system.</li> <li>Use default for the project language level.</li> <li>If you didn't configure a project compiler output path, set it to <code>mbeddr.core/tmp/BigProject</code>.</li> <li>Close and open the project again to run the project generator.</li> </ol> </li> <li>Check generation feedback. It looks like this:    <pre><code> === TOTAL ===\n Languages: 214\n Solutions: 305\n Devkits: 22\n</code></pre></li> </ol>","tags":["mbeddr","utility"]},{"location":"mbeddr/big_project/#next-steps","title":"Next Steps","text":"<ol> <li>Open project <code>mbeddr.core\\tools\\BigProject</code> with MPS.</li> <li>When the migration wizard starts automatically, execute migrations, otherwise:<ol> <li>Check for the popup Migration suspended in the bottom right corner. It tells you which languages need to be built/deployed.</li> <li>Build or rebuild all languages in that list. Usually, MPS must build all languages and a set of solutions for the wizard to start automatically.</li> </ol> </li> </ol>","tags":["mbeddr","utility"]},{"location":"mbeddr/building_mbeddr_locally/","title":"Building Mbeddr Locally","text":"<p>When building mbeddr locally, you must overcome some stumbling blocks. This article isn't a complete build instruction but rather a rough guideline. It should make mbeddr build so far that you can make changes to the non-C parts of the project. If you want to get everything built, install all tools from the page Required Tools and Versions | mbeddr.com \u29c9, especially the C-related tools.</p>","tags":["infrastructure","mbeddr"]},{"location":"mbeddr/building_mbeddr_locally/#automatic-build","title":"Automatic Build","text":"<ol> <li><code>git clone git@github.com:mbeddr/mbeddr.core.git</code></li> <li>Switch to the branch that you need, if it isn't the master branch, for example, MPS 2021.1.4: <code>git checkout maintenance/mps20211</code></li> <li>If not also set, open MPS, go to preferences \u2192 Appearance&amp;Behavior\u2192Path Variables, and set mbeddr.github.core.home to the root directory of the mbeddr.core repository.</li> <li>Run <code>./gradlew build_mbeddr -PdisableMavenLocal=true</code> to build mbeddr fully.</li> <li>Run <code>./gradlew -PdisableMavenLocal=true</code> instead to only build the platform.</li> <li>You have to build the tests and sandboxes manually.</li> </ol>","tags":["infrastructure","mbeddr"]},{"location":"mbeddr/building_mbeddr_locally/#manual-build","title":"Manual Build","text":"<ol> <li>Open the com.mbeddr.debugger project in MPS (multiple projects are located in the code/languages folder) and run <code>./gradlew install</code> on Mac/Linux or <code>gradlew.bat install</code> on Windows in the command line. This command should build the entire project and takes more than 10 minutes. You don't have to start this command from inside MPS, but when you execute it on the regular command line, you might need to pass <code>-PMPS_PATHS_SELECTOR</code>to gradle to set the path to the MPS home directory. When everything works, the script should install a spawner plugin into your MPS installation. This plugin contains libraries for the Eclipse C/C++ development tooling \u29c9 and needs to be installed. It also installs the idea plugin for the actions filter language, which you needs to install to use the language.</li> <li> <p>You can now build all projects. Start with these projects in this order:</p> <ul> <li>com.mbeddr.debugger</li> <li>com.mbeddr.mpsutil</li> <li>com.mbeddr.core</li> <li>com.mbeddr.ext</li> <li>\u2026</li> </ul> </li> </ol> <p>If you get compilation errors, try a different order. Some projects like com.mbeddr.doc and com.mbeddr.doc.aspect don't have as many dependencies on other projects as other projects.</p> <p>If a lot of errors occur in the com.mbeddr.debugger project, you don't have the spawner plugin installed.</p> <p>When anything goes wrong, and you want to start over, clean the generated files: <code>git clean -xdf</code>. After you've made a change, (re)build the parts of the project that you've changed and push the branch so that the build server can make a complete build + execute the tests.</p> <p>You don't need to open all dependent projects if you make a change in one project.</p>","tags":["infrastructure","mbeddr"]},{"location":"mbeddr/development_guide/","title":"Development Guide","text":"<p>This document describes how the mbeddr team used Git for contributing changes in the past. The guide was written some years ago, so it might no longer reflect the workflow and guidelines of newer committers.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#commit-messages","title":"Commit Messages","text":"<p>In general, try to follow this guide \u29c9 with some exceptions for minor changes:</p> <p>When you commit a significant change related to a GitHub issue, start your message with a short title (less than 50 char). Ideally, it contains the title of the GitHub issue if it fits. If you can't fit the issue title, please reference the issue ID with the #n notation in the title. A short optional paragraph (not longer than 80 chars) follows the title describing the change:</p> <pre><code>ClassCastException on FilteringActionManager #1207\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. \n</code></pre> <p>In contrast, if your commit is just a minor fix, then you mention the modified mbeddr subsystem (e.g., mpsutil:, core: or ext:) and provide a short description, followed by a short optional paragraph (not longer than 80 chars) describing the change:</p> <pre><code>core,ext: Lorem ipsum dolor sit amet.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. \n</code></pre> <p>The optional paragraph at the end of the commit message contains further information about the change. Mention added tests or describe why the fix was necessary. There may be special conditions when the issue surfaces. You can also put GitHub issue commands \u29c9 to close or reference other issues in this paragraph.</p> <p>Writing good commit messages | github.com/erlang /otp and A Note About Git Commit Messages | tbaggery.com/ \u29c9 contains further information and ideas on how to write good commit messages.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#branches","title":"Branches","text":"<p>We make heavy use of branches in the development process. If your task requires more than one commit, commit your changes on a branch.</p> <p>There are two branch types: feature and refactor: Use the first for new features and the second for bug fixes or code refactorings. They are distinguished by prefix: a feature branch my-awesome-stuff would be named feature/my-awesome-stuff or refactor/my-awesome-stuff if it's a refactoring branch. Both kinds of branches should be short living (a couple of days) to reduce the risk of diverting too far from the master branch and causing huge afford to merge. Ideally, no commits happen directly on the master branch, and you evaluate every commit first on a feature/refactoring branch.</p> <p>Nowadays, we mostly do merging instead of rebasing. The following sections may not accurately reflect the current workflow.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#merging","title":"Merging","text":"<p>Once you are done with your work, you need to integrate it into the master branch. Because your branch most likely diverted from it, merging it into the master branch would typically end up with a merge commit. We have learned that merging clutters Git history and makes all intermediate commits of the branch end up on the master branch. The suggested workflow is to rebase your branch onto master and squash all your commits into one.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#example","title":"Example","text":"<p>This example shows you how to integrate your branch into the master branch using rebase instead of merge.</p> <p>The list of commands to use is as follows:</p> <p><pre><code>git fetch\ngit rebase -i origin/master\ngit checkout origin/master\ngit pull\ngit merge --ff-only feature/my-awesome-stuff\ngit pull --rebase\ngit push\n</code></pre> They are all explained below. Below, you can see the starting point in the repository:</p> <pre><code>* 1ed51e3        (HEAD -&gt; master) added another file\n* 5cee848        initial commit\n</code></pre> <p>Now create the new feature branch named feature/my-awesome-stuff and commit some changes to it. While working on your branch, someone else committed changes to the master branch. Hence, for integrating your changes into it, you would end up with a merge:</p> <pre><code>* 3c36424        (HEAD -&gt; master) fixed some super important issue\n| * 66beba4      (feature/my-awesome-stuff) more work on my awesome feature\n| * cca995e      did some stuff\n|/\n* 1ed51e3        added another file\n* 5cee848        initial commit\n</code></pre> <p>To get your commits into the master branch, make sure that your local history is up-to-date by running <code>git fetch</code>. Next, rebase your commits to prevent a merge from happening. You can do this with the following Git command on our branch: <code>git rebase -i origin/master</code>. Git will now ask you how to proceed with your commits: <pre><code>pick cca995e did some stuff\npick 66beba4 more work on my awesome feature\n</code></pre></p> <p>Now squash all commits into a single commit while rebasing:</p> <pre><code>pick cca995e did some stuff\nsquash 66beba4 more work on my awesome feature\n</code></pre> <p>Afterward, Git asks you to enter a message for the new commit. Its default message concatenates all the commit messages from the commits to squash. However, you want the new commit message to fit the earlier described pattern.</p> <p>After rebasing, your Git history looks like this: <pre><code>* afc0fb5        (HEAD -&gt; feature/my-awesome-stuff)  42: super awesome feature\n* 3c36424        (master) fixed some super important issue\n* 1ed51e3        added another file\n* 5cee848        initial commit\n</code></pre></p> <p>You still have to branch; now it's time to merge them. Change your Git branch to the master branch using <code>git checkout origin/master</code>. Make sure you have pulled from the remote and your branch is up-to-date. Now run <code>git merge --ff-only feature/my-awesome-stuff</code>. The \u2013ff-only is vital to force Git not to merge if it would produce a merge commit.</p> <p>Now Git history looks like this:</p> <pre><code>* afc0fb5        (HEAD -&gt; master, feature/my-awesome-stuff)  42: super awesome feature\n* 3c36424        fixed some super important issue\n* 1ed51e3        added another file\n* 5cee848        initial commit\n</code></pre> <p>You haven't created a merge commit, and all commits from your branch appear as a single commit in the Git history. You are good to go to push back to the repo. But wait, what if somebody has changed things in the meantime on the remote? Wouldn't the pull create a new merge? Yes, it would! Therefore, don't use a plain <code>git pull</code> but use <code>git pull --rebase</code> when you are pulling from the repo into your local master branch. This way, Git doesn't produce a new merge commit but rebase your local changes on top of the remote changes.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#test-organization","title":"Test Organization","text":"","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#naming","title":"Naming","text":"<p>The test solution for language com.mbeddr.x.lang should be named test.com.mbeddr.x.lang. Respectively, the test solution for solution com.mbeddr.y.sol should be named test.com.mbeddr.y.sol. If you need a dedicated language for testing purposes, name it test.com.mbeddr.x.[lang|sol].testsupport (or a similar suffix).</p> <p>This way, you can discriminate between the \"real\" code below namespace com.mbeddr and the test code below namespace test. Place any demo or playground modules outside the com.mbeddr namespace for the same reason.</p> <p>By following this scheme, you can build productive code in the UI by building everything below com.mbeddr in the modules pool and be sure that it is not interfered with by test, demo, or playground code.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#project-structure","title":"Project Structure","text":"<p>Place all languages, solutions, tests, demos, and playgrounds below a common virtual folder bearing the feature's name. An exception might be build models.</p> <p>Generators must be present only when required or deleted if empty.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#file-system","title":"File System","text":"<p>Place all test code in a special folder in the file system:</p> <p></p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#build","title":"Build","text":"","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#build-script-setup","title":"Build Script Setup","text":"<p>In mbeddr, different build scripts exist. They are used on the local machines for building the languages and on the build server for various build-related tasks, such as testing or packaging. This documentation guides you in following the mbeddr standards for setting up your BuildProject and integrating it into Mbeddr's build infrastructure.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#required-buildfoldermacros","title":"Required BuildFolderMacros","text":"<p>In your BuildProject (the build script's model representation in MPS), you first need a BuildFolderMacro (a folder) named mps.home (see code snippet below). If you want to run the generated Ant script in your MPS, then you should specify the location of your MPS installation relatively. Otherwise, you don't need a path for mps.home. At script execution time, you will redefine mps.home, to point to the folder where your MPS installation is.</p> <pre><code>folder mps.home = &lt;no defaultPath&gt;\n</code></pre> <p>Next, you need a BuildFolderMacro named artifacts.root that doesn't require a path (see snippet below). When executing the Ant script generated from your BuildProject, define this macro from outside to point to the folder where all your plugin dependencies (e.g., <code>mbeddr.platform</code>) are located.</p> <pre><code>folder artifacts.root = &lt;no defaultPath&gt;\n</code></pre> <p>For each BuildProjectDependency (the dependency section below your folders), we need a separate BuildFolderMacro that follows the naming convention .artifacts and points to <code>$artifacts.root/&lt;BuildProject name&gt;</code>. At build script execution time, those macros will point to the folders where your required plugins are. In the code snippet below, you can see the resulting BuildFolderMacros for a BuildProject with two dependencies: mps-sl-all and com.mbeddr.platform. <pre><code>folder sl-all.artifacts = $artifacts.root/mps-sl-all \nfolder platform.artifacts = $artifacts.root/com.mbeddr.platform\n</code></pre>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#type-system-tests","title":"Type System Tests","text":"<p>When you want to build type system tests that require a specific path macro (e.g., for specifying the project location inside your <code>TestInfo</code>), then you must create a BuildFolderMacro for this path macro. The name of this BuildFolderMacro should start with mps.macro, followed by the name of the respective path macro. In the example below, you instruct MPS via mps.macro.mbeddr.github.core.home to create a path macro mbeddr.github.core.home that points to the relative path location specified in the other BuildFolderMacro mbeddr.github.core.home.</p> <pre><code>folder mps.macro.mbeddr.github.core.home = $mbeddr.github.core.home\n</code></pre> <p>Furthermore, you need to mark solutions containing type system tests as content: (with sources and tests). To achieve this, please perform the following steps: </p> <ol> <li>Inside your BuildProject move your cursor to the solution that contains your type system tests.</li> <li>Open the inspector.</li> <li>Inside the inspector, select the node sources, open the context menu, and choose sources and tests from it.</li> </ol> <p>To get your tests executed, you first need to add the module-tests plugin to your use plugins: section (on top of your BuildProject). When you can't add the node module-tests to this section, import it from jetbrains.mps.build.mps.tests.accessories. Finally, create a BuildMpsLayout_TestModules (a test configuration) at the bottom of your BuildProject and list all solutions that contain type system tests that the script should execute.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#configurations-for-generator-and-compiler","title":"Configurations for Generator and Compiler","text":"<p>To ensure code is generated and compiled the same way as in MPS, you must add the following configurations (BuildSource_JavaOptions and BuildMps_GeneratorOptions) to your BuildProject's project structure. Those configurations control the generator engine and the Java compiler to ensure we have the same build behavior as in the IDE.</p> <pre><code>generator options &lt;project default&gt; \n  strict mode true \n  multiple threads true \n  number of threads 4 \n  inplace transform true \n  hide warnings false \n  resort to static references true \n\njava options &lt;project default&gt; \n  generate debug info true \n  generate no warnings false \n  fork false \n  compiler &lt;default compiler&gt; \n  java compliance level 1.6 \n  java compiler options &lt;no additional options&gt; \n  copy resources false \n</code></pre>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#building-a-release","title":"Building a Release","text":"<p>To prepare a mbeddr release, you can modify the version number set for the mbeddr plugins by overwriting the major.version, minor.version, and build (see screenshot below). However, you don't change these values inside the MPS build scripts. Instead, either you change them in the global gradle script (mbeddr.core/build.gradle), or you overwrite them via the command line while spawning a new release build:</p> <p><code>-PmajorVersion=1 -PbuildVersion=0 -PminorVersion=0000 build_mbeddr publishMbeddrAllInOnePublicationToMavenRepository</code></p> <p></p>","tags":["mbeddr","guide"]},{"location":"mbeddr/misc_topics/","title":"Misc Topics","text":"","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#variants","title":"Variants","text":"","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#limitations-to-product-line-engineering-when-generating-variant-aware-code","title":"Limitations to Product Line Engineering When Generating Variant-Aware Code","text":"<p>The current PLE approach only generates a single variant. The generated artifacts aren't variant aware. We want to enable that generated code to contain #if statements to generate all variants simultaneously. When we want to do this, we have to limit variability to elements where we can represent this in the generated C code. The main problem is that presence conditions can't be applied to all nodes in the model.</p>","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#what-doesnt-work","title":"What Doesn\u2019t Work?","text":"<p>Besides elements with a cardinality of 1, you can't remove some other items from the AST with presence conditions:</p> <ul> <li>parameters of a function</li> <li>arguments from function calls</li> <li>extra declarations of for loops</li> <li>variable initializers</li> <li>expressions in array/user-defined type initializers</li> <li>arguments of function macros (global function declarations)</li> </ul>","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#code-smells","title":"Code Smells","text":"<ul> <li>replacement of function call expression where the parent is an expression statement<ul> <li>replace complete statement to generate readable code</li> </ul> </li> </ul>","tags":["mbeddr"]},{"location":"mps_internal/","title":"Index","text":"<p>The MPS internal pages deal with topics related to developing with the MPS sources or close to them, and also how they are connected to the IntelliJ platform. The topics are considered advanced and are not essential for new MPS developers. If you are interested how certain parts of MPS work, they might still be of interest for you.</p> <p>How do you get started using MPS' Open API?</p> <p>The simplest way to use MPS Open API \u29c9 (Specific Languages' blog)</p> <p>How do you get MPS core components from code?</p> <p>From the console: <pre><code>MPSProject p = ((MPSProject) #project); \nPlatform host = (Platform) p.getPlatform();\n#print host.findComponent(MakeServiceComponent.class);\n</code></pre></p> <p>I want to change something inside a SModule, such as adding a dependency, but I need help finding the right method.</p> <p>Try casting it to AbstractModule \u29c9 first.</p> <p>Where can you find built-in icons?</p> <p>The class AllIcons \u29c9 declares all IntelliJ IDEA icons. The class MPSIcons \u29c9 declares all MPS icons.</p> <p>How can you have settings that get saved globally?</p> <p>You can use preferences only at the project level. Use the workaround described in this answer \u29c9 or save your values in the global IntelliJ IDEA Registry \u29c9. This Stack Overflow post \u29c9 contains more information about the Registry. It can also be shown programmatically by calling <code>new RegistryUi().show()</code>.</p> <p>How can you call make or rebuild?</p> <p>Use the class MakeActionImpl \u29c9. You can find examples in the same model.</p> <p>How do you add widgets to the status bar? (for example, memory indicator, save transient models)</p> <p>Have a look at this answer \u29c9.  Make sure to call this code from a project plugin \u29c9.</p> <p>How do you display a message in the status bar? (left bottom corner)</p> <p>Note: The message might not be visible when executing the code from the console because the rebuild of the model overrides it with a new message: <code>WindowManager.getInstance().getStatusBar(ProjectHelper.toIdeaProject(#project))</code></p> <p>How can I register an IntelliJ extension?</p> <p>Find the interface you want to add an extension on this page \u29c9. The corresponding interface has a static field <code>EP_NAME</code>. If the interface is implemented in Kotlin, it might have a static field <code>Companion</code> with a <code>getEP_NAME()</code> method. Extend this interface (EX) and register it through the extension point. Example: <code>Interface.EP_NAME.getPoint().registerExtension(new Ex())</code></p> <p>How can you add a status bar widget?</p> <p>Implement the interface <code>StatusBarWidgetFactory</code> and register it through the StatusBarWidgetFactory.EP_NAME extension point.</p> <p>How do you add model imports and used languages programmatically?</p> <p>Adding model imports and used languages programmatically \u29c9 (Specific Languages' blog)</p> <p>How can you run some MPS code from the command line/CI?</p> <ul> <li>Running MPS code from the command line \u29c9 (Specific Languages' blog)</li> <li>Running code in MPS on CI \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you run generated code from within MPS?</p> <p>Run generated code from within MPS \u29c9 (Specific Languages' blog)</p> <p>How can you render a node as a text?</p> <p>Rendering a node as text \u29c9 (Specific Languages' blog)</p> <p>How can you associate more information with a node?</p> <p>Associating additional information with a node \u29c9 (Specific Languages' blog)</p> <p>How does shrinking of absolute paths work?</p> <p>Shrinking of absolute paths \u29c9 (Specific Languages' blog)</p> <p>How can you retrieve nodes of other models and modules?</p> <p><code>model.nodesIncludingImported</code> returns all nodes, including those from other currently imported models. </p> <p>How can you make an internal MPS editor read-only?</p> <p>I want to contribute to a generator in <code>j.mps.lang.editor</code>. When I download the MPS source \u29c9, open the project in MPS under <code>code</code>, and open <code>j.m.l.editor/SubstituteMenuPart_ReferenceScope_declare</code>, I see the model being read-only. What can I do?</p> <p>Open MPS in IDEA (Community Edition is enough), compile and run it from there, then you can edit MPS sources. There are instructions in README \u29c9.</p> How can you do a full-text search in the IDE? <p>I sometimes need a textual search which MPS doesn't provide out of the box.</p> <p>In that situation, I am still determining the concept and type of what I see, so a top-down search is not an option. Instead, I would like to search for that string to have a starting point for my investigation.</p> <p>Examples:</p> <ul> <li>I want to investigate an editor in the user interface and avoid reverse engineering what hints, editors, and concepts lead to what I see.</li> <li>Behavioral view code, like custom cells, Java Swing cells, or query lists, makes it hard to figure out where the source logic of that is located.</li> <li>When the console shows something I don't understand, I'd like to see its context source code to figure out what to do next.</li> </ul> <p>Option 0: Use language debugging facilities of MPS instead.</p> <p>For built-in languages, MPS brings a load of dedicated debugging facilities:</p> <ul> <li>Debugging editor cells and nodes: When you right-click an item in the editor, you can find a submenu Language Debug.</li> <li>Debugging menu entries: Select an item you're curious about and press Cmd+Alt+B/Ctrl+Alt+B to open the Menu Trace of it.</li> <li>Set up IntelliJ idea and connect it to step through Java code.</li> </ul> <p>Option 1: Search for literals from the console.</p> <p>Option 2: Search through serialized Java.</p> <ol> <li>Set up IntelliJ with your project.</li> <li>Hit Cmd+Shift+F/Ctrl+Shift+F to search in the path.</li> <li>When you find a class of interest, open it in MPS via Cmd+N/Ctrl+N. The source node usually has a similar name.</li> </ol> <p>This option is great for finding editor nodes. For example, if that Java class is named Vehicle_EditorBuilder, your source node was an editor for the Vehicle concept.</p> <p>Last Resort: Search XML model directly.</p> <p>Use this only if you have no assembly and your project doesn't open. The serialized API is subject to change, and using this should be the last barrier.</p> <p>Then use ack (or a similar tool) on the command line to find the relevant models that contain this string. The output even contains the node ID, as in this example:</p> <pre><code>$ ack \"ack com.mbeddr.mpsutil.grammarcells\"\n\u2026\n&lt;node concept=\"3bR9La\" id=\"1aL6sVX49Cb\" role=\"1SiIV1\"&gt;\n    &lt;property role=\"3bR36h\" value=\"false\" /&gt;\n    &lt;ref role=\"3bR37D\" to=\"90a9:F1NWDqq_DA\" resolve=\"com.mbeddr.mpsutil.grammarcells.runtime\" /&gt;\n&lt;/node&gt;\n\u2026\n</code></pre> <p>Use <code>new IdEncoder().parseNodeId(\"1aL6sVX49Cb\")</code> to get the node ID. This line will print the corresponding node to the console. Clicking it will open in MPS:</p> <pre><code>#nodes.where({~it =&gt; \nboolean equals = false; \ntry { \n    equals = it/.getNodeId().equals(new IdEncoder().parseNodeId(\"1aL6sVX49Cb\")); \n} catch (Exception e) { \n    &lt;no statements&gt; \n} \nreturn equals; \n})\n</code></pre> How to eliminate the error: Shall specify a repository to lock? <p>When accessing model properties in rendering code, you must encapsulate the model accessing code in a read action:</p> <p></p> <p>It always has an error \"Error: shall specify a repository to lock\". How can I get rid of it? What is a 'repository' and is there any documentation that explains the concept and how to use it correctly?</p> <p><sub>asked by: @cwalesch<sub> <p>The repository is what is represented as the \"modules pool\" in the UI. It contains all the dependencies currently visible. At the moment there is only one global repository which causes several problems. MPS is slowly but steadily moving to project-specific repositories. That would mean each project (window) of MPS would have its separate repository. </p> <p>To get the repository you will need access to the project. e.g. the editor context will give you access to the repository: <code>editorContext.getRepository()</code>.</p> <p>In other cases, for instance,  when you don't have an editor context directly available you need to make sure that from UI (action) you pass the project or repository through to the place where you need it.</p> <p><sub>answered by: @coolya<sub> How can you get an identifier of a node? <p>Given I have a node myNode and I need to serialize something that identifies it. When I serialize that something and then deserialize that identifier again, then I will find exactly that node. How can I build such a thing?</p> <p>Option 1: PersistenceFacade ID</p> <p>Since the URL does not look nice, you may use this combined string of model ID and node ID that is used for the URL. For that, import the class <code>org.jetbrains.mps.openapi.persistence.PersistenceFacade</code> from the MPS.OpenApi stub and run:</p> <pre><code># serialize identifier\nstring mySerializedId = SNodePointer.serialize(node/.getReference())\n\n# find node based on the serialized identifier\nnode&lt;&gt; myFoundNode = SNodePointer.deserialize(mySerializedId).resolve(repository)\n\n# then, node == myFoundNode\n</code></pre> <p>Option 2: URL</p> <p>Import the <code>httpsupport</code> language and use <code>node.getURL</code>. This will be a URL that you can use locally to open this node. It includes the node ID and the model and thus is a pretty good globally unique id.</p> <p>This id is a local URL and looks odd though: <code>http://127.0.0.1:63320/node?ref=r%3A4bc03cd1-b1e3-49da-84da-f27e7062f6f7%28integrityOfUpdate%29%2F2209769512593382448&amp;project=SecurityAnalyst</code>. Especially the code to find the node again based on this URL contains some grepping then.</p> <p>Option 3: Node Id</p> <p>Use <code>node/.getNodeId().toString()</code> it will yield the node's id. Note that a node ID is only unique within this model. If it should be globally unique, consider option 1.</p> <p><sub>contributed by: @abstraktor<sub> Where does MPS store preferences? <p>For a starting point, read Directories used by the IDE \u29c9. CONFIG_DIR refers to the configuration directory. WORKSPACE_FILE refers to $PROJECT/.mps/workspace.xml:</p> <ul> <li>refactoring settings: CONFIG_DIR/options/refactoringSettings.xml</li> <li>override/implement settings: WORKSPACE_FILE/OverrideImplementMethodComponent</li> <li>additional libraries: CONFIG_DIR/options/AdditionalLibrariesManager.xml</li> <li>default search options: WORKSPACE_FILE/DefaultSearchOptions3</li> <li>make configuration: WORKSPACE_FILE/mpsMakeService</li> <li>code style settings: CONFIG_DIR/options/codeStyleSettings.xml</li> <li>breakpoint settings: WORKSPACE_FILE/BreakpointViewSettings</li> <li>migration state: WORKSPACE_FILE/MigrationProperties</li> <li>model validation settings: CONFIG_DIR/options/mpsModelValidationSettings.xml</li> <li>concept editor settings: WORKSPACE_FILE/ConceptEditorHintSettings</li> <li>node search history: WORKSPACE_FILE/NodeEditorSearchHistory</li> <li>project libraries: WORKSPACE_FOLDER/libraries.xml</li> <li>bookmarks: WORKSPACE_FILE/BookmarksTool</li> <li>project view: WORKSPACE_FILE/ProjectView</li> <li>blame dialog: CONFIG_DIR/options/charismaBlameDialog.xml</li> <li>compiler settings: WORKSPACE_FOLDER/compiler.xml</li> <li>model checker settings: CONFIG_DIR/options/modelCheckerSettings.xml</li> <li>modules: WORKSPACE_FOLDER/modules.xml</li> <li>project plugin settings: WORKSPACE_FILE/ProjectPluginManager</li> <li>generation settings: CONFIG_DIR/options/generationSettings.xml</li> <li>console history: WORKSPACE_FILE/ConsoleHistory</li> <li>breakpoints: WORKSPACE_FILE/BreakpointManager</li> <li>bookmarks: WORKSPACE_FILE/MPSBookmarkManager</li> <li>messages view tool settings: WORKSPACE_FILE/MessagesViewTool</li> <li>usages view tool settings: WORKSPACE_FILE/UsagesViewTool</li> <li>disabled intentions: CONFIG_DIR/options/intentions.xml</li> <li>editor settings: CONFIG_DIR/options/mpsEditor.xml</li> <li>migration trigger settings: WORKSPACE_FILE/MigrationTrigger</li> </ul> <p>Where can you find information about environment/JVM variables that are set in MPS?</p> <ul> <li>Advanced configuration | jetbrains.com \u29c9</li> <li>Configuring JVM options and platform properties \u29c9</li> <li>JVM<ul> <li>IntelliJ JVM Options Explained \u29c9</li> <li>Java HotSpot VM Options \u29c9</li> </ul> </li> <li>system properties<ul> <li>Java system properties \u29c9</li> <li>System Properties for Java 2D \u29c9 contains properties starting with <code>sun.java2d</code>.</li> <li>Networking System properties \u29c9 contains properties starting with <code>java.net</code>.</li> </ul> </li> </ul>","tags":["internals"]},{"location":"mps_internal/classloading/","title":"Classloading","text":"<p>Class loading is a process of dynamically loading Java classes into the Java Virtual Machine (JVM) at runtime. It is performed by an instance of the java.lang.ClassLoader class, which is responsible for finding, loading, and initializing the classes. Class loading is essential for the Java runtime system, as it allows the JVM to run Java programs without knowing about the underlying files or file systems. In MPS, you can reload most classes when they change automatically or through the action Reload All Classes to reload the classes of all modules.</p>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#classloaders","title":"Classloaders","text":"<p>Bootstrap class loaders, IDEA plugin class loaders, and module class loaders are the different available class loaders. Loading a class into an MPS module involves the module class loader, the class of its dependencies, and the bootstrap class loader. If a class comes from a JAR in the MPS/lib folder (a bootstrap-loaded class), you practically can\u2019t load another version of it. They also have different life cycles.</p> <p>Module class loaders can reload classes after rebuilding and are resilient toward hot reloading. IDEA plugin class loaders are just for the installed plugins, and they don't know what to do if a class needs reloading during runtime in the past. New versions of the IntelliJ platform know how to reload classes, but now we\u2019re within the MPS implementation.</p> <p>The IDEA plugin class loaders load JARs from the /plugins/&lt;plugin-name&gt;/lib directory. Jars from the /lib directory of the RCP are loaded from the root class loader. For your RCP, you usually don't want to put anything there. Code inside an IDEA plugin class loader may not access classes from module class loaders, but vice versa is fine. If you pass a module-loaded class to an IDEA plugin-loaded class and reload the module-loaded class, and then try to access the stale class, you might get a ClassNotFoundException. If you register a class in the plugin.xml, you should make sure it can be loaded from the IDEA plugin class loader. To do so, add its JAR to the /lib folder of your IntelliJ plugin.</p> location description Java class MPS/lib root class loader,boostrap class loader com.intellij.util.lang.UrlClassLoader /plugins//lib IDEA plugin class loader com.intellij.ide.plugins.cl.PluginClassLoader any MPS module with a Java facet module class loader jetbrains.mps.classloading.ModuleClassLoader","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#how-to-use-java-classes-shipped-in-mps-plugins","title":"How to Use Java Classes Shipped in Mps Plugins","text":"<p>For this example, assume that you want to use classes from the git4idea plugin inside your code.</p>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#solution-old","title":"Solution (Old)","text":"<ol> <li>Create a solution MySolution.</li> <li>Create a model ending with \".plugin,\" for example MySolution.plugin.</li> <li>Add the language jetbrains.mps.lang.plugin.standalone to both the MySolution.plugin model and the MySolution solution.</li> <li>Create a StandalonePluginDescriptor in the model MySolution.plugin.</li> <li>Add MySolution to a build model named MySolution.build.</li> <li>Create an idea plugin with ID MySolution.IdeaPlugin.</li> <li>Add MySolution.build to the idea plugin MySolution.IdeaPlugin content.</li> <li>Add the dependency on git4idea to MySolution.IdeaPlugin dependencies.</li> <li>Execute the build script.</li> <li>In properties of solution MySolution, on the Facets tab, select Idea Plugin.</li> <li>In the newly appearing Idea Plugin tab, set the plugin ID to MySolution.IdeaPlugin.</li> <li>Restart MPS.</li> </ol> <p>Now the classes within git4idea are available within MySolution.</p> <p>Attention: MPS IDE won't build the code within solution MySolution anymore. Run the build script to activate any changes.</p>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#solution-new","title":"Solution (New)","text":"<p>You can find an example here \u29c9.</p> <ol> <li>Create a solution git4idea.withJavaFacet.</li> <li>Edit the created .msd file and make the following modifications: <pre><code>  &lt;solution&gt;\n    ...\n  &lt;models&gt;\n    &lt;modelRoot contentPath=\"${module}\" type=\"default\"&gt;\n      &lt;sourceRoot location=\"models\" /&gt;\n    &lt;/modelRoot&gt;\n    &lt;modelRoot contentPath=\"${mps_home}/plugins/git4idea/lib\" type=\"java_classes\"&gt;\n      &lt;sourceRoot location=\"git4idea-rt.jar\" /&gt;\n      &lt;sourceRoot location=\"git4idea.jar\" /&gt;\n    &lt;/modelRoot&gt;\n  &lt;/models&gt;\n  &lt;facets&gt;\n    &lt;facet type=\"java\" languageLevel=\"JAVA_8\"&gt;\n      &lt;classes generated=\"true\" path=\"${module}/classes_gen\" /&gt;\n    &lt;/facet&gt;\n    &lt;facet pluginId=\"Git4Idea\" type=\"ideaPlugin\" /&gt;\n  &lt;/facets&gt;\n  &lt;stubModelEntries&gt;\n    &lt;stubModelEntry path=\"${mps_home}/plugins/git4idea/lib/git4idea-rt.jar\" /&gt;\n    &lt;stubModelEntry path=\"${mps_home}/plugins/git4idea/lib/git4idea.jar\" /&gt;\n  &lt;/stubModelEntries&gt;\n  &lt;sourcePath /&gt;\n  &lt;dependencies&gt;\n    ...\n  &lt;/dependencies&gt;\n    ...\n&lt;/solution&gt;\n</code></pre></li> </ol> <p>The JAR files are directly referenced from the MPS plugins folder. The JARs are then loaded as part of the Git4Idea facet.</p>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#classloading-issues","title":"Classloading Issues","text":"<p>Sometimes you might get conflicts with existing libraries that MPS already ships. For instance, while using the <code>SAXBuilder</code>. In these cases, you will get a class version exception or similar. As a workaround, you can set the class loader and the current thread while instantiating such classes:</p> <pre><code>class ClassLoading {\n    void setClassLoader() {\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        try {\n            Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n            SAXBuilder sax = new SAXBuilder();\n            return sax.build(f);\n        } finally {\n            Thread.currentThread().setContextClassLoader(cl);\n        }\n    }   \n}\n</code></pre>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#questions","title":"Questions","text":"<p>How can you load resources from modules?</p> <ul> <li>Adding resources to MPS modules \u29c9 (Specific Languages' blog)</li> </ul> <p>This prevents the exception, but make sure to set the class loader back when you finish. Calling things written in MPS, like behavior methods when the class loader changes, is also likely to not work and gives you all kinds of strange exceptions.</p> <ul> <li>Making Apache POI work with MPS 2020.3: solving class loader hell \u29c9 (Specific Languages' blog)</li> <li>A weird ClassCastException \u29c9 (Specific Languages' blog)</li> </ul>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/dependencies/","title":"Dependencies","text":"<p>Some sections on this page were written a few years ago, where an older MPS version was used. Please report anything that isn't true anymore.</p> <p>The number of languages can be important: many small languages are hard to maintain, while big languages take a long time to build in the IDE. Many dependencies can create cycles which are described later.</p> <p>By default, you can only reference nodes present in the current model. Dependencies add other models and modules that you can reference from the current model.</p> <p>Models listed as dependencies of the model \\(A\\) need to be contained within modules listed in the dependencies (including transitive entries) of the module containing this model. Example:</p> <p></p> <p>You can't mark a model internal and hide it from outside access.</p>"},{"location":"mps_internal/dependencies/#export-flag","title":"Export flag","text":"<p>It exports a Module Dependency again to be used by modules depending on this module. Example:</p> <p></p>"},{"location":"mps_internal/dependencies/#scope","title":"Scope","text":"<p>Default Scope is available for all module types.</p> <p>Extends Scope is a superset of Default Scope. For example, you never need to have both a Default Scope and an Extends Scope dependency on another module.</p>"},{"location":"mps_internal/dependencies/#extends-scope-for-languages","title":"Extends Scope for Languages","text":"<p>LanguageB (containing ConceptB) must extend LanguageA (containing ConceptA and ConceptInterfaceA) if and only if</p> <p></p> <p>Another case is if LanguageB defines a generator outputting ConceptA and LanguageA has a runtime solution.</p> <p>LanguageB shouldn't extend LanguageA (but needs a Default Scope dependency) if</p> <p></p> <p>LanguageB can't define</p> <p></p> <p>Removing all errors flagged on behaviors and constraints in LanguageB is possible. However, they aren't taken into account for ConceptA.</p>"},{"location":"mps_internal/dependencies/#extends-scope-for-generators","title":"Extends Scope for Generators","text":"<p>GeneratorB (inside LanguageB, and containing ConceptB) must extend GeneratorA (inside LanguageA, and containing ConceptA) if and only if GeneratorB.</p> <p></p>"},{"location":"mps_internal/dependencies/#implicit-dependencies","title":"Implicit Dependencies","text":"<p>MPS adds some dependencies implicitly without listing them in the corresponding dialog.</p> <p>Warning: Even if the dependencies described below are established implicitly, they aren't taken into account in every aspect of MPS. So if an error occurs, ensure you don't rely on some implicit dependency. If in doubt, make the dependency explicit.</p>"},{"location":"mps_internal/dependencies/#implicit-dependencies-inherited-by-a-generator-from-its-language","title":"Implicit Dependencies Inherited by a Generator From Its Language","text":"<p>A Generator inherits some dependencies from the language where it's defined in:</p> <ul> <li>The language's runtime solutions are added to the generator module dependencies.</li> <li>The language's module is added to the generator module dependencies.</li> <li>The language is added to the generator's Used languages.</li> </ul> <p>Except in the case of generating a concept of a language that has a runtime solution, there's no requirement on the language's dependencies or Used Languages stemming from the generator.</p>"},{"location":"mps_internal/dependencies/#implicit-exports-of-used-language-and-language-structure-aspect","title":"Implicit Exports of Used Language and Language Structure Aspect","text":"<p>Both a Used Language and the language structure aspect implicitly make accessing the language's behavior methods possible. However, they don't export the complete behavior aspect again. For example, a Base Language class contained in the behavior Aspect isn't visible.</p>"},{"location":"mps_internal/dependencies/#implicit-exports-of-runtime-language-settings","title":"Implicit Exports of Runtime Language Settings","text":"<p>Runtime solutions are</p> <ul> <li>implicitly loaded into the Java classpath of any module using this language.</li> <li>implicitly added to the dependencies of the generator contained in this language.</li> </ul> <p>Accessory Models are</p> <ul> <li>implicitly loaded into the dependencies of any model using this language.</li> </ul> <p>Accessory Models aren't designed to keep any classes. This is design-only information. They shouldn't affect the Java classpath anyhow.</p> <p>Neither runtime solutions nor accessory models constitute a dependency from the language to the referenced solution or model.</p>"},{"location":"mps_internal/dependencies/#cyclic-dependencies","title":"Cyclic Dependencies","text":"<p>Avoid cyclic dependencies between modules. They tend to render generation orders and other behavior non-deterministic. Languages are explicitly checked not to have a cyclic Extends Scope dependency. Cycles between models in the same module are fine. Starting with MPS 2021.1, there's a higher chance that you could run into troubles with cyclic dependencies. The reason is the new Javax compiler that doesn't act as forgiving as the earlier one (ECJ).</p> <p>Distinctive cases are runtime solutions, accessory models, and utility models.</p> <p>In contrast to runtime solutions, utility models are used while accessing behavior or running a generator. Code within runtime solutions is used after the generator runs from the generated code. Thus, a runtime solution shouldn't use or reference the language it is referenced from. A utility model can use or reference the language it is referenced from.</p> <p>Accessory models can use or reference the language they're referenced from.</p> <p>For build scripts, there's a flag that allows bootstrap dependencies. The section MPS Settings of the build language documentation \u29c9 contains more information. </p>"},{"location":"mps_internal/editor_development/","title":"Editor Development","text":"","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#terminology","title":"Terminology","text":"<ul> <li>Edited node: the (root) node of the editor component, or the currently selected node in the editor</li> <li>Cell: The MPS editor consists of cells that can contain other cells or UI elements like texts or buttons.</li> <li>Root cell: the top-most cell of the editor component</li> <li>Big cell: A cell is big if it's the top-most cell in the editor for an associated node. Example: in the plus expression[left + right], the surrounding collection would be the big cell for the plus expression node.</li> </ul> <p>A few terms are also common in typography or are encountered in web development.</p> <ul> <li>Padding-left/right/top/bottom is a floating point number, which specifies the padding of a text cell, that's, how much space is between the cell's text and the cell's left and right sides, respectively.</li> <li>Inset is the size of the element's borders. It specifies the space that an element must leave at its edges. In some editor cells, it corresponds to the so-called padding of the editor cell.</li> <li>The baseline is the line upon which most letters sit (other explanation \u29c9).</li> <li>Ascent is the recommended distance above the baseline for a single-spaced text (other explanation \u29c9).</li> <li>Descent is the recommended distance below the baseline for a single-spaced text (other explanation \u29c9).</li> <li>A gap is a space between cells in a collection. There's a left and right gap. The punctuation properties \u29c9 influence it.</li> </ul> <p>This graphic from towardsdatascience.com \u29c9 explains some tree structure terminology:</p> <p></p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcomponent","title":"EditorComponent","text":"<p>The class EditorComponent implements the MPS editor. A few similar classes/interfaces exist: jetbrains.mps.openapi.editor.EditorComponent \u29c9 is the interface that provides the API for interacting with the editor component. jetbrains.mps.nodeEditor.EditorComponent contains the actual implementation. It has some subclasses where only jetbrains.mps.editor.HeadlessEditorComponent \u29c9 is interesting. Use this editor component in the headless mode. Create instances of this editor component to render the node tree as a projection-specific text, render the node tree as a picture, and call some editor-specific actions, for example, substitute and other use cases (source \u29c9).</p> <p>When you initialize an editor component, you can provide an editor configuration \u29c9. The property notifies informs the editor component to send out EditorComponentCreateListener \u29c9 notifications. The property is set to true for MPS IDE editors and the inspector and false for other scenarios. Some languages in  MPS Extensions \u29c9 need this flag to be true to activate the languages.</p> <p>The editor component extends JComponent, has antialiasing enabled, and has a left margin of 15 pixels and a top margin of 10 pixels. The gap between the content and the scrollbars is 15 pixels. The editor contains objects of type EditorCell \u29c9, arranged in a tree structure. You can right-click in the editor and select Language Debug \u2192 Show Cell in Explorer to show the currently selected cell in the cell explorer tool. The editor component is responsible for the editor's content and interacts with the type-checking thread, the highlighter (left highlighter column but also the message gutter on the right side).</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#left-highlighter","title":"Left Highlighter","text":"<p>The left editor highlighter contains the buttons for folding editor cells and other buttons such as implements interface and overrides method. Two different ways of adding new information to the highlighter exist:</p> <ol> <li>Add a new checker to the highlighter (example \u29c9). The checker can only contribute an icon and a tooltip to the main column.</li> <li>Add a new column (example \u29c9). It's more difficult to implement, but you can fully customize the column.</li> </ol> <p></p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#updatesession","title":"UpdateSession","text":"<p>As the name already implies, the class updates the editor. It registers dependencies between nodes, registers big cells, updates child cells, and can return attributed cells. It also gives access to the EditorCellFactory through getCellFactory(). It can be accessed through Updater.getCurrentUpdateSession. Read the JavaDoc \u29c9 to understand how dependencies in the editor work.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcontext","title":"EditorContext","text":"<p>The editor context provides access to editor-related objects like the editor component, editor component state, selection manager, context assistant manager, and editor panel manager.</p> <p>The EditorContext gets destroyed when the editor is laid out again and can serve as a key in an editor cache.</p> <ul> <li>getRepository(): returns an object of type SRepository \u29c9</li> <li>getSelectedNode(): returns the currently selected node in the editor</li> <li>selectWRTFocusPolicy sets the focus for a cell or node based on its focus policy defined in the attracts focus item in the common section in the editor's inspector (wrt stands for with respect to). </li> <li>select: selects the node in the editor</li> <li>getSelectedCell(): returns the selected cell in the editor component</li> <li>flushEvents(): processes all pending model events, such as property changes and adding/removing children. This method is called at the start of the selectX methods, and sometimes you have to call it when not all changes to the model are visible.</li> <li>getContextCell(): returns the cell of runWithContextCell or the current select cell</li> <li>getSelectionManager(): returns the class that's responsible for handling editor selections</li> <li>getEditorPanelManager(): returns a class that can open MPS editors for nodes through openEditor(node)</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcell","title":"EditorCell","text":"<p>An EditorCell is a rectangle that has a position(x and y) and a dimension (width and height) that can draw anything in the editor (overwrite paintContent). To request a relayout of the cell, call requestRelayout or call relayout to laid it out directly. Editor cells support saving additional information (user objects) by calling the methods putUserObject(key, value) and getUserObject(). Cell actions \u29c9 for action maps.</p> <p>To manually set the style of a cell, call <code>cell.getStyle().set(attribute, value)</code>. Warnings, errors, and other messages are also directly attached to cells. You can access them through getMessages. The resulting list is sorted from less important to the most important messages, so the most important messages are appended to the end of this list. getSubstituteInfo and setSubstituteInfo can influence the substitution of nodes \u29c9. For example, these methods can be useful in tables in  MPS Extensions \u29c9 where you might want to customize the behavior.</p> <p>When MPS copies a node to the clipboard, it copies the node itself and a textual representation. The method renderText() is used for the latter case as it renders the cell and its descendants as text.</p> <p>getCellContext and setReferenceCell can modify the EditorCellContext. The first method returns non-null values for any big and non-big cells if their parent changes the context (e.g., the parent collection cell pushes down some additional hints). You can use the CellInfo instance to remember the cell to find it later in (another instance of) the editor.</p> <p>When you enter text next to a cell (side transformation), the editor adds a new EditorCell_StHint \u29c9. You can access it through <code>EditorCell_STHint.getSTHintCell(node, editorComponent</code>). A sideTransformInfo \u29c9 attribute saves the information about the side and cell id of the hint cell.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#custom-cells","title":"Custom Cells","text":"<p>Extend one of the existing EditorCell implementations like EditorCell_Collection or EditorCell_Constant to use as the basis for the new cell. Override the paintContent method to draw custom stuff in the editor (e.g., EditorCell_DropDown \u29c9 in  MPS Extensions \u29c9). If you need a custom implementation of the relayout method, you can override relayoutImpl from EditorCell_Basic, for example:</p> <pre><code>@Override\nprotected void relayoutImpl() {\nmyWidth = myImages.getHeight();\nmyHeight = myImages.getWidth();\n}\n</code></pre>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#manipulationtraversal","title":"Manipulation/Traversal","text":"<ul> <li>CellTraversalUtil \u29c9: navigation of the editor cell tree. The method iterateTree returns an iterator that you can use to iterate through a tree.</li> <li>CellFinderUtil \u29c9</li> <li>CellFinder \u29c9</li> <li>EditorUtil \u29c9 in  MPS Extensions \u29c9.</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#folding","title":"Folding","text":"<p>Code folding \u29c9 mainly affects cells of type EditorCell_Collection \u29c9. Call <code>collection.fold()</code> to fold the collection and <code>collection.unfold()</code> to unfold it. The position of the folded cells will stay the same in the folded state and will be recalculated when the collection is unfolded. When a cell is folded, it's in a collapsed state. To get the folded collection for a child cell, call <code>CellTraversalUtil.getFoldedParent</code>. To check if it's folded, call <code>CellTraversalUtil.isCellUnderFoldedCollection</code>.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#celllayout","title":"CellLayout","text":"<p>The celllayout language \u29c9 in  MPS Extensions has a layout engine and replaces the MPS layout engine when you use styles of the language. If you want to understand the first language, study the MPS implementations \u29c9 of the different layouts first. The MPS documentation \u29c9 describes the different layouts. What are the advantages of the cell layout language concerning the MPS layouts?</p> <p>Layouting happens from the root to the leaves. That means children are asked for their preferred/min/max size, but the parent sets the size and the child has to fit into that size.</p> <p>This behavior gives more control over the resulting layout, such as:</p> <ul> <li>Rich text (or any indent layout) can be wrapped to fit into the size of   a table column. The indent layout always wraps at the right   margin line.</li> <li>making a horizontal line as wide as the cell above/below or as wide as the page</li> <li>Having additional cells on the right of a rich text without them being   pushed over the right margin (the text wraps earlier).</li> <li>In a diagram, the content of a box can fit the size of the box.   This is especially useful if sub-diagrams exist in the box. In the past,   this was only possible with some ugly hacks.</li> </ul> <p>You can use a CSS-like box model for setting border sizes and  margins on cells and respecting them in the layout. MPS allows only borders of size 1 by default.</p> <p>This framework is compatible with the existing layouts in MPS. That means implementations for horizontal, vertical, vertical-grid, and indent layouts exist that support this new architecture. You don't need to change anything. You can still use the MPS editor language.</p> <p>You can also have custom layouts based on the default MPS layout architecture. This framework can handle them in a parent cell (for example, margin comments) or child cell (e.g., math).</p> <p><sub>contributed by: @slisson<sub>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcellcontext","title":"EditorCellContext","text":"<p>The editor cell context contains the used editor hints \u29c9 and optional information about the property edited by the cell. It also contains the node location in the tree. It is used to specify the location for both transformations and substitutions. Usually, the same node is transformed and substituted, but when creating a menu for an empty cell, the transformations are collected for the parent. In contrast, substitutions are collected for the (non-existent) child.</p> <p>The EditorCellContext gets destroyed on the editor relayout but is recreated and can be used as a key in an editor cache.</p> <p>The class EditorCellFactory \u29c9 is also used to create new editor cells and manipulate the cell context. Read its JavaDoc to understand more about its methods. To access the EditorCellContext through the EditorContext call</p> <pre><code>editorContext.getEditorComponent().getUpdater().getCurrentUpdateSession().getCellFactory().getCellContext()\n</code></pre>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#selection","title":"Selection","text":"<p>The selection manager handles the selection stack. A new selection object is pushed onto the stack when extending the selection \u29c9. When shrinking the selection \u29c9, the selection is removed (pop selection) from the stack. The deepest selection refers to the top of the stack. To get the current selection, call getSelection. To unselect everything, call clearSelection. A few different setSelection methods exist that work with nodes or cells. The JavaDoc \u29c9 explains them. A selection contains the following information and methods:</p> <ul> <li>The selection info (getSelectionInfo()) is persisted and is used to restore the selection when the editor is reopened.</li> <li>Use canExecuteAction and executeAction to execute an action for the selected cells. The available actions are listed in the enum CellActionType. The different types are implemented as actions in plugin solutions, for example, the action SelectLocalHome \u29c9 calls <code>editorComponent.getSelectionManager().getSelection().executeAction(CellActionType.SELECT_LOCAL_HOME)</code>.</li> </ul> <p>A few built-in selections exist:</p> <ul> <li>EditorCellLabelSelection \u29c9: a selection for EditorCell_Label cells that supports ranges. A trivial selection in this context is a selection instance where the start equals the end of the selection.</li> <li>EditorCellSelection \u29c9: a selection of a single editor cell. The selection also selects the caret position.</li> <li>NodeRangeSelection \u29c9: a selection from a first node to a second one. </li> </ul> <p>In  MPS Extensions \u29c9, there are some more selections:</p> <ul> <li>LinearSelection \u29c9: a selection that is used for the mouse selection language </li> <li>MultilineSelection \u29c9: a selection used in the multiline language</li> <li>RichtextSelection \u29c9: a selection used in the rich text language</li> <li>TableRangeSelection \u29c9: for table selection from a start column/row to an end column/row.</li> <li>GraphSelection \u29c9: a selection used inside diagrams</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editor-extensions","title":"Editor Extensions","text":"<p>The editor can be enhanced throw editor extensions. Implement the class EditorExtensions \u29c9 and register it through a project plugin. An example of the mouse listener plugin:</p> <pre><code>project plugin MouseListenerPlugin {\n    private final EditorExtension selectionListener = new EditorExtension() {\n\n        @Override\n        public boolean isApplicable(@NotNull() EditorComponent p0) {\n            true;\n        }\n\n        @Override\n        public void install(@NotNull() EditorComponent editorComponent) {\n            DragSelectionMouseListener.getOrCreateInstance(((EditorComponent) editorComponent)).install();\n        }\n\n        @Override\n        public void uninstall(@NotNull() EditorComponent editorComponent) {\n            DragSelectionMouseListener.getInstance(((EditorComponent) editorComponent)).?uninstall();\n        }\n    };\n\n    init(project)-&gt;void {\n        EditorExtension extension = this.selectionListener;\n        ProjectHelper.toIdeaProject(project).?getComponent(EditorExtensionRegistry.class).?registerExtension(extension);\n    }\n\n    dispose(project)-&gt;void {\n        DragSelectionMouseListener.uninstallAll();\n        EditorExtension extension = this.selectionListener;\n        ProjectHelper.toIdeaProject(project).?getComponent(EditorExtensionRegistry.class).?unregisterExtension(extension);\n    }\n}\n</code></pre> <p>In this example, a new mouse and mouse motion listener are registered/unregistered:</p> <pre><code>public void install() { \n  getEditorComponent().addMouseListener(this); \n  getEditorComponent().addMouseMotionListener(this); \n} \n\npublic void uninstall() { \n  getEditorComponent().removeMouseListener(this); \n  getEditorComponent().removeMouseMotionListener(this); \n  instances.removeKey(getEditorComponent()); \n}\n</code></pre>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#caching","title":"Caching","text":"<p>When possible, try to cache objects/calculations. The editor component, a node, or EditorCellContext can be used, for example, as the keys in a map that represents the cache. You can use a weak hash map as the backing data structure (Guide to WeakHashMap in Java \u29c9): <code>map&lt;EditorComponent, YourListener&gt; instances = new weakHashMap&lt;EditorComponent, YourListener&gt;;</code> To let the garbage collector delete a referenced editor component in the listener when it is not needed anymore, and store it in a weak reference: <code>myEditorComponent = new WeakReference&lt;EditorComponent&gt;(editorComponent)</code></p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#disposing-of-resources","title":"Disposing of Resources","text":"<p>Register a dispose-listener for the editor component and execute your uninstall method in the body:</p> <pre><code>editorComponent.addDisposeListener(new EditorComponent.EditorDisposeListener() {\n    public void editorWillBeDisposed(EditorComponent editorComponent) {\n        editorComponent.removeDisposeListener(this);\n        uninstall();\n    }\n})\n</code></pre> <p>Make sure to also call it in the dispose method of your application/project plugin. Failing to dispose of the allocated resources can  lead to class reloading issues and memory leaks.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#painting","title":"Painting","text":"<p>EditorCell_Basic \u29c9 overwrites paintComponent and calls paintCell to paint the cell itself + paintDecorations to draw borders and messages in the editor. paintCell fills the background of the cell and paints the selection if necessary. Afterward, the method paintContent is called, which is the method that gets overridden most of the time. All the paintX methods have a Graphics object that can be cast to a Graphics2D \u29c9 object if necessary. The old documentation at Oracle is still a good starting point to learn more about 2d Graphics in Java \u29c9. To find examples in MPS, search for global usages of the Graphics \u29c9 class.</p> <p>Editor components support additional painting through the methods addAdditionalPainter and removeAdditionalPainter. They allow registering/unregistering objects of the class AdditionalPainter \u29c9. The highlighting of the currently selected line and red highlighting of the breakpoint line is implemented that way.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#additional-reference","title":"Additional Reference","text":"<ul> <li>Editor language generation API \u29c9</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/file_format/","title":"File Format","text":"<p>A few different persistence formats can be selected when creating a new model (<code>Model</code> \u2192 <code>storage format</code>):</p> <ul> <li>Pre-installed XML-based format MPS describes models in an XML format. Git changes are collected per model. It is the default format. There seems to be support for saving user objects (strings, node IDs, etc. but not serializable objects), but this option doesn't seem to be activated. User objects are therefore lost when existing MPS.</li> <li>Pre-installed XML-based File-Per-Root format (.mpsr)    Models are described in an XML format. Git changes are collected per root node. Some file-per-root-specific bugs \u29c9 exist.</li> <li>Pre-installed Binary-Format (.mpb)     Models are saved in a binary format. It can save user objects and should also be able to save serializable objects, but this might not be working. The information is saved directly in the model file.</li> </ul> <p>The persistence format was improved over the years (v4 - v8). Version 9 is the current format.</p> <p>Read the custom persistence \u29c9 chapter in the documentation to support a custom format.</p> <p>Here is a list of some other used file formats:</p> <ul> <li>languages (.mpl)</li> <li>solutions (.msd)</li> <li>models (.mps)</li> <li>devkit (.devkit)</li> <li>model headers (.model)</li> <li>Java files (.java)</li> <li>Kotlin files \u29c9 (.kt)</li> <li>Kotlin modules (.kotlin)</li> <li>compile Java files (.class)</li> <li>old MPS projects (.mpr)</li> <li>old workspace format (.mws)</li> <li>standalone generators (.mpst)</li> <li>Java archives (.jar)</li> <li>IntelliJ modules \u29c9 (.iml)</li> <li>generation info files \u29c9 (trace.info)</li> </ul>"},{"location":"mps_internal/gui/","title":"IntelliJ UI","text":"<ul> <li>Fixing ugly trees \u29c9 (Specific Languages' blog)</li> <li>Centering dialogs \u29c9 (Specific Languages' blog)</li> </ul>","tags":["internals","ui","intellij"]},{"location":"mps_internal/gui/#swing-components","title":"Swing Components","text":"<ul> <li>Use components from the IntelliJ platform. The   IntelliJ Platform Plugin SDK mentions some more components. Use the IntelliJ platform UI guidelines \u29c9 to create consistent and usable user interfaces.</li> <li>Capitalization: Most short textual items (menus, buttons, labels, for example) should have headline capitalization. Capitalize all words except for common words with up to three letters (a, an, the, and, or, so, yet, etc.) that don't appear as the first or last word. If the text isn't short, you should use capitalization in ordinary prose (sentence capitalization) instead.</li> <li>Read the Swing tutorials \u29c9 to get a better understanding of the components.</li> </ul> <p>Where can you find an overview of the user interface?</p> <p>The IntelliJ IDEA documentation \u29c9 explains the user interface from a user perspective.  The IntelliJ Platform Plugin SDK \u29c9 contains a more technical explanation.</p> <p>What exactly is an MPS action? How do they work?</p> <p>The MPS actions compile down to IntelliJ platform actions \u29c9, so you see actions from MPS and the IntelliJ platform (e.g., Close Floating Navigation Bar). Most icon buttons, like the buttons in the upper right corner of the window, or the image buttons in the MPS tools, are also IntelliJ buttons.</p> <p>Actions that you can turn on or off are of type ToggleAction \u29c9. They are used, for example, in KernelF in the run menu. A deprecated concept  addJavaAction  lets you add IntelliJ actions when referencing actions in an MPS plugin.</p> <p>To remove actions, use the actions filter language. You can modify the shortcuts of actions locally in Preferences-&gt;Keymap.</p> <p>How can I find the source of an action?</p> <p>There are a few different things that you could try:</p> <ol> <li>Guess. If the caption contains, for example, the text \"Clone\", search for a root node that has the name Clone in it. Alternatively, you can try searching through the console: <code>#instances&lt;scope = global&gt;(ActionDeclaration).where({~it =&gt; it.caption.contains(\"Clone\"); })</code></li> <li>Search the MPS GitHub repository: https://github.com/JetBrains/MPS/search?q=clone+solution \u29c9 for commits or code mentioning your keywords. In this case, the action must be called \"CloneModule\" based on the first results.</li> <li>If you find a similar action in the same context menu, check the other actions/groups in the same module. You might have found the groupSolutionRefactoring through the RenameModule \u29c9 action, which contains your action.</li> </ol> <p>If the caption is not dynamic, number 1 usually works. Suppose the action is located in the MPS.IDEA module, you will find it in the IntelliJ community sources \u29c9.</p> <p>How can you show modal dialogs for inputting text?</p> <p>Use the class com.intellij.openapi.ui.Messages \u29c9.</p> <p>How do you add messages to the right side of the window?</p> <p>In IntelliJ IDEA, it is called an error stripe \u29c9. In MPS it is called messages gutter \u29c9: <pre><code>jetbrains.mps.nodeEditor.EditorComponent component = ((EditorComponent) editorContext.getEditorComponent()); \nNodeHighlightManager highlightManager = component.getHighlightManager();\nhighlightManager.mark(message);\n</code></pre></p> <p>How can you add things to the left of the editor? (examples: breakpoints, go subclasses)</p> <p>The component is called LeftEditorHighlighter \u29c9.  Implement a checker to show messages in this component (for example OverrideMethodsChecker \u29c9).</p> <p>How do you add an icon to the status bar?</p> <p>Look at the implementation of the transient models widget \u29c9 and its initialization in TransientModelsNotification \u29c9.</p> <p>What parts of the IntelliJ Platform SDK can't be used in MPS because they are not supported?</p> <p>Everything related to text files: Documents \u29c9, PSI files, Templates \u29c9, QuickDoc, IDE Features Trainer, CodeSmellDetector, and Custom Language Support \u29c9.</p> <p>How can you have clickable icons in the left editor margin?</p> <p>Clickable icons in the left editor margin \u29c9 (Specific Languages' blog)</p> <p>Are there alternatives to message boxes?</p> <p>Use notification balloons instead of message boxes \u29c9 (Specific Languages' blog)</p> <p>What IDEA UI elements are available?</p> <p>Polished UI for free: IDEA UI components \u29c9 (Specific Languages' blog)</p> <p>How do you create menu items with checkboxes or combo boxes and make the actions findable?</p> <ul> <li>Extended actions: Checkboxes \u29c9 (Specific Languages' blog)</li> <li>Extended actions: Combo boxes \u29c9 (Specific Languages' blog)</li> <li>Extended actions: Making actions findable \u29c9 (Specific Languages' blog)</li> </ul> <p>How can you retrieve all opened windows in split-screen mode \u29c9?</p> <pre><code>FileEditorManagerEx.getInstanceEx(ProjectHelper.toIdeaProject(#project)).getSplitters().getWindows()\n</code></pre>","tags":["internals","ui","intellij"]},{"location":"mps_internal/intellij_integration/","title":"IntelliJ Integration","text":"<p>The different plugins of MPS are declared using a plugin configuration file. The functionality is split into plugin components \u29c9. <code>application-components</code> active when MPS starts, <code>project-components</code> active when a project opens.</p> <p>MPS uses existing IntelliJ extension points \u29c9. Look at Extension Point and Listener List | IntelliJ Platform Plugin SDK \u29c9 for a list of all extension points and listeners. Declare new extension points in a section extensionPoints where you must provide a qualified name and the interface to implement. The interface has to contain an extension point name declaration. Example:</p> <pre><code>public interface IntentionActionsProvider {\n  ExtensionPointName&lt;IntentionActionsProvider&gt; EP_NAME = new ExtensionPointName&lt;&gt;(\"com.intellij.mps.IntentionActionsProvider\");\n\n  @NotNull\n  AnAction[] getIntentionActions(@NotNull IntentionExecutable intention);\n}\n</code></pre> <p>You can register the extensions in an extensions block in the plugin.xml. The default extension namespace has to be <code>com.intellij</code> (example). The extension can also have attributes (example \u29c9).</p> <p>Link to different MPS plugin.xml files:</p> <ul> <li>Execution Api and Utility Languages \u29c9</li> <li>Execution configurations \u29c9</li> <li>MPS Ant Integration: Make \u29c9</li> <li>MPS Build Language \u29c9</li> <li>MPS Context Actions Tool \u29c9</li> <li>MPS Diagram Editor \u29c9</li> <li>Make \u29c9</li> <li>MPS Tooltips \u29c9</li> <li>JetBrains MPS Integration \u29c9</li> <li>Migration Support (+plugin base \u29c9)</li> <li>Debugger API for MPS \u29c9</li> <li>Java Debugger for MPS \u29c9</li> <li>JetPad \u29c9</li> <li>Idea Integration for MPS \u29c9</li> <li>MPS Java Integration (+Java platform \u29c9)</li> <li>MPS console (+actions \u29c9)</li> <li>Languages DevKit \u29c9</li> <li>Memory Tool \u29c9</li> <li>Model Checker \u29c9</li> <li>MPS Version Control Support \u29c9</li> <li>IDEA Core (+other files \u29c9)</li> </ul> <p>Included in other plugins:</p> <ul> <li>editor actions \u29c9</li> <li>editor \u29c9</li> <li>Java platform actions \u29c9</li> <li>MPSCore \u29c9</li> <li>PlatformActions \u29c9</li> </ul> <p>All the plugins use the charisma reporter \u29c9 for error reporting. This class makes it possible to report errors to YouTrack. Another notable extension is the declaration of the MPS language library. For example: <pre><code>&lt;mps.LanguageLibrary dir=\"/languages\" /&gt;\n</code></pre></p> <p>It tells MPS where to find the compiled MPS languages in the plugin folder.</p>","tags":["internals","intellij"]},{"location":"mps_internal/intellij_sdk/","title":"IntelliJ SDK","text":"<p>The best place to learn more about the IntelliJ platform is the IntelliJ Platform SDK documentation \u29c9. Two additional resources are also helpful if you want to understand how IntelliJ plugins are written (Introduction to creating IntelliJ IDEA plugins) and how the IDEA threading model works (Advanced guide to creating IntelliJ IDEA plugins \u29c9).</p> <p>Some parts of MPS are different from the IntelliJ platform, so those chapters are irrelevant: PSI + all text editor-specific code and custom languages support \u29c9.</p> <p>Where can you find a list of all IntelliJ registry entries?</p> <p>You find them in registry.properties \u29c9.</p> <p>How can I access the recent projects list more easily?</p> <ul> <li>A better \"Recent Projects\" menu \u29c9 (Specific Languages' blog)</li> </ul> <p>How can I create a class/component that MPS loads on demand?</p> <p>Create a lightweight service \u29c9 using the @Service \u29c9 annotation. An example service MyService could then be accessed through <code>ApplicationManager.getApplication().getService(MyService.class)</code></p> <p>How do you add a custom action to a toolbar?</p> <p>It is assumed that this is a toolbar group that is populated with custom actions. There is an <code>addJavaAction</code> that can be used in the ActionGroupDeclaration (example from IETS3 \u29c9), which lets you add objects of type AnAction like the ToggleAction in the example. You can circumvent the MPS action declarations this way.</p> <p>It is enough to extend AnAction and implement CustomComponentAction for custom swing components. Before implementing this, search the IntelliJ/MPS code base for such classes. There are, for example, TextFieldAction and JButtonAction \u29c9. Search for [Button|Text|..]Action in MPS to find such instances and look for existing components in the UI that look like the ones you need.</p> <p>Actions | IntelliJ Platform Plugin SDK \u29c9 contains  the general documentation for IntelliJ actions.</p> <p>How to make messages in the messages view \u29c9 clickable?</p> <p>Technically, the messages view is an MPS tool unrelated to the IntelliJ platform. The message statement has a throwable parameter that you can used to attach exceptions. In the generator, there is <code>genContext.show error &lt;messageText&gt; -&gt; &lt;node&gt;</code> which takes a message and a node. In MPS 2022.3, there is also support for a <code>hintObject</code> in the message statement so you can jump directly to a node, model, or module.</p>","tags":["internals","intellij"]},{"location":"mps_internal/intellij_sdk/#message-bus-and-listeners-message-interface","title":"Message Bus and Listeners (Message Interface)","text":"<p>Reference:</p> <ul> <li>IntelliJ Messaging Infrastructure \u29c9</li> <li>Declarative registration of Plugin Listeners \u29c9</li> </ul> <p>You can use a message bus to listen for IntelliJ or custom events and send out events. You connect and subscribe to different topics through listeners. You don't have to store and remove each listener you added; you can disconnect from the bus. Find topics on the MPS console with the following code:</p> <pre><code>#nodes&lt;scope = global&gt;.ofConcept&lt;StaticFieldDeclaration&gt;.where(\n    {~it =&gt; it.type.isInstanceOf(ClassifierType) &amp;&amp; it.type:ClassifierType.?classifier.?name.?equals(\"Topic\"); \n    }\n)\n</code></pre> <p>Example:</p> <pre><code>class MessageBusExample {\n    void connect() {\n      this.busConnection = ideaProject.getMessageBus().connect();\n      FileEditorManagerListener myListener = new FileEditorManagerListener() { // implement listener (1)\n        @Override\n        public void selectionChanged(@NotNull() FileEditoManagerEvent event) {\n          // code\n        }\n      };\n      this.busConnection.subscribe(FileEditorManagerListener.FILE_EDITOR.MANAGER, myListener);       \n    }\n}\n</code></pre> <ol> <li>You have to implement <code>selectionChanged</code> for this listener.</li> </ol>","tags":["internals","intellij"]},{"location":"mps_internal/java_design_patterns_in_mps_sources/","title":"Java Design Patterns in the MPS Sources","text":"<p>This page lists three examples or less per Java design pattern \u29c9 in the MPS source code. The headers link to explanations and demos for the corresponding design patterns in the Java world.</p>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#creational-patterns","title":"Creational Patterns","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#abstract-factory","title":"Abstract Factory","text":"<ul> <li>AbstractPluginFactory \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#builder","title":"Builder","text":"<ul> <li>Builders language \u29c9</li> <li>AbstractEditorBuilder \u29c9</li> <li>EditorConfigurationBuilder.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#factory-method","title":"Factory Method","text":"<ul> <li>AbstractContainerTest.java \u29c9</li> <li>EditorCellFactory.java \u29c9</li> <li>Custom cell | MPS documentation \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#prototype","title":"Prototype","text":"<ul> <li>Copyable.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#singleton","title":"Singleton","text":"<ul> <li>EditorSettings.java \u29c9</li> <li>PersistenceFacade.java \u29c9</li> <li>GlobalIconManager.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#structural-patterns","title":"Structural Patterns","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#adapter","title":"Adapter","text":"<ul> <li>GenerationTaskAdapter.java \u29c9</li> <li>GeneratorLoggerAdapter.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#bridge","title":"Bridge","text":"<ul> <li>NavigationSupportImpl \u29c9</li> <li>UpdateSessionImpl \u29c9</li> <li>TextBuilderImpl.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#composite","title":"Composite","text":"<ul> <li>CompositeScope.java \u29c9</li> <li>CompositeSubstituteInfo.java \u29c9</li> <li>CompositeResult.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#decorator","title":"Decorator","text":"<ul> <li>ProgressMonitorDecorator \u29c9</li> <li>NodeSubstituteInfoFilterDecorator.java \u29c9</li> <li>ConstraintsFilteringSubstituteMenuPartDecorator.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#facade","title":"Facade","text":"<ul> <li>GenerationFacade.java \u29c9</li> <li>ModuleRepositoryFacade.java \u29c9</li> <li>FindUsagesFacade.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#flyweight","title":"Flyweight","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#proxy","title":"Proxy","text":"<ul> <li>SubstituteItemProxy.java \u29c9</li> <li>RunConfigurationProxy.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#behavioral-patterns","title":"Behavioral Patterns","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#chain-of-responsibility","title":"Chain of Responsibility","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#iterator","title":"Iterator","text":"<ul> <li>BreadthConceptHierarchyIterator.java \u29c9</li> <li>DescendantsTreeIterator.java \u29c9</li> <li>FilterIterator.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#memento","title":"Memento","text":"<ul> <li>Memento.java \u29c9</li> <li>MappingsMemento.java \u29c9</li> <li>BaseNodeEditor.java#BaseEditorState \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#state","title":"State","text":"<ul> <li>CaretState.java \u29c9</li> <li>State.java \u29c9</li> <li>CheckpointState.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#template-method","title":"Template Method","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#command","title":"Command","text":"<ul> <li>Save and revert changes | MPS documentation \u29c9 </li> <li>SubstituteEquationOperation.java \u29c9</li> <li>SNodeUndoableAction.java \u29c9</li> <li>RestoreVirtualFileInstance.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#mediator","title":"Mediator","text":"<ul> <li>GenerationController.java \u29c9</li> <li>ContextAssistantController.java \u29c9</li> <li>MigrationScriptsController.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#observer","title":"Observer","text":"<ul> <li>Messaging Infrastructure | IntelliJ Platform Plugin SDK \u29c9</li> <li>SModelListener.java \u29c9</li> <li>ProjectManagerListener.java \u29c9</li> <li>MPSTreeNodeListener.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#strategy","title":"Strategy","text":"<ul> <li>FromModulesListProjectStrategy.java \u29c9</li> <li>FromProjectPathProjectStrategy.java \u29c9</li> <li>FromDirWithModulesProjectStrategy.java \u29c9</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#visitor","title":"Visitor","text":"<ul> <li>SModelEventVisitor.java \u29c9</li> <li>IntentionsVisitor.java \u29c9</li> <li>ModuleVisitor.java \u29c9</li> </ul>"},{"location":"mps_internal/models/","title":"Model","text":"<p>UI: An entry below a module in the logical view; they may be nested in folders.</p> <ul> <li>Container for model contents limiting dependencies to other models.</li> <li>They are within the boundaries of the containing module.</li> </ul> <p>Models can be nested in folders. Folders are only for visual organization. They don't affect storage location, generation, or any other aspect.</p>"},{"location":"mps_internal/models/#types-of-models","title":"Types of Models","text":"<p>The IDE knows several types of models. They differ in their semantics and sometimes presentation. They don't differ from a technical point of view.</p>"},{"location":"mps_internal/models/#regular-models","title":"Regular Models","text":"<p>UI: An entry below a solution in the logical view</p> <p>They contain root nodes with no specific semantics or presentation.</p>"},{"location":"mps_internal/models/#language-aspects","title":"Language Aspects","text":"<p>UI: An entry below a language in the logical view</p> <p>Aspects are models within a language with a special meaning. Their name recognizes them.</p>"},{"location":"mps_internal/models/#plugin-aspect","title":"Plugin Aspect","text":"<p>Although this aspect adheres to the plugin model naming convention, please don't use it. Use it only to define MPS extension points (from the language jetbrains.mps.lang.extension).</p>"},{"location":"mps_internal/models/#test-model","title":"Test Model","text":"<p>UI: An entry below a solution in a specific folder named <code>tests</code> with a specific icon in the logical view</p> <p>A model containing tests. It is defined by the @tests stereotype.</p>"},{"location":"mps_internal/models/#generator-model","title":"Generator Model","text":"<p>UI: An entry with a specific icon below the generator in the logical view</p> <p>A model containing the generator, defined by the @generator stereotype.</p>"},{"location":"mps_internal/models/#transient-model","title":"Transient Model","text":"<p>UI: Last entry below the project in the logical view</p> <p>Temporary models produced during generation, defined by @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb stereotype.</p>"},{"location":"mps_internal/models/#accessories-model","title":"Accessories Model","text":"<p>UI: An entry below a language in a specific folder named accessories in the logical view or an entry below the solution in the logical view</p> <p>A model specially selected by a language. Nodes contained in these models are implicitly available on the Java classpath and the dependencies of any model using this language. A use case would be a default library of concept instances available at any place you use the language.</p> <p>You can store accessory models in two places: either as an aspect of a language (recommended) or a regular model below a solution. In both cases, you must add the model to the module runtime language settings.</p>"},{"location":"mps_internal/models/#utility-model","title":"Utility Model","text":"<p>UI: An entry below a language in a special folder named util models in the logical view</p> <p>It includes code required in other parts of a language or generator. If, for example, the behavior method logic is too complex for inline implementation or a generator needs to do complex model traversals. Create them as regular models within the language.</p>"},{"location":"mps_internal/models/#build-model","title":"Build Model","text":"<p>UI: An entry below a solution in the logical view</p> <p>It includes nodes from the build language.</p>"},{"location":"mps_internal/models/#mps-plugin-model","title":"MPS Plugin Model","text":"<p>UI: A model within a solution in the logical view</p> <p>It includes MPS plugins. The model name must adhere to the naming convention \u00abmoduleName\u00bb.plugin.</p>"},{"location":"mps_internal/models/#model-stereotype","title":"Model Stereotype","text":"<p>UI: Attached to the model name, separated by @</p> <p>A model may have a stereotype. To change, add, or remove a stereotype, use Rename Model Refactoring in the context menu of a model.</p> <p>Using custom stereotypes interferes with lots of MPS internals and thus isn't advised to do.</p> <p>The IDE knows some predefined Stereotypes with specific meanings:</p> <ul> <li>@tests: Denotes test models.</li> <li>@generator: Denotes generator models.</li> <li>@transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb: Denotes transient models.</li> </ul>"},{"location":"mps_internal/models/#model-settings","title":"Model Settings","text":"<p>UI: A context menu of a model, model properties</p> <p>For both dependencies and used languages, the settings of models only restrict the settings from the containing module.</p>"},{"location":"mps_internal/models/#dependencies-model-settings","title":"Dependencies Model Settings","text":"<p>UI: A tab in the model properties dialog</p> <p>It lists other models this model contains references to.</p>"},{"location":"mps_internal/models/#used-languages-model-settings","title":"Used Languages Model Settings","text":"<p>UI: A tab in the model properties dialog</p> <p>It lists languages used in this model. Any Used Language listed in a model, must be in the list of Used Languages of the containing module.</p>"},{"location":"mps_internal/models/#advanced-model-settings","title":"Advanced Model Settings","text":"<p>UI: A tab in the model properties dialog</p> <p>It contains other settings for a model:</p> <ul> <li>Languages engaged on generation: Generators contained in languages listed here execute on this model in any case.</li> </ul>"},{"location":"mps_internal/models/#build-language","title":"Build Language","text":"<p>Abstracted Apache Ant \u29c9 files used to build and package MPS Modules outside the IDE. It's used in build models. MPS can execute them via the Run \u00abBuild Model name\u00bb context menu entry of the build model in the logical view.</p>"},{"location":"mps_internal/models/#dependencies","title":"Dependencies","text":"<p>UI: A section within the build model</p> <p>This is the scope import for all references to other build models. It provides access to resulting artifacts of other build models.</p>"},{"location":"mps_internal/models/#idea-plugin-dependencies","title":"IDEA Plugin Dependencies","text":"<p>UI: A section project structure in Build Model, subsection idea plugin, subsection dependencies.</p> <p>It contains the contents of IDEA plugin.xml \u29c9 depends-tags.</p> <p>This plugin only loads if all dependencies listed here load before. The contents of dependencies are available for this IDEA plugin.</p>"},{"location":"mps_internal/models/#module-dependencies","title":"Module Dependencies","text":"<p>UI: A section mps group in Build Model, subsection solution/module, inspector section dependencies</p> <p>It contains a copy of the relations of the described module.</p>"},{"location":"mps_internal/models/#runtime","title":"Runtime","text":"<p>It contains a copy of the module runtime language settings.</p>"},{"location":"mps_internal/models/#jars","title":"JARs","text":"<p>UI: A section default layout in Build Model</p> <p>You must include all jars in any Java module settings somewhere in this section. .java files (from Java source paths) need to be compiled as Java sources inside the corresponding build script and manually included into the resulting build layout: corresponding .class files should be jarred, .java files should be placed in the corresponding location if they are referenced by java_source_stub model root.</p>"},{"location":"mps_internal/mps_startup/","title":"What Happens on MPS Startup","text":"<p>This page looks behind the hood of the startup process of MPS 2021.1.4 and newer. For most parts, similar code executes for other MPS versions.</p> <p>The application starts with Launcher.java \u29c9, setting some IntelliJ-specific properties, such as the file watcher path and the platform prefix, and collecting the plugin paths when running MPS from sources. It then calls Main.kt \u29c9, where it sets flags about the execution environment, such as the headless mode or if the application is invoked from the command line. The system properties are also loaded and populated with data.  BootstrapClassLoaderUtil#initClassLoader() loads the class loader. Afterward, MainImpl.kt \u29c9 is looked up and executed. It mainly redirects the application's initialization to the ApplicationLoader#initApplication \u29c9 method. The time from this method to <code>ApplicationLoader.run</code> is called app initialization. Here, the command line arguments are first processed: a special method looks for <code>-Dkey=value</code> program arguments and stores some of them in system properties. A task on the event dispatch thread initializes the GUI and loads system fonts. Plugins are also initialized and loaded.</p> <p>You can start MPS from MPS itself through MPSEnvironment.java or IdeaEnvironment.java from outside. EnvironmentConfig Both initialize both classes. It also lets you specify the plugins, macros, and libraries that should be loaded. In IdeaEnvironment#createIdeaApplication \u29c9, some IntelliJ-specific properties are also set. Both environments can manage MPS projects (creating, opening, and closing them).</p> <p>For the integration with the IntelliJ platform, MPSCoreComponents \u29c9 plays an important role: it contains references to the following core components:</p> <ul> <li>MPS platform with the base class PlatformBase \u29c9</li> <li>PersistenceRegistry.java as the core component implementation of PersistenceFacade \u29c9. The PersistenceFacade represents a singleton registry of models, model root factories, find usages, and navigation participants.   It also provides methods to transform strings to model refs/module refs/node IDs and vice versa.</li> <li>LibraryInitializer.java, which manages library contributions (loading, unloading, updating). It creates instances of SLibrary for each path RepositoryContributor#getPaths() returns. SLibrary tracks a path with modules inside. It listens to file system events and reloads modules from the disk if necessary.  It is the layer between SRepository and SModule \u29c9 in the repository hierarchy (as well as the project).   The repository consists of library modules, project modules, and several special modules.</li> <li>ClassLoaderManager.java \u29c9 is responsible for loading classes within MPS.</li> </ul>"},{"location":"mps_internal/mps_startup/#mps-platform","title":"MPS Platform","text":"<p>The MPS platform contains so-called component plugins that are registered through PlatformBase:</p> <ul> <li>MPSCore.java \u29c9, the core MPS functionality layer</li> <li>MPSProjectValidation.java \u29c9, which provides validation code for project modules. It contains the following core checkers:<ul> <li>The structure checker \u29c9 inspects the structure aspect for errors (e.g., missing reference, properties)</li> <li>model properties checker implemented in ModelValidator.java \u29c9</li> <li>Module checker \u29c9, which shows errors in the logical view</li> <li>The constraints checker \u29c9 inspects parent/child, can be root/ancestor, and property constraints.</li> </ul> </li> <li>MPSMake.java \u29c9, which provides the components<ul> <li>MakeServiceComponent \u29c9 gives access to the active facility to perform project make</li> <li>FacetRegistry provides methods for registering/unregistering and looking up facades \u29c9.</li> </ul> </li> <li>MPSTypechecking \u29c9, which provides the components<ul> <li>TypecheckingFacadeComponent \u29c9</li> <li>LanguageScopeFactory \u29c9 </li> <li>TypecheckingBackend.java is used to install and uninstall TypecheckingProvider \u29c9.</li> </ul> </li> <li>MPSTypesystem.java \u29c9, which provides the components<ul> <li>TypeChecker \u29c9</li> <li>TypeContextManager, a deprecated class that shouldn't be used anymore (use TypecheckingFacade \u29c9 instead)</li> </ul> </li> <li>MPSGenerator \u29c9, which provides the components<ul> <li>ModelGenerationStatusManager allows querying the generation status of models and listening to changes in the generated files through a ModelGenerationStatusListener \u29c9.</li> <li>GenerationSettingsProvider manages the generation settings \u29c9.</li> <li>TraceRegistry, the entry component for the generator trace \u29c9 mechanism</li> </ul> </li> <li>MPSFindUsages \u29c9, which provides the components<ul> <li>FindUsagesFacade \u29c9, an effective (usually index-based) implementation of find usages routines.</li> <li>FindersManager \u29c9</li> </ul> </li> <li>MPSTextGenerator \u29c9, which provides the component <ul> <li>TextGenSettings, the settings \u29c9 that are used by text generation</li> </ul> </li> <li>MPSFeedbackPlugin \u29c9, which provides the component<ul> <li>FeedbackAspectRegistry, which manages the descriptors of the feedback language aspect \u29c9</li> </ul> </li> </ul>"},{"location":"mps_internal/mps_startup/#mpscore","title":"MPSCore","text":"<p>This class provides the following core components:</p> <ul> <li>LibraryInitializer, which manages library \u29c9 contributions (loading, unloading, updating)</li> <li>PersistenceFacade \u29c9, which represents a singleton registry of models, model root factories, find usages, and navigation participants.</li> <li>ClassLoaderManager \u29c9, which is responsible for loading classes within MPS</li> <li>MPSModuleRepository is a repository with modules visible in MPS. It is used by the class ProjectRepository \u29c9.</li> <li>LanguageRegistry \u29c9 manages languages and their generators.</li> <li>ModelFactoryRegistry stores default associations between ModelFactory and DataSourceType \u29c9 (many-to-many mapping). Examples of DataSourceTypes are the bundles' data source types .mps, .model, and .mpsr. The class also stores a mapping between model factory types and model factories, allowing users to replace the bundled persistence we provide.</li> <li>SRepositoryRegistry, which manages SRepository \u29c9 instances (they are storages for modules)</li> <li>FacetsFacade \u29c9 manages language facades.</li> <li>PathMacros manages path variables \u29c9 and also some builtin macros such as USER_HOME, MODULE_DIR, PROJECT_DIR, APPLICATION_PLUGINS_DIR, and MODULE_WORKING_DIR.</li> <li>ExtensionRegistry \u29c9, which manages extensions populated by classes loaded from compiled and deployed modules</li> <li>ConceptRegistry \u29c9 manages concept descriptors.</li> <li>DataSourceFactoryRuleService \u29c9, which is a service provider for defining own data source factories</li> <li>DescriptorIOFacade, which returns DescriptorIO \u29c9 instances that are responsible for reading and writing descriptors to/from a file</li> <li>ModelsAutoImportsManager manages AutoImportContributor. Classes that extend this class can automatically add languages to a model. For example, TestsModelAutoImports \u29c9 automatically adds the languages jetbrains.mps.lang.test and jetbrains.mps.baseLanguage.unitTest to test models.</li> <li>VFSManager is an entry point to access various file system protocols available in MPS. Virtual File System - IntelliJ Platform Plugin SDK \u29c9 contains More information about VFS.</li> <li>ProjectManager manages MPS projects. You can receive events sent while opening and closing a project through a ProjectManagerListener \u29c9.</li> </ul>"},{"location":"mps_internal/navigating_mps_source/","title":"Navigating the MPS Sources","text":"<p>This page describes the folder structure of the MPS sources that you can check out with Git from https://github.com/JetBrains/MPS \u29c9. The readme of the repository contains more information.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#idea","title":".idea","text":"<p>The <code>artifacts</code> directory contains the artifact-related settings. Artifacts | IntelliJ IDEA \u29c9 contains more information. Artifacts in this project are the generated jar files such as <code>mps-core.jar</code> and <code>vcs-core.jar</code>:</p> <p></p> <p>The directory also contains settings for code styles, copyright info, and enabled inspections. The paths to the used libraries (*.jar) are also specified in the <code>libraries</code> subfolder. The run configurations, search scopes as well as many other IntelliJ-specific project settings,</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#mps","title":".mps","text":"<p>This folder also contains run configurations and scopes but also other settings:</p> <ul> <li>codeStyleSettings.xml: style settings used for Base Language (e.g., default field and parameter prefix)</li> <li>compiler.xml: the version of the Java compiler (currently: 11)</li> <li>encodings.xml: encoding of the files (should be: UTF-8)</li> <li>migration.xml: list of executed MPS migrations in the current project </li> <li>misc.xml: miscellaneous settings (e.g., settings of favorites manager)</li> <li>modules.xml: a list of modules of this project MPS loads on startup</li> <li>vcs.xml: version control settings</li> <li>version.xml: project version (not used anymore)</li> <li>settings of different components (e.g., console history, messages view tool, project view)</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#bin","title":"bin","text":"<p>This folder contains executable files for the different operating systems (Windows, Mac, Linux). All of them use the executable fsnotifier to react to file system changes. OS-specific files:</p> <ul> <li> <p>Linux</p> <ul> <li>libdgbm: GNU dbm ('gdbm') is a library of database functions that use extendible hashing and works similarly to the standard UNIX dbm function source \u29c9</li> <li>restart.py: restarts MPS</li> </ul> </li> <li> <p>Mac</p> <ul> <li>libmacscreenmenu64.dylib: native access to the Apple menu bar \u29c9.</li> <li>libnst64.dlib: native access to the Apple MacBook Pro Touch Bar \u29c9. The library is called NST (NextStep Touch Bar).</li> <li>printenv: prints the environment variables</li> </ul> </li> <li> <p>Windows</p> <ul> <li>breakgen(64).dll: gracefully shut down a running process (not possible with Java).</li> <li>elevator.exe: a sudo-like tool for Windows to deal with UAC (source \u29c9)</li> <li>IdeaWin32/64.dll: native file system functions</li> <li>launcher.exe: launches MPS</li> <li>restarter.exe: restarts MPS</li> <li>runnerw.exe: an old library for Windows process management. WinP \u29c9 superseded it.</li> <li>WinProcessListHelper.exe: lists Windows processes</li> <li>WinShellIntegrationBridge.dll: integration with the Windows shell</li> <li>wslhash: hash calculation (?) for the Windows Subsystem for Linux \u29c9</li> <li>wslproxy: proxy (?) for the Windows Subsystem for Linux \u29c9</li> </ul> </li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#build","title":"build","text":"<p>The dependency manager of the project is Apache Ivy \u29c9. The corresponding folder is <code>build/ivy</code>.  The build tool is Apache Ant \u29c9. The <code>artifacts</code> folder contains the generated jar files. An artifact might look like this:</p> <ul> <li>languages: contains MPS languages</li> <li>modules: contains Java classes</li> <li>lib: Jar dependencies</li> <li>META-INF: contains the plugin configuration file \u29c9</li> <li>build.properties: contains the MPS version and IntelliJ plugin this artifact belongs to.</li> </ul> <p>The <code>dependencies</code> folder contains the Gradle configuration properties \u29c9.</p> <p><code>home/.ant/lib</code> contains additional Java libraries that can be used with Ant.</p> <p>The <code>resources</code> folder contains image resources as well as the following files:</p> <ul> <li>mps: executable file to start MPS</li> <li>mps-dmg.sh: Create an Apple Disk image \u29c9 for macOS</li> <li>mps-sign.sh: signs \u29c9 the MPS macOS application</li> </ul> <p>The <code>tests</code> folder contains Ant scripts for executing tests. The <code>tools</code> folder contains scripts for signing and creating DMGs and a version of the Java Runtime Environment and NSIS (Nullsoft Scriptable Install System) for creating an installer for Windows. The other XML files are also Ant scripts for different tasks (getting dependencies, building MPS languages, migration projects, etc.). The <code>run_build.sh</code> and <code>run_test.sh</code> can be used to run the build and tests on Linux/Mac. <code>update.xml</code> lists all MPS versions and helps with the automatic MPS update management.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#core","title":"core","text":"<p>The <code>aspects</code> folder contains the languages for the language aspects. The <code>baselanguage</code> folder contains the Base Language implementation and all its extensions, such as extension methods, closures, or the collection language.</p> <p>The folder <code>devkit</code> contains the four main devkits:</p> <ul> <li>jetbrains.mps.devkit.bootstrap-languages: contains all the jetbrains.mps.lang languages</li> <li>jetbrains.mps.devkit.general-purpose: Base Language + smodel + text +  quotation language</li> <li>jetbrains.mps.devkit.language-design + the previous 2 devkits + an intermediate language for baselanguage (baseLanguageInternal) + a language for resources</li> <li>jetbrains.mps.devkit.templates: general-purpose + generator languages</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#kernel","title":"kernel","text":"<p>It contains core languages of MPS such as loaders for Java stubs, classes for persistence, language checkers, make classes, and runtime classes for smodel such as <code>SConceptOperations.java</code> and <code>SModelOperations.java</code>.  </p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#languages","title":"languages","text":"<p>This folder contains all core languages such as smodel, quotation, access, quotations, and pattern.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#make","title":"make","text":"<p>Everything related to the make facet is in this folder.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#stub","title":"stub","text":"<p>This folder contains all stub models provided by MPS, for example, stubs for annotations (like JetBrains annotations \u29c9), Java core classes (JDK, e.g., <code>java.util.List</code>), and all MPS-related Java classes are located in solutions that start with the naming pattern <code>MPS.*</code> (e.g., MPS.Core).</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#tool","title":"tool","text":"<p>This folder contains classes for accessing MPS from Java (e.g., <code>MPSEnvironment</code>) and other tool-related classes, such as accessing Ant from Java.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#platform","title":"platform","text":"<p>This folder contains languages and solutions for the following platform features:</p> <ul> <li>build language</li> <li>console</li> <li>HTTP server</li> <li>make</li> <li>migrations</li> <li>model checker</li> <li>Java to MPS parsing</li> <li>spell checker</li> <li>debugging information (traceInfo)</li> <li>version control</li> <li>integrations with the IDEA platform</li> <li>integration for MPS plugin into IntelliJ IDEA</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#samples","title":"samples","text":"<p>This folder contains the samples that MPS ships with. When first accessed through the start screen, MPS unpacks them automatically into a folder in the home directory.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#tests","title":"tests","text":"<p>This folder contains classes for executing tests and all kinds of tests, such as generator tests or tests for the constraint aspect.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#workbench","title":"workbench","text":"<p>This folder contains subfolders for:</p> <ul> <li>MPS debugger \u29c9</li> <li>Context actions \u29c9</li> <li>editor related actions</li> <li>run configurations + execution of Base Language and other languages</li> <li>refactorings</li> <li>UI components and tools such as the dependency viewer, the new module dialog as well as different finders</li> <li>all other actions (jetbrains.mps.ide and jetbrains.mps.ide.mpsdevkit)</li> <li>editor tabs for the various language aspects</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/open_api/","title":"Open API","text":"<p>This page not only considers the language repository, project modules, languages, and models, which can be accessed through Open API but also other parts of MPS that can be accessed programmatically.</p> <p>In general, there are interfaces such as the ones from org.jetbrains.mps.openapi that you can use to programmatically access classes. The implementing classes can be in the same or a different package. For example, jetbrains.mps.openapi.editor.EditorComponent \u29c9 is the interface, jetbrains.mps.nodeEditor.EditorComponent \u29c9 one of the implementing classes. Especially implementing IntelliJ classes often have the suffix Impl, for example, DataManagerImpl is an implementation of DataManager \u29c9.</p> <p>How do you get an icon for a concept?</p> <pre><code>GlobalIconManager.getInstance().getIconFor(concept)\n</code></pre> <p>How can you copy a language without the new one having duplicate model IDs?</p> <pre><code>{ =&gt;\nSModule sm = module/module1;\nSModule tm = module/module2;\n\nmap&lt;SNode, SNode&gt; node = new hashmap&lt;SNode, SNode&gt;;\n\nforeach aspect in LanguageAspect.values {\n    SModel s = aspect.get((Language) sm);\n    SModel t = aspect.get((Language) tm);\n    if(s != null &amp;&amp; t!= null) {\n        foreach r in new arraylist&lt;SNode&gt;(copy: t.getRootNodes()) {\n            ((node&lt;&gt;) r).detach;\n        }\n        foreach r in CopyUtil.copyAndPreserveId((((sequence&lt;SNode&gt;) s,getRootNodes())).toList, node) {\n            t.addRootNode(r)\n        }\n    }\n}\n}.invoke()\n</code></pre> <p>How can you change the default project directory?</p> <p>Put the following code in an application plugin: <pre><code>// Set default project location \nstring defaultProjectDir = Paths.get(System.getProperty(\"user.home\"), \"NewProjectDir\").toString();\nGeneralSettings.getInstance().setDefaultProjectDirectory(defaultProjectDir);\n</code></pre></p> <p>How can you execute an MPS action programmatically?</p> <p>Use ActionUtils \u29c9 to create an event and to run the action:</p> <pre><code># cast to EditorContext class\nDataContext dataContext = DataManager.getInstance().getDataContext(((EditorContext) editorContext).getNodeEditorComponent()); \nAnActionEvent event = ActionUtils.createEvent(ActionPlaces.EDITOR_TAB, dataContext); \nActionUtils.updateAndPerformAction(action&lt;openHtmlReport&gt;, event);\n</code></pre> <p>Since this code is based on IDEA components, we need to get the <code>getNodeEditorComponent</code>, which is not part of the Open API. That's why we need to downcast it to the EditorComponent class.</p> <p>Note: <code>action&lt;\u2026&gt;</code> comes from the jetbrains.mps.lang.plugin language.</p> <p>How to shut down MPS programmatically?</p> <p>In normal conditions, one can use <code>ApplicationManager.getApplication().exit()</code>. If this doesn't work, throw an exception on purpose. </p> <p>How can you react to the opening and closing of projects?</p> <p>Register a ProjectManagerListener \u29c9 in a plugin via the class  ProjectManager \u29c9.</p> <p>How do you change a model without creating an undo entry?</p> <p>Example: Setting a property (=flag) via a button.</p> <pre><code>repository.getModelAccess().executeUndoTransparentCommand()\n</code></pre> <p>How do you work with temporary models?</p> <pre><code>try { \nundo-transparent command with this.mpsProject.getRepository() {\ntmpModel = TemporaryModels.getInstance().createReadOnly(TempModuleOptions.forDefaultModule());\ntmpModel.addRootNode(type);\nTemporaryModels.getInstance().addMissingImports(tmpModel);\n}\n// do something with the node\n} finally {\n    undo-transparent command with this.mpsProject.getRepository() {\n        tmpModel.removeRootNode(type);\n        TemporaryModels.getInstance().dispose(tmpModel);\n    }\n}\n</code></pre> <p>How can you react to selection changes in the editor?</p> <pre><code>editorContext.getSelectionManager().addSelectionListener(new SingularSelectionListenerAdapter() { ... })\n</code></pre> <p>How can I delete a model in a module programmatically?</p> <p>Get the model-to-be-deleted as SModel (interface) and use <code>new ModelDeleteHelper(model).delete();</code> For more context see: DeleteModeHelper \u29c9</p> <p>How can you programmatically add a language to the Used Languages settings of a model?</p> <ul> <li>Module level: <code>((AbstractModule) moduleA).addDependency(moduleB.getModuleReference(), false)</code></li> <li>Model level: <code>new ModelImports(model).addUsedLanguage(language)</code></li> </ul> <p>To get the language from a reference, you can call: <code>MetaAdapterFactory.getLanguage(moduleRef)</code>.</p> <p>Can a node pointer point to non-root nodes?</p> <p>Yes, for example:</p> <pre><code>node-ptr/Integer-&gt;parseInt-&gt;radix/\n</code></pre> <p>How can you create an MPS Language programmatically and add it to the current project?</p> <pre><code>NewModuleUtil.createLanguage(namespace, rootPath, project, saveProject)\n</code></pre> <p>How do I save my project(s)?</p> <p>Use <code>SRepository.saveAll()</code>.</p> <p>For a single project, for example, <code>ProjectHelper.getProjectRepository(project).saveAll();</code></p> <p>For all opened projects, e.g.</p> <pre><code>foreach project in com.intellij.openapi.project.ProjectManager.getInstance().getOpenProjects() { \n  jetbrains.mps.ide.project.ProjectHelper.getProjectRepository(project).saveAll(); \n}\n</code></pre> <p><sub>contributed by: @AlexeiQ<sub> <p>How can you convert a quotation to an expression?</p> <pre><code>new QuotationConverter(quotation).convert()\n</code></pre>","tags":["openapi"]},{"location":"mps_internal/platform_ui_inspector/","title":"Platform UI Inspector","text":"<p>The following example shows the internal structure of MPS in regard to the Swing \u29c9 components. Most of the structure is predetermined by the IntelliJ platform. IntelliJ has a UI inspector  for debugging purposes. MPS turns it off by default, but you can enable it on the MPS console through the following code:</p> <pre><code>DataContext dataContext = DataManager.getInstance().getDataContext(); \nAnActionEvent event = ActionUtils.createEvent(ActionPlaces.UNKNOWN, dataContext); \nActionUtils.updateAndPerformAction(new UiInspectorAction(), event);\n</code></pre> <p></p> <p>The following tree shows how the IDE is structured internally, from the main frame down to the light bulb menu. Some entries, like menus or tabs, can occur more than once. The structure might be slightly different in another MPS version because of the different versions of the IntelliJ platform.</p> StructureExplanation <p></p> <ol> <li>IntelliJ-specific implementation of JFrame \u29c9</li> <li>IntelliJ-specific implementation of JRootPane. It also contains the toolbar and status bar \u29c9.</li> <li>RootPane/How to Use Root Panes \u29c9: The glass pane is often used to intercept input events occurring over the top-level container and can also be used to paint over multiple components.</li> <li>RootPane/How to Use Root Panes \u29c9: The layered pane contains the menu bar and content pane and enables Z-ordering of other components</li> <li>IntelliJ-specific implementation of JMenuBar \u29c9</li> <li>IntelliJ-specific implementation of JPanel \u29c9</li> <li>an entry in the main menu</li> <li>the navigation bar \u29c9</li> <li>the pane containing the tool window stripes</li> <li>the status bar \u29c9</li> <li>the stripes containing the tool window \u29c9 buttons</li> <li>a button opening a tool window</li> <li>the pane containing the main content</li> <li>Three components split by two dividers horizontally or vertically</li> <li>the window of the opened bottom tool</li> <li>the header and divider of 15</li> <li>the opened bottom tool window</li> <li>a tab in a tool window</li> <li>a panel containing the editor</li> <li>the opened left tool window</li> <li>the document tabs \u29c9 enabling the navigation between opened editors</li> <li>the editor window</li> <li>A class hiding the internal structure of a UI component which represents a set of opened editors</li> <li>MPS version of an IntelliJ document \u29c9 editor</li> <li>the panel containing the MPS editor</li> <li>the editor component \u29c9 itself</li> <li>a pane supporting zooming with the mouse wheel and scrolling</li> <li>the vertical scrollbar of the editor component</li> <li>the horizontal scrollbar of the editor component</li> <li>the left editor highlighter (left gutter \u29c9)</li> <li>an editor component for editing nodes</li> <li>the intentions \u29c9 menu</li> <li>validation sidebar/marker bar \u29c9</li> </ol>"},{"location":"mps_internal/recipes/","title":"Recipes","text":"<p>This section lists all relations required for a specific task.</p> <p>If not specified otherwise, you should add all dependencies.</p> <ul> <li>If no dependency exists: with default scope and no export flag.</li> <li>If a dependency (no matter which scope and export flag) exists: no change</li> </ul> <p>The IDE often creates the required relations on the module level automatically if we add a relation on the model level. However, this doesn't always work, so double-check if the module level relation was correctly created if errors exist.</p>"},{"location":"mps_internal/recipes/#use-a-java-type","title":"Use a Java Type","text":"<p>ClassB inside ModelB inside ModuleB wants to create a variable of type ClassA inside ModelA inside ModuleA.</p> <ul> <li>To ModelB, add a dependency to ModelA.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from ModuleB to ModuleA.</li> </ul>"},{"location":"mps_internal/recipes/#reuse-aka-extend-reference-an-external-java-type","title":"Reuse (AKA Extend, Reference) An External Java Type","text":"<p>ClassB inside ModelB inside ModuleB extends ClassA inside ModelA inside ModuleA. ClassC inside ModelC inside ModuleC wants to use ClassB as simply as possible.</p> <ul> <li>To ModuleB, add the export flag to the dependency on ModuleA.</li> <li>To ModelC, add a dependency to ModelB.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from ModuleC to ModuleB.</li> </ul> <p>Remark: not sure if we should add the export flag to the dependency on ModuleA here.</p>"},{"location":"mps_internal/recipes/#create-a-concept-instance","title":"Create a Concept Instance","text":"<p>Directly (aka root node) or indirectly (aka child node) within ModelB inside ModuleB, we want to create an instance of ConceptA inside LanguageA.</p> <ul> <li>To ModelB, add Used Language to LanguageA.   Even if the IDE complains about the Used Language being \"out of scope,\" click ok.</li> <li>MPS automatically adds a Used Language from ModuleB to LanguageA.</li> </ul>"},{"location":"mps_internal/recipes/#use-an-intention","title":"Use an Intention","text":"<p>Make IntentionC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB.</p> <ul> <li>To ModelB, add Used Language to LanguageC.   Even if the IDE complains about the Used Language being \"out of scope,\" click ok.</li> <li>MPS automatically adds a Used Language from ModuleB to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#use-a-type-system-rule","title":"Use a Type System Rule","text":"<p>Make TypesystemRuleC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB.</p> <ul> <li>To ModelB, add Used Language to LanguageC.   Even if the IDE complains about the Used Language being \"out of scope,\" click ok.</li> <li>MPS automatically adds a Used Language from ModuleB to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#use-an-alternate-editor-with-a-hint","title":"Use an Alternate Editor With a Hint","text":"<p>Make EditorC defined in LanguageC for ConceptA inside LanguageA using HintD defined in LanguageD available in ModelB inside ModuleB.</p> <ul> <li>To ModelB, add Used Language to LanguageC.   Even if the IDE complains about the Used Language being \"out of scope,\" click ok.</li> <li>MPS automatically adds a Used Language from ModuleB to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#make-sure-that-a-generator-is-executed-for-a-model","title":"Make Sure That a Generator Is Executed for a Model","text":"<p>Make sure that GeneratorC defined in LanguageC for ConceptA inside LanguageA is executed for ModelB inside ModuleB.</p> <ul> <li>To ModelB, add LanguageC to Languages engaged on generation.</li> <li>To ModuleB, add Used Language to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#use-node-type","title":"Use node Type <p>ClassB inside ModelB inside ModuleB wants to create a variable of type node inside LanguageA. <ul> <li>To ModelB, add Dependency to LanguageA.structure. Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from ModuleB to LanguageA.</li> </ul>","text":""},{"location":"mps_internal/recipes/#call-a-behavior-method","title":"Call a Behavior Method <p>ClassB inside ModelB inside ModuleB wants to call behavior method opA inside ConceptA inside LanguageA.</p> <ul> <li>To ModelB, add a dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from ModuleB to LanguageA.</li> </ul> <p>Note: We could also add a dependency from ModelB to LanguageA.behavior. However, as we need to depend on LanguageA.structure anyway (to be able to access the type), the preceding recipe presented is preferred.</p>","text":""},{"location":"mps_internal/recipes/#use-a-concept-as-a-child-or-reference","title":"Use a Concept as a Child or Reference <p>ConceptB inside LanguageB wants to have a child or reference of type ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.structure, add a dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a Used Language from LanguageB to LanguageA.</li> </ul>","text":""},{"location":"mps_internal/recipes/#extend-a-concept-or-implement-a-conceptinterface","title":"Extend a Concept or Implement a ConceptInterface <p>ConceptB inside LanguageB wants to extend/implement ConceptA/ConceptInterfaceA inside LanguageA.</p> <ul> <li>To LanguageB.structure, add a dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB to LanguageA has extends scope, either by   setting it manually or by using the intention on the error appearing on ConceptB.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-an-editor","title":"Create an Editor <p>LanguageB wants to define a new editor for EditorHintC defined in LanguageC for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.editor, add a dependency to LanguageC.editor.</li> <li>To LanguageB.editor, add a dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageC.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageA has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-an-editor-component","title":"Create an Editor Component <p>LanguageB wants to define a new editor component for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.editor, add a dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageA has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#use-an-editor-component","title":"Use an Editor Component <p>LanguageB wants to use EditorComponentC defined in LanguageC for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.editor, add a dependency to LanguageC.editor.</li> <li>To LanguageB.editor, add a dependency to LanguageA.structure.   Even if MPS complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageC.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageC has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-a-type-system-rule","title":"Create a Type System Rule <p>LanguageB wants to define a new type system rule for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.typesystem, add a dependency to LanguageA.structure.   Even if MPS complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageA has Extends Scope.</li> </ul> <p>Note: The overrides flag in type system rules isn't related to dependencies. This flag specifies if type system rules of concepts extended by the applicable concept are evaluated.</p> <p>Example:</p> <ul> <li>ConceptX extends ConceptY extends ConceptZ</li> <li>ConceptZ defines type system rule ConceptZTypeRule</li> <li>ConceptY defines type system rule ConceptYTypeRule1[override=true] and ConceptYTypeRule2[override=false]</li> <li>ConceptX defines type system rule ConceptXTypeRule[override=false]</li> </ul> <p>Then:</p> <ul> <li>For ConceptZ, the type system rule ConceptZTypeRule gets evaluated.</li> <li>For ConceptY, type system rules ConceptYTypeRule1 and ConceptYTypeRule2 get evaluated. ConceptZTypeRule is not evaluated, as at least one rule for ConceptY defines:[override=true].</li> <li>For ConceptX, type system rules ConceptYTypeRule1, ConceptYTypeRule2 and ConceptXTypeRule gets evaluated. ConceptYTypeRule1 and ConceptYTypeRule2 get included because no rule for ConceptX   defines:[override=true]. ConceptZTypeRule is not evaluated because the search for rules in extended Concepts   stops at the first concept having at least one rule defining:[override=true].</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-an-intention","title":"Create an Intention <p>LanguageB wants to define a new intention for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.intentions, add a dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-a-generator","title":"Create a Generator <p>Create Generator includes</p> <ul> <li>creating new root mappings</li> <li>creating new reduction rules</li> <li>creating new switches</li> </ul> <p>GeneratorB inside LanguageB wants to create a generator transforming ConceptA inside LanguageA into ConceptC inside LanguageC.</p> <ul> <li>To GeneratorB.main@generator, add a dependency to LanguageA.structure.</li> <li>To GeneratorB.main@generator, add Used Language to LanguageC.   Even if the IDE complains about the dependency or used language being \"out of scope,\" click ok.</li> <li>Don't forget to sort your generator into the generation process by defining some mapping priorities \u29c9.</li> <li>MPS automatically adds a dependency from GeneratorB to LanguageA.</li> <li>MPS automatically adds a Used Language from GeneratorB to GeneratorA.</li> <li>If LanguageC defines a runtime solution: To LanguageB, add Extends Scope dependency to LanguageC.</li> </ul>","text":""},{"location":"mps_internal/recipes/#extend-a-generator","title":"Extend a Generator <p>Extend Generator includes</p> <ul> <li>Making sure that another generator is always executed if this generator gets executed.</li> <li>Creating new reduction rules to be used in another generator.</li> <li>Creating a new switch entry for a switch in another generator.</li> </ul> <p>GeneratorB inside LanguageB wants to extend GeneratorA inside LanguageA. GeneratorA transforms ConceptC inside LanguageC into ConceptD inside LanguageD. GeneratorB transforms ConceptE inside LanguageE into ConceptF inside LanguageF.</p> <ul> <li>To GeneratorB.main@generator, add a dependency to GeneratorA.main@generator.   Even if the IDE complains about the dependency being out of scope, click ok.</li> <li>MPS automatically adds a dependency from GeneratorB to GeneratorA.</li> <li>Make sure the dependency from GeneratorB*to *GeneratorA has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#generate-a-java-class-extending-a-base-class","title":"Generate a Java Class Extending a Base Class <p>GeneratorB inside LanguageB wants to transform ConceptA inside LanguageA into a ConceptAJavaClass extending ConceptAJavaClassBase inside ModelC inside SolutionC.</p> <ul> <li>To #GeneratorB.main@generator, add a dependency to LanguageA.structure.</li> <li>To #GeneratorB.main@generator, add a dependency to ModelC.</li> <li>To #GeneratorB.main@generator, add Used Language to BaseLanguage.   Even if the IDE complains about the dependency or Used Language being \"out of scope,\" click ok.</li> <li>MPS automatically adds a dependency from GeneratorB to LanguageA.</li> <li>MPS automatically adds a dependency from GeneratorB to SolutionC.</li> <li>MPS automatically adds a Used Language from GeneratorB to BaseLanguage.</li> <li>To LanguageB, add Extends Scope dependency to BaseLanguage (because BaseLanguage defines a runtime solution).</li> <li>To LanguageB, add a runtime solution to SolutionC.</li> </ul>","text":""},{"location":"mps_internal/recipes/#define-a-runtime-solution","title":"Define a Runtime Solution <p>LanguageB wants to use SolutionA as a runtime solution.</p> <ul> <li>To LanguageB, add a runtime solution to SolutionA.</li> </ul> <p>Note: We don't need any other relation, specifically, no dependency from LanguageB to SolutionA.</p>","text":""},{"location":"mps_internal/recipes/#define-an-accessories-model-aka-make-concept-instances-available-everywhere-a-language-is-used","title":"Define an Accessories Model (AKA Make Concept Instances Available Everywhere a Language Is Used) <p>BuiltInNodeA, as an instance of BuiltInConcept inside LanguageA, should be available to be referenced anywhere LanguageA is a Used Language.</p> <ul> <li>Create AccessoryModel as an aspect of LanguageA</li> <li>To AccessoryModel, add Used Language to LanguageA.</li> <li>Create BuiltInNodeA inside AccessoryModel.</li> <li>To LanguageA, add an accessory Model to AccessoryModel (if not present already).</li> </ul> <p>Note: We don't need any other relation, specifically, no dependency from LanguageA to AccessorySolution.</p>","text":""},{"location":"mps_internal/recipes/#create-a-utility-model-aka-create-complex-implementations-for-behavior-methods-or-generators","title":"Create a Utility Model (AKA Create Complex Implementations for Behavior Methods or Generators) <p>complexBehavior() defined for ConceptA inside LanguageA needs ComplexBehaviorInternalJavaClass for its implementation, or GeneratorA inside LanguageA needs ComplexGeneratorInternalJavaClass for its execution (e.g., for a complex condition or macro).</p> <ul> <li>Create BehaviorUtilityModel / GeneratorUtilityModel as a regular model within LanguageA.</li> <li>To BehaviorUtilityModel / GeneratorUtilityModel, add Used Language to BaseLanguage.</li> <li>Create ComplexBehaviorInternalJavaClass / ComplexBehaviorInternalJavaClass within BehaviorUtilityModel / GeneratorUtilityModel.</li> <li>To LanguageA.behavior add dependency to BehaviorUtilityModel</li> <li>To GeneratorA.main@generator add dependency to GeneratorUtilityModel</li> </ul>","text":""},{"location":"mps_internal/terminology_and_ui_for_access/","title":"Terminology and User Interface for Access","text":"<p>This section lists terms that need to be mentioned in the MPS guide or be explained better. MPS project structure \u29c9 should give an overview of the most important terms.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#settings","title":"Settings","text":"<p>UI: File menu</p> <p>All global and project settings.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#ide-settings-aka-global-settings","title":"Ide Settings (AKA Global Settings)","text":"<p>Settings applied to all projects opened with this MPS installation (official documentation \u29c9).</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#idea-plugins","title":"(IDEA) Plugins","text":"<p>UI: entry in the settings dialog</p> <p>Plugins are a packaged set of contributions to the IntelliJ IDEA platform \u29c9, on which MPS is based upon.</p> <p>Contained in one of the following places:</p> <ul> <li>${mps_home}/plugins</li> <li>\u00abGlobalSettingsDir\u00bb/plugins</li> </ul> <p>MPS plugins bear no relationship to IDEA Plugins. However, you can package MPS plugins into IDEA plugins, just as any other content of MPS.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#project-settings","title":"Project Settings","text":"<p>UI: Entry in the settings dialog</p> <p>Settings applied to one project. Stored in ${project}/.mps/.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#modules-pool","title":"Modules Pool","text":"<p>UI: second root entry in the logical view</p> <p>All content known to MPS is contained in its modules pool. It is shared between all windows of the same MPS installation. In the future, every window should have its independent modules pool.</p> <p>If a module is contained more than once in the modules pool (e.g., present both in the current project and in a global Library), the behavior is undefined (i.e., will mess up badly, don't do this).</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#mps-window","title":"MPS Window","text":"<p>UI: If already open: Window menu, New File* menu: Open\u2026 \u2192 New Window</p> <p>Every project is contained in its window.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#project","title":"Project","text":"<p>UI: first root entry in the logical view</p> <p>A project is a collection of modules. A module can be part of more than one project. They can be added via the Project Paths context menu entry of the project.</p> <p>Modules can be nested in folders. These folders are stored in the project, i.e., the same module can be in different folders inside different Projects. Folders are only for visual organization. They don't affect storage location, generation, or anything else.</p> <p>What are some known predefined path variables?</p> <ul> <li>${module}: the containing module</li> <li>${user.home}: the user home directory</li> <li>${language_descriptor}: the descriptor file of the  current language</li> <li>${solution_descriptor}: the descriptor file of the current solution</li> <li>${project}: the directory containing the project</li> <li>${mps_home}: the directory of the MPS installation</li> </ul> <p>Don't point path variables to a subpath of another path variable. MPS always applies the first (predefined before user-defined, user-defined in order of definition) one matching.</p> <p>INVALID example:</p> <ul> <li>Path Variable a \u2192 /some/dir</li> <li>Path Variable b \u2192 /some/dir/below</li> </ul>"},{"location":"mps_internal/utility_classes/","title":"Utility Classes","text":"<p>Utility classes of other languages can contain reusable methods that can be interesting for your own languages. They often have the suffix Util or Helper. Classes ending with Manager also can have those methods. You can access them through static getInstance methods or, if they are core components, through jetbrains.mps.project.Project#getComponent. To find new methods, search for nodes named [TOPIC]+ [suffix] e.g. \"UI\" + \"Util\" becomes UIUtil. If you work closely with MPS languages, search their runtime models for useful methods. For example, jetbrains.mps.ide.httpsupport.runtime.base contains a utility class HttpSupportUtil \u29c9 that helps with the HTTP Support plugins.</p> Class Description DirUtil \u29c9 directory-related utilities MatchingUtil \u29c9 tests if two nodes match SubtypingUtil \u29c9 subtyping related utilities CopyUtil \u29c9 utility for copying models and nodes FileUtil \u29c9 related utilities JavaNameUtil \u29c9 utilities related to Java naming NameUtil \u29c9 name-related utilities, such as pluralizing or escaping strings CopyPasteUtil/TextPasteUtil \u29c9 copy-paste related utilities ActionUtils \u29c9 action-related utilities; these methods can execute actions programmatically. NewModuleUtil \u29c9 utilities associated with creating new modules, such as creating solutions or languages TemporaryModels \u29c9 utilities for creating temporary models UIUtil \u29c9 utilities related to the IntelliJ UI, such as checking for dark mode (<code>isUnderDarcula()</code>). PathManager/PathManager \u29c9 classes for getting all kinds of paths, such as the plugins or log folder. ClassLoaderManager \u29c9 class responsible for loading (MPS) classes FindUsagesManager \u29c9 class that has methods for invoking the find usage UI CloneUtil \u29c9 utility method for cloning a model ModelDigestUtil \u29c9 class that contains hash methods FindUtils \u29c9 class for finding nodes in MPS MatchingUtil \u29c9 method for checking if two nodes structurally match SubTypingManagerNew \u29c9 subtyping related methods such as <code>isSubTypeOf</code>  and  <code>collectImmediateSupertypes</code>. SubtypingUtil \u29c9 subtyping related methods such as <code>leastCommonSuperTypes</code>. PersistenceUtil \u29c9 methods for saving and loading models ModelsAutoImportsManager \u29c9 utility methods related to auto-importing models ProjectManager \u29c9 project-related methods, such as creating projects and attaching listeners to projects CopyUtil \u29c9 methods for copying models and nodes ModelAccessHelper \u29c9 methods for running code as a command/read/write action","tags":["internals","reference","utility"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/","title":"Writing an MPS Plugin with Kotlin","text":"<p>When you use Kotlin to write an MPS plugin, the guidelines for the IntelliJ Platform SDK \u29c9 apply.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#folder-structure","title":"Folder Structure","text":"<p>The folder structure should look like this:</p> <pre>\n\u251c\u2500\u2500 build.gradle.kts\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u251c\u2500\u2500 kotlin\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 META-INF\n                \u251c\u2500\u2500 plugin.xml\n                \u2514\u2500\u2500 pluginIcon.svg\n</pre>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#buildgradlekts","title":"build.gradle.kts","text":"<p>The file build.gradle.kts should look something like this:</p> <pre><code>plugins {\n    id(\"org.jetbrains.intellij\")\n    id(\"org.jetbrains.kotlin.jvm\")\n}\n\nrepositories {\n    mavenCentral()\n    maven { url = uri(\"https://projects.itemis.de/nexus/content/repositories/mbeddr\") }\n}\n\nval intellijVersion = \"2021.1\"\nval mpsVersion = \"2021.1.4\"\nval targetJvm = \"11\" // the target Java version\n\nversion = \"$intellijVersion.4\"\n\ndependencies {\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.0\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect:1.4.0\")\n\n    compileOnly(\"com.jetbrains:mps-workbench:$mpsVersion\")\n    compileOnly(\"com.jetbrains:mps-core:$mpsVersion\")\n    compileOnly(\"com.jetbrains:mps-platform:$mpsVersion\")\n    compileOnly(\"com.jetbrains:mps-openapi:$mpsVersion\")\n    compileOnly(\"com.jetbrains:mps-editor:$mpsVersion\")\n    compileOnly(\"com.jetbrains:mps-editor-api:$mpsVersion\")\n}\n\nintellij {\n    version.set(intellijVersion)\n}\n\njava {\n    toolchain.languageVersion.set(JavaLanguageVersion.of(11))\n}\n\ntasks.withType&lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile&gt;().configureEach {\n    kotlinOptions.jvmTarget = targetJvm\n    kotlinOptions.apiVersion = \"1.4\"\n}\n\ntasks.getByName(\"buildSearchableOptions\").enabled = false\n</code></pre> <p>The Gradle plugin org.jetbrains.intellij is needed for the IntelliJ plugin development, org.jetbrains.kotlin.jvm is needed for Kotlin support. We also add the itemis repository for the MPS dependencies. The dependency section contains dependencies for Kotlin and MPS. The available MPS dependencies are in the group JetBrains on mvnrepository.com \u29c9. The rest of the code is boilerplate code for setting the correct versions.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#pluginxml","title":"plugin.xml","text":"<p>The file plugin.xml \u29c9 is the plugin configuration file and usually is automatically generated by the MPS build language. In this file, you have to register, for example, tool windows, settings, and actions. Look at existing plugin.xml files \u29c9 to figure out how they work.</p> <p>Don't forget to add dependencies to the MPS plugins in this file: <pre><code>&lt;idea-plugin&gt;\n...\n&lt;depends&gt;com.intellij.modules.platform&lt;/depends&gt;\n&lt;depends&gt;com.intellij.modules.mps&lt;/depends&gt;\n&lt;depends&gt;jetbrains.mps.core&lt;/depends&gt;\n...\n&lt;/idea-plugin&gt;\n</code></pre></p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#links-to-sections-in-the-documentation","title":"Links to Sections in the Documentation","text":"<ul> <li>Actions \u29c9 extend the class AnAction</li> <li>Tool window \u29c9</li> <li>Preferences \u29c9</li> <li>Application plugin \u29c9</li> <li>Running tasks once \u29c9</li> <li>Project plugin \u29c9</li> </ul> <p>For everything else, look at the extension point and listener list \u29c9.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#building-the-plugin","title":"Building the Plugin","text":"<p>When ready, you can build the plugin by executing <code>./gradlew buildPlugin</code>. Gradle IntelliJ plugin \u29c9 explains all the other tasks. Now there should be a folder <code>build/distributions</code> which contains the zipped plugin that you can install through the MPS plugin manager.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#running-the-plugin","title":"Running the Plugin","text":"<p>Open the file <code>build.gradle.kts</code> in the <code>ide-plugin</code> folder and change the <code>intellij</code> block to use a local path, and turn off the instrumentation of the code, e.g.: <pre><code>intellij {\n    localPath.set(PATH_TO_MPS_FOLDER)\n    instrumentCode.set(false)\n}\n</code></pre></p> <p>Then you must ensure that you set the system variable <code>idea.platform.prefix</code> to 'Idea'. Workaround: Create a file with extension .sh or .bat in the bin folder of the MPS installation with the following content: <code>-Didea.platform.prefix=Idea</code>.</p> <p>You can now open MPS with the plugin installed by calling <code>./gradlew runIde</code>.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/deps_and_classpath/","title":"Dependencies and Classpath in MPS","text":"<p>This page describes the meaning and effect of different types of dependencies within MPS, including the impact on the applicable Java classpath. It describes both the expected state and all bugs deviating from the expectations.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#overview","title":"Overview","text":"<p>The module pool has all content known to MPS. The modules pool is filled from modules in the current project and all non-project sources. MPS, in general, cares about dependencies between modules. The dependencies on models only further constrain the dependencies of the modules. Two main types of relations exist: You need dependencies for any reference to something in another module. You need Used Languages to use something defined in a language. We refer to relations if we address both types. Other types of dependencies on modules include: Java stubs (in combination with Java libraries), Java source stubs (in combination with Java source paths), runtime solutions and accessory models (only available for languages), and languages engaged on generation. Build models abstract Ant files to build and package modules and IDEA plugins. They contain a copy of the relations defined in the modules and dependencies to other build models and IDEA plugins.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#mps-plugins","title":"MPS Plugins","text":"<p>MPS Plugins are automatically loaded according to the solution kind set in Java module settings. MPS Plugins need to be contained in MPS plugin models.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#standaloneplugindescriptor","title":"StandalonePluginDescriptor","text":"<p>We need to add a StandalonePluginDescriptor (defined in the language jetbrains.mps.lang.plugin.standalone) as a root node if an MPS plugin model uses any concept from the language jetbrains.mps.lang.plugin. Other concepts from the language jetbrains.mps.lang.plugin.standalone don't need a StandalonePluginDescriptor.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#plugin-disambiguation","title":"Plugin Disambiguation","text":"<p>The term \"plugin\" is used at various places throughout MPS. It describes different things:</p> <ul> <li>IDEA plugins: a packaged set of contributions to the IntelliJ IDEA platform, which MPS is based upon</li> <li>MPS plugins: automatically loaded models</li> <li>plugin language aspect: model inside a language defining extension points</li> <li>build model plugins: part of the build model language providing new entries for build models.</li> </ul>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#non-project-sources","title":"Non-Project Sources","text":"<p>Non-project sources are</p> <ul> <li>global libraries</li> <li>IDEA plugins</li> <li>project libraries</li> <li>common and Java module settings regarding Java classes and Java source files</li> <li>IDEA plugins referenced by a module</li> </ul> <p>These directories or JAR files are recursively scanned for .mpl (languages), .msd (solutions), and .devkit (devkit) files. If found, the corresponding content is added to the modules pool.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#java-classpath-versus-relations","title":"Java Classpath Versus Relations","text":"<p>The various settings on models and modules specify both the Java classpath and a model's relations. However, these settings affect classpath and relations differently. As a rule of thumb, the classpath has all Java classes reachable through any relation. The classpath is populated generously.</p> <p>On the contrary, the relations are populated reluctantly. For example, they need to be specified explicitly. The dependency relations on modules and models are completely separated from the used language relations on modules and models. Thus, no dependency requires a Used Language or vice versa.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#used-languages","title":"Used Languages","text":"<p>No implicitly Used Languages are available except described for generators. Specifically, if LanguageB has an Extends Scope dependency on LanguageA and ModuleC uses LanguageB, LanguageA isn't a Used Language within ModuleC.</p> <p>You must add LanguageA (containing ConceptA) to ModuleB's and contained ModelB's used languages if and only if</p> <ul> <li>ModelB instantiates ConceptA within the IDE.</li> <li>ModelB executes intentions from LanguageA.</li> <li>ModelB requires type checks from LanguageA.</li> <li>ModelB uses editors from LanguageA by selecting an editor hint, but not if LanguageA only defines the editor hint.</li> <li>ModuleB is a generator and outputs instance of ConceptA.</li> </ul>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#executed-generators","title":"Executed Generators","text":"<p>GeneratorA contained in LanguageA (containing ConceptA) will be executed for ModelS (contained in ModuleS) if and only if</p> <ul> <li>ModelS uses LanguageA and contains an instance of ConceptA.</li> <li>ModelS lists LanguageA in Languages engaged on generation.</li> <li>The preceding conditions match LanguageB containing GeneratorB extending GeneratorA.</li> </ul> <p>For discussion, we establish a continued scenario:</p> <p>The Relations listed here are not complete to reduce clutter. The complete example \u29c9 is available.</p> <p></p> <p>SolutionBase doesn't change during generation, as LanguageBase doesn't define any generators.</p> <p></p> <p>SolutionBaseGen doesn't change during generation either, as it doesn't contain any instances from LanguageBaseGen, thus removing LanguageBaseGen from the list of applicable generators, ending up with no generators.</p> <p></p> <p>SolutionBaseGen2 ends up with a transformed NodeBase, as Languages engaged in generation are never removed.</p> <p></p> <p>SolutionBaseGenExtends ends up with an unchanged NodeBase, but a transformed NodeBase2. GeneratorBaseExtends gets executed because LanguageBaseGenExtends is listed in Languages engaged in generation. However, the Dependencies of the Language aren't considered for selecting the running Generators.</p> <p></p> <p>In SolutionBaseGenExtends2, both NodeBase and NodeBase2 will be transformed, as LanguageBaseGenExtends2 is listed in Languages engaged in generation and GeneratorBaseExtends2 extends GeneratorBase.</p> <p></p> <p>Only NodeExtendsGen will be transformed in SolutionExtendsGen, as the only active Generator is GeneratorExtendsGen. The reason is that we found an instance of ConceptExtendsGen contained in the same language as the generator. The generator doesn't extend any other applicable Generator.</p> <p></p> <p>All nodes within SolutionExtendsGen2 get transformed, as an instance of ConceptExtendsGen2 was found, and the generator GeneratorExtendsGen2 contained in the same language extends GeneratorBase.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#generated-relations","title":"Generated Relations","text":"<p>Relations on the output model are defined only by the contents of the output model that was created by the generator. Thus,</p> <ul> <li>all languages providing the concepts of generated instances are listed in Used Languages</li> <li>all models referenced from the output model are listed in the dependencies</li> </ul> <p>Extra relations on anything else (source module, source model, dependencies of the source model, languages used in the source model, dependencies of applied generators, languages used in applied Generators) are not added to the output model. Implicit dependencies apply as described.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#tests","title":"Tests","text":"<p>Tests are regular or extended JUnit \u29c9 tests that can be executed within MPS or standalone.</p> <p>Test models contain tests defined by the @tests stereotype.</p> <p>The Stereotype enables</p> <ul> <li>the Run Tests entry in the solution and test model context menu.</li> <li>Build language test instructions to search the model for tests.</li> </ul> <p>As soon as you use any concepts from language jetbrains.mps.lang.test, you need to have a TestInfo root node in the same model. The TestInfo node needs to refer to a project to be used to execute the tests. This reference may not use a ${module}, ${language_descriptor}, ${solution_descriptor}, or ${project} builtin path variables. It needs to refer to a project containing the test.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/intellij_sdk/jcef/","title":"Java Chromium Embedded Framework","text":"<p>Start with the page JCEF - Java Chromium Embedded Framework \u29c9 of the IntelliJ platform plugin SDK.</p> <p>JCEF should work with MPS 2021.1.4 and higher. Although introduced in IntelliJ IDEA 2020.1, it might not work in older MPS versions because of classloading issues. You can embed The browser (<code>JBCefBrowser</code>) in the MPS editor with a Java Swing component cell. For simple use cases, it is enough to call <code>browser.loadHTML</code> to load some HTML code. The content can be created by Java or by calling the MPS generator or TextGen \u29c9.</p> <p>Existing Java documentation and examples on the web:</p> <ul> <li>Java JCEF example \u29c9 that showcases all kinds of handlers and dialogs</li> <li>IntelliJ Markdown preview \u29c9</li> <li>How do I use JCEF with Intellij? \u29c9</li> <li>CEF documentation (non Java version) \u29c9</li> </ul> <p>The third link contains an answer on how to do bidirectional communication between the embedded browser and Java (MPS): You have to create a browser pipe between Java (implementation) and JS (implementation \u29c9). The communication uses JS. You then have a <code>subscribe</code> method that you can use to listen to events posted through a specific tag or create an event using the <code>post</code> method. These methods are available in Java and JS.</p> <p>Warning: MPS and the IntelliJ IDEA use Swing to create all the UI components. They are considered lightweight because Java itself draws them. JCEF uses native code, and it is a heavyweight component. Especially with MPS' reloading capabilities, t is important to dispose of the browser when it isn't needed. The following code registers a listener for the editor component dispose event and also closes the browser:</p> <pre><code>class SwingComponent {\n    void create() {\n        // ...\n        EditorComponent editorComponent = (EditorComponent) editorContext.getEditorComponent();\n        editorComponent.addDisposeListener(new EditorComponent.EditorDisposeListener() {\n            @Override\n            public void editorWillBeDisposed(@NotNull() EditorComponent p1) {\n                browser.getCefBrowser().close(true);\n            }\n        });\n        // ...\n    }   \n}\n</code></pre> <p>When the browser is not correctly disposed of, it might be drawn in different components or on top of MPS editors. Some issues are known where JCEF makes the IDE crash (JBR-4667 + linked related issues, JBR-2206 \u29c9 + linked related issues).  </p>","tags":["internals","intellij","java"]},{"location":"mps_internal/intellij_sdk/jcef/#demo-websockets","title":"Demo + WebSockets","text":"<p>A demo for the JCEF integration can be found in the repository mps_jcef_minimal. Read the readme for more information. The demo contains two branches, one shows the internal communication via JS, and the other branch uses WebSocket for the communication. The WebSocket server is modeled after this tutorial and uses the existing IntelliJ libraries of Netty. The handling of web socket frames is described in more detail in Chapter 12. WebSocket - Netty in Action \u29c9.</p>","tags":["internals","intellij","java"]},{"location":"mps_internal/threads/","title":"Threading","text":"<p>Regardless of the calling thread, writing and reading MPS models always need to be performed holding an appropriate lock. IntelliJ IDEA also needs read and write locks in its platform. Multiple reads can be done at the same time. When writing should be done, all reads have to be finished. The IDEA platform's lock is acquired first, and only then the MPS's lock is acquired.</p> <p>The MPS locks are described in Managing concurrent access | MPS \u29c9 and are only necessary if you are accessing the model or specific features of the IntelliJ platform from a different thread. All aspects in your language and declared actions have the necessary lock by default (command access). You most likely only need locking when accessing MPS models from a Swing event handler, such as in the <code>actionPerformed</code> method of a button. The locks are of type ReentrantReadWriteLock \u29c9 (read the JavaDoc for more info).</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#awt-event-dispatch-thread-edt","title":"AWT Event Dispatch Thread (EDT)","text":"<p>The drawing of components in MPS/IntelliJ IDEA is done through Java Swing. The event dispatch thread or Swing thread is used for handling events in Swing because it is not thread-safe, so most of the Swing code runs in this thread. It also handles events from the Abstract Window Toolkit \u29c9 and has the thread name AWT-EventQueue-0. In the IntelliJ platform/MPS, it is also called the UI thread or editor thread. Any writes to the IntelliJ IDE data model (PSI, VFS, project root model \u29c9) must also happen on the write thread, which can be the same as EDT in IntelliJ products. In MPS, it is the same thread.</p> <p>Depending on the access type, you need different locks from the language jetbrains.mps.lang.access:</p> <ul> <li>synchronously read MPS model: <code>read action with</code></li> <li>synchronously write MPS model: <code>write action with</code></li> <li>synchronously write MPS model with undo: <code>command with</code></li> </ul> <p>In older MPS versions (&lt; 2021.1.5), it was always necessary to use <code>command with</code> when writing a model. While it is not necessary anymore, it is still recommended to use it instead of the <code>write action with</code> statements.  As a tribute to legacy code, access to constant and meta info objects of a node is allowed without read access. It's not encouraged for new code and might change in the future.</p> <p>If you are not already in the EDT, you need one of the following methods:</p> <ul> <li>Asynchronously write MPS model: <code>execute command in EDT with</code>.</li> <li>Asynchronously read MPS model: <code>execute in EDT with</code>.</li> </ul> <p>The in EDT commands allow to read/write the MPS model and perform EDT-related UI activities and update models of the IntelliJ platform. To check if the current thread is the EDT, call <code>ApplicationManager.getApplication().assertIsDispatchThread()</code> or <code>ThreadUtils.isInEDT()</code></p> <p>The code must also be run on the UI thread to modify the UI. Typically, you would call <code>SwingUtilities.invokeLater</code>. When you are changing the IDE model in the IntelliJ platform (see: write-safe context \u29c9) or an MPS model, you should use one of the following methods:</p> <ul> <li><code>ApplicationManager.getApplication.invokeLater</code> (asynchronous) </li> <li><code>ApplicationManager.getApplication.invokeAndWait</code> (synchronously)</li> </ul> <p>If you don't precisely know what you are doing when calling it synchronously, the IDE will freeze. The reason for those methods is that the so-called modality state \u29c9 should be taken into account ,i.e., the stack of modal dialogs under which the call is allowed to execute. Alternatively, there is also the class <code>ThreadUtils</code> which contains the method <code>runInUIThreadAndWait</code>, which takes a <code>Runnable</code> instance as a parameter and uses the correct method based on the calling context.</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#background-threads","title":"Background Threads","text":"<p>Every code that is executed on the EDT should finish quickly. Long-running code blocks the thread, and the UI becomes unresponsive. Run long-running tasks in the background: Progress indicators | MPS \u29c9 The class Task can be extended and run in a modal dialog or in the background. When many tasks should be executed, pooled threads can be used: Introduction to Thread Pools in Java | baeldung.com \u29c9. There's also a method for that: <code>ApplicationManager.getApplication().executeOnPooledThread</code>.</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#examples","title":"Examples","text":"<p>In the following examples, a node is accessed from a background thread or the EDT.</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#reading-the-model","title":"Reading the Model","text":"Different thread with lock Different thread without lock EDT with read lock <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; read action with #project.getRepository() {\n        string name = myNode.name;\n    }\n})\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\n\nApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; string name = myNode.name; \n    })\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\n\nbutton.addActionListener(new ActionListener() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        read action with #project.getRepository() {\n            string name = myNode.name;\n        }\n    } \n}\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#writing-the-model-different-thread","title":"Writing the Model (Different Thread)","text":"command in EDT lock command in the wrong thread no lock only write lock <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; execute command in EDT with #project.getRepository() {\n       myNode.name = \"newName\";\n    }}\n)\n</code></pre> <pre><code>// Access is allowed from write thread only.\n\n```java\nApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; command with #project.getRepository() {\n       myNode.name = \"newName\";\n    }}\n)\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\n\nApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; myNode.name = \"newName\"; }\n)\n</code></pre> <pre><code>// &lt; 2021.1.5: jetbrains.mps.smodel.IllegalModelChangeError: registered node can be modified only inside a command or during model loading process\n\nApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; write action with #project.getRepository() {\n       myNode.name = \"newName\";\n    }}\n)\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#writing-the-model-edt","title":"Writing the Model (EDT)","text":"command lock no lock only write lock <pre><code>ApplicationManager.getApplication().invokeLater(\n    { =&gt; command in EDT with #project.getRepository() {\n       myNode.name = \"newName\";\n    }}\n)\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\n\nApplicationManager.getApplication().invokeLater(\n    { =&gt; myNode.name = \"newName\"; }\n)\n</code></pre> <pre><code>// &lt; 2021.1.5: jetbrains.mps.smodel.IllegalModelChangeError: registered node can be modified only inside a command or during model loading process\n\nApplicationManager.getApplication().invokeLater(\n    { =&gt; write action with #project.getRepository() {\n       myNode.name = \"newName\";\n    }}\n)\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#modifying-the-ui","title":"Modifying the UI","text":"using Application#invokeLater using SwingUtilities#invokeLater called from a thread with IntelliJ write access (e.g., standard MPS code) called from within MPS read action <pre><code>ApplicationManager.getApplication().invokeLater({ =&gt; JOptionPane.showInputDialog(\"Input\"); });\n</code></pre> <pre><code>// okay if no MPS/IDE model is accessed\n\nSwingUtilities.invokeLater({ =&gt; JOptionPane.showInputDialog(\"Input\"); });\n</code></pre> <pre><code>// java.lang.Throwable: AWT events are not allowed inside write action\n\nOptionPane.showInputDialog(\"Input\")\n</code></pre> <pre><code>// java.lang.Throwable: AWT events are not allowed inside write action\n\nread action with #project.getRepository() { \n    JOptionPane.showInputDialog(\"Input\");\n}\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#showing-a-notification-with-information-from-the-model","title":"Showing a Notification With Information From the Model","text":"<p>In this example, additional information is shown to the user through a top-level notification \u29c9 (balloon).</p>  using a read lock synchronously using a read lock asynchronously call synchronously on EDT with read lock <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; \n        string name;\n        read action with #project.getRepository() {\n            name = myNode.name;\n        }\n    Notifications.Bus.notify(new Notification(\"test\", \"Name\", name, NotificationType.INFORMATION));\n    }\n);\n</code></pre> <pre><code>// name is null because the following block is executed on the EDT thread which doesn't return the result immediately\nApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt; \n        string name;\n        execute in EDT #project.getRepository() {\n            name = myNode.name;\n        }\n    Notifications.Bus.notify(new Notification(\"test\", \"Name\", name, NotificationType.INFORMATION));\n    }\n);\n</code></pre> <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n    { =&gt;\n    StringBuilder builder = new StringBuilder();\n    ApplicationManager.getApplication().invokeAndWait(\n        { =&gt; read action with #project.getRepository() {\n            builder.append(myNode.name);\n        }\n    }\n);\nNotifications.Bus.notify(new Notification(\"test\", \"Name\", builder.toString(), NotificationType.INFORMATION));\n    }\n)\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#elevating-model-access","title":"Elevating Model Access","text":"<p>It depends on the current thread and active locks, but most of the time, read locks can't be upgraded. A lock that is higher in the hierarchy also has the permissions of the lower locks: read &lt; write &lt; command.</p>  elevating write to command access elevating read to write access elevating read to command access elevating read to command access (write available) <pre><code>// no previous write lock\n\nApplicationManager.getApplication().invokeLater(\n    { =&gt; write action with #project.getRepository() { \n        command with #project.getRepository() { \n            myNode.name = \"myName\"; \n        } \n    }\n    }\n)\n</code></pre> <pre><code>// java.lang.IllegalStateException: deadlock prevention: do not start write action from read\n\nApplicationManager.getApplication().invokeLater(\n    { =&gt; read action with #project.getRepository() { \n        write with #project.getRepository() { \n            myNode.name = \"myName\"; \n        } \n    }\n    }\n)\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessException: deadlock prevention: can not elevate model read to a command\n\nApplicationManager.getApplication().invokeLater(\n    { =&gt; read action with #project.getRepository() { \n        write with #project.getRepository() { \n            myNode.name = \"myName\"; \n        } \n    }\n    }\n)\n</code></pre> <pre><code>// previous write lock available\n\nread action with #project.getRepository() { \n    command with #project.getRepository() { \n        myNode.name = \"myName\"; \n    } \n}\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#additional-references","title":"Additional References","text":"<ul> <li>IDEA threading model | developerlife.com \u29c9</li> <li>Common Concurrency Pitfalls in Java \u29c9</li> </ul>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/named_threads/","title":"Reference: Named threads","text":"<p>These lists contain named threads from Java, the IntelliJ platform, and MPS.</p>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#java-threads","title":"Java Threads","text":"<ul> <li>AWT threads<ul> <li>AWT-AppKit: macOS-specific thread</li> <li>AWT-EventQueue: = EDT</li> <li>AWT-Windows \u29c9</li> <li>AWT-Shutdown \u29c9</li> </ul> </li> <li>Image Fetch/Image Animator (sun.awt.image.ImageFetch \u29c9)</li> <li>Get All running JVM Threads | baeldung.com \u29c9<ul> <li>Finalizer \u29c9</li> <li>Reference handler: a high-priority thread to enqueue pending references (References \u29c9).</li> <li>Signal Dispatcher: handles signals sent by the operating system to the JVM.</li> </ul> </li> <li>Java2D<ul> <li>Java2D Disposer \u29c9</li> <li>Java2D Queue flusher</li> </ul> </li> <li>TimerQueue (java.swing.TimerQueue \u29c9)</li> <li>Timer (java.util.Timer \u29c9)</li> <li>Common-Cleaner (java.lang.ref.Cleaner \u29c9)</li> <li>Attach Listener \u29c9</li> <li>GC Thread: garbage collector \u29c9 thread</li> <li>CMS Thread and CMD Main Thread: Thread of the concurrent mark sweep collector \u29c9.</li> <li>VM Thread \u29c9</li> <li>Service Thread \u29c9</li> <li>C1/C2 CompilerThread \u29c9</li> <li>Sweeper thread \u29c9</li> <li>JPWP \u29c9</li> <li>VM Periodic Task Thread \u29c9</li> <li>JDI (Java Debug Interface \u29c9)<ul> <li>Debug Events Processor Thread</li> <li>JDI Internal Event Handler</li> <li>JDI Target VM Interface</li> </ul> </li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#intellij-platform-threads","title":"IntelliJ Platform Threads","text":"<ul> <li>Alarm Pool (Alarm \u29c9)</li> <li>Flushing Daemon (FlushingDaemon \u29c9)</li> <li>ApplicationImpl (ApplicationImpl \u29c9)</li> <li>Periodic tasks thread (AppDelayQueue \u29c9)</li> <li>BaseDataReader (com.intellij.util.io.BaseDataReader \u29c9)<ul> <li>the error stream of X</li> <li>the output stream of X</li> <li>the setsid stream of X</li> </ul> </li> <li>I/O pool (ProcessIOExecutorService \u29c9)</li> <li>JobScheduler FJ pool (IdeaForkJoinWorkerThreadFactory \u29c9)</li> <li>Document Committing Pool (DocumentCommitThread \u29c9)</li> <li>FileBasedIndex Vfs Event Processor (ChangedFilesCollector \u29c9)</li> <li>Indexing (IndexUpdateRunner \u29c9)</li> <li>ForkJoinPool (ForkJoinPool \u29c9)</li> <li>Action Updater (ActionUpdater \u29c9)</li> <li>fsnotifier: native file system notifier</li> <li>DestroyJavaVM \u29c9</li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#mps-threads","title":"MPS Threads","text":"<ul> <li>Highlighter: performs model checks in update sessions and updates the editor. Checking rules are run, for example, inside this thread (Highlighter \u29c9).</li> <li>HighlightUsages: highlights references to the node at the cursor position in the editor (HighlightUsagesSupport \u29c9).</li> <li>CompletionHelper: automatically opens the code completion menu that was introduced in MPS 2021.2 (CompletionHelper \u29c9).</li> <li>MPS EDT Executor: invokes read/write/command task asynchronously on the EDT thread (EDTExecutorInternal \u29c9).</li> <li>MPS interrupting thread: augments the IDEA Platform write action with functionality essential for MPS ( \u29c9).</li> <li>ChangesManager command queue: queue for tasks of the VCS changes manager (CurrentDifferenceRegistry \u29c9)</li> <li>Intentions: Shows or hides intentions</li> <li>MPS Make Thread: Thread that executes a make task (MakeTask \u29c9)</li> <li>generation-thread: generator thread (GenerationTaskPool \u29c9)</li> <li>TextGen-thread: text generator thread (TextGeneratorEngine \u29c9)</li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#other-threads","title":"Other Threads","text":"<ul> <li>AnimatorThread (removed class of com.intellij.util.ui.Timer)</li> <li>Poller SunPKCS11-Darwin (macOS-specific thread)</li> <li>process reaper \u29c9 (Linux/macOS specific thread)</li> <li>Batik CleanerThread (org.apache.batik.util.CleanerThread \u29c9)</li> <li>Netty Builtin Server \u29c9</li> <li>kotlinx.coroutines.DefaultExecutor \u29c9</li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/read_write_action_examples/","title":"Example Actions Using Locks","text":"<p>These actions use the IntelliJ platform or access MPS models and need additional locks because they are running on a different thread. Especially MPS read and write locks should be available in every language aspect, and manually locking isn't necessary.</p>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#example-of-actions-that-require-mps-locks","title":"Example of Actions That Require MPS Locks","text":"","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#write-actions","title":"Write Actions","text":"<ul> <li>reload/add/remove/modify<ul> <li>projects</li> <li>modules</li> <li>models</li> </ul> </li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#read-actions","title":"Read Actions","text":"<ul> <li>resolve node references</li> <li>read nodes/models/modules</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#read-actions-in-edt","title":"Read Actions in EDT","text":"<ul> <li>select a node in the tree view</li> <li>clear the marks in the highlight manager</li> <li>move nodes refactoring</li> <li>resolve node references and open them in the editor</li> <li>run the model checker</li> <li>rebuild editor components</li> <li>paste nodes</li> <li>select nodes in the editor</li> <li>recreate opened MPS editors</li> <li>show the completion menu</li> <li>re-highlight nodes</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#examples-of-actions-that-require-idea-locks","title":"Examples of Actions That Require Idea Locks","text":"<p>Useful methods:</p> <ul> <li>Read action: <code>Applicationmanager.getApplication.runReadAction()</code></li> <li>Read action allowed: <code>ApplicationManager.getApplication().assertReadAccessAllowed()</code></li> <li>Write action: <code>Applicationmanager.getApplication.runWriteAction()</code></li> <li>Write action allowed: <code>ApplicationManager.getApplication().assertWriteAccessAllowed()</code></li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#write-actions_1","title":"Write Actions","text":"<ul> <li>VFS-related actions<ul> <li>refresh files</li> <li>create/remove directories</li> <li>create/modify/delete/copy files</li> </ul> </li> <li>paste data</li> <li>create facets</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#read-actions_1","title":"Read Actions","text":"<ul> <li>find files</li> <li>get a list of file editors</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#actions-executed-in-edt","title":"Actions Executed in EDT","text":"<p>They are executed in the lambda of <code>ApplicationManager.getApplication().invokeLater/invokeAndWait)</code>.</p> <ul> <li>update tools</li> <li>show progress bars for long-running actions</li> <li>update text in Java Swing components</li> <li>dispose of UI components</li> <li>rebuild components</li> <li>start a make process</li> <li>save projects/modules</li> <li>update toolbars</li> <li>show dialogs</li> <li>update the project pane</li> <li>perform refactorings</li> <li>unload models</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#actions-that-are-executed-on-a-pooled-thread","title":"Actions That Are Executed on a Pooled Thread","text":"<p>They are executed in the lambda of <code>ApplicationManager.getApplication().executeOnPooledThread</code></p> <ul> <li>set breakpoints on startup</li> <li>preview the generated text for nodes</li> </ul>","tags":["internals","examples"]},{"location":"patterns/language_design/","title":"Language Design","text":"<p>This page contains many links to articles about language design with MPS and some other topics. If links are missing, please raise an issue.</p>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#patterns","title":"Patterns","text":"<ul> <li>Inline Definitions \u29c9 (Specific Languages' blog)</li> <li>Escape hatch \u29c9 (Specific Languages' blog)</li> <li>Another form of escape hatch \u29c9 (Specific Languages' blog)</li> <li>Externalized names \u29c9 (Specific Languages' blog)</li> <li>Empty lines \u29c9 (Specific Languages' blog)</li> <li>Externalized names (and other common attributes) \u29c9 (F1RE's blog)</li> <li>Multiple generators for same language \u29c9) (F1RE's blog)</li> <li>High-Level Structure of DSLs: Three Patterns \u29c9) (Markus Voelter's blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#general","title":"General","text":"<ul> <li>On language design \u29c9 (Specific Languages' blog)</li> <li>My DSL development process \u29c9 (Specific Languages' blog)</li> <li>Evolving your language gracefully \u29c9 (Specific Languages' blog)</li> <li>Making distinctions \u29c9 (Specific Languages' blog)</li> <li>DSLs vs. business rules \u29c9 (Specific Languages' blog)</li> <li>The Philosophy Behind Language Engineering with MPS \u29c9 (Markus Voelter's blog)</li> <li>Thoughts on Declarativeness \u29c9 (Markus Voelter's blog)</li> <li>Why an Agile Process is not Enough \u29c9 (languageengineering.io's blog)</li> <li>What makes a good Business DSL \u29c9 (languageengineering.io's blog)</li> <li>What Goes into Language Design \u2026 Beyond the Domain \u29c9 (languageengineering.io's blog)</li> <li>Categorizing the Complexities in Programming \u29c9 (languageengineering.io's blog)</li> <li>Fusing Modeling and Programming into Language-Oriented Programming \u29c9 (Markus Voelter's blog)</li> <li>Context Boundaries in Language Engineering Projects \u29c9 (log verbose's blog)</li> <li>Why documents shouldn't be the basis of domain analysis \u29c9 (Markus Voelter's blog)</li> <li>When is something a (domain-specific) language? \u29c9 (Markus Voelter's blog)</li> <li>What is Model Driven Engineering \u29c9 (F1RE's blog)</li> <li>Domain-driven design vs. language engineering \u29c9 (Specific Languages' blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#introducing-dsls","title":"Introducing DSLs","text":"<ul> <li>Why it is so hard to change established processes in organizations \u29c9 (Markus Voelter's blog)</li> <li>Introducing a tool successfully \u29c9 (Markus Voelter's blog)</li> <li>The minimum infrastructure for running languages and models \u29c9 (Markus Voelter's blog)</li> <li>Why I emphasize DSLs for Domain Experts \u29c9 (Markus Voelter's blog)</li> <li>The split brain of DSLs \u29c9 (Markus Voelter's blog)</li> <li>How to run a technical workshop \u29c9</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#perspectives-on-dsl","title":"Perspectives on DSL","text":"<ul> <li>Knowledge Management \u29c9 (Markus Voelter's blog)</li> <li>Production Knowledge \u29c9 (Markus Voelter's blog)</li> <li>Software Architecture \u29c9 (Markus Voelter's blog)</li> <li>Software Quality \u29c9 (Markus Voelter's blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#comparisons","title":"Comparisons","text":"<ul> <li>DSLs vs. \"Learning Languages\" \u29c9 (Markus Voelter's blog)</li> <li>Low Code or Domain-Specific Languages? \u29c9 (log verbose's blog)</li> <li>Tool Lock-in vs. Semantic Lock-in \u29c9 (Markus Voelter's blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#fachlichkeit","title":"Fachlichkeit","text":"<ul> <li>An Argument for the Isolation of \"Fachlichkeit\" \u29c9 (Markus Voelter's blog)</li> <li>The Hidden Complexities in Fachlichkeit \u29c9 (Markus Voelter's blog)</li> <li>The hidden layer between the Fachlichkeit and the -ilities \u29c9 (Markus Voelter's blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#programming","title":"Programming","text":"<ul> <li>Teaching the Basics of Programming to Domain Experts \u29c9 (Markus Voelter's blog)</li> <li>Thinking vs. Coding \u29c9 (Markus Voelter's blog)</li> <li>ProgrammingBasics - How to think like a programmer \u29c9</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#safety","title":"Safety","text":"<ul> <li>Safety and Security from a Language Engineering Perspective \u29c9 (languageengineering.io's blog)</li> <li>Testing Languages, Generators and Runtimes in a Safety-Critical System \u29c9 (Markus Voelter's blog)</li> <li>Using Language Workbenches and Domain-Specific Languages   for Safety-Critical Software Development (Markus Voelter's blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#formal-methods","title":"Formal Methods","text":"<ul> <li>An Overview of Program Analysis Using Formal Methods \u29c9</li> <li>Thoughts on Formal Verification and DSLs \u29c9 (Markus Voelter's blog)</li> <li>Thoughts on X-by-Construction \u29c9 (Markus Voelter's blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#z3-theorem-prover","title":"Z3 Theorem Prover","text":"<ul> <li>Programming Z3 (tutorial) \u29c9</li> <li>Program verification with Z3 (course slides) \u29c9</li> <li>JavaSMT \u29c9</li> <li>Z3Py Guide \u29c9</li> <li>SMT-Lib \u29c9</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/ui_patterns/","title":"UI Patterns and Anti Patterns","text":"<p>Go through your editors and check the following list, which contains common patterns in MPS. Not all of them are good patterns and should therefore be avoided.</p> <p>Texts are readable.</p> <p>The contrast ratio between the background and foreground text colors should be at least 4.5:1 (article \u29c9). Contrast checkers \u29c9 can also help you. Here are some colors with high contrast:</p> <p></p> <p>When using a grayscale color, ensure the text color doesn't exceed 48% brightness (source \u29c9). Ensure to provide different colors for different color schemes (e.g., Darcula theme vs light theme).</p> <p>Bad example #1</p> <p></p> <p>Bad example #2</p> <p></p> <p>Bold and underline aren't used together.</p> <p>This combination is an anti-pattern. This article \u29c9 contains some more information. MPS-related summary:</p> <ul> <li>Bold<ul> <li>important phrases</li> <li>highlighting keywords</li> <li>Italic/Emphasis</li> <li>Used to highlight quotes (some use blockquotes).</li> <li>Foreign words. </li> </ul> </li> <li>Underline<ul> <li>Used for links</li> </ul> </li> <li>CAPS<ul> <li>Used for acronyms</li> </ul> </li> </ul> <p>You use buttons correctly.</p> <p>(Swing) Buttons use appropriate symbols/text to make clear what they do. You can also use buttons as up and down keys. You can hide them to not to disrupt the text editing: </p> <p>Add an option to hide buttons (checkbox, editor hint, action, etc.).</p> <p>Clickable elements appear clickable.</p> <p>When elements are clickable, they should appear clickable: They should use an indicator or different style (e.g., underlines and blue or styled like a button).</p> <p>You align collections when possible.</p> <p>Alignment is an essential aspect of design (introduction \u29c9). Use vertical grids instead of vertical collections to align cells nicely. It is also crucial for readability.</p> <p>You use color for emphasis and to convey information.</p> <p>In Addition, colors can emphasize words. Make sure that the user correctly associates the used color.</p> <p>Bad example</p> <p>Greyscale editor + grey is associated with disabled content/meta information such as comments. </p> <p>Good example</p> <p></p> <p>Color distinguishes different language features: BLUE for numbers, lila/green for CONSTANTS.</p> <p>You consistently use labels.</p> <p>Use labels consistently in the design (e.g., always bold, colon after label). The same goes for key-value pairs. There is no best practice for the separation between label and text. Should label and field be separated with colon? \u29c9 contains some ideas and common guidelines.</p> <p></p> <p>The context of UI elements is consistent.</p> <p>Counterexample: There are three buttons next to each other that look similar: One opens external documentation, the other navigates to a root node, and the third one reverts a change. This behavior could be confusing and frustrating for the user.</p> <p>A default empty statement exists.</p> <p>There should always be a default concept that acts as an empty line or empty text. It should be editable and support auto-completion. These lines should have an indicator that they are editable. The easiest way is to provide a placeholder value.</p> <p>Bad example</p> <p></p> <p>Different groups are distinguishable from each other.</p> <p>Groups can be separated, for example, by whitespace, by drawing a border (box), or by drawing brackets around the content.</p> <p>You emphasize non-standard operations/literals.</p> <p>Emphasize special operations or literals to make it clear that they are not. Other good examples in Base Language are extension methods.</p> <p></p> <p>Enough paddings surround elements.</p> <p>Ensure enough space is between the content and its border (padding). Otherwise, the editor looks too packed. More Padding, Please! | Patrick J. Condon \u29c9 contains more information from a design perspective.</p> <p>You use existing stylesheets.</p> <p>For Base Language, there is BaseLanguageStyle \u29c9. You can search globally for instances of Stylesheet \u29c9 to find more styles.</p> <p>The font size conveys hierarchy.</p> <p>The beginner's guide to typographic hierarchy \u29c9 contains more information.</p> <p>Example hierarchy (source: Font Size And Weight Matters \u29c9) : </p> <p>You use the entire window width for your editor.</p> <p>Often the space in editor components needs to be better used, and a lot of space is left empty on the right side of the window. You can improve this by using multiple groups next to each other or using the right-hand side of the screen for some legend for graphics or meta-information about the (root) node (e.g., code review).</p> <p>Headers follow general UI principles.</p> <p>Follow the following principles:</p> <ul> <li>the hierarchical relationship of ideas</li> <li>consistency</li> <li>readability</li> <li>specificity</li> </ul> <p>Technical writing essentials - Headings \u29c9 contains some more information.</p> <p>Headers are distinguishable from content.</p> <p>Bad example</p> <p></p> <p>The header and the start of the child concepts use bold font and the same text. In this example, the text \"Output\" is redundant. The header should be larger.</p> <p>A common layout is header-input-output: At the top is the header, and the output/body follows the inputs/declarations. Make sure to separate these three groups in some ways (such as horizontal or empty lines).</p> <p>Mixed example</p> <p></p> <p>The lines are just a little thick and not textual.</p> <p>A good maximum width for borders and other lines is 3 pixels. This width is just a rough guideline, but thicker lines make the design overwhelming.</p> <p>Bad example</p> <p></p> <p>You don't emphasize meta/not important information.</p> <p>Good example</p> <p></p> <p>A smaller font, light gray color, or a different font works well. Inherited values can also be shown this way: display them as placeholder values in light gray. Don't emphasize comments by making them bold or stand out in any way.</p> <p>Bad example</p> <p></p> <p>Don't show the reflective editor.</p> <p>The reflective editor provides a default editor for nodes. The editor is only read-only and should only be used for debugging purposes.</p> <p>Bad example</p> <p></p> <p>You use the right form of projection for the task in the editor.</p> <p>The right projections are used (text, tables, diagrams, or others), and different projections are provided when necessary (switchable by menu or editor hints).</p> <p>Example: multiple projections</p> <p></p> <p>You didn't forget to enable anti-aliasing for custom Java Swing components.</p> <p>When you create a custom component with a paint method, call EditorComponent.turnOnAliasingIfPossible \u29c9 to enable anti-aliasing. The Java documentation \u29c9 contains more information.</p> <p>All usages of symbols are clear.</p> <p>When using symbols, make sure that the user understands what it means.  A Plus symbol might be easy to understand (add, increase), but a complex shape that is not usable might not. fontawesome icon pack \u29c9 contains, for example, common icons.</p> <p>You abbreviate often-used words and symbols.</p> <p>Abbreviate words that are often used in the editor or use symbols. Examples:</p> <ul> <li>The Letter \"m\" or a red star * is often used to mark a field as mandatory.</li> <li>The plus sign \u2295 is used to indicate an \"add\" action.</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/","title":"User Experience and User Interfaces","text":"<p>How can I start learning about user experience?</p> <p>The articles of the Nielsen Norman Group are good: Study guides \u29c9 with articles, and videos deal with topics such as UX basics, psychology for UX, visual design, and UX writing.</p>  Why do my users ignore specific tools, such as the context action tool \u29c9? <p>According to Fitt's law \u29c9, the time required to move to a target area is a function of the distance to the target divided by the width of the target. In our case, the target area is the button that opens the tool window. In addition, the movement with the mouse can be split into 2 phases:</p> <ul> <li>initial movement: fast, imprecise</li> <li>final movement: slow, precise</li> </ul> <p>The corners of the screen are sometimes called magic corners. At these points, two edges collide, forming a theoretically infinitely big button. As a result, they are easy to hit (e.g., Windows start button, MacOS close button).</p> <p>This explanation assumes that the MPS window takes up most of the screen's size. In MPS, the project tool is located in the upper left corner, the Git tool in the lower left corner, the inspector in the lower right corner, and the context actions tool in the upper right corner. All tools near the magic corners should be easier to hit. The initial movement should already be quite precise.</p> <p>Due to the editor's location and sometimes the screen's width (e.g., wide-screen monitors), the mouse cursor is often placed on the left side of the screen, even if the logical view is opened on the left side. Therefore the tools on the left side are easier to reach because of the smaller distance.</p> <p>For Windows users, it might also play a role that in older Windows versions, the start menu button was located in a similar position as the Git tool, which makes it easier to hit. The same can be said for the inspector, which is located near the old Windows notification area.</p> <p>If a button is not located near the magic corners, such as the terminal, it takes the users even longer to find and press the button. This additional effort makes it more unlikely that the button is pressed.</p> <p>Opening a tool also disrupts the workflow. In the editor itself, there is less jumping around involved. The mouse is often optional. Ideally, the cursor moves from one line to the next.</p> How do you deal with many choices in the UI? <p>The dropdown list page in the IntelliJ Platform UI Guidelines \u29c9 recommends using a dropdown when there are more than four choices. Not only the number of items can be decisive. The context assistant \u29c9 handles this a bit differently, though: it switches between buttons and a dropdown depending on the total width of the choices.</p> <p>Therefore the number of choices is important but also the ordering of the items plays a big role: according to Hick's law \u29c9, the average reaction time \\(T\\) to make a choice is \\(T = b*log_2(n+1)\\), where \\(b\\) is a constant factor and \\(n\\) the number of items. When the items are in order, users perform a binary search to find the item. When there is no order, the search time is linear instead.</p> <p>When there are many choices, a search functionality should be provided that works similarly to the code completion menu when a custom UI component is used. Similar choices can also be grouped (e.g., intentions menu \u29c9 for grouping intentions).</p>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#basics","title":"Basics","text":"<p>This section contains links to fundamental knowledge unrelated to MPS that is needed to understand the topic user experience.</p> <ul> <li>7 Graphic Design Principles to Up-Level Your Graphics \u29c9</li> <li>7 Gestalt Principles of Design \u29c9</li> <li>10 Graphic Design Rules You Should Never Break \u29c9</li> <li>20 Most Important UI Design Principles for UI Designers \u29c9</li> <li>First Principles of Interaction Design \u29c9</li> <li>What are the basic rules of user interface design? (quora) \u29c9</li> <li>Understanding Layout | Material Design \u29c9</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#text","title":"Text","text":"<p>Currently, there are no guidelines on how to write text in MPS editors. The following links provide some information on this  topic from non-MPS perspectives.</p> <ul> <li>UX Writing: Handy Tips on Text Improving User Experience \u29c9</li> <li>The Punctuation Guide \u29c9</li> <li>Technical Writing Essentials \u2013 Document Design \u29c9</li> <li>Word Choices and Language in UX, Part Three: User Interface Labels &amp; Messages \u29c9</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#ui","title":"UI","text":"<p>The UI in MPS is influenced by the builtin editor cells and styles, custom cells and swing components. Since there are no guidelines  in MPS, it is important to see how other guidelines can be applied. In the end, you can have perfect guidelines, but you might also need to adhere to your companies' guidelines. Consistency is here a very important topics, especially when mixing different styles.</p> <ul> <li>Design Better Forms \u29c9</li> <li>IntelliJ Platform UI Guidelines \u29c9</li> <li>When to use checkboxes \u29c9</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#uxusability","title":"UX/Usability","text":"<p>The following links give introductions to the topic:</p> <ul> <li>Ten Usability Heuristics for User Interface Design \u29c9</li> <li>UX Design: How to Make User Interface Readable \u29c9</li> </ul> <p>The following items are cited from different UX guidelines from the web, and might be applicable to your project:</p> <p>Windows Design Techniques \u29c9:</p> <ul> <li> <p>Determine the features your users need. Understand your users' needs through goal, scenario, and task analysis. Determine a set of features that realizes these objectives.</p> </li> <li> <p>Remove unnecessary elements. Remove elements that aren't likely to be used or have preferable alternatives.</p> </li> <li> <p>Remove unnecessary redundancy. There might be several effective ways to perform a task. To achieve simplicity, make the hard decision and choose the best one for your target users instead of providing all of them and making the choice an option.</p> </li> <li> <p>Make it \"just work\" automatically. The element is necessary, but any user interaction to get it to work is not because an acceptable default behavior or configuration exists. To achieve simplicity, make it work automatically and either hide it from the user entirely or reduce its exposure significantly.</p> </li> <li> <p>Combine what should be combined. Put the essential features that support a task together so that you can perform the task in one place. The task's steps should have a unified, streamlined flow. Break down complex tasks into easy, clear steps so that \"one\" place might consist of several UI surfaces, such as a wizard.</p> </li> <li> <p>Separate what should be separated. Not everything can be presented in one place, so always have clear, well-chosen boundaries. Make features that support core scenarios central and obvious, and hide optional functionality or make it peripheral. Separate individual tasks and provide links to related tasks. For example, separate tasks related to manipulating photos from tasks related to managing collections of photos, but they should be readily accessible from each other.</p> </li> <li> <p>Eliminate what can be eliminated. Take a printout of your design and highlight the elements used to perform the most important tasks. Even highlight the individual words in the UI text that communicate useful information. Now review what isn't highlighted and consider removing it from the design. If you remove the item, would anything bad happen? If not, remove it!     Consistency, configurability, and generalization are often desirable qualities but can lead to unnecessary complexity. Review your design for misguided efforts in consistency (such as having redundant text), generalization (such as having several time zones when two is enough), and configurability (such as options that users aren't likely to change), and eliminate what can be eliminated.</p> </li> <li> <p>Put the elements in the right place. Within a window, an element's location should follow its utility. Essential controls, instructions, and explanations should all be in context and in logical order. If more options are needed, expose them in context by clicking a chevron or similar mechanism; if more information is required, display an info-tip on mouse hover. Place less essential tasks, options, and help information in a separate window or page outside the main flow. The technique of displaying additional detail as needed is called progressive disclosure.</p> </li> <li> <p>Use meaningful high-level combinations. It is often simpler and more scalable to select and manipulate groups of related elements than individual elements. Examples of high-level combinations include folders, themes, styles, and user groups. Such combinations often map to a user goal or intention that isn't apparent from the individual elements. For example, the purpose behind the high-contrast black color scheme is far more apparent than that of a black window background.</p> </li> <li> <p>Select the proper controls. Design elements are embodied by the controls you use to represent them, so selecting the right control is crucial to efficient presentation. For example, the font selection box used by Microsoft Word shows both a preview of the font and the most recently used fonts. Similarly, the way Word shows potential spelling and grammar errors in place is much simpler than the dialog box alternative.</p> </li> <li> <p>Make tasks discoverable and visible. All tasks, especially frequent ones, should be readily discoverable within the user interface. The steps required to perform tasks should be visible and not rely on memorization.</p> </li> <li> <p>Present tasks in the user's domain. Complex software requires users to map their problems to the technology. Simple software does that mapping for them by presenting what is natural. For example, a red-eye reduction feature maps directly to the problem space and doesn't require users to think about details like hues and gradients.</p> </li> <li> <p>Put domain knowledge into the program. Users shouldn't be required to access external information to use your application successfully. Domain knowledge can range from complex data and algorithms to simply clarifying what type of input is valid.</p> </li> <li> <p>Use text that users understand. Well-crafted text is crucial to effective communication with users. Use concepts and terms familiar to your users. Thoroughly explain what is being asked in plain language so that users can make intelligent, informed decisions.</p> </li> <li> <p>Use safe, secure, probable defaults. If a setting has a value that applies to most users in most circumstances and that setting is both safe and secure use it as the default value. Make users specify values only when necessary.</p> </li> <li> <p>Use constraints. If many ways to perform a task exist, but only some are correct, constrain the task to those correct ways. Users should not be allowed to make readily preventable mistakes.</p> </li> </ul> <p>Window UX Top Violations \u29c9:</p> <ul> <li> <p>Use ordinary, conversational terms when you can. Focus on the user goals, not technology. This technique is especially effective if you are explaining a complex technical concept or action. Imagine looking over the user's shoulder and explaining how to do the task. IN CONFLICT WITH Domain</p> </li> <li> <p>Be polite, supportive, and encouraging. The user should never feel condescended to, blamed, or intimidated.</p> </li> <li> <p>Remove redundant text. Look for redundant text in window titles, main instructions, supplemental instructions, content areas, command links, and commit buttons. Generally, leave the entire text in the main instructions and interactive controls, and remove any redundancy from the other places.</p> </li> <li> <p>Use title-style capitalization for titles and sentence-style capitalization for all other UI elements.</p> </li> <li> <p>For feature and technology names, be conservative in capitalizing. Typically, only major components should be capitalized (using title-style capitalization).</p> </li> <li> <p>For feature and technology names, be consistent in capitalizing. If the name appears more than once on a UI screen, it should always appear the same way. Likewise, you should consistently present names across all UI screens in the program.</p> </li> <li> <p>Don't capitalize the names of generic user interface elements, such as toolbars, menus, scroll bars, buttons, and icons. Exceptions: Address bar, Links bar, ribbon.</p> </li> <li> <p>Don't use blue text that isn't a link because users may assume it is a link. Use bold or a shade of gray where you'd otherwise use colored text.</p> </li> <li> <p>Use bold sparingly to draw attention to text users must read.</p> </li> <li> <p>Don't place periods at the end of control labels or main instructions.</p> </li> <li> <p>Use one space between sentences, not two.</p> </li> <li> <p>Label every control or group of control.</p> </li> <li> <p>Select the safest (to prevent data loss or system access) and most secure value by default for all controls.</p> </li> <li> <p>Use notifications for events that are unrelated to the current user activity, don't require immediate user action, and users can freely ignore.</p> </li> <li> <p>on't abuse notifications: Use notifications only if you need to. When you display a notification, you can interrupt or even annoy users. Make sure that interruption is justified. Use notifications for non-critical events or situations that don't require immediate user action. Use an alternative UI element (such as a modal dialog box) for critical events or situations requiring immediate user action. Don't use notifications for feature advertisements!</p> </li> <li> <p>Never require users to click an object to determine if it is clickable. Users must be able to determine clickability by visual inspection alone.</p> </li> <li> <p>Whenever possible, propose a solution so users can fix the problem. However, make sure the proposed solution is likely to solve the problem. Refrain from wasting users' time by suggesting possible but improbable solutions.</p> </li> <li> <p>Be specific. Avoid vague wording, such as syntax errors and illegal operations. Provide specific names, locations, and values of the objects involved.</p> </li> <li> <p>Don't use phrasing that blames the user or implies user error. Avoid using you and your in the phrasing. While the active voice is generally preferred, use the passive voice when the user is the subject and might feel blamed for the error if the active voice were used.</p> </li> <li> <p>Don't use OK for error messages. Users don't view errors as being OK. If the error message has no direct action, use Close instead.</p> </li> <li> <p>Don't use the following words:</p> <ul> <li>Error, failure (use problem instead)</li> <li>Failed to (use unable to instead)</li> <li>Illegal, invalid, bad (use incorrect or not valid instead)</li> <li>Abort, kill, terminate (use stop instead)</li> <li>Catastrophic, fatal (use serious instead)</li> </ul> </li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#dark-theme","title":"Dark Theme","text":"<p>Use the predefined colors in MPS or define your colors using the class JBColor with the constructor <code>JBColor(light theme color, dark theme color)</code>. By using this class, verifying if the user is using the Darcula theme shouldn't be necessary. The MPS colors already support the light and dark theme because they inherit from <code>JBColor</code>. As seen in the screenshot below, the colors can be different when using the dark theme (e.g., the white and black colors). Don't use hard-coded hex colors or the class Color \u29c9.</p> <p> </p> Light theme <p> </p> Dark theme <p>Ensure the foreground color is readable for the chosen background (see preceding screenshots). You can use an online contrast checker tool \u29c9 to verify that the color combination is readable.</p> <p>Example for colors with a good contrast ratio (foreground: black; you can find the ratio after the hex code):</p> <p></p> <p>If this change isn't feasible, you can switch to the default theme (useful for RCPs):</p> <pre><code>class LookAndFeel {\n    void set() {\n        LafManager lafManager = LafManager.getInstance();\n        QuickChangeLookAndFeel.switchLafAndUpdateUI(lafManager, LafManagerImpl.getTestInstance().getDefaultLightLaf(), false);\n    }\n}\n</code></pre> <p>Additional useful resources:</p> <ul> <li> <p>ColorUtil \u29c9 (fromHex, darker, brighter, withAlpha, saturate, desaturate\u2026)</p> </li> <li> <p>MPS color definitions: MPSColors.java \u29c9</p> </li> <li> <p>JBColor.brighter() + JBColor.darker \u29c9() e.g. <code>new JBColor(JBColor.PINK, JBColor.PINK.darker().darker())</code></p> </li> <li> <p>IntelliJ IDEA color definitions: JBColor \u29c9</p> </li> <li> <p>IntelliJ IDEA platform colors + explanation: JBUI + Platform theme colors \u29c9</p> </li> <li> <p>Apple color Guidelines \u29c9</p> </li> </ul>","tags":["best_practise","ui"]},{"location":"platform_essentials/","title":"Platform Essentials","text":"<p>The following pages introduce the most important languages of the platforms and how to work with the platforms in general. For mbeddr and  MPS Extensions \u29c9, there are separate sections in the documentation.</p> <p>Check out sandboxes and test cases in the corresponding languages to better understand how to use certain language features. Not all languages are intuitive to use. If you aren't sure how to use a specific concept, right-click it \u2192 Find Usage Settings \u2192 Concept Instances/Node usages + Global Scope. You can also use the console to search for instances:  <pre><code>#instances&lt;scope = global&gt;(ClassConcept)\n</code></pre></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/accessing_the_project/","title":"Accessing the Project","text":"<p>There are many different ways to get the MPS/IntelliJ project, some of which are hacks you should avoid. This page only lists the recommended approaches on purpose. There are only a few practical use cases for the project class: access scope, repository, and core components. The idea is that user-triggered actions take what's necessary (e.g., a command lock), and then the code down the execution path shall not care to take one.</p>"},{"location":"platform_essentials/accessing_the_project/#what-are-the-different-project-classes","title":"What Are the Different Project Classes?","text":"<ul> <li>com.intellij.openapi.project.Project: a project in the IntelliJ platform. There are different ways \u29c9 to access the project instance, but most are unavailable in MPS. Every time you interact with the IntelliJ platform, you need this class.</li> <li>org.jetbrains.mps.openapi.project.Project: The class is the MPS equivalent of an IntelliJ project. It provides access to the repository, its name and modules, and the model access class for reading and writing models.</li> <li>jetbrains.mps.project.Project: This class abstracts away the MPS project. The project may rely on the IntelliJ project or not. It has a scope and a corresponding project repository to store modules.</li> <li>jetbrains.mps.project.ProjectBase: This is the basic MPS Project implementation. This project is tied to the MPS platform and gives access to the MPS core platform and components it comprises.</li> <li>jetbrains.mps.project.MPSProject: This class represents a project based on the idea platform project. It is in use in MPS as an IDEA plugin. The method <code>getProject()</code> returns the IntelliJ project.</li> <li>jetbrains.mps.project.StandaloneMPSProject: This class is for MPS as a standalone IDE. <code>#project</code> on the MPS console returns an instance of this class.</li> </ul>"},{"location":"platform_essentials/accessing_the_project/#places","title":"Places","text":"<p>You might need access to a project in a few different places. Not all of them can access it.</p>"},{"location":"platform_essentials/accessing_the_project/#actions","title":"Actions","text":"<p>Actions \u29c9 provide access to the MPS/IntelliJ project, the project frame, and other information via action context parameters. The official documentation also explains the classes  you must import to access those. You can find the available actions on the page Actions | Reference. There is no need to convert between different project classes because all project parameters are available.</p>"},{"location":"platform_essentials/accessing_the_project/#editor","title":"Editor","text":"<p>This topic is also explained on the Specific Languages blog: How to get the current MPS project from within the editor. Components in the IntelliJ platform can implement the interface DataProvider \u29c9 to provide data that you can access through the DataManager \u29c9 class. A typical data provider is the editor component. Actions also support the DataManager:</p> <p><pre><code>Component editorComponent = (Component) editorContext.getEditorComponent();\nMPSProject project = MPSDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext(component));\n</code></pre> This snippet shows the recommended way to access the project in the editor or Java Swing component cells. The following more straightforward approach also works but depends on implementation details that might change in the future:</p> <pre><code>Project project = ProjectHelper.getProject(editorContext.getRepository());\n</code></pre> <p>The editor context is available for most features, like transformation menus, style sheets, and action maps.</p>"},{"location":"platform_essentials/accessing_the_project/#intentions","title":"Intentions","text":"<p>Intentions always have the <code>editorContext</code> available and can access the project the same way as the editor. If you need to access the project or other context information, consider using an action instead. You can show actions in the editor's right-click menu if you need them closer to the editor.</p>"},{"location":"platform_essentials/accessing_the_project/#tests","title":"Tests","text":"<p>The project expression is available in tests, although you should only need it when invoking the generator or resolving nodes through the global repository.</p>"},{"location":"platform_essentials/accessing_the_project/#tool-window","title":"Tool Window","text":"<p>val dataContext = DataManager.getInstance().getDataContext(toolWindow.component) val project = MPSDataKeys.PROJECT.getData(dataContext) val mpsProject = MPSDataKeys.MPS_PROJECT.getData(dataContext)</p>"},{"location":"platform_essentials/accessing_the_project/#plugin-solutionplugin-aspect","title":"Plugin Solution/Plugin Aspect","text":"<p>If you need access to the project object, you can use a project plugin with an MPSProject instance in the init and dispose block. You can pass the instance to other classes as well. To get the IntelliJ project use <code>ProjectHelper.toIdeaProject(project)</code>.</p>"},{"location":"platform_essentials/accessing_the_project/#other-places","title":"Other Places","text":"<p>Some low-level code, like behaviors, are not supposed to start a command or interact with the UI (where some dialogs require the project/IDE frame). There's always a project for user-triggered actions, and this is the moment proper command access gets started and various UI stuff happens. It's wrong to invoke some behavior that would try to guess the project down the road. Typically, there also should not be a need to access the project in the generator.</p>"},{"location":"platform_essentials/accessing_the_project/#code-to-avoid","title":"Code to Avoid","text":"<ul> <li>guessing the project through <code>ProjectManager.getInstance().getOpenedProjects()</code></li> <li>guessing the project through the owners of <code>(MPSModuleRepository) (model/.getRepository())</code></li> <li>accessing the project in an application plugin</li> <li>guessing the IntelliJ project through the WindowManager class</li> </ul> <p>When you need to access the model from a different thread (concurrent access \u29c9), it might be tempting to write the following code that doesn't work:</p> <pre><code>command with node.model/.getRepository() {\n\n}\n</code></pre> <p>It will fail with the following exception: <code>GlobalModelAccess does not support actions that require a command to run. One needs a project to run such actions</code>. In those cases, accessing it and writing <code>project.getRepository()</code>. Use one of the mentioned methods, and don't guess the project. A question that you should answer first: Do I need to invoke the code here, or is there a better place to invoke it?</p>"},{"location":"platform_essentials/accessing_the_project/#exceptions","title":"Exceptions","text":"<ul> <li>Model listeners \u29c9 don't have access to the project.</li> <li>The project is necessary for project-wide find usage/project scope.</li> <li>Use the class ProjectHelper \u29c9 to convert between projects, SRepository instances, and frames.</li> </ul>"},{"location":"platform_essentials/breaking_changes/","title":"Breaking Changes","text":"<p>A breaking change in software development is a change that affects the compatibility or functionality of existing code that depends on the changed code. In the platform it can also mean that the code now behaves for example, differently for the users, new errors are introduced or the user has to change its own code.</p>"},{"location":"platform_essentials/breaking_changes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Changing the cardinality of a property, reference, or link in the structure aspect of a language.  This can affect the way the element is accessed or modified in the code, and may require additional checks or conversions. A change from 0..1/1 to 0..n or vice versa  is the most drastic change where the calling code has to be adapted. Changing the cardinality from 0..1 to 1 or vice versa  might leave parts of nodes uninitialized when they become mandatory. They also throw model check errors when used in light quotations.</li> <li>Changing the type of a property/ reference or link in the structure aspect of a language. This can cause type errors or mismatches in the code that assigns or reads the value. </li> <li>Changing the target concept of a reference or link in the structure aspect of a language. This can affect the validity and resolution of the reference or link, and may require additional constraints or scopes.</li> <li>Changing the inheritance hierarchy of concepts in the structure aspect of a language. This can affect the subtyping and substitutability of concepts, and may require additional type rules or migrations.</li> <li>Changing the behavior of a concept or a model element in the behavior aspect of a language. This can affect the semantics and execution of the code that invokes the behavior, and may require additional tests or validations.</li> <li>Changing the language version or module version. This might only cause the migration assistant to pop up to update the versions   but most of the time (mandatory) migrations have to be executed.</li> <li>Changing the constraints aspect of a concept or a model element. This can affect the validity and scope of the element in the context of other elements.</li> <li>Changing the typesystem aspect of a concept or a model element. This can affect the type checking and inference of the element and its subtypes.</li> <li>Changing the generator aspect of a concept or a model element. This can affect the transformation and generation of the element and its dependencies.</li> <li>Changing the name or location of a language or a model. This can affect the references and dependencies of the language or the model, and may require updating the project configuration or the module.xml file.</li> <li>Changing the name or location of a generator template or a mapping label. This can affect the generation plan or the mapping configuration of the language, and may require updating the generator aspect or the generator.xml file.</li> <li>Changing the generated code of a custom aspect can be a breaking change, depending on how the code is used by the subsystems. For example, if the code is used to access or modify the aspect model elements, changing the code can affect the validity or functionality of the aspect. If the code is used to implement some behavior or logic of the aspect, changing the code can affect the semantics or performance of the aspect.</li> <li>Removing or changing the visibility of a dependency that is used by other modules or models. This can cause unresolved references or compilation errors in the dependent code, and may require updating the module.xml or the model properties files.</li> <li>Changing the dependency scope from compile to runtime or test. This can affect the generation or execution of the dependent code, and may require adding additional dependencies or changing the generation plan.</li> <li>Removing a language completely or some concepts of it.</li> </ul>"},{"location":"platform_essentials/breaking_changes/#partially-breaking-changes","title":"Partially Breaking Changes","text":"<ul> <li>Changing the name of a concept, property, reference or link in the structure aspect of a language won't break reference to those elements but resolve infos need to be updated.</li> <li>Changing the editor aspect of a concept or a model element. This can affect the way the element is displayed or edited in the projectional editor2.</li> </ul>"},{"location":"platform_essentials/breaking_changes/#base-language-code","title":"Base Language Code","text":"<p>Changes can affect types, methods and fields of classes.</p>"},{"location":"platform_essentials/breaking_changes/#breaking-changes_1","title":"Breaking Changes","text":"<p>The following changes are considered breaking:</p> <ul> <li>Type<ul> <li>rename/move</li> <li>move and rename</li> <li>remove</li> <li>lost visibility</li> <li>add final modifier/remove static modifier</li> <li>change in supertype/remove supertype</li> </ul> </li> <li>Method<ul> <li>move/rename</li> <li>remove</li> <li>push down</li> <li>inline</li> <li>change in parameter/exception list</li> <li>change in return type</li> <li>lost visibility</li> <li>add final modifier/remove static modifier</li> </ul> </li> <li>Field</li> <li>remove</li> <li>move</li> <li>push down field</li> <li>change in default value</li> <li>change in type field</li> <li>lost visibility</li> <li>add final modifier</li> </ul>"},{"location":"platform_essentials/breaking_changes/#non-breaking-changes","title":"Non-Breaking Changes","text":"<p>The following changes are considered non-breaking:</p> <ul> <li>Type<ul> <li>add</li> <li>extract supertype</li> <li>gain visibility</li> <li>remove final modifier</li> <li>add static modifier/supertype</li> <li>deprecated type</li> </ul> </li> <li>Method<ul> <li>pull up</li> <li>gain visibility</li> <li>remove final modifier</li> <li>add static modifier</li> <li>deprecated method</li> <li>add</li> <li>extract</li> </ul> </li> <li>Field<ul> <li>pull up</li> <li>add</li> <li>deprecated field</li> <li>gain visibility</li> <li>remove final modifier</li> </ul> </li> </ul>"},{"location":"platform_essentials/breaking_changes/#java-api-design-links","title":"Java API Design Links","text":"<ul> <li>Google Best Practices for Java Libraries \u29c9</li> <li>Java API Best Practices \u29c9</li> <li>Java API Design Guidelines + Gist \u29c9</li> <li>API Design With Java 8 \u29c9</li> <li>Best Practices for Java Library Developers \u29c9</li> <li>How to Design a Good, Regular API \u29c9</li> <li>Java API Design: A Checklist to Consider \u29c9</li> <li>The Little Manual of API Design \u29c9</li> </ul>"},{"location":"platform_essentials/build_folder/","title":"Build Folder","text":"<p>This page describes the build folder in the project's root folder of the different platforms. The folder contains files you check in Git, such as Gradle files, generated Ant build files, and other temporary files.</p> <p>Some folders described in the IETS3 section appear at the root level in the other repositories. The guide describes them because they belong to the build process.</p>","tags":["infrastructure"]},{"location":"platform_essentials/build_folder/#mps-extensions","title":"MPS Extensions","text":"<ul> <li>The generated folder contains the generated build scripts, such as the scripts for building the languages and tests.</li> <li>The mps folder contains the MPS installation. The task resolveMps \u29c9 resolves the MPS dependency from the mps configuration and copies it to this folder which also serves as the mpsHomeDir.</li> </ul>","tags":["infrastructure"]},{"location":"platform_essentials/build_folder/#mbeddr","title":"mbeddr","text":"<ul> <li>The com.mbeddr.allScripts contains the generated Ant script that includes all other build scripts. You check this file into version control.</li> <li>The com.mbeddr.analyses.cbmc folder contains old shell scripts for building CBMC \u29c9 on Windows, macOS, and Linux.</li> <li>The com.mbeddr.release folder contains a shell script for publishing mbeddr on GitHub.</li> <li>The com.mbeddr folder contains the general build script (build.gradle) and all the build scripts for all subprojects.</li> <li>The publishing folder contains a Gradle script for publishing mbeddr.</li> <li>The thirdparty folder contains build scripts for third-party tools used by mbeddr (Graphviz \u29c9).</li> <li>The com.mbeddr.x folders contain the generated build scripts for building the languages and tests.</li> </ul>","tags":["infrastructure"]},{"location":"platform_essentials/build_folder/#iets3","title":"IETS3","text":"<ul> <li>The artifacts folder contains the generated files of the Ant scripts. This folder includes the compiled MPS plugins, the build-all script and the plugin for the tests.</li> <li>The config folder contains the IntelliJ IDEA configuration directory containing user-defined IDE settings, such as keymaps, color schemes, custom VM options, platform properties, etc. For MPS, only an empty SSl subfolder exists.</li> <li>The dependencies folder contains the downloaded dependencies of the project. In this case, it includes the  mbeddr platform \u29c9 +  MPS Extensions \u29c9.</li> <li>The distributions folder contains the generated artifacts of the languages and tests as zip folders.</li> <li>The junitreport folder contains the results of the test execution as an HTML report (index.html).</li> <li>The scripts folder contains the Ant scripts that the MPS build language generated. (TODO: Why is there a nested build folder?)</li> <li>The system folder is the temporary system directory \u29c9 for the test execution.</li> <li>The tmp folder contains temporary files generated by the Java compiler.</li> <li>The jbrDownload folder contains the downloaded JBR version used for the build. The downloadJbr \u29c9 Gradle task comes from the mps-gradle-plugin \u29c9.</li> </ul>","tags":["infrastructure"]},{"location":"platform_essentials/common_concepts_and_interfaces/","title":"Common Concepts and Interfaces","text":"<p>This list explains some common abstract concepts and interfaces that you can use to extend or utilize the functionality of the platforms. Identifiers starting with a capital \"I\" refer to interfaces.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#mbeddr","title":"Mbeddr","text":"<p> mbeddr \u29c9 only extends interfaces from de.slisson.mps.richtext.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#base","title":"Base","text":"<p>All common mbeddr interfaces are located in the namespace com.mbeddr.core.base.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#assessment","title":"Assessment","text":"<p>To extend assessments, extend the class AssessmentQuery to create a new query. The result of the query has to extend the class AssessmentResult. Extend the interface AssessmentSummary \u29c9 to provide a summary of the results.</p> <p>Example:</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#chunk","title":"Chunk","text":"<p>A node of the class Chunk \u29c9 has several properties: it has a name, acts as a scope provider for elements, and can import other elements or vice versa. It also integrates with the tree view and provides a graph of all the chunk hierarchy, including imports. It also detects dependency cycles.</p> <p>Example:</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icommentable","title":"ICommentable","text":"<p>You can comment out concepts or interfaces that implement ICommentable by typing <code>//</code> or <code>/*</code> in the editor if the node doesn't implement IEmpty \u29c9.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#idocumentable","title":"IDocumentable","text":"<p>Add support for documenting nodes when implementing the IDocumentable \u29c9 interface. The text node uses the language <code>de.slisson.mps.richtext</code> and supported text and embedded nodes.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#itreeviewable","title":"ITreeViewable","text":"<p>Implement ITreeViewRoot \u29c9 to use the Tree tool. It is a tool that can show a tree structure.</p> <p>Example: IETS3 call tree of functions</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icontainerofuniquenames","title":"IContainerOfUniqueNames","text":"<p>IContainerOfUniqueNames checks that the provided names are indeed unique and shows an error otherwise. For qualified names, implement the interface IHasQualifiedName \u29c9.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#idetectcycle","title":"IDetectCycle","text":"<p>Implement IDetectCycle \u29c9 to detect cyclic dependencies. This feature is used, for example, with chunks that import other chunks.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iempty","title":"IEmpty","text":"<p>Implement IEmpty \u29c9 to support empty lines. It automatically suppresses error messages, and the implementing concept is also not visible in the outline.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#name-related-interfaces","title":"Name-Related Interfaces","text":"<p>Use IIdentifierNamedConcept for concepts that should have valid identifiers. Check the property constraint \u29c9 to understand how it works.</p> <p>INameAllUpperCase, INameFirstCharLowerCase, and INameFirstCharUpperCase \u29c9 can further constrain the identifier name.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#imbeddrideroot","title":"IMbeddrIDERoot","text":"<p>Concepts that implement the interface IMbeddrIDERoot \u29c9 show up in the New Roots menu. It is visible above the regular new menu of the context menu. It adds the following features: a custom name for the menu entry, root concept sorting, and custom categories for the root concepts.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iets3","title":"IETS3","text":"<p> IETS3 \u29c9 builds on  mbeddr \u29c9 interfaces in de.slisson.mps.richtext.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#general","title":"General","text":"<p>The general interfaces deal with integration of solvers and naming concepts. Interfaces for naming are also located in  mbeddr \u29c9 and can be a valid alternative.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#isolvable","title":"ISolvable","text":"<p>Implement ISolvable to create solver tasks, executable by solvers such as Z3. To enable the solver for a node, implement the interface IUseSolver. A solver task must extend the concept AbstractSolverTask. The concept that can be mapped to the solver must implement ICanBeMappedToSolver \u29c9.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icanruncheckmanually","title":"ICanRunCheckManually","text":"<p>Implement ICanRunCheckManually \u29c9 to support running checks that are executed through one of the actions (runAllManuallyOnModel, runAllManuallyOnRoot, runManuallyOnContainer) or intentions. User objects of the node can store the result of the checks. The interface also supports updating the editor with the test results, for example, highlighting the background of a test with color and refreshing the editor.</p> <p>Example:</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#ioptionallynamed","title":"IOptionallyNamed","text":"<p>Use the interface IOptionallyNamed \u29c9 for concepts that should support an optional name. You can also use this name in smart references.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#ivalidnamedconcept","title":"IValidNamedConcept","text":"<p>As an alternative to the mbeddr interfaces, you can use the interface IValidNamedConcept \u29c9 for valid identifiers that are valid in KernelF.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#expressions","title":"Expressions","text":"<p>To add a new expression, extend the concept Expression \u29c9. The new concept is commentable and documentable by default.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icanbelvalue","title":"ICanBeLValue","text":"<p>Implement the interface ICanBeLValue when the concept is valid as the left value \u29c9 of expressions such as assignments. Variable references, paths, and dot expressions can be left values.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#idottarget","title":"IDotTarget","text":"<p>Implement IDotTarget \u29c9 to support custom operations for the dot expression. It can be used, for example, to add new operations for collections, enumerations, math, state machines, and many more.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iemptyliteral","title":"IEmptyLiteral","text":"<p>IEmptyLiteral \u29c9 is a marker interface used to mark literals that evaluate to an empty value at runtime.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iliteral","title":"ILiteral","text":"<p>Implement ILiteral to add support for a new literal. For primitive types such as integers and strings, extend the concept PrimitiveLiteral instead. Register an extension for the primitiveTypeMapper extension point when using custom primitive literals. The standard implementation is the SimpleTypesPrimitiveTypeMapper \u29c9.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#effects","title":"Effects","text":"<p>Since KernelF is by default immutable, some language extensions allow side effects, such as the language org.iets3.core.expr.mutable. To add custom concepts with effects, implement the interfaces IMayAllowEffect and IMayHaveEffect \u29c9.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#ioptionallytyped","title":"IOptionallyTyped","text":"<p>Use the interface IOptionallyTyped \u29c9 to add an optional type to an expression. The expression automatically used the provided type as its type.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#itraceroot","title":"ITraceRoot","text":"<p>Nodes that want to be the root of tracing should implement the interface ITraceRoot \u29c9</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#custom-types","title":"Custom Types","text":"<p>Custom types must extend the concept Type. If the type supports a default value (e.g., <code>false</code> for the boolean type and <code>0</code> for a numeric type), implement the interface ITypeSupportsDefaultValue \u29c9.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iwantnewline","title":"IWantNewLine","text":"<p>The concepts of expressions that need to be on a new line, such as try expressions, block expressions, and sometimes tables, must implement the interface IWantNewLine \u29c9. This interface affects the layout of some expressions, such as if-expressions and function bodies.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#tests","title":"Tests","text":"<p>To add a new test statement, extend the concept AbstractTestItem. If you need to update the editor after execution of the test item, override the method performAdditionalEditorUpdate \u29c9.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#top-level","title":"Top-level","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#itoplevelexprcontent","title":"IToplevelExprContent","text":"<p>Implement the interface IToplevelExprContent to make expression available at the topmost level, like the ExpressionStatement \u29c9 in Base Language.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#collections","title":"Collections","text":"<p>When implementing custom operations for collections such as maps, lists, and sets, use one of the provided concepts as the base concept (for example NoArgCollectionOp and OneArgCollectionOp). If no suitable concept is available, implement one of the interfaces, such as ICollectionOp and IMapOneArgOp. If this is still not possible, you can still implement IDotTarget \u29c9 directly.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#mps-extensions","title":"MPS Extensions","text":"<p> MPS Extensions \u29c9 doesn't have many interfaces because it can be mostly customized by extending editor cells.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#richtext","title":"Richtext","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iword","title":"IWord","text":"<p>Implement IWord \u29c9 to add new embeddable nodes to the text.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/contributing/","title":"Contributing","text":"<p>This guide shows how to contribute to one of the platforms. It takes  IETS3 as an example. It mainly uses the MPS GUI for Git. If you want to do everything on the command line, check out An Introduction to Git or one of the Git Cheat Sheets \u29c9.</p> <ol> <li>Make sure that you have Git installed.</li> <li>Clone the repository: <code>git clone https://github.com/IETS3/iets3.opensource.git</code> or Check out a project from a remote host \u29c9 for the GUI way.</li> <li>Decide which branch you want to use as the template for the contribution. The README should list the supported MPS version. Older branches are named maintenance/mpsX, for example, maintenance/mps20203. The main branch is the master branch.</li> <li>If you have already checked out the repository before, fetch \u29c9 all the changes from the remote repository.</li> <li>Create a new branch from the selected branch \u29c9. Some common names are feature/X, bugfix/X, and refactoring/X, where X stands for a description of the branch and maybe the targeted MPS version, such as feature/my_feature_20211.</li> <li>Push the changes to the repository. Editing the repository history \u29c9 is only allowed on your branch.</li> <li>Create a new pull request \u29c9 in the remote repository. </li> <li>Optionally, request a pull request review if the repository requires reviewing. Make sure that the build runs on https://build.mbeddr.com. Review the build status in the PR \u29c9.</li> <li>If the reviewer requires a change, make the change and click the re-request review button.</li> <li>If the reviewer approves the change, you can merge the changes (or he has already merged your changes). If you have a lot of commits that you want to merge into one commit or several commits, you can either use interactive rebase in MPS or squash your commits \u29c9 into one single commit when merging the pull request.</li> </ol> <p>Some more tips:</p> <ul> <li>Enable GitHub notifications \u29c9 to receive mail notifications about events on GitHub, such as comments or approved pull requests.</li> <li>The browser extension Refined GitHub \u29c9 provides some additional features for GitHub that you might find helpful.</li> </ul>","tags":["iets3"]},{"location":"platform_essentials/how_everything_is_connected/","title":"How Everything s Connected","text":"<p>This page describes the connections between MPS, IntelliJ Community, JBR, TeamCity, and all open-source repositories.</p> <p>JetBrains MPS is based on IntelliJ IDEA. It doesn't use all the plugins but extends it through the IntelliJ platform SDK to add support for tools that facilitate designing domain-specific languages. The projectional editor of MPS is a custom editor implementation instead of the standard text editor. Therefore, many text-based features of IntelliJ won't work (such as syntax language injections or code templates). Some features are unused or disabled such as the Program Structure Interface \u29c9, which the platform typically uses as the layer responsible for parsing files and creating the syntactic and semantic code model.</p> <p>MPS/IntelliJ IDEA requires a Java Runtime. Both use the JetBrains Runtime, a fork of OpenJDK. It includes several enhancements in font rendering, ligatures, HiDPI support, windowing/focus subsystems, performance improvements, and bug fixes. The repository mbeddr/build.publish.jdk publishes the needed runtimes for the different MPS versions on the itemis nexus server \u29c9.</p> <p>A zipped version of all MPS versions, as well as the most import components of MPS (jar files) such as the editor API or the model checker, are also published through the repository mbeddr/build.publish.mps to the itemis nexus server \u29c9.</p> <p>You can custom RCPs which are customized versions of MPS. The first big RCP was mbeddr. Its repository is mbeddr/mbeddr.core. The old homepage is mbeddr/mbeddr.github.io \u29c9. The reusable plugins became part of the com.mbeddr.mpsutil subproject. mbeddr.com/platform.html is the old documentation. Some plugins and languages moved to a new repository JetBrains/MPS-extensions, especially the editor-related languages. JetBrains hosts this repository. Full Extension List | MPS Extensions contains a list of all extensions in this repository. Many extensions were contributed by itemis, a few of them by DSLFoundry. The documentation for both platforms is hosted on GitHub and the current website \u29c9, respectively. Mbeddr.core has a dependency on  MPS Extensions \u29c9.</p> <p>The mbeddr organization also hosts mbeddr.formal: FASTEN (FormAl SpecificaTion ENvironment), which is a set of DSLs to experiment with rigorous systems and safety engineering, and mps-qa, which is a quality assurance tooling for MPS (blog post \u29c9).</p> <p>A different platform that builds on the other two is IETS3/iets3.opensource, which mainly consists of KernelF \u29c9. This extensible and functional language can be used in MPS as the core language of DSls and generate Java code.</p> <p>Use the MPS build language to build MPS projects.  The language generates Ant scripts you can execute directly on the command line. Other projects use Maven to call them. The most popular build automation tool is Gradle. Mbeddr/mps-gradle-plugin is a Gradle plugin that helps build MPS-based projects with Gradle. All MPS platforms and many other MPS projects use this plugin. It also contains a task download-jbr that can use the JBR artifacts published by the build.publish.mps repository. Some plugins are now part of the repository mbeddr/mps-build-backends \u29c9, a dependency of the mps-gradle-plugin. It allows executing the plugin through the command line instead of using them via Gradle.</p> <p>The platforms use the Maven publish plugin to publish the generated artifacts. This Gradle plugin allows to publish build artifacts to Apache Maven repositories. The scripts publish the artifacts to  artifacts.itemis.cloud, a Nexus repository, and the Apache Maven registry of the corresponding GitHub project (example \u29c9).</p> <p>Two CIs are available to run the build and execute the tests: Use GitHub Actions for small or big repositories. They can be configured through the Actions tab in the corresponding repository (example \u29c9) and saved in the .github/workflows directory.</p> <p>Big repositories use the TeamCity server located at build.mbeddr.com. TeamCity is a build management and continuous integration server. When you push a new branch to any of the mentioned repositories, TeamCity triggers a build and executes the tests. Some projects require a code review and a successful build before you can merge a branch. Build configurations for the different projects are saved on the server. A build agent executes the actual build. The TeamCity server and the agents (sometimes not located on the same server) run inside Docker containers. The agent docker image's source is at mbeddr/mbeddr.build.docker \u29c9.</p>"},{"location":"platform_essentials/interpreter/","title":"Interpreter, Coverage, and Tracing","text":"<p>The interpreter lets you interpret code on the fly. You can use it instead of the standard approach by writing an MPS generator and executing the code this way (e.g., executing Base Language code). The result of invoking the interpreter is a Java object.</p> <p></p> <p>In the GIF, you can see the interpreter executing a test case that contains assertions written with KernelF \u29c9. The MPS generator isn't involved in the execution at all.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#creating-an-interpreter","title":"Creating an Interpreter","text":"<p>To create a new interpreter, create a solution containing the interpreter and import the language <code>com.mbeddr.mpsutil.interpreter</code>. Make sure to set the solution kind to <code>Other</code> in the module properties.</p> <p></p> <p>Now create a new model inside your solution, create the new interpreter, and give it a name. The category should be <code>arithmetic</code> so that other interpreters of this category can also use this interpreter, but you can also use different categories. A demo Java interpreter \u29c9 exists in mpsutils (mbeddr) that uses the  category <code>java</code>. You don't have to set the evaluated languages: they are automatically calculated based on the declared evaluators.</p> <p>In the related interpreter section, you can define that the current interpreter should run before or after another interpreter. An example \u29c9 from KernelF: interpreter of the collections operations should run first because it reduces them to more straightforward statements. The lambda and base interpreter should run afterward.</p> <p>The type mappings section can declare mappings from types that implement the IType interface to either a Java type or another custom type that implements the IType \u29c9 interface.</p> <p></p> <p>An evaluator consists of a left and right side: the left side is a concept that should be interpreted. In the inspector, you can set cacheValues to true to enable caching. When the interpreter reaccesses the same value, the cached value is returned instead of recalculating it. Unchecking Tools \u2192 Enable Interpreter Cache in the main menu can turn off the interpreter cache.</p> <p></p> <p>The right side contains an expression or a block and must return a value. The node expression refers to the currently evaluated expression. A few expressions start with #. Their corresponding short descriptions explain them. Use the #-&gt; expression to call functions (search for usages globally). The right side can return a Java object (including null) or call another interpreter with one of the #-expressions. Another interesting expression is the env expression. Use this array to save values for other evaluators. The key must be a node. If you don't have a node, you can use a helper class with static dummy nodes as keys. An example could be a dot expression where the operation needs to access the operand, for example, <code>\"hello\".startswith(\"he\")</code>. <code>startswith()</code> is the operation, <code>\"hello\"</code> is the operand:</p> <p></p> <p>When the current interpreter is not suitable for interpreting the current node, use the expression tryOtherInterpreter to use the next interpreter to interpret the current node:</p> <p></p> <p>Use the castUp expression to cast a Java (Base Language) expression to a type. For example, if the expression is of type Number (numberInput) and the target type is float, <code>numberInput.floatValue()</code> would be called. The $ expression returns the concept's type. Use it for type mappings and child-type constraints you enter in the middle of evaluators. For example, the evaluator of a modulo operator might require that the left and right expressions are of type integer. Otherwise, the evaluator shouldn't be used:</p> <p></p> <p>Use the context expression to access the interpreter configurations, the cache, and the root interpreter, and contains some other useful. You can, for example, use it to access the environment from a Java class by executing a method with the context as a parameter. Then you can access the environment by calling <code>context.getEnvironment()</code>. The environment can be nested by calling <code>push</code> and <code>pop</code>. The interpreter uses the topmost environment in the stack. Use the is-evaluable expression (#?) to check if an evaluator for a specific node is available.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#code-coverage","title":"Code Coverage","text":"<p>There's also support for code coverage inside the editor. Code coverage checks which part of the code the interpreter has visited. For more information, consult the Wikipedia page \u29c9. You can find out, for example, which parts of the code aren't covered by tests:</p> <p></p> <p>There's support for coverage of single nodes but also branches. An example of a concept that uses branches in the data flow is the if and else blocks of an if statement. To register branches, use the register branches statement. To visit a branch, use the branch statement. When visiting a node, the node, the node's concept, and the evaluator are automatically marked as covered. For the children of the node, there's the list coverage statement which visits a list of nodes, and the simple cover statement. The former is, for example, used for the elements of a map literal. The coverage information can be accessed and set through the coverage variable.</p> <p></p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#calling-the-interpreter","title":"Calling the Interpreter","text":"<p>For IETS3 use the class <code>IETS3ExprEvalHelper</code>. If you can't use this class, use the following code: <pre><code>class Coverage {\n    void test() {\n        ICoverage coverage = null; // your implementation\n        ContextImpl ctx = new ContextImpl();\n        InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper(INTERPRETER_CATEGORY);\n        return helper.evaluateWithContextAndCoverage(expr, getInterpreter(), ctx, coverage);\n    }\n}\n</code></pre></p> <p>Other methods don't need coverage, a context object, etc. etc. The easiest way is to call <code>helper.evaluate</code> which returns a Java expression.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#final-notes","title":"Final Notes","text":"<p>The interpreter doesn't support multithreading. It can also be slow when called too many times.</p> <p>It's also recommended not to call the interpreter from the generator when searching for interpreters. MPS might deadlock because it starts indexing. You might get away with it by calling the interpreter inside the runnable of <code>DumbService.getInstance(project).suspendIndexingAndRun()</code>. You can't return the value from the runnable, but you can assign it in a method of an object outside the runnable.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#examples","title":"Examples","text":"<ul> <li>KernelF: ExprBaseInterpreter \u29c9</li> <li>Mbeddr: JavaInterpreterBase \u29c9</li> </ul>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/","title":"Platform Build Scripts","text":"<p>This page describes the  MPS Extensions \u29c9, and  IETS3 \u29c9 build scripts. They might look different in the future, but this guide should still be helpful. The build scripts from  mbeddr \u29c9 work similarly, but there's more than just one, so let's focus on the other two platforms.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/#mps-extensionsbuildgradle","title":"MPS-extensions/build.gradle","text":"<p>Let's ignore Modelix-related stuff. The script uses the mps-gradle-plugin \u29c9, which contains some valuable tasks for Gradle-based builds with MPS.</p> <p>Line 2: The build script block lists the used dependency repositories: the new itemis nexus server (https://artifacts.itemis.cloud) and the old one (projects.itemis.de \u29c9).</p> <p>Line 8 \u29c9: The dependency block contains the reference to the mps-gradle-plugin.</p> <p>Line 15: Use the plugin gradle-github-plugin \u29c9 for publishing artifacts to GitHub. It's important to import the classes from the mps-gradle-plugin: <code>import de.itemis.mps.gradle.*.</code></p> <p>Line 28: Use the Gradle Wrapper to specify the Gradle version that Gradle should download: it must be compatible with the used Java version (compatibility matrix \u29c9)</p> <p>Line 34 \u29c9: The variable ciBuild can affect the build, for example, by using a different version identifier for the artifacts.</p> <p>Line 47 \u29c9: Set the path to the Java installation.</p> <p>Line 71: A few different ways exist to specify properties for the build. This guide \u29c9 explains them.</p> <p>Line 77: This list contains the Nexus repositories that Gradle uses for fetching the dependencies. Line 138 \u29c9 contains the actual declaration.</p> <p>Line 83-109: The logic for deciding the version identifier. It uses hardcoded values, the branch name, ciBuild, and the class GitBasedVersioning to create a suitable identifier. A local build gets version 1.0-SNAPSHOT as described in the Maven guide. This StackOverflow question \u29c9 contains more information.</p> <p>Line 112-123: The plugins directory varies depending on the operating system (Plugins directory | MPS \u29c9).</p> <p>Line 125 \u29c9: The following variables contain the Nexus repositories the script uses to publish the artifacts.</p> <p>Line 130-136: A new configuration named mps is declared, used for declaring the dependency on MPS. The dependencies block declares the dependency. Gradle doesn't automatically resolve the dependency because a custom configuration is used. Line 150 \u29c9 and the following lines create the resolution task. <code>configurations.mps.resolve()</code> downloads the zip file, <code>zipTree</code> unzips it into the MPS home directory.</p> <p>Line 168-174 \u29c9: This dependency is needed to support the Junit Ant task. Line 183-199 \u29c9: Some system variables are set by prepending <code>-D</code> before the key-value pairs. These variables are declared in the build solution in the build script of the MPS project. Use this way to overwrite them on the command line.</p> <p>Line 204-219 \u29c9: The all script is a special MPS build script that calls all other build scripts. This task has the type BuildLanguages as described in the Gradle plugin documentation and executes the XML file created by the MPS build language. The following lines also declare tasks for building the languages and running the tests. They call the corresponding build scripts from the build module of this project (de.itemis.mps.extensions.build).</p> <p>Line 221 \u29c9: This task installs the nativelibs.loader plugin, which you can use for loading native code (e.g., C code) that is needed for a Java library(e.g., C debugger). A special plugin is needed because special methods for loading native code in Java exist. Don't use ordinary MPS solutions for this task because they can be reloaded in MPS, which isn't possible with native libraries. This plugin is implemented as an IntelliJ plugin and is unaffected by the MPS reloading mechanism.</p> <p>Line 250 \u29c9: This block declares the Junit Ant dependency.</p> <p>Line 260-270 \u29c9: These two tasks create zip files from the artifacts.</p> <p>Line 272 \u29c9: The clean task removes the generated MPS files, cleans the temporary folder, and removes the artifact folder's content.</p> <p>Line 279-317: This block uses the Maven publishing plugin to publish the generated artifacts to different repositories, such as Nexus and GitHub Maven repositories. When building the project with GitHub Actions \u29c9, the credentials are storable on the build server (e.g., TeamCity) or in the GitHub project.</p> <p>Line 319-339: This block defines one publication de.itemis.mps:extensions. It also publishes a Maven pom file \u29c9 that lists all the dependencies of this artifact (in this case: only MPS).</p> <p>Line 376 \u29c9: This block declares the publication for GitHub. Warning: It's impossible to publish an artifact with the same name on GitHub. It doesn't get overwritten.</p> <p>The rest of the build script uses modelix/mpsbuild, a replacement for the MPS build language. Visit Exploring modelix/mpsbuild - Specific Languages \u29c9 for initial information on this project.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/#iets3opensourcebuildgradle","title":"iets3.opensource/build.gradle","text":"<p>The build script looks like the script from  MPS Extensions \u29c9, so let's focus only on the differences.</p> <p>Line 68-112 \u29c9: The project has a dependency on mbeddr which you can override with a local dependency by setting the project variable forceLocalDependencies.</p> <p>Line 134-139: This block declares a few configurations. The dependencies of these configurations are resolved in different Gradle tasks, for example, in the task resolvePcollections on line 179 \u29c9.</p> <p>Line 259-264: Additional to exporting the languages and solutions, the project also creates a standalone IDE (RCP) \u29c9</p> <p>Line 332-406 \u29c9: This time, multiple publications exist. Not only the languages and tests are published but also some runtime Java libraries that KernelF needs (e.g. org.iets3.core.expr.datetime.runtime for the datetime language).</p> <p>Line 409-421 \u29c9: This task reads project libraries from projectlibraries.properties and generates libraries.xml in the .mps directory. During startup, MPS loads libraries. A library is, for example, mbeddr. The setup tasks use the task which you should execute when cloning the project.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/#mbeddr-build-scripts","title":"Mbeddr Build Scripts","text":"<p>The root directory contains the main build.gradle. A build subfolder exists. The most crucial build files are com.mbeddr/build.gradle, which build mbeddr, and com.mbeddr/platform/build.gradle \u29c9, which builds the  mbeddr platform \u29c9.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/platform_migration_guide/","title":"Platform Migration Guide","text":"<p>This guide walks you through migrating all MPS platforms starting from uploading the new JBR and ending at migrating  IETS3 \u29c9. MPS_VERSION stands for the MPS version such as 2022.3. Before starting the migration process, read Migration Guide | MPS Documentation \u29c9 first. Before starting a migration for a platform, make sure that all commits have landed on master by merging the maintenance branches into each other starting from the oldest version. The last maintenance branch should then be merged into master, so that master has all the changes and can be used as the base for the new branch (cascading merge, example \u29c9).</p>"},{"location":"platform_essentials/platform_migration_guide/#buildpublishjdk","title":"build.publish.jdk","text":"<p>This repository is responsible for publishing the JetBrains Runtime Environment \u29c9 to GitHub and the Nexus repository. It is needed by the download-jbr task of the mps-gradle-plugin \u29c9.</p> <ul> <li> Create a new branch mps/MPS_VERSION and update the file gradle.properties \u29c9. To find the new version, open MPS, go to About MPS, and read the Runtime version.  On a Mac, you can also open the file <code>jbr/Contents/Info.plist</code> in the MPS installation.</li> <li> Make sure that the published flavor still exists for the JBR version. You can find the newest JBR version for the corresponding IntelliJ platform here (example for JBR 17 \u29c9).</li> <li> Create a PR (example \u29c9) and merge it into master. If you update a maintenance MPS version, use the existing branch as the target branch.</li> <li> If the downloadJBR task from the mps-gradle-plugin \u29c9 doesn't work anymore, for example due to a change in the structure of the JBR or a different naming convention, create a PR for the v1.x \u29c9 branch in the plugin   (example PR \u29c9).</li> <li> If it doesn't exist: create a branch for the old master branch, named mps/MPS_VERSION.</li> <li> If everything worked, you should find the artifact on the Nexus server (example \u29c9).</li> </ul>"},{"location":"platform_essentials/platform_migration_guide/#buildpublishmps","title":"build.publish.mps","text":"<p>This repository is responsible for publishing MPS to GitHub and the Nexus repository. It is necessary to download MPS in the build script (example) which can then be set as the home directly for the Ant build script (example \u29c9).</p> <ul> <li> Create a new branch mps/MPS_VERSION and update ext.mpsMajor and ext.mpsBuild to MPS_VERSION in build.gradle \u29c9.</li> <li> Check that all the JARs that are published still exist and were not removed or renamed. Change the paths accordingly and update the README.</li> <li> Optional: Add this new information to the MPS Platform Docs in Reference-&gt;Included Libraries \u29c9.</li> <li> Create a PR (example) and merge it into master. If you update a maintenance MPS version, use the existing branch as the target branch (example \u29c9).</li> <li> If it doesn't exist: create a branch for the old master branch, named mps/MPS_VERSION.</li> <li> If everything worked, you should find the artifact on the Nexus server (example \u29c9).</li> </ul>"},{"location":"platform_essentials/platform_migration_guide/#mps-extensions","title":"MPS-Extensions","text":"<ul> <li> Check if there is already an existing branch mps/MPS_VERSION to start with.</li> <li> Update jbrVersion and ext.mpsMajor in build.gradle \u29c9</li> <li> Follow the migration guide for  IETS3 \u29c9 unless not applicable.</li> <li> Update the badge in README.md \u29c9 to show the newly supported MPS version.</li> <li> Update the current supported versions in the documentation.</li> <li> Check all sandboxes and actions in the project manually to ensure that no errors are thrown.</li> <li> Check that no (new) error messages appear in the log file \u29c9. If the error/warning is fixable has  to be decided on a case-by-case basis.</li> <li> Create a PR and merge it into master (example). If you update a maintenance MPS version, use the existing branch as the target branch (example \u29c9).</li> </ul>"},{"location":"platform_essentials/platform_migration_guide/#mbeddrcore","title":"mbeddr.core","text":"<ul> <li> Read the Mbeddr section \u29c9, especially how to run the migrations in all projects using BigProject.</li> <li> Follow the MPS-Extensions Guide unless not applicable.</li> <li> Follow the migration guide for  IETS3 \u29c9 unless not applicable.</li> <li> For the manual testing part, focus especially on the tools and actions.</li> <li> If it doesn't exist: create a branch for the old master branch, named maintenance/MPS_VERSION.</li> </ul>"},{"location":"platform_essentials/platform_migration_guide/#iets3opensource","title":"iets3.opensource","text":"<ul> <li> When possible, merge open pull requests first.</li> <li> Create a new branch: feature/MPS_VERSION (e.g., feature/mps20212)</li> <li> Update jbrVersion, major, minor, ext.mpsVersion, mbeddrVersion in build.gradle \u29c9.</li> <li> Regenerate the all scripts build file (build-allScripts.xml) with a single commit, and regenerate the build model.</li> <li> Remove references to languages that don\u2019t exist anymore, for example when a language was removed in a different platform.</li> <li> Execute migrations (Migrations \u2192 Run Migration Assistant).</li> <li> Update the README (currently supported version).</li> <li> Create a pull request (example) for master. If you update a maintenance MPS version, use the existing branch as the target branch (example \u29c9).</li> <li> Fix tests that don't work. Remove the commit with the migration if necessary and run the migration again after the fixes.</li> <li> If it doesn't exist: create a branch for the old master branch, named maintenance/MPS_VERSION.</li> <li> Update the base branch of the pull requests that were not merged yet to the old master branch.</li> </ul>"},{"location":"platform_essentials/platform_migration_guide/#getting-help","title":"Getting Help","text":"<p>This section gives some hints on how to find information and get help if you are getting stuck.</p> <p>Things to read about the new MPS version:</p> <ul> <li>What's New in MPS | MPS \u29c9</li> <li>Known issues | YouTrack (e.g., MPS 2023.2) \u29c9</li> </ul> <p>Things to read about the new IntelliJ platform version in case there is a change:</p> <ul> <li>Incompatible Changes | IntelliJ Platform SDK \u29c9</li> <li>Notable API changes | IntelliJ Platform SDK \u29c9</li> <li>Internal API Migration | IntelliJ Platform SDK \u29c9</li> </ul> <p>For getting other help, please ask @apann \u29c9 on Slack. He can send you to the right people if necessary.</p>"},{"location":"platform_essentials/platform_migration_guide/#things-to-test","title":"Things to Test","text":"<p>Despite having automatic tests, there are still a lot of topics that should be manually tested:</p> <ul> <li> Can I run tests?</li> <li> Can I run tests in the same process?</li> <li> Do I see any suspicious fatal error messages in the bottom right corner?</li> <li> Do actions with dynamic texts (e.g., Run -&gt; Run KernelF tests) still work?</li> <li> Do different graphical notations still work? (e.g., tables, vertical and horizontal lines)</li> <li> Do I see any changes in the editor of the collections test suite (many tests)?</li> <li> Does anything bad happen when I click Tools -&gt; Reload all classes?</li> <li> Does anything bad happen when I restart MPS?</li> </ul>"},{"location":"platform_essentials/platform_migration_guide/#additional-tips","title":"Additional Tips","text":"<ul> <li> To make sure that all resolve infos are up to date, execute File \u2192 Force Save All before pushing. <ul> <li>If you use the linters from mps-qa \u29c9: there is a linter to check the resolve infos</li> </ul> </li> <li> Run git clean -dfx if you run into any troubles and need to remove all files including the generated ones.</li> <li> When you update the dependencies in the build script and nothing happens, execute: <code>./gradlew setup --refresh-dependencies</code> or <code>gradle.bat setup --refresh-dependencies</code> on Windows.</li> <li> Do not disable languages/features because you can't fix the issue. Ask for help!</li> <li> The decision which MPS platforms are maintained are which are not is decided internally based on usage in projects. Please ask, if you have any questions.</li> </ul>"},{"location":"platform_essentials/testing/","title":"Testing","text":"<p>This page explains some MPS testing ideas according to general software testing concepts \u29c9. For a specific MPS testing introduction, visit Testing language | MPS documentation \u29c9.</p>"},{"location":"platform_essentials/testing/#testing-techniques","title":"Testing Techniques","text":"<p>The following techniques are considered typical black-box \u29c9 design techniques, which means you examine the functionality of an application without peering into its internal structures or workings.</p> <ul> <li>Equivalence partitioning: An equivalence class or equivalence partition is a set of test cases that tests the same thing or reveals the same bug. Often nearly unlimited combinations of input data exist. The idea is to reduce the necessary test cases  by dividing the input data into partitions of equivalent data from which you can derive test cases. Design test cases to cover each partition at least once. KernelF has support for equivalence partitions \u29c9 in test cases.<ul> <li>Example: a number with exactly six digits is allowed. Partitions: &gt;6 (invalid), &lt;= 5 (invalid), = 5 </li> </ul> </li> <li>Boundary-value analysis \u29c9: In this analysis, you test the boundary values of valid and invalid partitions. Values at the edge of partitions are more likely to be overlooked and force errors. This technique also detects off-by-one errors or boundary condition errors. The example for the previous technique also shows a case of boundary-value analysis.</li> <li>Decision tables are used to test different input combinations/conditions in a tabular form. KernelF supports them directly \u29c9.</li> </ul>"},{"location":"platform_essentials/testing/#what-is-a-bug-and-what-should-be-tested","title":"What Is a Bug and What Should Be Tested","text":"<p>A software bug is an error, flaw, or fault in computer software's design, development, or operation that causes it to produce an incorrect or unexpected result or to behave in unintended ways. software bug | Wikipedia \u29c9</p> <p>An approach to finding bugs is to check if one of the following five rules is true, which the book Ron Patton - Software Testing \u29c9 from 2006 first defined:</p> <ol> <li>The software doesn't do something that the product specification says it should do.</li> <li>The software does something that the product specification says it shouldn't do.</li> <li>The software does something that the product specification doesn't mention.</li> <li>The software doesn't do something the product specification doesn't mention but    should.</li> <li>The software is difficult to understand, hard to use, slow, or \u2013 in the software tester\u2019s    eyes \u2013 will be viewed by the end user as just plain not right.</li> </ol>"},{"location":"platform_essentials/testing/#automatic-testing","title":"Automatic testing","text":"<p>Have a look at the quick navigation table | MPS documentation \u29c9 first. In addition, test type system errors in node test cases with has error annotations.</p> <p>While the generator can be tested with generator tests, as explained in the documentation, they are often not fine-grained enough to test what you want to test. Moreover, exclude specific nodes or properties or show the result in a diff tool. An alternative approach is to invoke the generator yourself through com.mbeddr.mpsutil.generatorfacade.GeneratorFacade#runGenerator \u29c9 and compare the expected and actual output yourself with <code>com.mbeddr.mpsutil.compare.structure.AssertNodeEquals</code>.</p>"},{"location":"platform_essentials/testing/#manually-testing","title":"Manually Testing","text":"<ul> <li>Is there documentation for a new feature/change?</li> <li>Is the change mentioned in the changelog?</li> <li>Is the sandbox/tutorial updated to showcase the feature?</li> <li>Are there visual problems with editor-related languages, such as tables and diagrams?</li> <li>Is the reflective editor shown anywhere caused by an exception?</li> <li>Does the editor freeze?</li> <li>Do any actions throw exceptions?</li> <li>Are there any exceptions in the log file?</li> </ul>"},{"location":"platform_essentials/testing/#testing-approaches","title":"Testing Approaches","text":"<ul> <li>Functional review (black-box testing \u29c9): The tester doesn't look at the code but instead checks the functionality of an application and if it meets the specification.</li> <li>Code review (white-box testing \u29c9): A different developer (e.g., from the same team) checks the code for   logical errors, code standard violations, and other issues. If, for example, you use GitHub for hosting the project and reviews are required \u29c9 before you can merge a branch, a reviewer can comment on a PR, approve it or request changes.</li> </ul>"},{"location":"platform_essentials/testing/#continuous-testing","title":"Continuous Testing","text":"<p>MPS tests such as unit, nodes, and editor tests can be executed on the command line and as part of the CI pipeline. To execute tests with the mps-gradle-plugin, use the TestLanguages task (example). To run the model checker, use the Model Check \u29c9 task. It can be configured to make the build fail when there is a model check error and show the failures as normal JUnit test fails. The model checking can be combined with the linters from the mps-qa \u29c9 project to improve the code quality further.</p>"},{"location":"platform_essentials/testing/#usability-testing","title":"Usability Testing","text":"<p>Start by looking through the UI patterns list. To get started with testing with users, read Usability Testing 101 \u29c9.</p>"},{"location":"platform_essentials/testing/#expert-review","title":"Expert Review","text":"<p>An expert review is another general method of usability testing. Check Nielsen's usability heuristics \u29c9:</p> <ul> <li>Visibility of system status: The design should always keep users informed about what is happening through appropriate feedback within a reasonable amount of time.<ul> <li>Does the editor show feedback by showing model-checking messages, error cells, and other types of feedback?</li> <li>Are notifications \u29c9 from the IntelliJ platform (e.g., dialogs, banners) used sed to convey information? What about the message view?</li> </ul> </li> <li>Match between the system and the real world: The design should speak the users' language. Use words, phrases, and concepts familiar to the user rather than internal jargon. Follow real-world conventions, making information appear in a natural and logical order.<ul> <li>Are the terms and concepts from the target domain used? If they are unclear to the user, they should be declared in a glossary and referenced from other places, such as the documentation.</li> </ul> </li> <li>User control and freedom: Users often perform actions by mistake. They require a clearly labeled \"emergency exit\" that allows them to quit the undesired action without following a lengthy procedure.<ul> <li>While MPS supports undoing and redoing changes \u29c9 out of the box   and confirmation dialogs are used for asking for confirmation before taking action, the Google Material Design Guidelines describe another option. Acknowledge successful actions through a got it notification or revert the action through a custom action that is attached to a balloon \u29c9.</li> <li>Are mistakes by the user caught by the model checker and displayed in the editor? </li> </ul> </li> <li>Consistency and standards: Users should not have to wonder whether different words, situations, or actions mean the same thing. Follow platform and industry conventions.<ul> <li>Is the format of error messages consistent? (e.g., trailing dot at the end of a message)</li> <li>Are the colors, fonts, and spacings consistent?</li> <li>Does the hierarchy of headers make sense?</li> <li>Do labels always look the same way? (e.g., bold, not editable)</li> <li>Do keywords, comments, and editable fields always look the same way so that they are recognizable?</li> </ul> </li> <li>Error prevention: Good error messages are essential, but the best designs carefully prevent problems from occurring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action.<ul> <li>Are constraints \u29c9 used to restrict certain node relationships to avoid users making errors in the first place?</li> </ul> </li> <li>Recognition rather than recall: Minimize the user's memory load by making elements, actions, and options visible. The user should not have to remember information from one part of the interface to another. Information required to use the design (e.g., field labels or menu items) should be visible or easily retrievable when needed.<ul> <li>Does the user know where he can find specific actions? (inspector, context actions tool, context assistant \u29c9, right-click context menu, main menu)</li> </ul> </li> <li>Flexibility and efficiency of use: Shortcuts \u2014 hidden from novice users \u2014 may speed up the interaction for the expert user so that the design can cater to inexperienced and experienced users. Allow users to tailor frequent actions.<ul> <li>Do custom actions have default shortcuts assigned?</li> <li>Can the editor be navigated only by the keyboard?</li> <li>Can certain features be customized through preference components \u29c9 \u2026<ul> <li>at the project level?</li> <li>at the application level?</li> </ul> </li> </ul> </li> <li>Aesthetic and minimalist design: Interfaces should not contain irrelevant or rarely needed information. Every extra unit of information in an interface competes with the relevant information units and diminishes their relative visibility.<ul> <li>Are editor cells collapsed by default that clutter the editor?</li> <li>Are optional parts hidden in the editor? (e.g., by using optional cells \u29c9 from the grammar cells language)</li> <li>Is the grouping of content made recognizable without impacting the layout and design? (only spacing, borders, background color, and not everything together)</li> <li>Are colors, font weight, underlining text, and other forms of emphasizing content done in moderation?</li> </ul> </li> <li>Help users recognize, diagnose, and recover from errors: Express error messages in plain language (no error codes), precisely indicate the problem, and constructively suggest a solution.<ul> <li>Read Writing Short and Clear | IntelliJ Platform UI Guidelines and Punctuation \u29c9</li> <li>Use the model checker to show error messages in the editor.</li> <li>Use quick fixes or error intentions \u29c9 to provide solutions for the error.</li> </ul> </li> <li>Help and documentation: It\u2019s best if the system doesn\u2019t need additional explanation. However, it may be necessary to provide documentation to help users understand how to complete their tasks.<ul> <li>Do the users have help available? (e.g., Show Help for X in right-click context menu, external documentation, a tooltip that shows additional information or text in the inspector, or a dedicated documentation tool such as com.mbeddr.doc.aspect)</li> </ul> </li> </ul>"},{"location":"platform_essentials/testing/#performance-testing","title":"Performance testing","text":""},{"location":"platform_essentials/testing/#load-testing","title":"Load Testing","text":"<ul> <li>Do bigger models still generate fast enough? Are there any timeouts while generating?</li> <li>Do bigger root nodes still render fast enough in the editor?</li> <li>When you are using an importer to create nodes: is it fast enough for big input files? Where is the limit? Is a progress bar necessary?</li> <li>Does the application load fast enough on startup for many and big models/modules?</li> </ul>"},{"location":"platform_essentials/testing/#stress-testing","title":"Stress Testing","text":"<ul> <li>Does the application still work when there is no internet connection? </li> <li>What is the maximal size of a model that generates in a timely fashion? Is model pruning needed?</li> <li>What happens when you enter the power save mode? Do things like the automatic type system checks and background threads work again when you leave the mode?</li> </ul>"},{"location":"platform_essentials/testing/#soak-testing","title":"Soak Testing","text":"<ul> <li>Does the memory consumption rise after longer use? (memory indicator in the lower right corner) Could there be a memory leak?</li> <li>Are all models loaded into memory after some time? (memory indicator). Models are lazily loaded, which means that they are only loaded when they are needed. When all models are loaded, this indicates that the models are probably accessed by accident, for example, through a global find usage search.</li> <li>Do suspicious messages appear in the log file \u29c9, such as warnings about memory leaks or broken models?</li> <li>Is memory released after some time, or are not needed objects never garbage collected? Read about Java JVM options on this page if it doesn't happen.</li> </ul>"},{"location":"platform_essentials/testing/#spike-testing","title":"Spike Testing","text":"<ul> <li>Does the action <code>Reload all</code> cause issues such as memory leaks or freezes?</li> <li>Are there any issues when clicking the memory indicator to unload all models?</li> <li>Does the main project still perform well when you open other projects in the background?</li> </ul>"},{"location":"platform_essentials/testing/#configuration-testing","title":"Configuration Testing","text":"<ul> <li>Does the application work on all supported operating systems? (e.g., Windows, Linux, Mac + M1 chip)</li> <li>Does the application work with a non-bundled Java Runtime? (e.g., JDK 11 instead of JBR 11, which you might need for JCEF support)</li> <li>Can the application be started with insufficient initial memory specific in the custom VM options? (<code>Xms</code>)</li> <li>Does the editor still work when switching between different editor themes? (e.g., Light Theme, Darcula Theme, Mac Theme)</li> </ul>"},{"location":"platform_essentials/testing/#final-words","title":"Final Words","text":"<p>Given enough eyeballs, all bugs are shallow.</p> <p>Eric S. Raymond (Linus's law \u29c9)</p> <p>While it is possible to find many bugs with one or a handful of developers and users, it helps to have a large enough beta-tester and co-developer base to get bugs reported and fixed quickly. Sometimes it is good enough when somebody finds a workaround.</p> <p>Other times, like in the MPS platforms, people would never identify some bugs, were there few users and developers using them daily. There are always new unexplored use cases when a new project uses an MPS platform, and more edge cases are detected when more users test features. While this quote originally referred to open-source projects, this also applies to closed-source projects.</p>"},{"location":"platform_essentials/testing/#stack-exchange-software-quality-assurance-testing","title":"Stack Exchange: Software Quality Assurance &amp; Testing","text":"<p>These questions on the site Stack Exchange are relevant for MPS projects where dedicated testers, developers, or another team member does the testing.</p> Tests and testingBugsFor developersFor testers <ul> <li>What's the difference between a good test and a bad test? \u29c9</li> <li>Testing using real data from the customer \u29c9</li> <li>How do you know if you are writing high-quality tests? \u29c9</li> <li>What would be the strategy when too many bugs are found in the final round of testing? \u29c9</li> </ul> <ul> <li>What is your approach to low-priority bugs? \u29c9</li> <li>Best guidelines for bug reporting? \u29c9</li> <li>What is common practice for labels of the bug severity? \u29c9</li> <li>How to isolate a bug? \u29c9</li> <li>Who is ultimately responsible for issues that are found after the software is released? \u29c9</li> <li>How should a Software Tester deal with missed Defects/bugs in Production? \u29c9</li> <li>Should testers fix bugs? \u29c9</li> </ul> <ul> <li>Actual data for why developers shouldn't be the only ones testing their code? \u29c9</li> <li>What kind of testing should a developer do before passing a build to the QA team? \u29c9</li> <li>How can developers be assured that their software is fault free? \u29c9</li> <li>How to deal with flaky tests that have intermittent failures? \u29c9</li> <li>Is it normal to spend as much, if not more, time writing tests than actual code? \u29c9</li> <li>How do I review my own code? \u29c9 </li> </ul> <ul> <li>Why is a dedicated QA team member necessary? \u29c9</li> <li>Should a tester feel bad about finding too many defects/bugs in the product? \u29c9</li> <li>What should be reported when a bug only happens 50% of the time? \u29c9</li> <li>Should Testers first discuss a bug with the developers before writing a bug report? \u29c9</li> <li>Should QA report bugs on features before they are fully implemented? \u29c9</li> <li>How does a tester decide how much debugging/investigation to do before handing an issue over to development? \u29c9</li> <li>How can a Software Tester use an \"Out of the Box\" thinking approach to find more bugs? \u29c9</li> <li>Can knowing too much about the tested code be a disadvantage? \u29c9</li> <li>Should QA or tester mention the root cause for a bug? \u29c9</li> </ul>"},{"location":"platform_essentials/mpsutils/","title":"Mbeddr MPS Utilities","text":"<p>This documentation introduces the subproject com.mbeddr.mpsutil of  mbeddr \u29c9.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/#incremental-computation","title":"Incremental Computation","text":"<p>com.mbeddr.mpsutil.incrementalcomputation</p> <p>The language provides a single interface IncrementallyComputedValueHolder \u29c9, that you can implement to support values that are automatically recomputed when a dependent value changes. The methods are documented in the behavior aspect. If you want to derive a complete model from an existing model, you have to use shadow models \u29c9 from  MPS Extensions \u29c9.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/#interpreter","title":"Interpreter","text":"<p>com.mbeddr.mpsutil.interpreter</p> <p>The page Interpreter, Coverage, and Tracing describes the interpreter.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/#stubs","title":"Stubs","text":"<p>Stub models for the following Java libraries exist:</p> <ul> <li>Mockito \u29c9: a framework for unit tests</li> <li>Open CSV \u29c9: a CSV (comma-separated values) parser library</li> <li>Batik \u29c9: a toolkit for applications that want to use images in the Scalable Vector Graphics (SVG) format for various purposes, such as display, generation, or manipulation</li> <li>XML: The following jars are included:<ul> <li>XML Commons External Components XML APIs Extensions \u29c9</li> <li>XML Commons Resolver Component \u29c9</li> <li>Xerces2 J \u29c9</li> </ul> </li> </ul> <p>The included versions might be old.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/actions/","title":"Actions","text":"<p>This page describes additional actions that the  mbeddr platform \u29c9 provides. Not all of them are visible in menus and have shortcuts assigned.</p>"},{"location":"platform_essentials/mpsutils/actions/#build-assistant","title":"Build Assistant","text":"<p>com.mbeddr.mpsutil.buildassistant</p> <p>This language adds actions to make or rebuild models/modules or projects and includes their dependencies. They don't have shortcuts. You can only invoke them through the Find Actions menu.</p>"},{"location":"platform_essentials/mpsutils/actions/#generic-actions","title":"Generic Actions","text":"<p>com.mbeddr.mpsutil.genericactions</p> <p>As the name already implies, this language adds some new generic actions:</p> <ul> <li>Decrease MPS Editor Font Size: Decreases the font size in the editor settings and updates all editors (ctrl + -).</li> <li>Increase MPS Editor Font Size: Increases the font size in the editor settings and updates all editors (ctrl + +).</li> <li>Reset MPS Editor Font Size:: Reset the font size to the default size (ctrl + 0, 13 pixels)</li> <li>File Manager in Output Folder: A new action in the context menu of models that opens the path of the generated files.   This action won't work if the model does not create output files.</li> <li>File Manager in Module Folder: A new action in the context menu of modules that opens the module's path.</li> </ul>"},{"location":"platform_essentials/mpsutils/actions/#node-access","title":"Node Access","text":"<p>com.mbeddr.mpsutil.nodeaccess</p> <p>This language adds a new group of actions called Copy/Paste Special to the editor popup that opens when right-clicking in the editor:</p> <ul> <li>Copy Node as XML: Serializes the selected node to XML and copies it to the system clipboard.</li> <li>Paste XML Node: Deserializes a previously copied node and inserts it next to the selected node.</li> <li>Copy Node Info to Clipboard: Copies information (project, module, model, node, URL) about a node to the system   clipboard.</li> </ul>"},{"location":"platform_essentials/mpsutils/actions/#print","title":"Print","text":"<p>com.mbeddr.mpsutil.print.pluginSolution</p> <p>This language adds a new action to the general MPS File menu. Print the current editor with the action Print Editor. If the operating system permits it, you can use create a PDF from the editor with this action.</p>"},{"location":"platform_essentials/mpsutils/actions/#refactoring","title":"Refactoring","text":"<p>com.mbeddr.mpsutil.refactoring</p> <p>This language adds support for a projection mode switcher and refactoring actions.</p>"},{"location":"platform_essentials/mpsutils/actions/#projection-mode-switcher","title":"Projection Mode Switcher","text":"<p>The  mbeddr platform \u29c9 has a group Projection which is a top-level menu in MPS:</p> <p></p> <p>A projection mode switcher can be declared containing push hint options where you reference the hints from an existing ConceptEditor context hints container. Add the action in the Add to Menu/Button Group section.</p> <p>It adds a toggle to this menu/button group that toggles the referenced editor hint in the editors. When you only want to enable it for a specific concept, add a concept to only in editor with instance of.</p> <p></p>"},{"location":"platform_essentials/mpsutils/actions/#refactoring-action","title":"Refactoring Action","text":"<p>The concept RefactoringAction can create an action for a simple refactoring \u29c9. Specify the title of the action with caption and the keyboard shortcut in shortcut. Declare refactoring parameters in parameters. A few different choosers are available in the refactoring dialog for the value of the parameters:</p> <ul> <li>string: chooser for selecting a text</li> <li>+node*: chooser for selecting a node using a filter. The filter is a function with a list of nodes to refactor as a parameter and   should return a new filtered sequence of nodes.</li> <li>project tree node: chooser for selecting a node from the project tree</li> </ul>"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/","title":"Base Language Extensions","text":"<p>These languages extend Base Language to add further functionality. If a language is reimplemented in MPS, it will be deprecated in the platform and removed at a later time.</p>"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#bldoc","title":"BLDoc","text":"<p>com.mbeddr.mpsutil.bldoc</p> <p>This language can attach documentation via the intention <code>Attach Documentation</code> to any node. The rich text language provides the concept <code>Text</code> for writing the documentation. Two interfaces implement IWord \u29c9 so that you can reference any node in the com.mbeddr.doc language: @child \u29c9 and @root \u29c9 for referencing child nodes and named nodes, respectively.</p>"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#richstring","title":"Richstring","text":"<p>com.mbeddr.mpsutil.richstring</p> <p>This Base Language extension simplifies the usage of variables and Java String#format \u29c9 inside BaseLanguage Strings. Add the language com.mbeddr.mpsutil.richstring to your model.</p> <p>The following example shows referencing a simple variable, embedding an expression inside a string, and the equivalent of calling <code>String.format()</code>:</p> <p></p>"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#smodule","title":"SModule","text":"<p>com.mbeddr.mpsutil.smodule</p> <p>This language adds new operations to modules:</p> <ul> <li>Add dependencies adds dependencies to one or more models to the module.</li> <li>Add DevKits adds devkits to the modules.</li> <li>Add languages to the module adds used languages to the module.</li> <li>Add model adds a new model with the specified name to the module. Specify the repository as the second   parameter. If you press enter after the name, you can add devkits, references to models, and languages to the newly created   model. In the inspector, the storage type must be declared: per root or single file persistence.</li> <li>Add solution: adds a new solution to the module. The virtual package can be specified (subfolder).</li> </ul>"},{"location":"platform_essentials/mpsutils/common/","title":"Common","text":"<p>com.mbeddr.mpsutil.common</p> <p>The common class don't have any dependencies and deal with very generic functionality.</p>"},{"location":"platform_essentials/mpsutils/common/#graph","title":"Graph","text":"<p>The graph model contains classes for working with graphs and an implementation for the AVL tree data structure, a self-balancing binary search tree \u29c9. You can use the Graph class together with GraphUtil \u29c9, which provides the following methods:</p> <ul> <li>computeSCC(Graph): computes the strongly connected components of the given graph</li> <li>isConnected(Graph, T initial): determines whether the given directed graph corresponds to a connected graph</li> <li>computeSCCSingle(T sought, graph): returns the set of nodes in the strongly connected component \u29c9 that the node to find is in</li> <li>computeTopologicalSorting(Graph, boolean silent): returns the topological sorting \u29c9 of the nodes of the given graph.</li> </ul>"},{"location":"platform_essentials/mpsutils/common/#model","title":"Model","text":"<p>The class ConceptInstanceFinder \u29c9 contains a few methods for finding instances (= nodes) of a concept:</p> <ul> <li> <p>findAllVisibleInstances(context, conceptToFind): find instances of a concept in the used languages of the model. The context node's model is the starting point.</p> </li> <li> <p>findAllInstances(conceptToFind): searches for nodes of the given concept in all user models from the global scope (not including transient and temporary models)</p> </li> </ul>"},{"location":"platform_essentials/mpsutils/common/#util","title":"Util","text":"<p>The class ApplicationHelper contains a method for running a Runnable object inside a progress window that optionally can be canceled. The class ModelComparator can compare two models programmatically and report the mismatches between them. SNodeIdentityWrapper \u29c9 is used to preserve node identity across model boundaries and is helpful in generator scenarios where you copy nodes between the different phases.</p>"},{"location":"platform_essentials/mpsutils/common/#comparator","title":"Comparator","text":"<p>com.mbeddr.mpsutil.comparator</p> <p>You can compare two nodes programmatically with the class MPSNodeComparator \u29c9. Overloaded methods for ignoring properties, ignored references, and some more settings exist. The returned object of class MPSNodeComparison \u29c9 contains the list of differences and can also pre pretty printed by calling the method <code>getDescription()</code>.</p>"},{"location":"platform_essentials/mpsutils/deprecated/","title":"Deprecated languages and solutions","text":"<p>Some deprecated languages that were removed in the platform in MPS 2022.2 can be found in this PR \u29c9.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#code-completion-menu","title":"Code Completion Menu","text":"<p>com.mbeddr.mpsutil.ccmenu</p> <p>This language isn't used anymore and is disabled.</p> <p>This language added support for customizing the code completion menu with tabs and a special tab for creating reference targets. The contributions were made in a plugin solution by creating a CCMenuExtensions \u29c9 root node.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#http-support","title":"HTTP Support","text":"<p>com.mbeddr.mpsutil.httpsupport</p> <p>This was the old HTTP support plugin. Please use the language jetbrains.mps.ide.httpsupport instead.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#icon-char","title":"Icon Char","text":"<p>com.mbeddr.mpsutil.iconchar</p> <p>This language was used to programmatically create icons but is deprecated. Please use the official Icon description \u29c9 language instead.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#make","title":"Make","text":"<p>com.mbeddr.mpsutil.make</p> <p>This plugin contains old fixes for rebuilding models/modules and projects that are already included in MPS. The plugin will be removed soon.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#multilingual","title":"Multilingual","text":"<p>This language might be removed in the future.</p> <p>com.mbeddr.mpsutil.multilingual</p> <p>The idea behind this language was to store text translations in properties files and load the through the Java ResourceBundle \u29c9 class. The documentation for the language can be found here as a PDF and is located in the virtual package doc.com.mbeddr.mpsutil.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#var-scope","title":"Var Scope","text":"<p>com.mbeddr.mpsutil.varscope</p> <p>This language used to provide the interfaces <code>IScopeElement</code> and <code>IScopeProvider</code> to provide scopes for nodes but is now deprecated. Please use the official scopes \u29c9 instead.</p>"},{"location":"platform_essentials/mpsutils/generator/","title":"Generator","text":"<p>Some of the language described on this page make working with the generator easier or fix shortcomings of the generator. Generators and generator plans are not made to be extensible, so fixing issues is difficult. Sometimes other workarounds can be found and will me mentioned in this documentation if they are known.</p>"},{"location":"platform_essentials/mpsutils/generator/#generator-facade","title":"Generator Facade","text":"<p>com.mbeddr.mpsutil.generatorfacade</p> <p>This language contains a class GeneratorFacade \u29c9 that helps with running the generator. It includes a method <code>runGenerator</code> with different signatures that can run the generator with a specific generation plan for a defined model with a custom handler for generator messages and custom generation parameters such as save transient models (default: false) or generate in parallel (default: yes, four threads).</p>"},{"location":"platform_essentials/mpsutils/generator/#genutil","title":"GenUtil","text":"<p>com.mbeddr.mpsutil.genutil</p> <p>This language helps with managing user objects and creating temporary nodes for them:</p> <pre><code>createTempNode{hello -&gt; \"world\"};\n</code></pre> <p>This expression creates a new node and assigns Base Language expressions to keys of it. The keys are set internally with the setref statement, which takes a key, a context node (here: the newly created node), and a target expression, creating a new user object for this node. For typical values, setref and getref should be used to set and retrieve values from the user object. For int values, use setint and getint.</p>"},{"location":"platform_essentials/mpsutils/generator/#mapping-labels","title":"Mapping Labels","text":"<p>com.mbeddr.mpsutil.mappingLabels</p> <p>This language provides intentions for automatically creating mapping labels. One of the use cases is to migrate reference macros \u29c9 that use strings to identify target nodes to resolve the target by mapping labels instead.</p>"},{"location":"platform_essentials/mpsutils/generator/#postprocessgeneratedfiles","title":"postprocessGeneratedFiles","text":"<p>com.mbeddr.mpsutil.postprocessGeneratedFiles</p> <p>Add a new node generated files postprocessor facet to the plugin aspect of a language to declare a new facet executed after files are generated (textGen). It supports post-processor functions with a node parameter and a path parameter containing the path of the generated file. This method can be, for example, used to copy the generated files to a different folder:</p> <pre><code>generated files postprocessor facet testGen\n\n(node, path)-&gt;void {\n    Path target = Paths.get(\"/var/tmp/testGen\").resolve(path.getFileName());\n    message info \"Copying \" + path + \" to \" + target, &lt;no project&gt;, &lt;no throwable&gt;;\n    try {\n    Files.createDirectories(target.getParent());\n    Files.copy(path, target, StandardCopyOption.REPLACE_EXISTING);\n    } catch (IOException e) {\n    e.printStackTrace();\n    }\n}\n</code></pre> <p>For simple duplicating the TextGen outcome, There's also the built-in JetBrains annotation CopyOutcome \u29c9.</p>"},{"location":"platform_essentials/mpsutils/generator/#xmodel-actions","title":"XModel Actions","text":"<p>com.mbeddr.mpsutil.xmodel.actions</p> <p>This language adds actions for automatically deriving generation plans \u29c9. For a single or list of modules, there's the action <code>Generation Plan for Languages</code>, which can be found in the context menu that opens when you right-click the modules in the logical view. There's also an action Derive Generation Plan which derives a generation plan for a model that you must select in a dialog that opens when executing this action. You can find it in the same places as the text preview action (for example, in the context menu of models).</p>"},{"location":"platform_essentials/mpsutils/importer_and_exporter/","title":"Importer and exporter","text":"<p>This page describes language that you can use to import and export data from other languages or models. If you need a tighter integration into MPS with the original files existing, use custom persistence \u29c9. This approach is an advanced feature that is not used often.</p>"},{"location":"platform_essentials/mpsutils/importer_and_exporter/#ecore","title":"ECore","text":"<p>com.mbeddr.mpsutil.ecore</p> <p>This language contains an importer and exporter of the metamodel (ECore \u29c9) of the Eclipse Modelling Framework. The conversion is between an XML file and an MPS model. The importer can import Ecore and Ecore model files.</p> <p>Access the action by right-clicking a model and opening the Ecore Transformation tools group.</p>"},{"location":"platform_essentials/mpsutils/importer_and_exporter/#xml-import","title":"XML Import","text":"<p>com.mbeddr.mpsutil.xmlImport.plugin</p> <p>This plugin adds two actions for importing XML files into MPS:</p> <ul> <li>Paste as XML Content: This action is located in the editor context menu, parses XML code, and adds it to the next XML node or root node.</li> <li>Import XML File(s): This action parses on or multiple XML files and creates XML root nodes for them in the   selected model.</li> </ul>"},{"location":"platform_essentials/mpsutils/importer_and_exporter/#json","title":"JSON","text":"<p>com.mbeddr.mpsutil.json</p> <p>This language implements a simple JSON language you can use as a generator target. The JSON file \u29c9 root node supports an additional package name used as the folder inside the generation folder.</p> <p>An example of a file that you can generate:</p> <pre><code>{ \n  \"description\" : \"This is a JSON file\", \n  \"name\" : \"my JSON file\", \n  \"this is an object\" : { \n    \"And another object\" : { \n      \"With a description\" : \"object description\", \n      \"An array\" : [ \n        \"valu1\", \n        \"value2\" \n      ], \n      \"withANumber\" : 1.232E+231231, \n      \"empty array\" : [ ], \n      \"empty object\" : { }, \n      \"empty string\" : \"\" \n    } \n  } \n}\n</code></pre> <p>An importer also exists for the language. It can import all JSON files in a folder or just single files.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/","title":"Language extensions","text":"<p>This page lists some languages that extend existing MPS' languages. None of them are essential for working with MPS but can rather be convenient for special use cases.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#dataflow","title":"Dataflow","text":"<p>com.mbeddr.mpsutil.dataflow</p> <p>MPS-DF is a dataflow extension for MPS. MPS partly includes the code of this project. Please visit the following page for more information:</p> <p>An Extensible Framework for Variable-precision Dataflow Analyses in MPS | Tam\u00e1s Szab\u00f3 \u29c9</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#default-values-for-properties","title":"Default Values for Properties","text":"<p>com.mbeddr.mpsutil.propertydefault</p> <p>This language allows setting a default value for properties when you initialize them. The default value can be set by invoking the code completion on an existing property constraint inside the concept constraints of a concept and using one of the completion items with the \"default\" suffix:</p> <pre><code>concepts constraints TestPropertyDefault {\n...\n\nproperty {bool}\ndefault: true\n\nproperty {int}\ndefault: 42\n\nproperty {string}\ndefault: \"empty\"\n\n...\n}\n</code></pre>"},{"location":"platform_essentials/mpsutils/language_extensions/#extension-class","title":"Extension Class","text":"<p>com.mbeddr.mpsutil.extensionclass</p> <p>MPS already provides a language for defining extension methods \u29c9, for example, methods to be called on an object without being part of the Object's class. This language extends this mechanism to provide all static methods of a class as extension methods. You can invoke them on the type of the method's first parameter.</p> <p>Import the language and create a new ExtensionClass \u29c9 root node. Reference the Java class containing the static methods. Add method annotations to overwrite parameter names so that they're more elaborate than \"p0\" or \"p2\".</p> <p>As a starting point, create a dependency to the model com.mbeddr.mpsutil.extensionclass.annotation.apache.commons.lang3, which provides extension methods with valuable parameter names for Apache Commons StringUtils, ObjectUtils, and StringEscapeUtils.</p> <p></p>"},{"location":"platform_essentials/mpsutils/language_extensions/#language-plugin-extensions","title":"Language Plugin Extensions","text":"<p>com.mbeddr.mpsutil.lang.plugin.extensions</p> <p>This language contains extensions for jetbrains.mps.lang.plugin. It mainly adds support for adding actions not only at a specific position but also supports the anchors first, last, before, and after. Example: <code>add to NewProjectOrModuleGroup after position NewProject</code></p>"},{"location":"platform_essentials/mpsutils/language_extensions/#parameterized-menu","title":"Parameterized Menu","text":"<p>com.mbeddr.mpsutil.parameterizedMenu</p> <p>This language is an extension of the parameterized transformation language part. When used as a menu part of it, it allows iterating over the parameter object (parameterizable parameterized menu part) or creating a dynamic submenu based on the parameter object (parameterized submenu).</p> <p></p> <p>For completion styling and item priorities, use completion styling \u29c9 instead.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#resources","title":"Resources","text":"<p>com.mbeddr.mpsutil.resources</p> <p>This language extends jetbrains.mps.lang.resources by providing more customizations. CircleCustomizable adds support for drawing the circle with a different thickness. The class TextCustomizable \u29c9 supports specifying the font style (plain, bold, italic), font family, and offsets for the text.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#suppress-warning","title":"Suppress Warning","text":"<p>com.mbeddr.mpsutil.suppresswarning</p> <p>This language allows attaching an annotation to nodes to deactivate all or specific type system warnings by invoking the intention <code>Toggle Suppress Warnings</code>. You can suppress different kinds of warnings:</p> <ul> <li>all \u29c9: Suppress all warnings.</li> </ul> <p>In com.mbeddr.core.modules, two more data flow-related kinds exist:</p> <ul> <li>Liveness: Suppress dataflow liveness warnings.</li> <li>Dataflow: Suppress dataflow warnings.</li> </ul>"},{"location":"platform_essentials/mpsutils/language_extensions/#type-system-trace","title":"Type System Trace","text":"<p>com.mbeddr.mpsutil.typesystem.trace</p> <p>This language doesn't work anymore.</p> <p>This language modifies the different type system concepts, such as comparison rules or non-type system rules to collect information about the runtime execution time. To use it, place an instance of TraceTypesystem \u29c9 into a type-system aspect to include the generator of this language and set the enabled flag to true. The model contains a new action <code>Benchmark Typesystem</code> that opens the <code>Type System Performance Data</code> tool. It shows the collected information.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#xml-fix","title":"XML Fix","text":"<p>com.mbeddr.mpsutil.xml.fix</p> <p>This language contains fixes for the XML language. It escapes XMl values \u29c9 for XML 1.0/1.1.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#unique-names","title":"Unique Names","text":"<p>com.mbeddr.mpsutil.uniquenames</p> <p>MPS references all nodes by their id, not their name. Still, humans see only the name, which might be ambiguous. Activate the unique names hint in the MPS Preferences \u2192 Editor Hints. It shows as much of the full qualified name as required, rendering it unique.</p> <p>Example concept:</p> <p></p> <p>Example Base Language:</p> <p></p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/","title":"Plugin and RCP","text":"<p>The following languages create a bridge between MPS and the IntelliJ platform for cases where no language exist for using IntelliJ platform features or the MPS languages are missing features.</p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#actions-filter","title":"Actions Filter","text":"<p>com.mbeddr.mpsutil.actionsfilter</p> <p>MPS contains many actions that end users might not need, such as actions for language development and actions of the IDE platform. This language allows disabling actions inside an MPS plugin solution by defining an actions profile. Active by default can be set, including an activation condition to make this profile the active profile when opening the project or RCP. All actions are deactivated in a tree view and can be selected to disable them. To allow actions instead of filtering them use the intention <code>Use allow actions</code> in the actions profile declaration. Actions in the section <code>specify toolbar</code> appear in the main toolbar. This toolbar can be found at the top left of the window.</p> <p></p> <p>To use the language, you must install the language and the corresponding IntelliJ plugin. <code>./gradlew install</code> can install this plugin. Without the plugin, the language won't load at all.</p> <p>When making changes to the language, deactivate the plugin in the preferences so that the model is not read-only. Execute <code>./gradlew install</code> to install the plugin after changing and restart MPS to test it.</p> <p>The user can customize the predefined actions profiles in preferences \u2192 Appearance &amp; Behavior \u2192 Actions. New profiles can be created by clicking the + button and deleted by clicking the - button.</p> <p></p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#preference-form","title":"Preference Form","text":"<p>com.mbeddr.mpsutil.preferenceform</p> <p>This language allows adding new preference pages to Preferences\u2192Other Settings. The language uses the IntelliJ platform mechanism for adding preference pages (documentation \u29c9).</p> <p>Example:</p> <p></p> <p>It supports the following options:</p> <ul> <li>Scope: Save the preferences on the application or project level</li> <li>Help Topic: The help topic is an internal identifier that can link a page in the MPS documentation.   Example: <code>preferences.intentionPowerPack</code> links to https://www.jetbrains.com/mps/webhelp/?preferences.intentionPowerPack which redirects to https://www.jetbrains.com/help/mps/intentions-settings.html. The base URL in MPS is defined as the XML configuration of a few plugins. To get the other internal names, search for <code>getHelpTopic</code> in the MPS repository and the IntelliJ Community repository \u29c9.</li> </ul> <p>The preference form supports a few different input elements:</p> <ul> <li>password field</li> <li>checkbox</li> <li>dynamic combo box</li> <li>integer field</li> <li>predefined combo box</li> <li>text field</li> </ul> <p>The before write method is called when you press Apply or OK. This method should update all tools or classes that reference the values of the preference form. Access the input fields through the this variable. Example:</p> <pre><code>final HttpServerConfig config = new HttpServerConfig(((int) this.port), this.enabled); \nHttpServerConfig.setCurrentConfig(config); \nextensionPoint/HttpServerConfigChangeListener/.objects.forEach({~it =&gt; it.serverChanged(config); });\n</code></pre> <p>MPS calls the after read method after the state is loaded (e.g. when the preference form is opened).</p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#wizard-process","title":"Wizard (Process)","text":"<p>com.mbeddr.mpsutil.process</p> <p>This language allows creating wizards with multiple steps:</p> <p></p> <p>Create a new node of instance Process \u29c9. The wizard can have input parameters and produces one output. After defining the wizard, you can invoke it from an action. Example:</p> <pre><code>wizard&lt;theProcess&gt; wiz = createWizard&lt;theProcess&gt;(\"This is my testdata\");\nboolean b = wiz.show;\nSystem.out.println(\"show == \" + b);\nwiz.finish;\n</code></pre> <p>The show method shows the modal dialog and checks if it was closed with the exit code OK. The finish method executed the onFinish callback of every step. For more information, look at the example \u29c9.</p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#new-model-rcp","title":"New Model (RCP)","text":"<p>com.mbeddr.mpsutil.rcp</p> <p>This language allows creating a new action for creating models like the action New model \u29c9 of mbeddr. Create an instance of NewModelDialogConfig \u29c9. The following settings are supported:</p> <ul> <li>name: the name of the new action</li> <li>caption: the text that's shown for the action</li> <li>user can change persistence: a boolean flag that decides if the user can change the model's persistence type.</li> <li>default persistence: the kind of model persistence when creating the model</li> <li>optional devkits: automatically added devkits when creating the model</li> <li>show model properties: Open the model properties after creating the model</li> </ul>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#spreferences","title":"SPreferences","text":"<p>com.mbeddr.mpsutil.spreferences</p> <p>This extension allows the definition of preference pages by using MPS models. On the preference page, you get a regular MPS editor, as exemplified by the  mbeddr platform \u29c9 templates preference page:</p> <p></p> <p>Such pages are defined using an instance of PreferencePageDescription \u29c9 (check out the root \"Platform Templates\" as an example). This instance must reside in a plugin solution. The data, i.e., the respective MPS model, is stored as part of the respective project or in MPS globally (this is configurable). It is possible to access the model that contains the preferences via code:</p> <p></p>"},{"location":"platform_essentials/mpsutils/testing/","title":"Testing","text":"<p>The following languages contain small improvements to the existing testing infrastructure.</p>"},{"location":"platform_essentials/mpsutils/testing/#lantest","title":"Lantest","text":"<p>com.mbeddr.mpsutil.lantest</p> <p>This language was an attempt to automatically test languages, for example, check if the generation of files finished successfully or that you can instantiate existing models again via the editor (for example: discover bugs in constraints).</p> <p>This language isn't working anymore.</p>"},{"location":"platform_essentials/mpsutils/testing/#test-utils","title":"Test Utils","text":"<p>com.mbeddr.mpsutil.test.util</p> <p>Compare models inside a test case with the class ModelAsserter \u29c9. When the two models don't match, it shows the difference between them.</p>"},{"location":"platform_essentials/mpsutils/testing/#wait-for","title":"Wait For","text":"<p>com.mbeddr.mpsutil.blutil.test.waitfor</p> <p>For tests, this language contains an assert item wait for that waits for an expression to become true. If the condition evaluates to false, the check repeats every m millisecond until the timeout of n milliseconds is reached. You can set m and n in the inspector of the statement.</p> <p>A use case for this statement could be a multithreaded code, where you have to wait for the result of a different thread:</p> <pre><code>boolean enoughTimeHasElapsed; \nApplicationManager.getApplication().executeOnPooledThread({ =&gt; \n  try { \n    Thread.sleep(50); \n  } catch (InterruptedException e) { \n    e.printStackTrace(); \n  } \n  enoughTimeHasElapsed = true; \n}); \nwait for enoughTimeHasElapsed;\n</code></pre>"},{"location":"platform_essentials/mpsutils/tools/","title":"Tools","text":"<p>This page explains some custom tools \u29c9 of the  mbeddr platform \u29c9. Some of the tools are slightly experimental, so use them with care.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#context-actions","title":"Context Actions","text":"<p>com.mbeddr.mpsutil.contextactions</p> <p>This language adds a tool with context-specific editor actions that you can navigate with the mouse. For more information about the JetBrains implementation, visit the page Context actions tool | MPS \u29c9. Two different tools exist, named Context Actions and Context Actions 2 (mbeddr). The main difference between mbeddr and MPS context actions is that in mbeddr, it's possible to define actions in a plugin solution whereas with the MPS language you can only define actions in the editor aspect of a language. </p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#editing-guide","title":"Editing Guide","text":"<p>com.mbeddr.mpsutil.editingGuide</p> <p>This language can create interactive exercises for end users that you can automatically. An exercise contains several tasks and includes a reference to the following exercise. A single task has a name, a description, and a code block that should be shown in the exercise. The monitor function checks the completion status of the task. The variable <code>program</code> refers to the code section. The <code>editorContext</code> can be used, for example, to get the selected cell by calling <code>editorContext.getSelectedCell()</code>. You can return the following objects:</p> <ul> <li>MonitorResultDone: You completed the task successfully, and you see the explanation.</li> <li>MonitorResultError: You completed the task with an error.</li> <li>MonitorResultHint: You didn't complete the task successfully and see a hint.</li> </ul> <p></p> <p>You can start the task by clicking the play button next to the name of a task. The language creates a new temporary model, which contains the editable task.</p> <p></p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#favourites-plugin","title":"Favourites Plugin","text":"<p>com.mbeddr.mpsutil.favourites.plugin</p> <p>The favorites view uses the language com.mbeddr.mpsutil.projectview from MPS-extensions \u29c9.</p> <p></p> <p>There's an action <code>Add to Favourites</code> to add a node to this view. You can remove the node by executing the action <code>Remove from Favourites</code>. Internally, the plugin attaches the information using node annotations.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#generated-artifacts-review","title":"Generated Artifacts Review","text":"<p>com.mbeddr.mpsutil.genreview</p> <p>This language might not work correctly anymore.</p> <p>View artifacts that were generated by a generator with this tool. It has a special color mapping for Java files. The button <code>Highlight lines not linked</code> should highlight the lines which aren't related to any node. When you can trace multiple original nodes to a certain file and line, navigate these nodes with the previous and next buttons.</p> <p></p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#graphstream","title":"Graphstream","text":"<p>com.mbeddr.mpsutil.graphstream</p> <p>This language adds support for GraphStream \u29c9, a dynamic Java graph library. It can show a graph inside a Graphing tool. Look at the language com.mbeddr.mpsutil.graphstream.example to see how you can load a graph. A concept has to implement the interface GraphingElement \u29c9. When the currently selected node implements the interface, a new menu View Graph appears in the editor context menu.</p> <p>The tool supports a history, zooming, fitting the view, and rendering the graph as a GraphViz \u29c9 SVG.</p> <p></p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#jung-framework","title":"JUNG Framework","text":"<p>com.mbeddr.mpsutil.jung</p> <p>As an additional means of displaying relationships between nodes (next to PlantUML and the tree views), the JUNG \u29c9 framework was integrated for displaying graphs. As a language developer, you can implement an interface IJGraphProvider and implement a method that creates the graph:</p> <ul> <li>programmable with high-level API</li> <li>specify the initial layout</li> <li>configurable node size, color, line style, and color, fill color, shape, and label</li> <li>configurable edge width, style, color, and label</li> <li>configurable tooltip text for nodes and edges</li> <li>extensibility to plug in your layout engines (such as the one from yWorks)</li> </ul> <p>Once you have created a graph, your users have many options for viewing the graph in an MPS tool window:</p> <ul> <li>double-click selects node or edge in the editor</li> <li>zoom and pan</li> <li>tooltips</li> <li>selectable layouts</li> <li>selection and highlighting of outgoing and incoming nodes and edges</li> <li>filtering based on node and edge type</li> <li>filtering along a continuous axis (for example, time)</li> <li>incremental, node-based collapsing and expansion</li> </ul> <p></p> <p>The JUNG integration is available as part of mbeddr and the mbeddr.platform, so that you can use it for your languages. Check out the Chunk node for an example of how to use it.</p> <p>This old YouTube video \u29c9 showcases this language.</p> <p>To use it in your language, implement the IJGraphProvider \u29c9 interface. Return a JNGraph from the getGraph() method. Check out the existing implementations, particularly the DepGraphHelper (called from Chunk.getGraph()), to learn the details. In short, a graph is built in two steps: the first step adds the nodes and edges. The second step uses closures to style the graph.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#plantuml","title":"PlantUML","text":"<p>com.mbeddr.mpsutil.plantuml.node</p> <p>This language provides an integration of PlantUML with MPS. Watch this old video \u29c9 to get an overview.</p> <p>To use it in your languages, implement the IVisualizable \u29c9 interface in your language concept. Each concept can have several visualizations called categories. The <code>getCategories()</code> method returns the list (just strings). The <code>getVisualization()</code> method then returns the actual visualization. It gets the user-requested category as an argument and an empty VisGraph object. The <code>getVisualization()</code> method then fills the VisGraph with the actual visualization using the <code>add()</code> method to build a native, textual PlantUML visualization. Check out the existing interface implementations to learn the details; in particular, There's a helper method on VisGraph that creates a URL for users to click in the graph: <code>createUrl(node)</code>.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#tool-runner","title":"Tool Runner","text":"<p>com.mbeddr.mpsutil.toolrunner.plugin</p> <p>This solution provides an extension point ToolsSanityCheckerProvider that allows registering instances of ToolsAvailabilityChecker \u29c9. This interface checks the availability of external tools and their proper configuration. You can call it through <code>ToolsInstallationSanityChecker.check</code>. There's also a class called ToolRunnerBase \u29c9, a base class for running external tools. It supports running the tool with a progress indicator, a customizable timeout, and reading the (error) output.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#trace-explorer","title":"Trace Explorer","text":"<p>com.mbeddr.mpsutil.traceExplorer</p> <p>This language contributes a new tool Trace Explorer, that can show and navigate traces of a model.</p> <p>KernelF paper contains an example. The interpreter page \u29c9 explains the IETS3 tracing.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/ui/","title":"UI","text":"<p>This page contains the description of languages that add new cells to the editor. For more editor-related extensions, visit Editor Extensions | MPS Extensions \u29c9.</p>"},{"location":"platform_essentials/mpsutils/ui/#asynccell","title":"AsyncCell","text":"<p>The async cell allows displaying a text-based loading indicator as long as the return string is null.</p> <p>Create a new <code>$custom cell$</code> editor cell and return a new AsyncCellProvider:</p> <pre><code>return new AsyncCellProvider(node, { =&gt;\n    string value = calculateValue(); // calculate or query your value here\n    if (value.isEmpty) { return null; }\n    Style style = editorContext.?getContextCell().?getStyle();\n    return new AsyncCellValue(value, style);\n});\n</code></pre> <p></p>"},{"location":"platform_essentials/mpsutils/ui/#framecell","title":"FrameCell","text":"<p>com.mbeddr.mpsutil.framecell</p> <p>The frame \u29c9 cell is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes:</p> <ul> <li>frame-color: the color of the frame (default: black)</li> <li>frame-width: the thickness of the frame (default: 1 pixel)</li> <li>frame-padding: the space between the containing cell and the frame (default: 3 pixels)</li> </ul> <p>An example can be seen in the documentation language:</p> <p></p> <p>In most cases, you can use the language de.itemis.mps.editor.celllayout from  MPS Extensions to customize the border and margins around a cell.  The MPS Extensions documentation \u29c9 contains more information.</p>"},{"location":"platform_essentials/mpsutils/ui/#margin-cellreview","title":"Margin Cell/Review","text":"<p>com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review</p> <p>Margin cells are editor cells shown beyond the right editor margin, a bit like comments in Word. The ReviewNote cell implements exactly Word's comment facility as an example of the margin cell. Here is a screenshot:</p> <p></p> <p>Just include the respective language com.mbeddr.mpsutil.review  to use the review notes. Intentions are available to attach review notes to editor cells.</p> <p>Your cell must implement the IMarginCellContent interface to put your cells into the right margin. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. The actual margin cell must be on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation to achieve this. Hence, you can add margin comments to every model without the model's language being aware.</p>"},{"location":"platform_essentials/mpsutils/ui/#placeholder-text-list","title":"Placeholder Text List","text":"<p>com.mbeddr.mpsutil.placeholderTextList</p> <p>This language adds a new cell model \u29c9 that supports multiple aggregations with a custom placeholder text.</p> <p>Specify the placeholder in the inspector by creating a query function for the placeholder text.</p>"},{"location":"platform_essentials/mpsutils/ui/#diagrams","title":"Diagrams","text":""},{"location":"platform_essentials/mpsutils/ui/#concept-diagram","title":"Concept Diagram","text":"<p>com.mbeddr.mpsutil.conceptdiagram</p> <p></p> <p>Create a new root node of the type ConceptDiagram \u29c9. The editor should now contain an empty editor. You can drag nodes from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section.</p>"},{"location":"platform_essentials/mpsutils/ui/#dependencies-diagram","title":"Dependencies Diagram","text":"<p>com.mbeddr.mpsutil.dependenciesdiagram</p> <p>This language contains a concept DependenciesDiagram \u29c9</p> <p>Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules are automatically added. The line between the two boxes visualizes the dependencies, and its label has a name after the scope of the dependency (e.g., the label is uses if you have imported the language).</p> <p></p>"},{"location":"platform_essentials/mpsutils/ui/#date-picker","title":"Date Picker","text":"<p>com.mbeddr.mpsutil.datepicker</p> <p>A classic widget to select a date from a pop-up calendar.</p> <p></p> <p>There's a known issue \u29c9 on macOS. The date picker doesn't work when the theme is set to macOS light.</p> <p>This widget is only the control. The developer handles synchronizing the control with the source of the shown date. We provide hooks executed before showing the calendar to determine whether a date is valid and process a selected date.</p>"},{"location":"platform_essentials/mpsutils/ui/#editor-utils","title":"Editor Utils","text":"<p>com.mbeddr.mpsutil.editor.utils</p> <p>The class EditorRuntimeUtil \u29c9 contains a few helpful editor utility methods:</p> <ul> <li>getErrorText(EditorContext): returns the error text of the selected cell in the editor</li> <li>collectAllOpenEditors(Project): returns all opened MPS editors</li> <li>collectAllOpenEditorComponents(Project): returns all opened editor components</li> </ul>"},{"location":"platform_essentials/mpsutils/ui/#file-picker","title":"File Picker","text":"<p>com.mbeddr.mpsutil.filepicker</p> <p>This language contains text-based files and folder pickers. Enter paths directly in the editor. There's also an intention <code>Open File Chooser Dialog</code> that shows a file chooser dialog. The following file selectors are supported:</p> <ul> <li>file system dir picker \u29c9</li> <li>file system file picker \u29c9</li> <li>macro file picker \u29c9</li> <li>macro folder picker \u29c9</li> <li>solution relative dir picker \u29c9</li> <li>solution relative file picker \u29c9</li> </ul> <p>The macro pickers can contain path variables \u29c9.</p>"},{"location":"platform_essentials/mpsutils/ui/#hyperlink","title":"Hyperlink","text":"<p>com.mbeddr.mpsutil.hyperlink</p> <p>Use hyperlink cells for references in MPS. In contrast to normal reference cells, they automatically become blue and underlined if the mouse hovers over them (no Ctrl is necessary). The following style attributes are supported:</p> <ul> <li>hyperlink-reference: Create a link for a node reference.</li> <li>hyperlink-handler is a function that's called when you click a link. The util parameter object contains a method   openInBrowser for opening a URL with the default web browser.</li> <li>hyperlink-style: can be an URL or reference. The reference style forces the usage of the key ctrl to activate the hyperlink.</li> <li>hyperlink-node is the node that should be displayed after clicking the link</li> <li>hyperlink-focus sets the focus on the target node of the hyperlink after navigating to it.</li> <li>hyperlink-select selects the target node of the hyperlink after navigating to it.</li> </ul>"},{"location":"platform_essentials/mpsutils/ui/#jfreechart","title":"JFreeChart","text":"<p>com.mbeddr.mpsutil.jfreechart</p> <p>This module contains stubs for the JFreeChart \u29c9 library. View the charts in the Chart tool by calling the following code:</p> <pre><code>ChartManager.getInstance(editorContext).setChart(node.createChart())\n</code></pre> <p>createChart` returns an instance of JFreeChart \u29c9.</p> <p></p>"},{"location":"platform_essentials/mpsutils/ui/#target-chooser","title":"Target chooser","text":"<p>com.mbeddr.mpsutil.targetchooser</p> <p>The target chooser language provides a modal dialog for choosing nodes based on a predefined scope:</p> <p></p> <p>Example code:</p> <pre><code>TargetChooserOptions options = new TargetChooserOptions(); \nproject.getModelAccess().runReadAction({ =&gt; \n  options.setScope(new arraylist&lt;node&lt;&gt;&gt;{node/TargetChooser/, node/TargetChooserDialog/, node/DefaultModuleScope/}); \n}); \nTargetChooser chooser = new TargetChooser(ProjectHelper.toIdeaProject(project), options);\nTargetChooserDialog.chooseTarget(#project, options)\n</code></pre> <p>The options object has the following setters:</p> <ul> <li>setInitial sets the initially selected item. This object can be a node or a model.</li> <li>setSelectionValidator: A selection validator checks if the selected target is valid or shows an error message when it's invalid. By default, no validation occurs (the languages uses an empty validator).</li> <li>setSNodeFilter: This filter decides which nodes should be visible in the dialog (within the selected scope).   To show a node, you must return true for the root node but not all ancestors.</li> <li>setModuleScope: This scope defines the available modules that will be the sources for the nodes that will be displayed.</li> <li>addModuleFilter adds a boolean filter for the modules of the module scope.</li> <li>showModulesPool sets a flag that decides if the modules pool (last entry in logical view) should also be visible in the dialog.</li> <li>setModelFilter sets a filter only to keep the models of the specified scope where the filter returns true</li> <li>setScope sets the scope for the items that should be visible in the dialog. This object can be an instance of   TargetChooserScope \u29c9 or a sequence of nodes (+ ancestor filter). By default, the specified modules scope   with the specified model and node filers applied is used.</li> </ul>"},{"location":"platform_essentials/mpsutils/ui/#user-styles","title":"User Styles","text":"<p>com.mbeddr.mpsutil.userstyles</p> <p>This language provides a new annotation @userConfigurable that can be added to a style class in a style sheet (intention: Make User Configurable). After defining a name, the user can change the style in the preferences (Preferences\u2192Editor\u2192Color Scheme\u2192Code). The following style-class items are supported:</p> <ul> <li>Foreground: equivalent to text-foreground-color</li> <li>Background: equivalent to text-background-color</li> <li>Bold: equivalent to font-style: bold</li> <li>Italic: equivalent to font-style: italic</li> <li>Effects: Dotted lines, bold underscored, underscored, underwaved: equivalent to underlined</li> <li>Effects: strikeout: equivalent to strike-out</li> </ul> <p>Further useful links for developers:</p> <ul> <li>Export IntelliJ editor themes as plugin | JetBrains blog \u29c9</li> <li>UI Themes \u2014 Editor Schemes and Background Images | IntelliJ Platform Plugin SDK \u29c9</li> </ul>"},{"location":"reference/abbreviations/","title":"Abbreviations","text":"<p>AI: Artificial Intelligence</p> <p>API: Application Programming Interface</p> <p>AST: Abstract Syntax Tree</p> <p>ACK: Acknowledgment</p> <p>BaseLanguage: a projectional clone of Java 6 (with optional extensions for Java 7 and 8)</p> <p>CI: Continuous Integration</p> <p>CD: Continuous Delivery</p> <p>COW: Copy On Write</p> <p>CBMC: Bounded Model Checker for C and C++ programs</p> <p>DoD: Definition of Done</p> <p>DoR: Definition of Ready</p> <p>DOM: Document Object Model</p> <p>DSL: Domain-Specific Language</p> <p>EDT: Event Dispatch Thread</p> <p>EP: Extension Point</p> <p>ES: External System</p> <p>FBI: File-Based Index</p> <p>FO: Functional Owner</p> <p>FJ: ForkJoin</p> <p>GP: Generation Plan</p> <p>HTTP: Hypertext Transfer Protocol</p> <p>HTTPS: Hypertext Transfer Protocol Secure</p> <p>HW: Hardware</p> <p>IP: Internet Protocol</p> <p>IDE: Integrated Development Environment</p> <p>IETS3: Integrated Specification Environment for the Specification of Technical Software Systems</p> <p>IoT: Internet of Things</p> <p>JAR: Java Archive</p> <p>JBR: JetBrains Runtime</p> <p>JCEF: Java Chromium Embedded Framework</p> <p>JDK: Java Development Kit</p> <p>JPS: JetBrains Project System</p> <p>JSON: Javascript Object Notation</p> <p>JRE: Java Runtime Environment</p> <p>JVM: Java Virtual Machine</p> <p>LOP: Language-oriented Programming</p> <p>LSP: Language Server Protocol</p> <p>LVCS: Local History</p> <p>LaF: Look and Feel</p> <p>MBSE: Model-Based System Engineering</p> <p>M2M: Model to Model</p> <p>M2T: Model to Text</p> <p>MDD: Model-Driven Development</p> <p>MDSD: Model-Driven Software Development</p> <p>MPS: Meta Programming System</p> <p>MR: Merge Request</p> <p>NDA: Non-Disclosure Agreement</p> <p>NPE: NullPointerException</p> <p>OS: Open Source / Operating System</p> <p>PI: Product Increment</p> <p>PM: Product Manager</p> <p>PO: Product Owner</p> <p>PR: Pull Request or Public Relations</p> <p>PSI: Program Structure Interface</p> <p>RPC: Remote Procedure Call</p> <p>RCP: Rich Client Platform</p> <p>RC: Run Configuration</p> <p>REST: Representational State Transfer</p> <p>SM: Scrum Master</p> <p>SSH: Secure Shell</p> <p>SSL: Secure Socket Layer</p> <p>SSO: Single Sign-On</p> <p>SNode: Semantic Node</p> <p>SRepository: Semantic Repository</p> <p>SSH: Secure Shell</p> <p>SSR: Structural Search and Replace</p> <p>SW: Software</p> <p>TCP: Transmission Control Protocol</p> <p>TMC: Template Mapping Configuration</p> <p>UAST: Unified Abstract Syntax Tree</p> <p>UDP: User Datagram Protocol</p> <p>UI: User Interface</p> <p>UML: Unified Markup Language</p> <p>UUID: Universally Unique Identifier</p> <p>UX: User Experience</p> <p>VCS: Version Control System</p> <p>VFS: Virtual File System</p> <p>VF: Virtual File</p> <p>VI: Virtual Interface</p> <p>VM: Virtual Machine</p> <p>VU: virtual environment (virtuelles Umfeld)</p> <p>WIP: Work in progress</p>"},{"location":"reference/actions/","title":"Actions","text":"<p>This page lists which data keys are available when you declare actions \u29c9. MPSCommonDataKeys are always available, MPSEditorDataKeys \u29c9 is only available in node editors. MPSDataKeys \u29c9 are only available in certain places such as project panes.</p>","tags":["reference","intellij"]},{"location":"reference/actions/#commondatakeys","title":"CommonDataKeys","text":"<p>This class lists common data keys used as parameter for actions.</p> name description Available in MPS CARET Returns a caret instance (in host or injected editor, depending on context). EDITOR Returns the currently focused editor instance. EDITOR_EVEN_IF_INACTIVE Returns an editor even if the focus currently is in the find bar. EDITOR_VIRTUAL_SPACE Returns whether the current location relates to a virtual space in an editor. HOST_EDITOR Returns a reference to host an editor instance in case the EDITOR key refers to an injected editor. NAVIGATABLE Returns a <code>Navigatable</code> instance. NAVIGATABLE_ARRAY Returns several navigatables, e.g. PROJECT Returns a project if a project node is selected (in project view) PSI_ELEMENT Returns a <code>PsiElement</code> instance. PSI_FILE Returns the currently selected <code>PsiFile</code> instance. VIRTUAL_FILE Returns a <code>VirtualFile</code> instance. VIRTUAL_FILE_ARRAY Returns several <code>VirtualFile</code> instances","tags":["reference","intellij"]},{"location":"reference/actions/#platformdatakeys","title":"PlatformDataKeys","text":"<p>This class extends CommonDataKeys and adds new keys that deal with the IntelliJ platform itself.</p> name description Available in MPS ACTIONS_SORTER Deprecated. use ActionPromoter CONTENT_MANAGER Returns the managing class that's responsible for the current component's content CONTEXT_COMPONENT Returns the component that's currently in focus. CONTEXT_MENU_POINT Returns a point to guess where to show the context menu invoked by a key. COPY_PROVIDER Returns the copy provider responsible for copying data. CUT_PROVIDER Returns the cut provider responsible for cutting data. DELETE_ELEMENT_PROVIDER DOMINANT_HINT_AREA_RECTANGLE Returns the position and dimension of a hint. EXPORTER_TO_TEXT_FILE FILE_EDITOR Returns the file FILE_TEXT Returns the text of the currently selected file/file revision HELP_ID Returns help id. IS_MODAL_CONTEXT Returns Boolean. TRUE if action is executed in modal context and Boolean. FALSE if action is executed not in modal context. MODALITY_STATE See: Modality and invokeLater() - IntelliJ Platform Plugin SDK \u29c9 NONEMPTY_CONTENT_MANAGER Returns a non-empty managing class that's responsible for the current component's content PASTE_PROVIDER Returns the paste provider responsible for pasting data. PREDEFINED_TEXT Returns a predefined text value. PROJECT_CONTEXT Returns a project if a project node is selected (in the project view). PROJECT_FILE_DIRECTORY SEARCH_INPUT_TEXT SELECTED_ITEM Returns a single selected item. SELECTED_ITEMS Returns multiple selected items. SOURCE_NAVIGATION_LOCKED SPEED_SEARCH_COMPONENT Returns the speed search component STATUS_BAR Returns the status bar class TOOL_WINDOW Returns the current tool window TREE_EXPANDER UI_DISPOSABLE Returns the class responsible for disposing of a UI component","tags":["reference","intellij"]},{"location":"reference/annotations/","title":"Annotations","text":"<p>Java annotations are a form of metadata that can be attached at different places in the source code and are supported by Base Language as well.</p> <p>For an overview of Java built-in annotations, read this article \u29c9.</p> <p>The built-in annotations are:</p> <ul> <li>@Override \u29c9: indicates that a method is intended to override a method declared in a superclass.</li> <li>@SuppressWarnings \u29c9: tells the compiler to suppress specific warnings that it would otherwise generate.</li> <li>@Deprecated \u29c9: marks a program element (class, method, field, etc.) as no longer recommended for use, typically because it\u2019s dangerous or there is a better alternative.</li> <li>@SafeVarargs \u29c9: denotes that a method with a variable number of arguments (varargs) is safely handling the arguments to prevent potential heap pollution.</li> <li>@FunctionalInterface \u29c9: specifies that the annotated interface is intended to be a functional interface, which has exactly one abstract method.</li> <li>@Native \u29c9: Used to signal that a field is referencing a constant value from a native library, typically used in conjunction with the <code>native</code> keyword.</li> </ul> <p>A common annotation that is also often used is the @Serial \u29c9 annotation.</p> <p>The meta-annotations to describe annotations are:</p> <ul> <li>@Target \u29c9: specifies the kinds of program element to which an annotation type is applicable (such as a method, field, or class).</li> <li>@Retention \u29c9: indicates how long annotations with the annotated type are to be retained. It can specify retention at source level, class level, or runtime level.</li> <li>@Inherited \u29c9: marks an annotation to be inherited to subclasses of the annotated class (by default, annotations are not inherited to subclasses). </li> <li>@Documented \u29c9: signifies that whenever the specified annotation is used those elements should be documented using the Javadoc tool.</li> <li>@Repeatable \u29c9: allows an annotation to be applied more than once to the same declaration or type use.</li> </ul> <p>Some useful Intellij SDK annotations are:</p> <ul> <li>@State \u29c9: specify the storage location when persisting the state of components</li> <li>@RequiresBackgroundThread \u29c9 : Methods and constructors must be called from some thread that is not the EDT.</li> <li>@RequiresEdt \u29c9 : Methods and constructors must be called from the EDT only.</li> <li>@RequiresReadLock \u29c9 : Methods and constructors must be called only with read lock held.</li> <li>@RequiresReadLockAbsence \u29c9 : Methods and constructors must be called without read lock held.</li> <li>@RequiresWriteLock \u29c9 : Methods and constructor must be called only with write lock held.</li> </ul> <p>For an overview of JetBrains-specific annotations, read: JetBrains Annotations \u29c9:</p> <ul> <li>@Nullable and @NotNull: indicate a variable, parameter, or return value that can or cannot be null.</li> <li>@Nls: indicates that an annotated code element is a string that needs to be localized.</li> <li>@NonNls: indicates that an annotated code element is a string which is not visible to users, which doesn't require localization, and which doesn't contain strings requiring localization. When you annotate an element with @NonNls, localization tools will skip this element and strings inside it.</li> <li>@PropertyKey: indicates that a method parameter accepts arguments that must be valid property keys in a specific resource bundle. When a string literal that is not a property key in a bundle is passed as a parameter, IntelliJ IDEA highlights it as an error. The annotation is also used to provide completion in string literals passed as parameters.</li> <li>@TestOnly: indicates that a method or a constructor must be called from testing code only.</li> <li>@Contract: lets you specify a set of rules (a contract) that a method must follow. If the contract is violated, IntelliJ IDEA reports a problem.</li> <li>@Language: injects code written in another language in a Java String.</li> </ul> <p>More annotations can be found in the package org.jetbrains.annotations and org.intellij.lang.annotations \u29c9.</p>","tags":["reference","intellij"]},{"location":"reference/being_a_good_developer/","title":"Being a Good Developer","text":"<p>The following sections list some topics from popular GitHub repositories and StackOverflow that deal with being a good developer. The selection is tailored to MPS developers.</p>"},{"location":"reference/being_a_good_developer/#every-programmer-should-knowprofessional-programming","title":"Every Programmer Should Know/Professional Programming","text":"BasicsAdvanced <ul> <li>40 Key Computer Science Concepts Explained In Layman\u2019s Terms \u29c9</li> <li>Big-O Cheat Sheet \u29c9<ul> <li>average and worst-case time/space complexity of common data structures/algorithms</li> </ul> </li> <li>Learn regex the easy way + regex101 \u29c9 for testing regular expressions</li> <li>Command Line for Beginners \u29c9</li> <li>Learn how to use Git and GitHub \u29c9</li> </ul> <ul> <li>Programming Principles \u29c9</li> <li>hacker-laws \u29c9: Laws, Theories, Principles, and Patterns that developers will find useful.</li> <li>Lessons Learned in Software Development \u29c9</li> <li>Things I Learnt The Hard Way \u29c9</li> <li>50 ideas that changed my life \u29c9</li> <li>20 Things I\u2019ve Learned in My 20 Years as a Software Engineer \u29c9</li> </ul>"},{"location":"reference/being_a_good_developer/#falsehoods-programmers-believe-in","title":"Falsehoods Programmers Believe in","text":"<p>Falsehood is an idea you initially believed was true, but in reality, it is proven false.</p> <p>You might have to deal with one of the following topics when you develop a new feature or language:</p> <ul> <li>dates and time \u29c9 (applicable to date- and time-related languages)</li> <li>internationalization \u29c9 (applicable to languages that should support English and a second language)</li> <li>system of measurement \u29c9 (applicable to units-related languages)</li> <li>software engineering \u29c9 (versioning, paths, usernames, identifiers)</li> <li>uppercase and lowercase text \u29c9</li> <li>URLs \u29c9</li> </ul>"},{"location":"reference/being_a_good_developer/#questions","title":"Questions","text":""},{"location":"reference/being_a_good_developer/#self-improvement","title":"Self-Improvement","text":"GeneralCognitive topicsWorkflow <ul> <li>What is the single most effective thing you did to improve your programming skills? \u29c9</li> <li>How Can I Know Whether I Am a Good Programmer? \u29c9</li> <li>What are non-programming mistakes that a programmer should avoid? \u29c9</li> <li>How important is self-teaching in the programming field? \u29c9</li> <li>Which algorithms/data structures should I \"recognize\" and know by name? \u29c9</li> <li>When would someone be considered a bad programmer? \u29c9</li> </ul> <ul> <li>How do I improve my memory and recall? \u29c9</li> <li>How do you keep from running into the same problems over and over? \u29c9</li> <li>What is the most productive way to handle development-related failures? \u29c9</li> <li>Is there such a thing as Programmer's block? \u29c9</li> <li>Stuck due to \"knowing too much.\" \u29c9</li> </ul> <ul> <li>What is the most effective work rhythm for a programmer? \u29c9</li> <li>What are your initial three steps when you are first presented with a software problem? \u29c9</li> <li>Programmer / Developer Personal Organization \u29c9</li> <li>How can I improve my problem-solving ability? \u29c9</li> <li>How to write efficient code despite heavy deadlines \u29c9</li> <li>Writing robust code vs. overengineering \u29c9</li> </ul>"},{"location":"reference/being_a_good_developer/#interpersonal-skills","title":"Interpersonal Skills","text":"CommunicationCustomersCoworkersProgrammers <ul> <li>How should I explain technical things to non-technical people? \u29c9</li> <li>How do I become better on the phone? \u29c9</li> <li>Anxious during conference calls \u29c9</li> <li>When is it okay to ask \"stupid\" questions in the workplace? \u29c9</li> <li>Knowing when you should send a message instead of asking in person \u29c9</li> <li>How to make sure I understand a work assignment correctly? \u29c9</li> <li>How to respond when you are asked for an estimate? \u29c9</li> </ul> <ul> <li>How do I deal with a client who doesn't respect me? \u29c9</li> <li>How do I tell certain customers they're not my number one priority? \u29c9</li> </ul> <ul> <li>How can I avoid coming across as condescending when telling a coworker I can't work on an issue right now? \u29c9</li> <li>How can I tactfully suggest improvements to others' badly designed code during a review? \u29c9</li> <li>Dealing with a person who continuously needs help \u29c9</li> <li>What is the best way to tell colleagues that chat is not a channel for a direct response? \u29c9</li> <li>How to stop someone from helping you? \u29c9</li> </ul> <ul> <li>How to ask a programmer a question without getting \"Why\" as the answer \u29c9</li> <li>How to apologize when you have broken the nightly build \u29c9</li> <li>I'm a manager. How can I improve work relationships and communication with programmers? \u29c9</li> </ul>"},{"location":"reference/code_abbreviations/","title":"Code abbreviations","text":"<p>abbr: abbreviation</p> <p>abs: absolute</p> <p>acc: accumulator</p> <p>acd: abstract concept declaration</p> <p>act: actual/action/active</p> <p>ad: aspect descriptor</p> <p>addr: address</p> <p>agg: aggregation</p> <p>algo: algorithm</p> <p>alloc: allocation</p> <p>alt: alternative</p> <p>am: abstract module</p> <p>anc: ancestor</p> <p>anno: annotation</p> <p>app: application</p> <p>arch: architecture</p> <p>arg: argument</p> <p>arr: array</p> <p>art: artifact</p> <p>ass: assessment</p> <p>ast: abstract syntax tree</p> <p>async: asynchronous</p> <p>attr: attribute</p> <p>auth: authentication</p> <p>aux: auxiliary</p> <p>avg: average</p> <p>bais: byte array input stream</p> <p>baos: byte array output stream</p> <p>bb: byte buffer</p> <p>bc: build configuration</p> <p>bd: big decimal</p> <p>bg: background/button group</p> <p>bhvr: behavior</p> <p>bim: buffered image</p> <p>bis: buffered input stream</p> <p>bl: base language/baseline</p> <p>bos: byte array output stream</p> <p>bool: boolean</p> <p>bp: breakpoint/binary persistence</p> <p>bin: binary</p> <p>br: buffered reader/break</p> <p>bt: base type</p> <p>btn: button</p> <p>buf: buffer</p> <p>buff: buffer</p> <p>ca: concept argument/child adopter</p> <p>calc: calculator/calculation</p> <p>cat: category</p> <p>cb: callback</p> <p>cc: class concept</p> <p>cd: concept declaration</p> <p>ced: concept editor declaration</p> <p>cert: certificate</p> <p>cfg: configuration</p> <p>ch: character/channel</p> <p>char: character</p> <p>chk: check</p> <p>csum: checksum</p> <p>ci: config item</p> <p>circ: circle</p> <p>cl: classloader</p> <p>clm: classloader manager</p> <p>clr: clear</p> <p>cls: class</p> <p>cmd: command</p> <p>cme: cross-model environment</p> <p>cmp: compare/comparison</p> <p>com: commercial/common/communication</p> <p>comm: common</p> <p>cos: cosine</p> <p>cot: cotangent</p> <p>cn: context node</p> <p>cncpt: concept</p> <p>cnt: count/counter</p> <p>col: column</p> <p>coll: collection</p> <p>comp: component</p> <p>concat: concatenation</p> <p>conf: configuration</p> <p>config: configuration</p> <p>cond: condition</p> <p>conn: connection</p> <p>cons: constructor</p> <p>const: constant</p> <p>conv: conversation</p> <p>coord: coordinate</p> <p>cp: checkpoint (state)/copy/current process</p> <p>cpb: concept presentation builder</p> <p>cr: concept reference/registry</p> <p>cs: change set/collection sequence</p> <p>ct: classifier/current type</p> <p>ctrl: control</p> <p>ctx: context</p> <p>cpy: copy</p> <p>cur: current</p> <p>curr: current</p> <p>db: database</p> <p>dbg: debug</p> <p>dbgr: debugger</p> <p>dcl: declaration</p> <p>dec: decimal/decrease</p> <p>decl: declaration</p> <p>def: definition/default</p> <p>del: deletion</p> <p>dep: dependency</p> <p>desc: description</p> <p>descr: description</p> <p>dest: destination</p> <p>dev: developer/development/device</p> <p>df: decimal format</p> <p>di: debug info</p> <p>dir: direction/directory</p> <p>diff: difference</p> <p>dim: dimension</p> <p>dis: disable</p> <p>disp: display</p> <p>dir: directory</p> <p>div: division</p> <p>dk: delta key/devkit</p> <p>doc: document/documentation</p> <p>drv: driver</p> <p>dr: dynamic reference</p> <p>ds: data source</p> <p>dsm: default semantic model</p> <p>dst: destination</p> <p>dt: delta time</p> <p>dx: difference x</p> <p>dy: difference y</p> <p>dyn: dynamic</p> <p>ec: editor component</p> <p>ec: editor context</p> <p>ecf: editor cell factory</p> <p>ed: enumeration declaration/extension descriptor</p> <p>eg: engaged generator/example given</p> <p>el: element</p> <p>en: enable</p> <p>env: environment</p> <p>eof: end of file</p> <p>ep: else part/element provider/extension point</p> <p>eq: equal/equation</p> <p>err: error</p> <p>et: element type</p> <p>evt: event</p> <p>ex: exception/executor</p> <p>exe: executable/execution</p> <p>expr: expression</p> <p>ext: extension</p> <p>fac: factory</p> <p>fc: file chooser/first child</p> <p>fct: facet</p> <p>fd: file description</p> <p>fdc: file delta collector</p> <p>fig: figure</p> <p>fmt: format</p> <p>fn: function</p> <p>fp: file processor/function pointer</p> <p>fqn: full qualified name</p> <p>fr: file reader</p> <p>frac: fraction</p> <p>freq: frequence</p> <p>fs: file system</p> <p>fsm: file status manager</p> <p>ft: float type/file tracker</p> <p>fun: function</p> <p>fw: file writer</p> <p>fwiw: for whomever is wondering</p> <p>fyi: for your information</p> <p>gd: graphics device/generator descriptor</p> <p>ge: graphics environment/greater or equal</p> <p>gen: generation</p> <p>gm: generator module/generator mappings</p> <p>gms: generator module scanner/model generation status manager</p> <p>gp: generation plan/partitioner</p> <p>gr: generator</p> <p>gt: greater than</p> <p>gtf: generation target facet</p> <p>gvd: global variable declaration</p> <p>hdr: header</p> <p>hex: hexadecimal</p> <p>hm: hashmap</p> <p>hor: horizontal</p> <p>horz: horizontal</p> <p>href: hyper-reference</p> <p>hs: HashSet</p> <p>hsb: hue/saturation/brightness</p> <p>id: identification/identifier</p> <p>idx: index</p> <p>img: image</p> <p>imp: import</p> <p>impl: implementation</p> <p>inc: increase/inclusion</p> <p>info: information</p> <p>init: initialization</p> <p>ins: insertion</p> <p>inst: instance</p> <p>int: integer</p> <p>intf: interface</p> <p>intfc: interface concept</p> <p>ir: icon resource</p> <p>isr: input stream reader</p> <p>iter: iterator</p> <p>qec: query execution context</p> <p>jftr: just for the record</p> <p>jc: Java compiler</p> <p>js: JavaScript</p> <p>jmf: Java module facet</p> <p>km: keymap</p> <p>kv: key value</p> <p>kwd: keyword</p> <p>la: line annotation</p> <p>lang: language</p> <p>lat: latitude</p> <p>lca: lowest common ancestor</p> <p>lcv: lower-case value</p> <p>ld: link declaration/descriptor</p> <p>le: less or equal</p> <p>len: length</p> <p>lf: line feed</p> <p>lhs: left-hand side</p> <p>lib: library</p> <p>ll: linked list</p> <p>lm: labeled mappings</p> <p>lnk: link</p> <p>loc: location</p> <p>lon: longitude</p> <p>lr: language registry/runtime</p> <p>ls: list of strings</p> <p>ls: list sequence</p> <p>lt: left type</p> <p>lvd: local variable declaration</p> <p>lvl: level</p> <p>ma: model access</p> <p>mac: macOS</p> <p>mat: matrix</p> <p>mah: model access helper</p> <p>max: maximum</p> <p>mc: mapping configuration</p> <p>md: model</p> <p>mdm: model dependencies manager</p> <p>mdr: model dependency resolver</p> <p>mem: member/memory</p> <p>meta: metadata</p> <p>meth: method</p> <p>mf: manifest</p> <p>mf: model factory</p> <p>mg: models generator</p> <p>mgr: manager</p> <p>mgsm: module generation status manager</p> <p>mi: model imports/internal model</p> <p>mid: middle</p> <p>min: minimum</p> <p>mis: model input stream</p> <p>misc: miscellaneous</p> <p>ml: module loader/model</p> <p>mm: modules miner</p> <p>mn: model name</p> <p>mng: manager</p> <p>mo: module options</p> <p>mod: modulo</p> <p>mos: model output stream</p> <p>mp: model persistence</p> <p>mplr: multiplier</p> <p>mr: model/module reference/model root/model/module repository</p> <p>mrd: model root descriptor</p> <p>mrf: module repository facade</p> <p>msg: message</p> <p>mul: multiplication</p> <p>mut: mutable</p> <p>mv: module dependency versions</p> <p>nav: navigation</p> <p>nb: node builder</p> <p>nbn: node builder node</p> <p>nc: named concept</p> <p>ne: not equal/expression</p> <p>net: network</p> <p>nl: new line/number literal</p> <p>nm: nodes matcher</p> <p>np: null pointer/node pointer</p> <p>nr: number/node reference</p> <p>ns: name source/space</p> <p>nuli: number literal</p> <p>num: number (of)</p> <p>nut: node under test</p> <p>nwf: node weave support</p> <p>obj: object</p> <p>oct: octal</p> <p>ord: order</p> <p>ois: object input stream</p> <p>oos: object output stream</p> <p>op: operation/operator</p> <p>opt: option/optional</p> <p>org: organization</p> <p>orig: origin</p> <p>os: operation system</p> <p>otoh: on the other hand</p> <p>out: output</p> <p>pa: property attribute</p> <p>param: parameter</p> <p>pb: popup builder</p> <p>pd: parameter declaration/property descriptor</p> <p>perf: performance</p> <p>pf: persistence facade</p> <p>ph: phase</p> <p>pic: picture</p> <p>pkg: package</p> <p>pm: project manager</p> <p>pma: project model access</p> <p>pol: polygon</p> <p>pred: predication/predicate</p> <p>pos: position</p> <p>pwr: power</p> <p>pp: project pane</p> <p>pq: priority queue</p> <p>pref: preference</p> <p>priv: private</p> <p>prev: previous</p> <p>proc: process</p> <p>prod: production</p> <p>prof: profiler</p> <p>prog: program</p> <p>proj: project</p> <p>prop: property</p> <p>psc: package scope control</p> <p>pt: primitive type/pointer type/performance tracer</p> <p>ptg: parallel template generator</p> <p>ptr: pointer</p> <p>pub: public</p> <p>pw: print writer</p> <p>px: pixel/position x</p> <p>py: position y</p> <p>qry: query</p> <p>ra: read action</p> <p>rand: random</p> <p>rc: rule consequence</p> <p>rd: reference descriptor</p> <p>rec: rectangle/record</p> <p>ref: reference</p> <p>rel: relative</p> <p>repo: repository</p> <p>req: requirement</p> <p>res: result</p> <p>ret: return</p> <p>rgb: red/blue/green</p> <p>rhs: right-hand side</p> <p>rl: reference link</p> <p>rm: remove/root model</p> <p>rnd: random</p> <p>rng: range</p> <p>rect: rectangle</p> <p>recv: receive</p> <p>regex: regular expression</p> <p>rem: remote</p> <p>req: request</p> <p>res: response/result</p> <p>ret: return</p> <p>rev: revision</p> <p>rm: remove</p> <p>rt: right type/runtime/result type/result type</p> <p>rv: result value</p> <p>sa: style attribute</p> <p>sb: string builder/buffer</p> <p>sc: script</p> <p>sca: smart completion action</p> <p>scb: script builder</p> <p>scs: subconcepts</p> <p>sd: solution descriptor</p> <p>sdk: software development kit</p> <p>sdmd: semantic model model descriptor</p> <p>sec: section</p> <p>sel: selector/selection</p> <p>sem: semaphore</p> <p>sep: separator</p> <p>seq: sequence</p> <p>sess: session</p> <p>sfr: static field reference</p> <p>si: substitute info</p> <p>sin: sine</p> <p>sl: selection/statement list</p> <p>sln: solution</p> <p>sm: semantic model/state machine</p> <p>smc: static method call</p> <p>sn: semantic node</p> <p>snt: snode type</p> <p>sol: solver</p> <p>sp: settings provider</p> <p>spec: specification</p> <p>sqrt: square root</p> <p>sr: search results/source root</p> <p>src: source</p> <p>st: solver task/string tokenizer</p> <p>stat: statistic</p> <p>std: standard</p> <p>stmt: statement</p> <p>str: string</p> <p>sub: subtraction</p> <p>sum: addition</p> <p>sync: synchronization</p> <p>sw: string writer</p> <p>ta: text area</p> <p>tc: TeamCity/template context/template call</p> <p>td: table data/type definition/target declaration</p> <p>tee: template execution environment</p> <p>teei: template execution environment implementation</p> <p>temp: temporary</p> <p>tf: template fragment</p> <p>tg: template generator/thread group</p> <p>tgl: toggle</p> <p>tgs: text generation support</p> <p>tgt: target</p> <p>th: throwable</p> <p>ti: test item</p> <p>tm: table model</p> <p>tm: template module</p> <p>tmp: temporary/temperature</p> <p>tmr: timer</p> <p>tn: target node/tree node</p> <p>tpe: type</p> <p>tqc: template query context</p> <p>tr: table row/trigger</p> <p>trd: thread</p> <p>trf: transferable</p> <p>tsc: type size configuration</p> <p>tt: transition trace</p> <p>tv: text value</p> <p>tvr: type variable reference</p> <p>tx: transaction</p> <p>txt: text</p> <p>ud: used dependency</p> <p>ui: user interface</p> <p>ul: used language</p> <p>util: utilities</p> <p>usr: user</p> <p>uo: user object</p> <p>val: value</p> <p>var: variable</p> <p>vc: value container</p> <p>vd: variable declaration</p> <p>vep: visible element provider</p> <p>ver: version/vertical</p> <p>vert: vertical</p> <p>vf: virtual file</p> <p>vfs: virtual file system</p> <p>vp: view port/virtual package</p> <p>wa: write action</p> <p>win: window/Windows</p> <p>wiz: wizard</p> <p>wrk: worker</p> <p>wrt: with reference to</p> <p>ws: white space</p> <p>zf: zip file </p>"},{"location":"reference/core_languages/","title":"Core Languages","text":"<p>This table contains all languages shipped with MPS. Languages in gray color are test languages only used internally by MPS. Crossed-out languages are deprecated or unused.</p> jetbrains.mps.baselanguage classifiers \u29c9 javadoc \u29c9 closures \u29c9 unitTest \u29c9 logging \u29c9 collections \u29c9 collections.trove \u29c9 builders \u29c9 checkedDots \u29c9 overloadedOperators \u29c9 lightweightdsl \u29c9 regexp \u29c9 tuples \u29c9 varVariable extensionMethods \u29c9 doubleDispatch \u29c9 constructors \u29c9 blTypes \u29c9 baselanguageInternal jdk7 jdk8 jetbrains.mps.build \u29c9 mps \u29c9 mps.runner \u29c9 mps.testManifest mps.tests \u29c9 startup \u29c9 tips \u29c9 workflow jetbrains.mps.console \u29c9 base \u29c9 ideCommands \u29c9 internalCommands \u29c9 scripts \u29c9 jetbrains.mps.core properties xml \u29c9 xml.sax jetbrains.mps.debugger api.lang \u29c9 java.customViewers \u29c9 java.evaluation java.privateMembers jetbrains.mps.editor contextActionsTool.lang.menus \u29c9 jetbrains.mps.execution commands \u29c9 common  configurations \u29c9 settings \u29c9 util \u29c9 jetbrains.mps.ide httpsupport \u29c9 vcs.modelmetadata jetbrains.mps.lang access \u29c9 checkedName context \u29c9 context.defs aspect \u29c9 core \u29c9 descriptor \u29c9 extension \u29c9 actions \u29c9 behavior \u29c9 dataFlow \u29c9 dataFlow.analyzers \u29c9 editor \u29c9 findUsages \u29c9 intentions \u29c9 makeup \u29c9 messages migration \u29c9 migration.util modelapi \u29c9 pattern \u29c9 refactoring \u29c9 project quotation \u29c9 resources \u29c9 rulesAndMessages scopes \u29c9 script \u29c9 sharedConcepts \u29c9 slanguage \u29c9 smodel \u29c9 smodel.query \u29c9 smodelTests structure \u29c9 test \u29c9 test.generator text \u29c9 textGen \u29c9 traceable \u29c9 typesystem \u29c9 util.order jetbrains.mps.make facet \u29c9 reduced script \u29c9 jetbrains.mps.lang.plugin \u29c9 plugin \u29c9 standalone \u29c9 jetbrains.mps.lang.feedback \u29c9 messages \u29c9 problem \u29c9 problem.childAndProp \u29c9 problem.failingRule \u29c9 problem.scopes \u29c9 problem.structural \u29c9 skeleton \u29c9 jetbrains.mps.lang.editor diagram \u29c9 figures \u29c9 forms imageGen menu.extras \u29c9 table tooltips \u29c9 jetbrains.mps.lang.constraints \u29c9 msg.specification rules rules.kinds rules.skeleton jetbrains.mps.generator \u29c9 generationContext \u29c9 generationParameters plan \u29c9 misc jetbrains.mps.refactoring.participant \u29c9 jetbrains.mps.tool.gentest jetbrains.mps.vcs.mergehints \u29c9","tags":["reference","mps_language"]},{"location":"reference/exceptions/","title":"Exceptions","text":"<p>What does the dollar sign in error messages mean?</p> <p>The sign indicates an anonymous class (more information \u29c9).</p> <p>For a list of common Java exceptions, look at The Exception Hierarchy and Types of Exception in Java with Examples. This list \u29c9 includes documentation for all kinds of exceptions.</p> <p>Here is some more information for exceptions that often occur in MPS:</p> <ul> <li>java.util.ConcurrentModificationException \u29c9</li> <li>java.lang.NullPointerException \u29c9</li> </ul>","tags":["reference"]},{"location":"reference/exceptions/#mps","title":"MPS","text":"","tags":["reference"]},{"location":"reference/exceptions/#module-validation","title":"Module Validation","text":"<p>Module validation refers to checkers that implement the interface IChecker and show their result in the logical view. An example for such a checker is StructureChecker \u29c9. They are registered in the component plugin MPSProjectValidation \u29c9</p> <p>Can't find / couldn't load X (language, devkit\u2026) </p> <p>X couldn't be loaded. The plugin containing X was not installed / the dependency was not fetched and added as a library. Install the plugin/open the project containing the language/fetch the dependency.</p> <p>Could not find the generation plan associated with the devkit</p> <p>\"The generation plan couldn't be loaded. The plugin containing X was not installed / the dependency was not fetched and added as a library. Install the plugin/open the project containing the language/fetch the dependency.</p> <p>No generation plan in model X</p> <p>The referenced model for the generation plan in the properties doesn't contain a generation plan.</p> <p>Cycle in extended language hierarchy.</p> <p>The languages extend each other in a way that creates a cycle hierarchy, for example, two languages extend each other. Read the documentation section about dependencies. Use the dependency analyzer \u29c9 to understand the cycle better.</p> <p>Subconcepts for language x found, missing extends dependency.</p> <p>One or multiple concepts extend concepts from another language but don't have an extends dependency on the other language.  Add a extends dependency \u29c9 to the other language in the dependency section of the module properties.</p> <p>Superfluous extended module x, not referenced from the structure aspect.</p> <p>The dependency was accidentally added or is needed for a custom aspect and not the structure or editor aspect. Remove the dependency in the first case, and keep it for the second case.</p> <p>Missing runtime module x.</p> <p>A runtime solution \u29c9 couldn't be loaded. The plugin containing the solution was not installed / the dependency was not fetched and added as a library.                                                                                       </p> <p>Runtime module x is not a solution.</p> <p>The added runtime module is a language or other type of module. Add a module of type solution instead.</p> <p>Missing accessory model x.</p> <p>The accessory model couldn't be loaded. The plugin containing the model was not installed / the dependency was not fetched and added as a library.    | Install the plugin/open the project containing the language/fetch the dependency.</p> <p>Accessory model x is not visible in the module.</p> <p>All modules visible from given modules include modules from dependencies, transitive, respecting reexports, including initial modules.  Make sure to only refer to one of those modules.                            |</p> <p>Accessory model x uses language it's part of.</p> <p>Mark the model as 'do not generate' to avoid unnecessary bootstrap dependency. </p> <p>Accessory models are deemed design-time facility.</p> <p>The models are used to generate some code. This is not the best way to utilize accessory models. The models shall be marked as 'do not generate.'</p>","tags":["reference"]},{"location":"reference/exceptions/#type-of-exceptions","title":"Type of Exceptions","text":"name example description ModuleLoaderException \u29c9 none Deprecated exception that is not thrown anymore since 2017. ModelReadException \u29c9 *.mps file is corrupt It indicates failure to read the model. It is not specific to 'default' persistence. IllegalModelAccessException \u29c9 You access a model from a Java Swing button handler (e.g., you can read the model only inside read actions). It indicates forbidden operations over a SModel/SNode (official documentation \u29c9). AssertionError: Taking the target node of a dynamic referencewhose source node is not in a model \u29c9 a node is in a detached state The source of a dynamic reference doesn't belong to a model. Position n is not allowed for X The caret is the first position, but the first position was disabled in the style. The caret is in a position that is not allowed. ModuleClassLoaderIsDisposedException A module couldn't be disposed of, and is loaded again. The class loader of a module is disposed of. ClassLoader of module could not be found A module can't be loaded because the class loader can't be found.","tags":["reference"]},{"location":"reference/exceptions/#intellij-platform","title":"IntelliJ Platform","text":"name example description PluginException \u29c9 Usage of deprecated IntelliJ SDK methods Represents an internal error caused by a plugin. It may happen if the plugin's code fails with an exception or if the plugin violates some contract of IntelliJ Platform. AlreadyDisposedException \u29c9 An already disposed of object gets disposed again (e.g, a project) Exception from class SlowOperations \u29c9 MPS-34029 \u29c9 If you get an exception from this method, then you need to move the computation to the background while also trying to avoid blocking the UI thread. The argument for the @NotNull parameter must not be null method with @NotNull Annotation is called with null A null check failed (official documentation \u29c9). Action dispatch failed. The execution of an action \u29c9 failed. ExtensionInstantiationException \u29c9 This exception is thrown if some extension (service, extension point) fails to initialize.","tags":["reference"]},{"location":"reference/extension_points/","title":"Extension Points","text":"<p>For a list of IntelliJ extensions, look at Extension Point and Listener List | IntelliJ SDK \u29c9. The following table lists MPS extension points that use the IntelliJ mechanism.</p> Qualified name Interface Description com.intellij.mps.VisibleModuleMask VisibleModuleMask \u29c9 controls the visibility of MPS modules com.intellij.mps.modelRootFactory ModelRootFactory \u29c9 factory, which creates model roots jetbrains.mps.nodeStructureViewProvider NodeStructureViewProvider \u29c9 provider for the structure tool in the lower left corner com.intellij.mps.editorWarningsProvider EditorWarningsProvider \u29c9 provider for warnings that are shown above the editor (e.g., the node is in a read-only model) mps.CodeNavigationProvider CodeNavigationProvider \u29c9 opener for generated code files mps.ModelValidator ModelValidator \u29c9 validate a list of models com.intellij.mps.modelRootEntry ModelRootEntry \u29c9 UI entry in the module properties dialog corresponding to the specific model root com.intellij.mps.facetTabFactory FacetTabEP \u29c9 custom facets (e.g., ideaPlugin facet) com.intellij.mps.modelTemplateProvider ModelTemplateProvider \u29c9 create new models using a template com.intellij.mps.renameRefactoringContributor RenameRefactoringContributor \u29c9 contribution to the rename refactoring action jetbrains.mps.debugger.PositionProvider PositionProvider \u29c9 source position of current debugger line <p>The following sections are about MPS extension points \u29c9.</p>","tags":["reference"]},{"location":"reference/extension_points/#mps","title":"MPS","text":"Name Interface Description GeneratorCache \u29c9 GenerationCacheContainer \u29c9 cache container for the generator NodeRenamer \u29c9 lambda \u29c9 rename node action HttpRequestHandlerEP \u29c9 IHttpRequestHandlerFactory \u29c9 handle requests to the HTTP server MoveModelParticipantEP \u29c9 MoveModelRefactoringParticipant \u29c9 move model refactoring action MoveNodeParticipantEP \u29c9 MoveNodeRefactoringParticipant \u29c9 move node refactoring action PersistentRefactoringParticipantsEP \u29c9 Iterable \u29c9 refactoring action RenameNodeParticipantEP \u29c9 RenameNodeRefactoringParticipant \u29c9 rename node action MoveNodesActionEP \u29c9 MoveNodesAction \u29c9 move nodes action customContainers \u29c9 lambda \u29c9 custom collection container ActionIDs \u29c9 List \u29c9 action IDs for tests LanguageAspectsEP \u29c9 LanguageAspectDescriptor \u29c9 automatic gen. language descriptors","tags":["reference"]},{"location":"reference/extension_points/#mbeddr","title":"Mbeddr","text":"Name Interface Description CustomLayouts \u29c9 LayoutFactory \u29c9 custom layouts for the Java JUNG diagram language ToolsSanityCheckerProvider \u29c9 ToolsAvailabilityChecker \u29c9 check if external tools are available HttpRequestHandlers \u29c9 IRequestHandler \u29c9 handle requests to the HTTP server ServletProvider \u29c9 IServletProvider \u29c9 the provider of the servlet CCMenuExtensionsDescriptors \u29c9 ICCMenuExtensionsDescriptor \u29c9 code completion menu extension customValueRenderer \u29c9 CustomValueRenderer \u29c9 renderer for custom values in the trace explorer MULTILINGUAL_PROVIDERS \u29c9 ILanguageProvider \u29c9 language provider for multilingual InterpreterExtensionPoint \u29c9 IInterpreter \u29c9 custom interpreter implementation HttpServerConfigChangeListener \u29c9 IHttpServerConfigChangeListener \u29c9 listener for config changes of the HTTP server TargetModifiers \u29c9 ITargetCreationActionModifier \u29c9 modify the target creation in the code completion menu TargetSetupExtensions \u29c9 ITargetSetupExtension \u29c9 modify the target setup in the code completion menu wizardExtensions \u29c9 ExtensionProvider \u29c9 add a step to a wizard RichstringEvaluator \u29c9 IRichstringEvaluator \u29c9 evaluate a richstring","tags":["reference"]},{"location":"reference/extension_points/#mps-extensions","title":"MPS-Extensions","text":"Name Interface Description IdentityCalculators \u29c9 IdentityCalculator \u29c9 identity calculators for the model merger GlobalDiagramMouseListener \u29c9 MouseListener \u29c9 mouse listeners for diagrams diagramPaletteEntryProvider \u29c9 IPaletteEntryExtensionProvider \u29c9 entry provider for diagrams diagramConnectionTypesProvider \u29c9 IConnectionTypesExtensionProvider \u29c9 connection types provider for diagrams DragSelectionHandlerEP \u29c9 IDragSelectionHandler \u29c9 drag selection handler ModelMergeExt \u29c9 MergePolicySpec \u29c9 merge policy specifications for model merger","tags":["reference"]},{"location":"reference/extension_points/#iets3","title":"IETS3","text":"Name Interface Description recordIsComparable \u29c9 RecordIsComparable \u29c9 custom comparator for records solverfactories \u29c9 SolverTaskFactory \u29c9 factory for creating solver tasks primitiveTypeMapper \u29c9 PrimitiveTypeMapper \u29c9 basic methods of primitive KernelF types constraintViolationHandler \u29c9 ConstraintViolationHandler \u29c9 handler for KernelF constraint violations mutatorContributions \u29c9 MutatorFactory \u29c9 factory for creating mutators runtimeResolverConfig \u29c9 RuntimeResolverConfig \u29c9 configuration for runtime resolver (e.g, functions resolving) nameCompletionProvider \u29c9 NameCompletionProvider \u29c9 name completion provider for nodes of type <code>INamedConcept</code> + a prefix identifierConfigurator \u29c9 IdentifierConfigurator \u29c9 configuration for identifiers (allow umlauts/paragraphs) nixHandler \u29c9 NixHandler \u29c9 handler for empty ('nothing') values mandatoryAttributesProviderEP \u29c9 IMandatoryAttributesProvider \u29c9 provider for mandatory attributes","tags":["reference"]},{"location":"reference/gitignore/","title":"Gitignore File","text":"<p>More than one correct .gitignore file exists for MPS. It's recommended to ignore generated files, but there can also be cases where you can't execute your generated files, so you have to add them to version control and check the difference manually.</p>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#generated-files-mps","title":"Generated Files (MPS)","text":"<ul> <li>source_gen: the generated Java files</li> <li>source_gen.caches:<ul> <li>dependencies: cache files that list dependencies between used classes and interfaces</li> <li>generated: a list of generated files</li> </ul> </li> <li>classes_gen: the generated Java class files</li> <li>test_gen: the generated JUnit Java test files</li> <li>doc_gen: generated files of the mbeddr documentation language (optional)</li> <li>result_gen: </li> <li>*.iws: old MPS project setting files</li> <li>.mps/shelf: local user commits</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#testing","title":"Testing","text":"<ul> <li>JUnit \u29c9<ul> <li>junitvmwatcher*.properties</li> <li>build.properties</li> <li>TEST*.xml: test results</li> <li>junit*.properties</li> </ul> </li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#mps-gradle-plugin","title":"MPS-Gradle-Plugin","text":"<ul> <li>build/mps: the downloaded MPS version</li> <li>artifacts: the downloaded dependencies</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#temporary-filesfolders","title":"Temporary Files/Folders","text":"<ul> <li>tmp: temporary files by the Java compiler</li> <li>build/generated</li> <li>.mps-caches</li> <li>/system/: the system directory \u29c9</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#build-tools","title":"Build Tools","text":"<ul> <li>Gradle<ul> <li>.gradle: Project-specific cache directory \u29c9 generated by Gradle</li> <li>.gradletasknamecache</li> <li>**/build/repo/</li> <li>**/build/distributions</li> <li>**/build/classes</li> <li>Gradle.gitignore \u29c9</li> </ul> </li> <li>Maven<ul> <li>Maven.gitignore \u29c9 </li> </ul> </li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#intellij-files","title":"IntelliJ Files","text":"<ul> <li>.idea: the folder of an IntelliJ project \u29c9 </li> <li>workspace.xml: a file that saves project-specific settings \u29c9</li> <li>JetBrains.gitignore \u29c9</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#intellij-plugins","title":"IntelliJ Plugins","text":"<ul> <li>Markdown Navigator plugin \u29c9 (optional)<ul> <li>.idea/**/markdown-navigator.xml</li> <li>.idea/**/markdown-navigator-enh.xml</li> <li>.idea/**/markdown-navigator/</li> </ul> </li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#macos","title":"MacOS","text":"<ul> <li>.DS_Store: short for Desktop Service Store; it stores custom attributes of its containing folder, such as folder view options, icon positions, and other visual information (reference \u29c9).</li> <li>macOS.gitignore \u29c9 (optional)</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/icons/","title":"Icons","text":"","tags":["reference","ui"]},{"location":"reference/icons/#actions","title":"Actions","text":"<p>These icons are used in MPS in various places. You can use the icons in the documentation by inserting the corresponding code in a markdown file. They are shipped with MPS and can be found here \u29c9 in the MPS sources. If you need an Icon instance, for example, for a Swing component, retrieve it through MPSIcons \u29c9.</p> Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-actions-addToVcs:</code> <code>:mps-actions-groupByCategory:</code> <code>:mps-actions-groupByModel:</code> <code>:mps-actions-groupByModule:</code> <code>:mps-actions-groupByRoot:</code> <code>:mps-actions-groupSearched:</code> <code>:mps-actions-importModulesFromFolder:</code> <code>:mps-actions-migrationBulb:</code> <code>:mps-actions-searchedNodes:</code> <code>:mps-actions-showCellInExplorer:</code> <code>:mps-actions-showOnlyStrongSubtypes:</code>","tags":["reference","ui"]},{"location":"reference/icons/#ant","title":"Ant","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-ant-build:</code>","tags":["reference","ui"]},{"location":"reference/icons/#cell-explorer","title":"Cell Explorer","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-cellExplorer-cellActionKey:</code> <code>:mps-cellExplorer-cellComponent:</code> <code>:mps-cellExplorer-cellConst:</code> <code>:mps-cellExplorer-cellDefault:</code> <code>:mps-cellExplorer-cellError:</code> <code>:mps-cellExplorer-cellExplorer:</code> <code>:mps-cellExplorer-cellKeyMap:</code> <code>:mps-cellExplorer-cellProperty:</code> <code>:mps-cellExplorer-cells:</code>","tags":["reference","ui"]},{"location":"reference/icons/#ant_1","title":"Ant","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-debugger-addBreakpoint:</code> <code>:mps-debugger-deleteBreakpoint:</code> <code>:mps-debugger-goToSource:</code>","tags":["reference","ui"]},{"location":"reference/icons/#general","title":"General","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-general-dependencies:</code> <code>:mps-general-generatorsPriorities:</code> <code>:mps-general-java:</code> <code>:mps-general-modelChecker:</code> <code>:mps-general-runtime:</code> <code>:mps-general-usedLanguages:</code>","tags":["reference","ui"]},{"location":"reference/icons/#generator","title":"Generator","text":"Code Icon <code>:mps-generator-copy-operation:</code> <code>:mps-generator-input:</code> <code>:mps-generator-macro:</code> <code>:mps-generator-mapping-script:</code> <code>:mps-generator-output:</code> <code>:mps-generator-rule:</code> <code>:mps-generator-rule-consequence:</code> <code>:mps-generator-switch:</code> <code>:mps-generator-template:</code>","tags":["reference","ui"]},{"location":"reference/icons/#idea-integration","title":"Idea Integration","text":"Code Icon <code>:mps-ideaIntegration-connected:</code> <code>:mps-ideaIntegration-connected_with_errors:</code> <code>:mps-ideaIntegration-disconnected:</code> <code>:mps-ideaIntegration-trying:</code>","tags":["reference","ui"]},{"location":"reference/icons/#nodesmodels","title":"Nodes/Models","text":"","tags":["reference","ui"]},{"location":"reference/icons/#models","title":"Models","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-nodes-models-accessoryModel:</code> <code>:mps-nodes-models-aspect:</code> <code>:mps-nodes-models-templatesModel:</code> <code>:mps-nodes-models-tests:</code>","tags":["reference","ui"]},{"location":"reference/icons/#nodes","title":"Nodes","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-nodes-action:</code> <code>:mps-nodes-behavior:</code> <code>:mps-nodes-constraint:</code> <code>:mps-nodes-dataFlow:</code> <code>:mps-nodes-default:</code> <code>:mps-nodes-devkit:</code> <code>:mps-nodes-editor:</code> <code>:mps-nodes-generator:</code> <code>:mps-nodes-language:</code> <code>:mps-nodes-mappingConf:</code> <code>:mps-nodes-model:</code> <code>:mps-nodes-node:</code> <code>:mps-nodes-projectModels:</code> <code>:mps-nodes-reduction:</code> <code>:mps-nodes-refactoring:</code> <code>:mps-nodes-rootNode:</code> <code>:mps-nodes-rule:</code> <code>:mps-nodes-solution:</code> <code>:mps-nodes-structure:</code> <code>:mps-nodes-textGen:</code> <code>:mps-nodes-transient:</code> <code>:mps-nodes-transientDisable:</code> <code>:mps-nodes-action:</code> <code>:mps-nodes-action:</code> <code>:mps-nodes-action:</code>","tags":["reference","ui"]},{"location":"reference/icons/#project-pane","title":"Project Pane","text":"Code Icon Icon_2x <code>:mps-projectPane-logicalView:</code>","tags":["reference","ui"]},{"location":"reference/icons/#public","title":"Public","text":"Code Icon Icon_2x <code>:mps-public-about:</code> <code>:mps-public-error:</code> <code>:mps-public-mps:</code> MPS2 <code>:mps-public-mps_16:</code> <code>:mps-public-MPS_welcomeScreen:</code> <code>:mps-public-splash:</code>","tags":["reference","ui"]},{"location":"reference/icons/#tool-windows","title":"Tool Windows","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-toolWindows-cellExplorer:</code> <code>:mps-toolWindows-default:</code> <code>:mps-toolWindows-modelChecker:</code> <code>:mps-toolWindows-OpenTerminal_13x13:</code> <code>:mps-toolWindows-typeTraceView:</code>","tags":["reference","ui"]},{"location":"reference/included_libraries/","title":"Included Java Libraries","text":"<p>The following list contains the Java libraries in the lib folder installed in MPS 2021.1 and later by default. Jars removed in later MPS versions are not mentioned because it is too hard to determine if they were merged into one of the 3<sup>rd</sup>-party JARs.</p>"},{"location":"reference/included_libraries/#mps","title":"MPS","text":"<ul> <li>bootstrap.jar - the bootstrap classes for MPS</li> <li>branding.jar - the branding resources for MPS</li> <li>mps-annotations.jar - MPS-specific Java annotations such as @GeneratedClass, @Hack and @ToRemove</li> <li>mps-behavior-api.jar - Java API of the behavior \u29c9 aspect</li> <li>mps-behavior-runtime.jar - Java runtime classes of the behavior \u29c9 language</li> <li>mps-boot-util.jar - Java utility classes needed on startup</li> <li>mps-boot.jar - the launcher \u29c9 class that starts MPS</li> <li>mps-closures.jar - Java runtime classes of the closures \u29c9 language</li> <li>mps-collections.jar - Java runtime classes of the collections \u29c9 language</li> <li>mps-constraints-runtime.jar - Java runtime classes of the constraints \u29c9 language</li> <li>mps-context.jar - Java runtime classes of the feedback \u29c9 aspect</li> <li>mps-core.jar - the core plugin of MPS</li> <li>mps-editor-api.jar - Java API of the editor \u29c9 aspect</li> <li>mps-editor-runtime.jar - Java runtime classes of the editor \u29c9 aspect</li> <li>mps-editor.jar - all classes needed for the editor \u29c9 aspect</li> <li>mps-environment.jar - the Java classes that describe the environment that MPS is started with (e.g., standalone or as an IntelliJ IDEA plugin)</li> <li>mps-feedback-api.jar - Java API of the feedback \u29c9 aspect</li> <li>mps-generator.jar - Java runtime classes of the generator \u29c9 aspect</li> <li>mps-icons.jar - the JAR file that contains all icons</li> <li>mps-logging.jar - Java runtime classes of the logging \u29c9 language</li> <li>mps-messages-api.jar - Java API for sending messages using the logging framework</li> <li>mps-messages-for-legacy-constraints.jar - Java classes for legacy constraints</li> <li>mps-messages-for-rules.jar - Java classes for rules of the feedback \u29c9 aspect</li> <li>mps-messages-for-structure.jar - Java classes for problems in the structure aspect</li> <li>mps-messaging.jar - Java runtime classes for sending messages using the logging framework</li> <li>mps-openapi.jar - Java classes of the Open API \u29c9</li> <li>mps-persistence.jar - Java classes of the MPS persistency \u29c9 framework</li> <li>mps-platform.jar - contains the IDE extension functionality, such as the console, VFS support, model checking, build language, and more.</li> <li>mps-problem.jar - Java classes for describing problems in the feedback \u29c9 aspect</li> <li>mps-project-check.jar - Java classes of project-wide checks such as the constraint checker, model properties checker, and reference scope checker.</li> <li>mps-references.jar - Java runtime classes to support call by reference \u29c9 in Base Language</li> <li>mps-resources.jar - additional resources for MPS</li> <li>mps-resources_en.jar - the resource bundle that contains the translated strings of MPS</li> <li>mps-test.jar - Java runtime classes of the testing \u29c9 languages</li> <li>mps-textgen.jar - Java runtime classes of the TextGen \u29c9 aspect</li> <li>mps-tips.jar - contains the tips of the day \u29c9</li> <li>mps-tuples.jar - Java runtime classes of the tuples \u29c9 language</li> <li>mps-workbench.jar contains the Java runtime classes of the workbench. It provides integration with the IntelliJ Platform, implements many UI elements, and supports execution and debugging.</li> <li>resources.jar - the resources for MPS</li> <li>resources_en.jar - the English resources for MPS</li> </ul>"},{"location":"reference/included_libraries/#ant","title":"Ant","text":"<p>All the files are located in the folder /lib/ant/lib and are used by Apache Ant \u29c9. Most of the JARs contain tasks \u29c9 that Ant can execute.</p> <ul> <li>ant-antlr.jar - a task \u29c9 that integrates the ANTLR parser generator</li> <li>ant-apache-bcel.jar - a task that uses the Apache BCEL \u29c9 library to manipulate bytecode</li> <li>ant-apache-bsf.jar - a task that allows scripting languages supported by the Apache BSF \u29c9 framework to be used</li> <li>ant-apache-log4j.jar - a task that configures and uses the Apache Log4j \u29c9 logging system</li> <li>ant-apache-oro.jar - a task that provides regular expression support using the Apache ORO \u29c9 library</li> <li>ant-apache-regexp.jar - a task that provides regular expression support using the Jakarta Regexp \u29c9 library</li> <li>ant-apache-resolver.jar - a task that resolves XML entities using the Apache XML Commons Resolver \u29c9</li> <li>ant-apache-xalan2.jar - a task that performs XSL transformations using the Xalan-J 2.x processor \u29c9</li> <li>ant-commons-logging.jar - a task that enables logging using the Jakarta Commons Logging API \u29c9</li> <li>ant-commons-net.jar - a task that provides network-related tasks using the Jakarta Commons Net library \u29c9</li> <li>ant-jai.jar - a task that performs image processing operations using the Java Advanced Imaging API \u29c9</li> <li>ant-javamail.jar - a task that sends email messages using the JavaMail API \u29c9</li> <li>ant-jdepend.jar - a task that measures the design quality of Java code using the JDepend \u29c9 tool</li> <li>ant-jmf.jar - a task that plays media files using the Java Media Framework API \u29c9</li> <li>ant-jsch.jar - a task/task that supports SSH2 and SCP operations using the JSch \u29c9 library</li> <li>ant-junit.jar - a task \u29c9 that runs unit tests using the JUnit 3.x or 4.x framework</li> <li>ant-junit4.jar - a task \u29c9 that runs unit tests using the JUnit 4.x framework</li> <li>ant-junitlauncher.jar - a task \u29c9 that runs unit tests using the JUnit Platform Launcher API</li> <li>ant-launcher.jar - a launcher \u29c9 that sets up the classpath and invokes the main class</li> <li>ant-mps.jar - a set of tasks and types \u29c9 that support building and running MPS projects</li> <li>ant-netrexx.jar - a task that compiles NetRexx \u29c9 source files to Java bytecode</li> <li>ant-swing.jar - a task that displays a Swing-based user interface for selecting targets to execute</li> <li>ant-testutil.jar - a utility class that facilitates writing test cases for tasks and types</li> <li>ant-xz.jar - a task \u29c9 that supports compressing and decompressing files using the XZ format</li> <li>ant.jar - the core classes and tasks of Apache Ant \u29c9, a Java-based build tool</li> <li>mpsant/mps-run.jar - a library for running MPS applications from within an Ant build script</li> <li>mpsant/mps-tool.jar - a library for invoking MPS tools such as generators and checkers from within an Ant build script</li> </ul>"},{"location":"reference/included_libraries/#intellij-platform","title":"IntelliJ Platform","text":"<ul> <li>annotations.jar - JetBrains Java annotations \u29c9 (useful Java annotations such as @NotNull and @ScheduledForRemoval)</li> <li>ap-validation.jar - AP Validation \u29c9 is a library for validating statistics events before sending them to the server</li> <li>asm-all.jar - ASM \u29c9 is a Java bytecode manipulation and analysis framework</li> <li>automaton.jar - Automaton \u29c9 is a Java library that contains a DFA/NFA (finite-state automata) implementation with Unicode alphabet (UTF16) and support for the standard regular expression operations and several non-standard operations</li> <li>batik-codec.jar - Apache Batik SVG Toolkit \u29c9 is a Java-based toolkit for applications or applets that want to use images in the Scalable Vector Graphics (SVG) format for various purposes, such as display, generation or manipulation</li> <li>batik-transcoder.jar - additional library for Apache Batik for transcoding \u29c9 SVG documents to other formats</li> <li>blockmap.jar - BlockMap \u29c9 is a library for efficient block-based file operations</li> <li>bouncy-castle-provider.jar - the Bouncy Castle Provider \u29c9 is a Java cryptography API that provides implementations of various cryptographic algorithms, protocols, and standards</li> <li>byte-buddy-agent.jar - the Java agent for Byte Buddy \u29c9 is a code generation and manipulation library for creating and modifying Java classes during the runtime of a Java application and without the help of a compiler</li> <li>caffeine.jar - Caffeine \u29c9 is a high-performance, near-optimal caching library</li> <li>cds/classesLogAgent.jar - a library for logging class-loading events</li> <li>cglib-nodep.jar - cglib \u29c9 is a high-level API to generate and transform JAVA byte code</li> <li>classgraph.jar - ClassGraph \u29c9 is an uber-fast parallelized classpath scanner and module scanner</li> <li>cli-parser.jar - CLI Parser \u29c9 is a library for parsing various kinds of command line arguments or property lists</li> <li>commons-cli.jar - Apache Commons CLI \u29c9 provides an API for parsing command line options passed to programs. It can also print help messages detailing the options for a command line tool.</li> <li>commons-codec.jar - Apache Commons Codec \u29c9 provides implementations of common encoders and decoders such as base64, hex, phonetic, and URLs.</li> <li>commons-collections.jar - Apache Commons Collections \u29c9 extends and augments the Java Collections Framework</li> <li>commons-compress.jar - Apache Commons Compress \u29c9 defines an API for working with ar, cpio, Unix dump, tar, zip, gzip, XZ, Pack200, bzip2, 7z, arj, lzma, snappy, DEFLATE, lz4, Brotli, Zstandard, DEFLATE64, and Z files.</li> <li>commons-httpclient.jar - Apache Commons HttpClient \u29c9 was a library for accessing HTTP resources</li> <li>commons-imaging.jar - Apache Commons Imaging \u29c9 is a library that reads and writes a variety of image formats, including fast parsing of image info (size, color space, ICC profile, etc.) and metadata.</li> <li>commons-io.jar - Apache Commons IO \u29c9 is a library of utilities to help develop IO functionality.</li> <li>commons-lang3.jar - Apache Commons Lang \u29c9 is a library for enhancing the core Java classes</li> <li>commons-logging.jar - Apache Commons Logging \u29c9 a library for logging abstraction</li> <li>dom-impl.jar - DOM implementation for the IntelliJ platform</li> <li>dom-openapi.jar - DOM Open API for the IntelliJ platform</li> <li>ecj.jar: Eclipse Compiler for Java \u29c9</li> <li>error_prone_annotations.jar - Annotations for Error Prone \u29c9, a static analysis tool for Java that catches common programming mistakes at compile-time</li> <li>ext/diffutils.jar - DiffUtils \u29c9 is a library for performing the comparison operations between texts: computing diffs, applying patches, generating unified diffs or parsing them, and generating diff output for easy future displaying (like side-by-side view)</li> <li>external-system-rt.jar - External System Runtime \u29c9 library of the IntelliJ platform</li> <li>fluent-hc.jar - the Fluent API of the client of Apache HttpComponents \u29c9</li> <li>forms-preview.jar - previewer of JGoodies Forms \u29c9, a framework that helps you lay out and implement elegant Swing panels quickly and consistently</li> <li>forms_rt.jar - runtime classes of JGoodies Forms \u29c9</li> <li>grazie-spellchecker.jar - Grazie Spellchecker \u29c9, the spell checking in IntelliJ IDEA</li> <li>groovy.jar - a library for Groovy \u29c9, a Java-based scripting language</li> <li>groovy-json.jar - a library \u29c9 for JSON processing with Groovy</li> <li>groovy-jsr223.jar - a library \u29c9 for scripting with Groovy and JSR 223</li> <li>groovy-templates.jar - a library \u29c9 for template engines with Groovy</li> <li>groovy-xml.jar - a library \u29c9 for XML processing with Groovy</li> <li>grpc-core.jar - gRPC Core \u29c9, the Java implementation of gRPC. gRPC is a high-performance, open-source, general-purpose RPC framework.</li> <li>grpc-kotlin-stub.jar - gRPC Kotlin Stub \u29c9 is a Kotlin implementation of gRPC, providing runtime support for client-stubs and server-side code.</li> <li>grpc-netty-shaded.jar - support for Netty-based \u29c9 transport for gRPC</li> <li>grpc-protobuf.jar - Protobuf \u29c9 support for gRPC which allows defining service contracts and data structures using the Protocol Buffers language</li> <li>grpc-stub.jar - a library that provides stub classes \u29c9 for gRPC, which are abstract classes or interfaces that define the methods and parameters of a gRPC service</li> <li>gson.jar - Gson \u29c9 is a Java library that can be used to convert Java Objects into their JSON representation</li> <li>guava.jar - Guava \u29c9 is a set of core Java libraries from Google that includes new collection types (such as multimap and multiset), immutable collections, a graph library, and utilities for concurrency, I/O, hashing, primitives, strings, and more</li> <li>http-client.jar - HTTP Client \u29c9 plugin allows you to create, edit, and execute HTTP requests directly in the IntelliJ IDEA</li> <li>icons.jar - IntelliJ icons \u29c9</li> <li>icu4j.jar - ICU4J \u29c9 is a library that provides robust and full-featured Unicode services on a wide variety of platforms</li> <li>idea_rt.jar - the IDEA Runtime library, a library for running IDEA-based applications</li> <li>imageio-tiff.jar - ImageIO TIFF \u29c9 is a library for reading and writing TIFF images</li> <li>imgscalr-lib.jar - Imgscalr \u29c9 is a library for image scaling and manipulation</li> <li>ini4j.jar - Ini4j \u29c9 is a simple Java API for handling configuration files in Windows .ini format</li> <li>intellij-coverage-agent.jar - IntelliJ Coverage Agent \u29c9 is a coverage agent for code coverage analysis</li> <li>intellij-deps-fastutil.jar - IntelliJ Fastutil \u29c9 is a library for fast and memory-efficient collections</li> <li>intellij-dvcs.jar - IntelliJ DVCS is a library for distributed version control systems</li> <li>intellij-test-discovery-agent.jar - IntelliJ Test Discovery Agent \u29c9 is a coverage agent for code coverage analysis</li> <li>intellij-xml.jar - adds support for XML \u29c9 in IntelliJ IDEA</li> <li>ion-java.jar - Ion \u29c9 is a Java implementation of the Ion data notation</li> <li>isorelax.jar - ISO RELAX \u29c9 contains public interfaces useful for applications to support RELAX Core</li> <li>jackson-core.jar - Jackson Core contains the core low-level incremental (\"streaming\") parser and generator abstractions used by the Jackson Data Processor \u29c9</li> <li>jackson-databind.jar - Jackson Databind contains the general-purpose data-binding functionality and tree model for Jackson Data Processor \u29c9</li> <li>jackson-module-kotlin.jar - adds support for serialization/deserialization of Kotlin classes and data classes Kotlin support \u29c9 for the Jackson library</li> <li>java-api.jar - API of the IntelliJ Java plugin</li> <li>java-compatibility.jar - Java9Compatibility \u29c9 contains classes from JDK8 excluded from JDK9</li> <li>java-impl.jar - implementation classes of the IntelliJ Java plugin</li> <li>java-string-similarity.jar - the Java String Similarity \u29c9 library, a library for string similarity metrics</li> <li>java_resources_en.jar - the English resources for the MPS Java module</li> <li>javac2.jar - IntelliJ-specific implementation \u29c9 of javac with special support for checking @NotNull annotation at runtime.</li> <li>javax.activation.jar: JavaBeans Activation Framework \u29c9 is a Java library that provides a way to handle data of different types and formats uniformly. It allows applications to determine the type of a piece of data, access it, and perform operations on it using JavaBeans components.</li> <li>javax.annotation-api.jar - Jakarta Annotations \u29c9 defines a collection of annotations representing common semantic concepts that enable a declarative style of programming that applies across a variety of Java technologies</li> <li>jaxb-api.jar - Java XML Binding API \u29c9 provides an API and tools that automate the mapping between XML documents and Java objects.</li> <li>jaxb-api.jar: Jakarta XML API \u29c9 provides an API and tools that automate the mapping between XML documents and Java objects.</li> <li>jaxen.jar - Jaxen is a XPath \u29c9 engine for Java</li> <li>jb-jdi.jar - JetBrains JDI is a fork of the jdk.jdi \u29c9 module.</li> <li>jcef-api.jar - API of JCEF</li> <li>jcip-annotations.jar - JCIP Annotations is an implementation of the JCIP \u29c9 Annotations</li> <li>jdom.jar - JDOM \u29c9 is a Java-based solution for accessing, manipulating, and outputting XML data</li> <li>jediterm-pty.jar - JediTerm PTY \u29c9 provides a pure Java terminal widget that can be easily embedded into an IDE</li> <li>jetCheck.jar - the JetCheck \u29c9 is a property-based testing library for Java 8+, inspired by QuickCheck and Hypothesis</li> <li>jing.jar - Jing is a RELAX NG \u29c9 validator</li> <li>jna-platform.jar - JNA platform \u29c9 is a library for native access to platform-specific libraries</li> <li>jna.jar - JNA \u29c9 is a library for native access to shared libraries</li> <li>jps-model.jar is the model part of JPS \u29c9. JPGS is a Gant-based build framework + DSL.</li> <li>jps/jps-build-test.jar - Jar that belongs to JPS \u29c9</li> <li>jsch.jar - JSch is a Java implementation of the SSH2 protocol \u29c9.</li> <li>jshell-frontend.jar - the JShell \u29c9 Frontend library, a library for JShell integration</li> <li>json.jar - support for the JSON format \u29c9 for IntelliJ IDEA</li> <li>jsonpath.jar - the JsonPath \u29c9 library, a library for JSON querying</li> <li>jsoup.jar - Jsoup \u29c9 is a library for HTML parsing</li> <li>jsp-base-openapi.jar - JSP Base Open API \u29c9 is a library for rendering open API specification</li> <li>junit4.jar: JUnit 4 \u29c9 is a unit testing framework</li> <li>kotlin-reflect.jar - a library for Kotlin reflections \u29c9</li> <li>kotlin-stdlib-jdk8.jar - a library for the Kotlin standard library \u29c9 for JDK 8</li> <li>kotlin-test.jar - Kotlin Test \u29c9 is a library for Kotlin testing utilities</li> <li>kotlinx-coroutines-jdk8.jar - Kotlinx Coroutines \u29c9 for JDK 8</li> <li>kryo.jar - Kryo \u29c9 is a fast and efficient binary object graph serialization framework</li> <li>log4j.jar: Log4j 1.2 \u29c9 is a deprecated logging framework</li> <li>lz4-java.jar - LZ4 Java \u29c9 is a library for LZ4 compression and decompression</li> <li>markdown.jar - Markdown plugin \u29c9 of IntelliJ IDEA</li> <li>markdownj-core.jar - markdownj \u29c9 is the pure Java port of Markdown (a text-to-html conversion tool written by John Gruber)</li> <li>marketplace-zip-signer.jar - Marketplace Zip Signer library \u29c9 can be used to sign and verify JetBrains plugins, but it can be applied to any other zip archive</li> <li>maven-resolver-provider.jar - Apache Maven Artifact Resolver \u29c9 is a library for working with artifact repositories and dependency resolution</li> <li>microba.jar: Microba controls \u29c9 is a set of Java Swing components</li> <li>miglayout-swing.jar: MigLayout \u29c9 is a Java Layout Manager for Swing, SWT, and JavaFX</li> <li>nanoxml.jar: nanoxml \u29c9 is a non-validating XML parser</li> <li>netty-buffer.jar: Netty Buffer is an abstraction of a byte buffer, the fundamental data structure to represent a low-level binary and text message JavaDoc \u29c9</li> <li>netty-codec-http: encoder, decoder, and their related message types for HTTP (JavaDoc \u29c9)</li> <li>netty-handler-proxy.jar - Netty Handler Proxy library, a library that provides proxy handler implementations for Netty, which is a high-performance, asynchronous, event-driven framework for network applications</li> <li>ngram-slp.jar - Ngram SLP \u29c9 is a library for n-gram language models</li> <li>objenesis.jar - Objenesis \u29c9 is a library dedicated to bypassing the constructor when creating an object</li> <li>openapi.jar: an API to interact with the IntelliJ platform \u29c9</li> <li>oro.jar - Jakarta ORO \u29c9 is a library for regular expressions</li> <li>owasp-java-html-sanitizer.jar - OWASP Java HTML Sanitizer \u29c9 is a library for HTML sanitization</li> <li>platform-api.jar: public API of the IntelliJ platform SDK</li> <li>platform-impl.jar: implementation classes of the IntelliJ platform SDK</li> <li>platform-objectSerializer-annotations.jar: annotations of the IntelliJ object serializer \u29c9)</li> <li>platform-statistics-devkit.jar: statistics plugin of the IntelliJ platform (source \u29c9)</li> <li>platform.jar: IntelliJ platform SDK \u29c9</li> <li>plexus-utils.jar - Plexus Common Utils \u29c9 is a collection of various utility classes to ease working with strings, files, command lines, and more.</li> <li>protobuf-java.jar - the Java implementation of the Protocol Buffers \u29c9, Google's data interchange format</li> <li>proxy-vole.jar - Proxy Vole \u29c9 is a library to auto-detect the platform network proxy settings</li> <li>qdox.jar - QDox \u29c9 is a library for extracting class/interface/method definitions from sources</li> <li>rd-core.jar - RD \u29c9 is a reactive-distributed communication framework</li> <li>rd-framework.jar - the RD Framework \u29c9 is a reactive-distributed communication framework</li> <li>rd-swing.jar - is the swing integration for RD Framework \u29c9</li> <li>rhino-runtime.jar - the runtime of the Rhino JavaScript engine \u29c9</li> <li>rngom.jar - RNGOM \u29c9 is a library for parsing RELAX NG grammars</li> <li>roaringbitmap.jar - RoaringBitmap \u29c9 is a library for roaring bitmaps. Compressed bitmaps tend to outperform conventional compressed bitmaps such as WAH, EWAH, or Concise.</li> <li>serviceMessages.jar - Service messages \u29c9 are specially constructed pieces of text that pass commands/information about the build from the build script to the TeamCity server.</li> <li>slf4j.jar - SLF4J \u29c9 serves as a simple facade or abstraction for various logging frameworks</li> <li>snakeyaml.jar - SnakeYAML \u29c9 is a library for YAML processing</li> <li>snakeyaml-engine.jar - SnakeYAML Engine \u29c9 is a YAML 1.2 processor</li> <li>spellchecker.jar - the Spellchecker \u29c9 library of the IntelliJ platform</li> <li>stats.jar - statistics library \u29c9 of the IntelliJ platform</li> <li>stax-api.jar - StAX API \u29c9 is an API that exposes methods for iterative, event-based processing of XML documents</li> <li>streamex.jar - StreamEx \u29c9 is a library for enhancing Java 8 Streams</li> <li>swingx-core.jar - SwingX Core \u29c9 is a library for Swing extensions</li> <li>testFramework-java.jar - Java library of the IntelliJ Test Framework \u29c9</li> <li>testFramework.core.jar - Java library of the IntelliJ Test Framework \u29c9</li> <li>testFramework.jar - Java library of the IntelliJ Test Framework \u29c9  testing</li> <li>tests_bootstrap.jar - Java library of the IntelliJ Test Framework \u29c9</li> <li>trang-core.jar - Trang Core \u29c9 is a multi-format schema converter based on RELAX NG</li> <li>trove4j.jar: GNU Trove \u29c9 provides primitive type support for the Java collections API</li> <li>uast-tests.jar - UAST Tests library is a library for testing the Universal Abstract Syntax Tree \u29c9</li> <li>util.jar: Utility classes \u29c9 from the IntelliJ platform</li> <li>velocity.jar - Apache Velocity \u29c9 is a Java-based template engine</li> <li>winp.jar - WinP \u29c9 is a library for Windows process management</li> <li>xercesImpl.jar - XercesImpl \u29c9 is a library for XML parsing and validation</li> <li>xml-apis-ext.jar - External components \u29c9 of Apache XML Commons</li> <li>xml-resolver.jar - Apache XML Commons Resolver Component \u29c9</li> <li>xmlbeans.jar - Apache XMLBeans \u29c9 is a library for accessing XML by binding it to Java types</li> <li>xmlrpc.jar - Apache XML-RPC Client is the client for Apache XML-RPC \u29c9, a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls</li> <li>xstream.jar: XStream \u29c9 is a simple library to serialize objects to XML and back again</li> <li>xz.jar - XZ \u29c9 is a library for XZ compression and decompression</li> </ul>"},{"location":"reference/included_libraries/#changes-in-20212x","title":"Changes in 2021.2.x","text":"<ul> <li>All third-party jars are now merged into one big jar: 3<sup>rd</sup>-party.jar</li> <li>Added: find-action-model.jar - a library for finding actions in natural language text</li> <li>Added: kotlinx-serialization-json-jvm.jar - a Kotlin library \u29c9 for serializing and deserializing JSON data</li> <li>Added: tips-intellij-idea-community.jar - a jar file containing the Tips plugin for IntelliJ IDEA Community Edition, which is a plugin that shows tips and tricks for using IntelliJ IDEA in a popup window.</li> </ul>"},{"location":"reference/included_libraries/#changes-in-20213x","title":"Changes in 2021.3.x","text":"<ul> <li>3<sup>rd</sup>-party-rt.jar: is a JAR file containing the runtime classes of IntelliJ IDEA's various third-party libraries, such as JNA, ASM, and Log4j.</li> <li>eclipse.jar: a jar file containing the core classes of the Eclipse platform, such as the runtime, resources, and workspace APIs.</li> <li>annotations.jar was renamed to jetbrains-annotations.</li> <li>kotlinx-metadata-jvm: the Kotlinx Metadata JVM library, which is a Kotlin library for reading and writing JVM metadata in Kotlin class files and Android DEX files.</li> <li>kotlinx.jar: Kotlinx \u29c9 is a collection of various Kotlin libraries that provide useful extensions and utilities for various domains, such as coroutines, serialization, collections, and datetime.</li> <li>groovy-json.jar was renamed from org_codehaus_groovy_groovy-json.jar</li> <li>groovy-jsr223.jar was renamed from org_codehaus_groovy_groovy-jsr223.jar</li> <li>groovy-templates.jar was renamed from org_codehaus_groovy_groovy-templates.jar</li> <li>groovy-xml.jar was renamed from org_codehaus_groovy_groovy-xml.jar</li> <li>groovy.jar was renamed from org_codehaus_groovy_groovy.jar</li> </ul>"},{"location":"reference/included_libraries/#changes-in-20222x","title":"Changes in 2022.2.x","text":"<ul> <li>3<sup>rd</sup>-party.jar was removed again. That means that some JARs exist as standalone JARs again (e.g., asm libraries)</li> <li>externalProcess-rt.jar: a jar file containing the external process runtime library, which is a Java library for launching and communicating with external processes in a platform-independent way.</li> <li>groovy.jar: a jar file for the Groovy \u29c9 language, a dynamic scripting language for the Java platform that supports multiple paradigms, such as object-oriented, functional, and imperative programming.</li> <li>jffi.jar: JFFI \u29c9 is a Java library for interfacing with native code using JNA</li> <li>jffi-native.jar: Native part of JFFI \u29c9</li> <li>jnr-a64asm.jar: JNR A64ASM \u29c9 is a Java library for generating ARM64 assembly code at runtime</li> <li>jnr-ffi.jar: JNR FFI \u29c9 is a Java library for interfacing with native code using libffi</li> <li>jnr-x86asm.jar: a jar file containing the JNR X86ASM \u29c9 library, a Java library for generating x86 assembly code at runtime.</li> <li>kotlin-compiler-client-embeddable.jar: a jar file containing an embeddable version of the Kotlin compiler \u29c9</li> <li>kotlinx-metadata-jvm.jar: Kotlinx Metadata JVM library \u29c9 provides an API to read and modify metadata of binary files generated by the Kotlin/JVM compiler, namely <code>.class</code> and <code>.kotlin_module</code> files.</li> <li>lz4-java.jar: The LZ4 compression library for Java \u29c9 is a Java port of the LZ4 compression algorithm that offers fast compression and decompression speeds1.</li> <li>util_rt.jar: Utility runtime \u29c9 is a Java library that provides utility classes and methods for common tasks, such as logging, configuration, reflection, and concurrency.</li> </ul>"},{"location":"reference/included_libraries/#changes-in-20223x","title":"Changes in 2022.3.x","text":"<ul> <li>ant-imageio.jar: Ant ImageIO \u29c9 is an Ant task that allows reading and writing image files using the Java ImageIO API2.</li> <li>tools-testsBootstrap.jar: tools tests bootstrap library \u29c9  is a Java library that provides test utilities and helpers for testing tools and applications.</li> <li>xml-dom-impl.jar: XML DOM implementation \u29c9 is a library that implements the W3C Document Object Model (DOM) API for manipulating XML documents.</li> </ul>"},{"location":"reference/issue_trackers/","title":"Issue Trackers","text":"","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#reporting-bugs","title":"Reporting Bugs","text":"<p>Before reporting bugs, you should read: How to Report Bugs Effectively \u29c9. This page should then help you find existing issues for MPS and the MPS platforms and help you decide which issue tracker an issue belongs to. Most of the time, the package name tells you the correct project. Nearly all editor-related languages  (diagrams, tables, tree notations, etc.) are located in  MPS Extensions \u29c9. The following list gives a rough overview:</p> <ul> <li> MPS2 MPS \u29c9<ul> <li>jetbrains.*</li> <li>MPS.*</li> <li>collections.runtime.*</li> <li>collections_trove.runtime.*</li> <li>closures.runtime.*</li> </ul> </li> <li> mbeddr platform \u29c9<ul> <li>com.mbeddr.core.*</li> <li>com.mbeddr.mpsutil.*</li> <li>com.mbeddr.doc.*</li> </ul> </li> <li> mbeddr \u29c9<ul> <li>com.mbeddr.core.*</li> </ul> </li> <li> IETS3 \u29c9<ul> <li>org.iets3.*</li> </ul> </li> <li> MPS Extensions \u29c9<ul> <li>com.mbeddr.*</li> <li>de.itemis.*</li> <li>de.slisson.*</li> <li>de.q60.*</li> <li>com.dslfoundry.* (DSLFoundry \u29c9)</li> <li>org.modelix.model* (if it is related to the API, otherwise go to modelix \u29c9 itself)</li> </ul> </li> <li>JetBrains Runtime Environment or OpenJDK \u29c9<ul> <li>com.sun.*</li> <li>java.*</li> <li>javax.*</li> <li>jdk.*</li> <li>org.w3c.*</li> <li>org.xml.sax.*</li> </ul> </li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#mps-youtrack","title":"MPS (YouTrack)","text":"<p>This is the public issue tracker of JetBrains MPS itself. Consult the documentation for instructions on how to report an issue. YouTrack follows the CommonMark specification with extensions that support key features like auto links and tables: YouTrack Markdown Reference \u29c9</p> <ul> <li>open critical/show-stopper issues \u29c9</li> <li>open critical/major issues \u29c9</li> <li>open issues sorted by votes \u29c9</li> <li>open issues sorted by comments \u29c9</li> <li>search query reference | jetbrains.com \u29c9</li> <li>MPS X Release Notes (example) \u29c9</li> <li>tickets that encourage contributions \u29c9</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#mps-extensions","title":"MPS-Extensions","text":"<p>If you are unsure which languages are part of this platform, please consult the full extension list \u29c9 page.</p> <ul> <li>open issues \u29c9</li> <li>reference: search issues and pull requests | github.com \u29c9</li> <li>diagram: meta issue \u29c9</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#mbeddr","title":"Mbeddr","text":"<p>This is the issue tracker related to mbeddr.core \u29c9. You can find there issues related to the mbeddr platform \u29c9, which is used, for example, by IETS3.OS. Please note that nearly all editor-related languages were moved to  MPS Extensions \u29c9, so please submit those tickets in the corresponding issue tracker.</p> <ul> <li>open issues \u29c9</li> <li>open platform issues \u29c9</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#iets3os","title":"IETS3.OS","text":"<p>This issue tracker is most of the time needed for tickets related to KernelF \u29c9.</p> <ul> <li>open issue \u29c9</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#intellij-platform","title":"IntelliJ Platform","text":"<p>This issue tracker contains issues for IntelliJ IDEA/the IntelliJ platform SDK \u29c9 which MPS is based on. The version of the IntelliJ platform can be found on the  MPS download page \u29c9 or through MPS \u2192 About MPS. The build number consists of three parts. Example: <code>MPS 2021.3.1 Build: 213.7172.958</code>. 213 stands for 2021.3, and the IntelliJ platform version is 213.7172, which can be checked by visiting the IntelliJ IDEA download page \u29c9. If an MPS issue is related to the platform, it is forwarded by the MPS team to the platform team.</p> <ul> <li>open IntelliJ IDEA issues \u29c9</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#jetbrains-runtime","title":"JetBrains Runtime","text":"<p>JetBrains Runtime is a fork of OpenJDK available for Windows, Mac OS X, and Linux. It includes several enhancements in font rendering, HiDPI support, windowing/focus subsystems, performance improvements, and general bug fixes.</p> <p>It's highly unlikely that you have to submit an issue to this tracker yourself.</p> <p>This issue tracker is relevant for JCEF \u29c9, UI-related glitches, and complete Java crashes, as MPS uses the JetBrains Runtime instead of the normal JRE. The JetBrains runtime is installed in the jbr folder of the MPS installation. JetBrainsRuntime readme \u29c9 contains the corresponding JBR version for an IntelliJ platform release.</p> <ul> <li>open issues \u29c9</li> <li>open JCEF issues \u29c9</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#openjdk","title":"OpenJDK","text":"<p>It's improbable that you have to submit an issue to this tracker yourself.</p> <p>This issue tracker is only listed for reference purposes. If an OpenJDK issue affects JetBrains products, it will likely be fixed in the JetBrains Runtime.</p> <ul> <li>open issues \u29c9</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/standard_plugins/","title":"Standard Plugins in MPS","text":"<p>The following list contains the plugins that are installed in MPS 2021.1 and later by default. The changes were collected on the  command line by executing: <code>diff -rq path1 path2</code></p>"},{"location":"reference/standard_plugins/#mps","title":"MPS","text":"<ul> <li>mps-build: Build languages \u29c9 (jetbrains.mps.build)</li> <li>jetpad \u29c9: JetPad Projectional Editing Framework (jetbrains.jetpad)</li> <li>mps-console: console \u29c9 (jetbrains.mps.console)</li> <li>mps-context-actions: context actions tool \u29c9 (jetbrains.mps.editor.contextActions)</li> <li>mps-core \u29c9: MPS Core includes core stubs, aspects, Ant-related code, the MPS Kernel, editor, devkits, Base Language, the languages for langue design, the make framework, XML language, etc.</li> <li>mps-debugger-api: Debugger API \u29c9 (jetbrains.mps.debugger.api)</li> <li>mps-debugger-java: Java debugger for MPS \u29c9 (jetbrains.mps.debugger.java)</li> <li>mps-devkit: a plugin that contains all IDE-related functionality of the language design plugins and Base Language</li> <li>mps-diagram-editor: diagramming editor (deprecated) \u29c9 (jetbrains.mps.lang.editor.diagram)</li> <li>mps-execution-api: Execution Api and Utility Languages \u29c9 (jetbrains.mps.execution.api)</li> <li>mps-execution-configurations: Execution configuration \u29c9 (jetbrains.mps.execution.configurations)</li> <li>mps-execution-languages: Execution languages \u29c9 (jetbrains.mps.execution.configurations)</li> <li>mps-git4idea: MPS Git integration - stubs \u29c9 (jetbrains.mps.git4idea.stubs)</li> <li>mps-httpsupport: HTTP support plugin \u29c9 (jetbrains.mps.ide.httpsupport)</li> <li>mps-java: MPS Java IDE integrations \u29c9 (jetbrains.mps.ide.java)</li> <li>mps-make: Make framework \u29c9 (jetbrains.mps.ide.make)</li> <li>mps-memtool: Memory tool \u29c9 (jetbrains.mps.ide.memtool)</li> <li>mps-migration: Migration support \u29c9 (jetbrains.mps.ide.migration.workbench)</li> <li>mps-modelchecker: Model checker \u29c9 (jetbrains.mps.ide.modelchecker)</li> <li>mps-project-migrations: Migrations from the previous MPS version (jetbrains.mps.ide.mpsmigration)</li> <li>mps-samples: Shipped samples for MPS (Samples to tutorials, other sample projects \u29c9)</li> <li>mps-testing: languages for unit-testing \u29c9 Java code and MPS aspects such as editors and the type system</li> <li>mps-tooltips: Tooltips for MPS editors; they are showcased in the Tooltip Sample (jetbrains.mps.lang.editor.tooltips)</li> <li>mps-trove: Custom containers designed to work with primitive data types (trove4j Java library \u29c9)</li> <li>mps-vcs: version control integration \u29c9 (jetbrains.mps.vcs)</li> </ul>"},{"location":"reference/standard_plugins/#intellij-plugins","title":"IntelliJ Plugins","text":"<p>The sources for most of the plugins are in the plugins folder \u29c9 of the IntelliJ community repository.</p> <ul> <li>copyright \u29c9: copyright (com.intellij.copyright)</li> <li>github \u29c9: GitHub (org.jetbrains.plugins.github)</li> <li>java: Java related libraries such as an Ant Javac2 Task, the eclipse standalone compiler, JetBrains annotations, and libraries for the Java Virtual Machine Process Status Tool (jps \u29c9)</li> <li>laf-macos/laf-windows10 Mac/Windows-specific theme (laf=look and feel \u29c9)</li> <li>markdown \u29c9: Markdown (org.intellij.plugins.markdown)</li> <li>properties \u29c9: properties (com.intellij.properties)</li> <li>properties-resource-bundle-editor \u29c9: resource bundle editor (com.intellij.properties.bundle.editor)</li> <li>settings-repository \u29c9: settings repository (org.jetbrains.settingsRepository)</li> <li>sh \u29c9: shell script (com.jetbrains.sh)</li> <li>svn4idea \u29c9: subversion (Subversion)</li> <li>tasks \u29c9: task management (com.intellij.tasks)</li> <li>terminal \u29c9: terminal (org.jetbrains.plugins.terminal)</li> <li>platform-images: image-related functionality (com.intellij.platform.images)</li> <li>vcs-changeReminder \u29c9: ChangeReminder (com.jetbrains.changeReminder)</li> </ul>"},{"location":"reference/standard_plugins/#changes-in-20212x","title":"Changes in 2021.2.x","text":"<ul> <li>mps-build-ui: MPS build wizard \u29c9 (jetbrains.mps.build.ui)</li> <li>mps-spellcheck: Spellcheck integration for MPS using the IntelliJ plugin Grazie \u29c9 (jetbrains.mps.editor.spellcheck)</li> </ul>"},{"location":"reference/standard_plugins/#changes-in-20213x","title":"Changes in 2021.3.x","text":"<ul> <li>mps-ant-make: make execution code (jetbrains.mps.tool.make)</li> <li>mps-kotlin: MPS Kotlin implementation (jetbrains.mps.kotlin)</li> <li>mps-navbar: navigation bar \u29c9 that supports the MPS model hierarchy (jetbrains.mps.navbar)</li> </ul>"},{"location":"reference/standard_plugins/#changes-in-20222","title":"Changes in 2022.2","text":"<p>No changes.</p>"},{"location":"reference/standard_plugins/#changes-in-20223","title":"Changes in 2022.3","text":"<ul> <li>vcs-git: Git support for IntelliJ products + git4idea \u29c9 runtime classes</li> <li>vcs-github: GitHub support for IntelliJ products</li> <li>vcs-svn: SVN support for IntelliJ products + SQLite library</li> <li>Removed plugins: git4idea, github, settings-repository, svn4idea</li> </ul>"},{"location":"reference/tips_for_os_maintainers/","title":"Tips for Open Source Maintainers","text":"<p>The following sections contain links to articles that help with maintaining an open source project, starting from selecting the right platform to reviewing code and other best practices.</p>","tags":["reference"]},{"location":"reference/tips_for_os_maintainers/#best-practices","title":"Best practices","text":"<ul> <li>Best practices for maintainers | opensource.guide \u29c9</li> <li>Seven Ways to Be an Effective Open Source Maintainer \u29c9</li> </ul>","tags":["reference"]},{"location":"reference/tips_for_os_maintainers/#code-reviews","title":"Code reviews","text":"<ul> <li>The Code Reviewer's Guide | google.github.io \u29c9</li> <li>The Change Author's Guide | google.github.io \u29c9</li> <li>How to find positive things in a code review? \u29c9</li> </ul>","tags":["reference"]},{"location":"reference/tips_for_os_maintainers/#tools-general","title":"Tools (general)","text":"<ul> <li>mps-gradle-plugin \u29c9: Gradle plugin to build &amp; test languages and to support various tasks related to custom RCP packaging.</li> <li>Material for MkDocs \u29c9: static documentation generator which uses Markdown</li> <li>Badges for your repository \u29c9</li> </ul>","tags":["reference"]},{"location":"reference/tips_for_os_maintainers/#tools-github","title":"Tools (GitHub)","text":"<ul> <li>GitHub Actions/Awesome Actions \u29c9</li> <li>GitHub Pages \u29c9</li> <li>Find (almost) any GitHub user's email address! \u29c9: find out more information about a contributor</li> <li>Publishing Java packages with Maven \u29c9</li> </ul>","tags":["reference"]},{"location":"reference/tips_for_os_maintainers/#licenses","title":"Licenses","text":"<ul> <li>Choose an open-source license \u29c9</li> <li>How open source licenses work \u29c9</li> </ul>","tags":["reference"]},{"location":"reference/tips_for_os_maintainers/#reference","title":"Reference","text":"<ul> <li>Github vs Gitlab vs Bitbucket \u29c9</li> <li>Why do programmers write closed-source applications and then make them free? \u29c9</li> </ul>","tags":["reference"]},{"location":"reference/pr_checklist/after_coding/","title":"Pull Request Checklist","text":"<p>Structure Aspect</p> BasicAdvancedExpert <ul> <li> Names of concepts are self-explanatory.</li> <li> Concepts have aliases.</li> <li> The cardinality of children and references was checked.</li> <li> Properties need to be properties and shouldn't be referencable ( use children or references otherwise).</li> </ul> <ul> <li> Concepts/Interfaces are located in the correct virtual package.</li> <li> New concepts were added to the language that groups similar concepts e.g. data mappings to the data mappings language.</li> <li> Concepts have a short description.</li> <li> Enumerations are the right choice and should not be replaced by concepts.</li> <li> A decision was made between constraint datatypes and property constraints.</li> </ul> <ul> <li> Multiple references disable smart references. A custom substitute menu was used instead.</li> </ul> <p>Editor Aspect</p> BasicAdvancedExpertUser Perspective <ul> <li> Code completion works.</li> <li> Deletion of elements (doesn't) work.</li> <li> No duplicated entries in the code completion menu.</li> <li> Code completion menu descriptions are sufficient to differentiate entries.</li> </ul> <ul> <li> Collapsible blocks work correctly.<ul> <li> Error messages still have enough information when collapsed.</li> <li> Cardinality inconsistency: the real value vs. the expected value is shown in the error message.</li> </ul> </li> <li> Substitute menus vs. grammar cells was decided</li> <li> A decision was made on how to enter stuff<ul> <li>for example: code completion vs. context assistant cell vs. side transformations.</li> </ul> </li> <li> Intentions are used when side transformations are too confusing for the user.</li> <li> Links are consistent (e.g. always use ctrl + click).</li> </ul> <ul> <li> Strange errors in the editor are fixed or reported (maybe upstream platform or MPS issue).</li> <li> Important entries in the code completion menu are at the first positions (priorities).</li> <li> Code completion + side transformations: longer descriptions are used instead of just single words.</li> </ul> <ul> <li> The feature was tried from a user perspective. What annoyed you? Can you enter everything and not too much?</li> <li> Check usability: Nothing should be deletable when it is mandatory. It also should not be deletable and raise an error.</li> <li> The user can input something wrong and is notified instead of preventing him from entering something.</li> </ul> <p>Constraints Aspect</p> BasicAdvancedExpert <ul> <li> Scopes tests were added when many scopes were changed or when the logic was complicated.</li> <li> Constraints are set correctly for new features<ul> <li>For example: only specific containers, parents, links, etc. are allowed.</li> <li>By default, the scope of the model is used.</li> </ul> </li> <li> Scopes work in tests and generators.</li> <li> Properties have constraints for their values or implement common interfaces/concepts like INamedConcept.<ul> <li>Alternatively, the constraints can be enforced on the type system level.</li> </ul> </li> </ul> <ul> <li> When using KernelF: unnecessary concepts are filtered through the can be ancestor constraint.</li> </ul> <p>Behavior Aspect</p> BasicAdvancedExpert <ul> <li> All abstract methods are implemented.</li> <li> Methods that should be overridable have the virtual flag set.</li> <li> Methods that should override a super method have been marked as overrides.</li> </ul> <ul> <li> Default implementations exist for used concepts that have abstract unimplemented methods.</li> <li> Usage of static flags was checked for all methods.</li> <li> Methods are generalized correctly and are moved to a super concept if needed.</li> <li> Methods that return a collection return an empty list if there is no result.</li> </ul> <ul> <li> Languages with multiple generators don't pollute the behavior aspect with generator-specific methods.</li> </ul> <p>Typesystem Aspect</p> BasicAdvancedExpert <ul> <li> Tests were added for every single new type system error/warning.</li> <li> Checks are displayed at places where it is clear where the error is. Alternatively: more information was added to make the error locatable.</li> <li> Structural checks consider all relevant properties/children/references.</li> <li> When using types, it is checked if they must match exactly or just be subtypes.</li> <li> Checks cover all corner cases.</li> </ul> <ul> <li> Checks were done for the right concepts e.g. enum literals vs. enum type and are displayed at the right node.</li> <li> A quick fix or an (error) intention is used and not both.</li> </ul> <ul> <li> Performance impacts were checked (see: performance)</li> </ul> <p>Plugin Aspect</p> BasicAdvancedExpert <ul> <li> A plugin solution is used instead of a plugin aspect.</li> <li> Actions were added to groups so that the user could invoke them from the UI.</li> <li> The right type of plugin was chosen (project vs. application plugin).</li> <li> All functionality in plugin solutions/aspects was manually tested and don't throw errors.</li> </ul> <ul> <li> Actions have keyboard shortcuts.</li> </ul> <ul> <li> Actions have the right kind of access (command, editor command, read, none).</li> <li> All actions were disabled (NonDumbAwareActions) that shouldn't be available while indexing.</li> </ul> <p>Test Aspect</p> BasicAdvancedExpert <ul> <li> All corner cases are tested (see: testing).</li> <li> Test methods have reasonable names that explain what they are testing.</li> <li> Test methods don't test too many different things.</li> <li> Test aspects have each a TestInfo node.</li> </ul> <ul> <li> Complex migrations are tested using a MigrationTestCase.</li> <li> Complex scopes are tested using scope tests.</li> <li> has error and has warning checks have references to the error statement.</li> <li> The before tests block is used to set up tests.</li> <li> The after tests block is used to clean up tests.</li> </ul> <ul> <li> Temporary models created in tests are disposed of after testing.</li> <li> The generator was called manually for tests where the generator tests were not fine-grained enough.</li> <li> Visual diffing through the MPS diff tool is integrated for more complex tests.</li> </ul> <p>Generator Aspect</p> BasicAdvancedExpert <ul> <li> Tests were added/changed when modifications were made in generators.</li> <li> Preprocessing and postprocessing scripts are used sparingly.</li> <li> Custom generation plans are used when needed or priority rules are set.</li> </ul> <ul> <li> Performance impacts were checked (see: performance<ul> <li> Slow operations in the generator were saved in variables/in a cache.</li> <li> Code is not executed more often than needed.</li> </ul> </li> <li> Mapping configurations have an applicable block set.</li> <li> The generator runs deterministically.</li> <li> Necessary attributes are not lost between generation steps.</li> <li> <code>Pick output</code> is used instead of <code>get output</code> to have scoping checks.</li> </ul> <ul> <li> Naming convention: for templates meant to be used via explicit calls from other templates instead of in reduction rules, the \"map_\" prefix was instead of \"reduce_\".</li> <li> No usages of .forEach in generator use foreach var in iterator (performance)</li> <li> COPY_SRCL was used instead of LOOP+CALL</li> <li> Model pruning is used to increase the performance.</li> <li> The exact generator settings were decided (strict mode, parallel mode, apply transformations in place, etc.).</li> </ul> <p>Intentions Aspect</p> BasicAdvancedExpert <ul> <li> The is applicable block was set up correctly.</li> </ul> <ul> <li> Helpful additional intentions were added such as an intention to remove all items in a list.</li> <li> Intentions were grouped using the language com.mbeddr.mpsutil.intentions.</li> </ul> <ul> <li> When changing the model, the focus and selection are correctly set using the editor context.</li> </ul> Documentation Aspect BasicAdvancedExpert <ul> <li> Documentation was written for new features.</li> <li> There are no instances of technical details and terms in the documentation that the users don't understand.</li> <li> New features that are not mentioned in the documentation are self-explanatory.<ul> <li> Generated files are self-explanatory as well or contain comments.</li> </ul> </li> </ul> <ul> <li> Screenshots/embedded nodes are used and have captions.</li> <li> It was decided which kind of documentation is necessary<ul> <li>For example: Word documents, HTML pages, and documentation inside MPS.</li> </ul> </li> </ul> <ul> <li>Interactive exercises are provided for users.</li> </ul> Actions Aspect Basic <ul> <li> For common substitutions, node factories are set up.</li> </ul> Feedback Aspect <ul> <li> The aspect was used to override error messages that are not helpful for the user (e.g. structural checks, failing property constraints).</li> </ul> Refactorings Aspect Basic <ul> <li> Refactorings were used instead of directly renaming concepts/properties etc. (they update the resolve info too).</li> </ul> Scripts Aspect <ul> <li> Enhancement scripts were used to let the user perform changes to the models in batches.</li> </ul> Find Usages Aspect <ul> <li> To help the user find specific nodes more easily, custom finders were added.</li> </ul> Data Flow Aspect BasicAdvanced <ul> <li> Unreachable statements/expressions are checked.</li> <li> Unitialized reads are checked.</li> <li> Unused assignments are checked.</li> <li> Unused variables are checked.</li> <li> Returns are checked.</li> </ul> <ul> <li> The Data Flow check is integrated into the type system.</li> <li> Nullable analysis is implemented.</li> </ul> TextGen Aspect BasicAdvanced <ul> <li>TextGen is used for scenarios where the generator is not needed.</li> <li>The class TextGeneratorEngine is used to get the generated text when needed.</li> <li>Text gen components have the right extension and file encoding.</li> </ul> <ul> <li>The generated files have valid names according to the operation system or used software.</li> </ul> Migration Aspect BasicAdvancedExpert <ul> <li> Refactorings were used to move methods, concepts, etc. to not break models.</li> <li> For deprecated concepts is was decided if they need an error message, if entering them should be disallowed, or if they should be removed completely.</li> <li> Migrations were tested locally or through migration tests.</li> <li> New migrations were executed in the project.</li> </ul> <ul> <li> Old code is not immediately deleted but deprecated first. The code is deleted after a certain period.</li> <li> When using the refactoring menu, a migration script or refactoring log was written for situations where existing models need to be updated.</li> </ul> <ul> <li> Users are not using different distributions with different language versions to create models.</li> </ul> Accessory Models <ul> <li> It was decided how to ship libraries for users.<ul> <li> Should they be customizable?</li> <li> Part of the user repository?</li> <li> Be Overridable?</li> </ul> </li> </ul> Listener Aspect BasicAdvanced <ul> <li> Listeners are the right choice and simple buttons, intentions or quick fixes can't solve the problem.</li> <li> Constructors, node factories, reference handlers, and similar features can't solve the problem.</li> <li> Listeners are not added for BaseConcept to preserve performance.</li> </ul> <ul> <li> Updates of the models don't cause jumping cursors or lost focus in the editor.</li> <li> Big updates are done in background threads to not freeze the editor.</li> </ul>"},{"location":"reference/pr_checklist/after_review/","title":"After Review/Reimplementation","text":"<p>Corrections After Review</p> BasicAdvancedExpert <ul> <li> Section \"Before Push\" was checked again.</li> <li> The specification was checked again.</li> <li> Code that is not needed anymore was removed.</li> <li> A full check of the specification was done again.</li> <li> Manual testing was done again.</li> </ul> <ul> <li> Unclear reviews were clarified before starting to make changes.</li> <li> Reviews were answered by the developer or marked as done.</li> <li> The reviewer was notified if another review is necessary.</li> </ul> <ul> <li> Reviews were not taking as a personal attack but rather an opportunity to learn something new and improve.</li> </ul> <p>Copy and Paste/Reimplementation/Refactoring</p> BasicAdvancedExpert <ul> <li> The reimplementation has at least the same functionality as the old implementation.</li> <li> All testing steps were performed again.</li> <li> Copied code was adapted and checked for references to wrong nodes.</li> <li> Code is not duplicated more than twice.</li> </ul> <ul> <li> Existing nodes are only modified and commited when necessary (no test code).</li> <li> You understand the code that you copied.</li> </ul> <ul> <li> A big reimplementation/refactoring was agreed with the project lead.</li> </ul>"},{"location":"reference/pr_checklist/pr_misc/","title":"Miscellaneous","text":"<p>Code</p> BasicAdvancedExpert <ul> <li> Code duplication avoidance: a new interface/method was created when code occurred more than twice</li> <li> For Container-like structures: Is a uniqueness check necessary? How unique? (block, global)</li> <li> Unsupported inputs can't be entered.</li> <li> Constraints are used to restrict input on the model validation level.</li> <li> Scopes are restricted to the bare minimum.</li> </ul> <ul> <li> The right data structures were used for the implementation.</li> <li> Model access through locks is handled correctly.</li> </ul> <ul> <li> BaseConcept is not referenced and the referenced interface/concept is as generic as possible.</li> <li> Concurrent code was implemented the right way.</li> <li> New code reused MPS code or features from the IntelliJ platform.</li> </ul> <p>Sub-projects/other teams</p> BasicAdvancedExpert <ul> <li> Changes were made in all build scripts.</li> <li> Migrations were run in all sub-projects.</li> <li> Usages for code were checked in all sub-projects.</li> <li> Other teams are okay with the changes.</li> </ul> <ul> <li> All sub-projects use the same version of a language or plugin.</li> </ul> <ul> <li> Big projects are separated into different code owners (e.g. per module).</li> </ul>"},{"location":"reference/pr_checklist/push_and_pr/","title":"Before Pushing or When Creating the PR","text":"<p>Before Push</p> Basic <ul> <li> The commit message format was checked.</li> <li> The commit history was cleaned up (interactive rebase).</li> <li> Build scripts where checked (use the Build Script Notifier plugin \u29c9).</li> <li> All (new) migrations were run.</li> <li> All relevant tests are green.</li> <li> TODO comments were checked.</li> </ul> <p>GitHub</p> BasicAdvancedExpert <ul> <li> Tickets that were fixed/implemented are mentioned.</li> <li> Branch naming conventions were followed.</li> <li> Tests don't fail.</li> </ul> <ul> <li> No Model check errors.</li> <li> Linters don't fail.</li> <li> Only changes are mentioned that are relevant for the user/developer in the changelog.<ul> <li>for example: no implementation details or cleanups</li> </ul> </li> </ul> <ul> <li> The PR description mentions how the feature was implemented if it is not clear to the reviewer</li> <li> The PR title format was followed.</li> <li> The PR description format was followed.</li> </ul>"},{"location":"tags/","title":"Tags","text":"<p>Tags appear at the top of every page and group related topics even if the are not in the same hierarchy.</p>"},{"location":"tags/#aspect","title":"aspect","text":"<ul> <li>Accessory Models</li> <li>Action Aspect</li> <li>Behavior Aspect</li> <li>Constraints Aspect</li> <li>Dataflow Aspect</li> <li>Documentation Aspect</li> <li>Editor Aspect</li> <li>Feedback Aspect</li> <li>FindUsages Aspect</li> <li>Generator Aspect</li> <li>Intentions Aspect</li> <li>Listener Aspect</li> <li>Migration Aspect</li> <li>Plugin Aspect</li> <li>Polymorphic Functions Aspect</li> <li>Refactorings Aspect</li> <li>Scripts Aspect</li> <li>Structure Aspect</li> <li>Test Aspect</li> <li>TextGen Aspect</li> <li>Transformations Aspect</li> <li>Typ System Aspect</li> <li>VCS Aspect</li> <li>Virtual Interfaces Aspect</li> </ul>"},{"location":"tags/#baselanguage","title":"baselanguage","text":"<ul> <li>Deprecation</li> <li>Readability/Maintainability</li> <li>Base Language and Extensions</li> <li>Double Dispatch</li> </ul>"},{"location":"tags/#beginner","title":"beginner","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#best_practise","title":"best_practise","text":"<ul> <li>Java (Base language)</li> <li>Java Style Guide</li> <li>Programming Principles</li> <li>Deprecation</li> <li>Readability/Maintainability</li> <li>Language Design</li> <li>UI Patterns</li> <li>User Experience</li> </ul>"},{"location":"tags/#bugs","title":"bugs","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#build","title":"build","text":"<ul> <li>Build</li> </ul>"},{"location":"tags/#classpath","title":"classpath","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#customization","title":"customization","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#dependencies","title":"dependencies","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#dsl","title":"dsl","text":"<ul> <li>Language Design</li> </ul>"},{"location":"tags/#examples","title":"examples","text":"<ul> <li>Example Actions Using Locks</li> </ul>"},{"location":"tags/#files","title":"files","text":"<ul> <li>External Files and Tools</li> </ul>"},{"location":"tags/#general","title":"general","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#generator","title":"generator","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#guide","title":"guide","text":"<ul> <li>Editing This Guide</li> <li>Creating a Command Line Tool</li> <li>Development Guide</li> </ul>"},{"location":"tags/#iets3","title":"iets3","text":"<ul> <li>KernelF Introduction</li> <li>Platform Essentials</li> <li>Common Concepts and Interfaces</li> <li>Contributing</li> <li>Interpreter, Coverage, and Tracing</li> <li>Platform Build Scripts</li> </ul>"},{"location":"tags/#infrastructure","title":"infrastructure","text":"<ul> <li>CI</li> <li>Git</li> <li>Gradle</li> <li>Building Mbeddr Locally</li> <li>Build Folder</li> <li>Platform Build Scripts</li> <li>Gitignore File</li> </ul>"},{"location":"tags/#intellij","title":"intellij","text":"<ul> <li>IntelliJ UI</li> <li>IntelliJ Integration</li> <li>IntelliJ SDK</li> <li>Writing an MPS Plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Threading</li> <li>Actions</li> <li>Annotations</li> </ul>"},{"location":"tags/#interactive","title":"interactive","text":"<ul> <li>Console</li> </ul>"},{"location":"tags/#internals","title":"internals","text":"<ul> <li>Index</li> <li>Classloading</li> <li>Editor Development</li> <li>IntelliJ UI</li> <li>IntelliJ Integration</li> <li>IntelliJ SDK</li> <li>Navigating the MPS Sources</li> <li>Utility Classes</li> <li>Writing an MPS Plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Threading</li> <li>Named Threads</li> <li>Example Actions Using Locks</li> </ul>"},{"location":"tags/#java","title":"java","text":"<ul> <li>Java (Base language)</li> <li>Java Style Guide</li> <li>Java Chromium Embedded Framework</li> </ul>"},{"location":"tags/#java_integration","title":"java_integration","text":"<ul> <li>Creating a Command Line Tool</li> <li>Classloading</li> <li>Writing an MPS Plugin with Kotlin</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#mac","title":"mac","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#mbeddr","title":"mbeddr","text":"<ul> <li>General</li> <li>BigProject</li> <li>Building Mbeddr Locally</li> <li>Development Guide</li> <li>Miscellaneous Topics</li> <li>Platform Essentials</li> <li>Common Concepts and Interfaces</li> <li>Interpreter, Coverage, and Tracing</li> <li>Platform Build Scripts</li> <li>Mbeddr MPS Utilities</li> </ul>"},{"location":"tags/#mps_extensions","title":"mps_extensions","text":"<ul> <li>Cell Layout</li> <li>General</li> <li>Platform Essentials</li> <li>Common Concepts and Interfaces</li> <li>Platform Build Scripts</li> </ul>"},{"location":"tags/#mps_language","title":"mps_language","text":"<ul> <li>Build</li> <li>Core Languages</li> </ul>"},{"location":"tags/#native","title":"native","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#openapi","title":"openapi","text":"<ul> <li>Open API</li> </ul>"},{"location":"tags/#plugins","title":"plugins","text":"<ul> <li>Classloading</li> <li>Writing an MPS Plugin with Kotlin</li> <li>General</li> </ul>"},{"location":"tags/#reference","title":"reference","text":"<ul> <li>New Pages</li> <li>Original Authors</li> <li>Utility Classes</li> <li>Named Threads</li> <li>Tools</li> <li>Actions</li> <li>Annotations</li> <li>Core Languages</li> <li>Exceptions</li> <li>Extension Points</li> <li>Gitignore File</li> <li>Icons</li> <li>Issue Trackers</li> <li>Tips for Open Source Maintainers</li> </ul>"},{"location":"tags/#safety","title":"safety","text":"<ul> <li>Language Design</li> </ul>"},{"location":"tags/#settings","title":"settings","text":"<ul> <li>Trouble Shooting Guide</li> </ul>"},{"location":"tags/#solution","title":"solution","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#sources","title":"sources","text":"<ul> <li>Navigating the MPS Sources</li> </ul>"},{"location":"tags/#standalone","title":"standalone","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#theory","title":"theory","text":"<ul> <li>Language Design</li> </ul>"},{"location":"tags/#tools","title":"tools","text":"<ul> <li>External Files and Tools</li> </ul>"},{"location":"tags/#troubleshooting","title":"troubleshooting","text":"<ul> <li>Console</li> <li>Debugging</li> <li>General</li> <li>Trouble Shooting Guide</li> <li>Issue Trackers</li> </ul>"},{"location":"tags/#ui","title":"ui","text":"<ul> <li>Visual Guide</li> <li>Editor Development</li> <li>IntelliJ UI</li> <li>Threading</li> <li>UI Patterns</li> <li>User Experience</li> <li>Icons</li> </ul>"},{"location":"tags/#utility","title":"utility","text":"<ul> <li>BigProject</li> <li>Utility Classes</li> </ul>"},{"location":"tags/#windows","title":"windows","text":"<ul> <li>OS-Specific Bugs</li> </ul>"},{"location":"tags/#z3","title":"z3","text":"<ul> <li>Language Design</li> </ul>"}]}