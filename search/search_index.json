{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This website collects practical knowledge about MPS and popular MPS platforms. It\u2019s written mainly in the form of a Q&A. It contains questions and answers for MPS2 MPS and the following platforms: MPS -extensions mbeddr IETS3 You can open links starting with http://127.0.0.1 with the builtin HTTP support plugin . Platform specific instructions are marked when possible. Long answers are collapsed by default. If you have any suggestions, please write a comment at the bottom of the page or open an issue on GitHub. Latest version: MPS 2021.3.1 Minimum version in doc: MPS 2021.1.4 If you aren\u2019t already a member, consider joining MPS on Slack . A Twitter user \u201c6 hours of debugging can save you 5 minutes of reading documentation.\u201d","title":"Home"},{"location":"about/editing_this_guide/","text":"Editing this guide \u00b6 This guide uses MkDocs + Material for MkDocs . This page contains the reference for the material theme. Install extra MkDocs plugins in build.gradle + mkdocs.yml. If you are using IntelliJ for editing, it is recommended to install the plugin Grazie Professional for spell checking. Editing \u00b6 The first header should be # . Inserted images with Markdown, not HTML: ![description](url){width=\"600px\"} . Set the with to 600px or 300px, depending on how big or small the image is footnotes syntax The target=_blank attribute and an icon for external links gets automatically added to links. The following symbols must be escaped: $ is &#36; because it collides with inline Latex blocks. Extensions \u00b6 Besides the Material extensions, the project used the following Pymdown extensions: pymdownx.betterem : different emphasis handling pymdownx.inlinehilite : inline code highlighting; example: #!js var test = 0; pymdownx.magiclink : linkafies URLs pymdownx.smartsymbols : inserts commonly used Unicode characters via ASCII representations. pymdownx.superfences : extension to Markdown fences pymdownx.details : collapsible elements pymdownx.highlight pymdownx.snippets : include other Markdown or HTML snippets into the current Markdown file pymdownx.keys : simplifies inserting key inputs; example: Ctrl + Alt + Del pymdownx.caret : superscript text via caret pymdownx.mark : enables marking words pymdownx.tilde : subscript text via tilde pymdownx.emoji : support for custom Emojis. Some example icons are in MPS Icons . pymdownx.tasklist : support for lists with checkboxes mk_in_html : support for markdown in HTML pymdownx.magiclink : additional link related features Macros \u00b6 The plugin mkdocs-macros-plugin is activated. You can add variables to the extra section of mkdocs.yml (example: mps_latest ) and use the available macros: contribution_by(github_username) question_by(github_username) answer_by(github_username) mps_url(identifier) image_popup() iets3() mbeddr() mbeddr_platform() mps_extensions() mps Look through main.py to see how they are implemented. The identifier can start with one of the following special identifiers: @openapi @mps @baselang @mpsutil @itemis @mbeddr @iets3 The special identifiers get translated to the corresponding package names. Only the last part of the identifier has to be the correct name. The identifier can reference classes, interfaces, concept, and interface declarations in baselanguage, mps-extensions, mbeddr, and iets3. The rest of the identifier only helps to find the correct node and doesn\u2019t have to be exact. Example: @mps.ClassConcept will find jetbrains.mps.baseLanguage.structure.ClassConcept . When the wrong node is selected, enter more parts of the full qualified name of the node. Diagrams \u00b6 Kroki enables support for diagrams ( examples ). It supports the following diagrams: BlockDiag BlockDiag (simple block diagrams) SeqDiag (simple sequence diagrams) ActDiag (simple activity diagrams) NwDiag (simple network diagrams) PacketDiag (packet header diagrams) RackDiag (rack diagrams) BPMN Bytefield C4 (with PlantUML) Ditaa Erd Excalidraw GraphViz Mermaid Nomnoml Pikchr PlantUML Structurizr SvgBob UMLet Vega Vega-Lite WaveDrom They can be embedded by creating a code block and the text kroki-[diagramtype] . The following sections contain ideas for diagrams. blockdiag \u00b6 Diagram 1 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 blockdiag { orientation = portrait R -> A R -> B B -> C C -> E B -> D D -> F F -> E D -> G A <- C B -> D } Diagram 2 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 blockdiag { default_node_color = 'yellow' if [shape=\"roundedbox\", color='white'] condition [numbered = 1, shape=\"roundedbox\", description=\"the condition\"] true_block [numbered = 1, shape=\"roundedbox\"] false_block [numbered = 0-1, shape=\"roundedbox\"] if -> condition if -> true_block if -> false_block } SeqDiag \u00b6 Diagram Code 1 2 3 4 5 6 7 seqdiag { MPS -> Clipboard [label = \"Copy Node Reference as URL\"] Clipboard -> Browser [label = \"Paste URL\"] http_server [label=\"MPS HTTP Server\"] Browser -> http_server [label = \"Send request\"] http_server -> MPS [label = \"Open Node\"] } ActDiag \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 actdiag { createConcept -> createEditor -> createNodes lane language { label = \"Language\" createConcept [label = \"Create concept\"] createEditor [label = \"Create editor\"] } lane solution { label =\"Solution\" createNodes [label = \"Create nodes\"] } } Graphviz \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 digraph finite_state_machine { rankdir=LR; planning -> analysis analysis -> design design -> implementation ti [label=\"testing & integration\"] implementation -> ti ti -> maintenance maintenance -> planning } Ditaa \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 +--------+ | | | User | | | +--------+ ^ request | v +-------------+ | | | Kroki | | |---+ +-------------+ | ^ ^ | inflate | | | v +---------+ +-------------+ | | | Ditaa | | |----+ +-------------+ | ^ | process | | +-------+ mermaid.js \u00b6 Diagram Code 1 2 3 4 5 graph TD; A-->B; A-->C; B-->D; C-->D; nomnoml \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [Pirate|eyeCount: Int|raid();pillage()| [beard]--[parrot] [beard]-:>[foul mouth] ] [<table>mischief | bawl | sing || yell | drink] [<abstract>Marauder]<:--[Pirate] [Pirate]- 0..7[mischief] [jollyness]->[Pirate] [jollyness]->[rum] [jollyness]->[singing] [Pirate]-> *[rum|tastiness: Int|swig()] [Pirate]->[singing] [singing]<->[rum] [<start>st]->[<state>plunder] [plunder]->[<choice>more loot] [more loot]->[st] [more loot] no ->[<end>e] [<actor>Sailor] - [<usecase>shiver me;timbers] plantUML \u00b6 Diagram 1 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml Diagram 2 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs BPMN \u00b6 Diagram Code ``` <?xml version=\u201d1.0\u201d encoding=\u201dUTF-8\u201d?> OrderReceivedEvent _6-652 _6-674 CalmCustomerTask _6-463 _6-514 _6-565 _6-616 _6-630 _6-630 _6-691 _6-693 _6-691 _6-746 _6-748 _6-748 _6-746 _6-693 _6-632 _6-632 _6-634 _6-634 _6-636 _6-636 _6-125 _6-125 _6-178 _6-178 _6-420 _6-420 _6-430 _6-422 _6-424 _6-422 _6-428 _6-424 _6-426 _6-426 _6-430 _6-428 _6-434 _6-434 _6-436 _6-436 <di:waypoint x=\u201d834\u201d y=\u201d111\u201d### plantUML Diagram 1 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml Diagram 2 \u00b6 Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs BPMN \u00b6 Diagram Codexml version=\"1.0\" encoding=\"UTF-8\"?> <semantic:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:semantic=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" id=\"_1275940932088\" targetNamespace=\"http://www.trisotech.com/definitions/_1275940932088\" exporter=\"Camunda Modeler\" exporterVersion=\"1.16.0\"> <semantic:message id=\"_1275940932310\" /> <semantic:message id=\"_1275940932433\" /> <semantic:process id=\"_6-1\" isExecutable=\"false\"> <semantic:laneSet id=\"ls_6-438\"> <semantic:lane id=\"_6-650\" name=\"clerk\"> <semantic:flowNodeRef>OrderReceivedEvent</semantic:flowNodeRef> <semantic:flowNodeRef>_6-652</semantic:flowNodeRef> <semantic:flowNodeRef>_6-674</semantic:flowNodeRef> <semantic:flowNodeRef>CalmCustomerTask</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-446\" name=\"pizza chef\"> <semantic:flowNodeRef>_6-463</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-448\" name=\"delivery boy\"> <semantic:flowNodeRef>_6-514</semantic:flowNodeRef> <semantic:flowNodeRef>_6-565</semantic:flowNodeRef> <semantic:flowNodeRef>_6-616</semantic:flowNodeRef> </semantic:lane> </semantic:laneSet> <semantic:startEvent id=\"OrderReceivedEvent\" name=\"Order received\"> <semantic:outgoing>_6-630</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932310\" /> </semantic:startEvent> <semantic:parallelGateway id=\"_6-652\" name=\"\"> <semantic:incoming>_6-630</semantic:incoming> <semantic:outgoing>_6-691</semantic:outgoing> <semantic:outgoing>_6-693</semantic:outgoing> </semantic:parallelGateway> <semantic:intermediateCatchEvent id=\"_6-674\" name=\"\u201ewhere is my pizza?\u201c\"> <semantic:incoming>_6-691</semantic:incoming> <semantic:incoming>_6-746</semantic:incoming> <semantic:outgoing>_6-748</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932433\" /> </semantic:intermediateCatchEvent> <semantic:task id=\"CalmCustomerTask\" name=\"Calm customer\"> <semantic:incoming>_6-748</semantic:incoming> <semantic:outgoing>_6-746</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-463\" name=\"Bake the pizza\"> <semantic:incoming>_6-693</semantic:incoming> <semantic:outgoing>_6-632</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-514\" name=\"Deliver the pizza\"> <semantic:incoming>_6-632</semantic:incoming> <semantic:outgoing>_6-634</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-565\" name=\"Receive payment\"> <semantic:incoming>_6-634</semantic:incoming> <semantic:outgoing>_6-636</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-616\" name=\"\"> <semantic:incoming>_6-636</semantic:incoming> <semantic:terminateEventDefinition /> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-630\" name=\"\" sourceRef=\"OrderReceivedEvent\" targetRef=\"_6-652\" /> <semantic:sequenceFlow id=\"_6-632\" name=\"\" sourceRef=\"_6-463\" targetRef=\"_6-514\" /> <semantic:sequenceFlow id=\"_6-634\" name=\"\" sourceRef=\"_6-514\" targetRef=\"_6-565\" /> <semantic:sequenceFlow id=\"_6-636\" name=\"\" sourceRef=\"_6-565\" targetRef=\"_6-616\" /> <semantic:sequenceFlow id=\"_6-691\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-693\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-463\" /> <semantic:sequenceFlow id=\"_6-746\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-748\" name=\"\" sourceRef=\"_6-674\" targetRef=\"CalmCustomerTask\" /> </semantic:process> <semantic:message id=\"_1275940932198\" /> <semantic:process id=\"_6-2\" isExecutable=\"false\"> <semantic:startEvent id=\"_6-61\" name=\"Hungry for pizza\"> <semantic:outgoing>_6-125</semantic:outgoing> </semantic:startEvent> <semantic:task id=\"SelectAPizzaTask\" name=\"Select a pizza\"> <semantic:incoming>_6-125</semantic:incoming> <semantic:outgoing>_6-178</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-127\" name=\"Order a pizza\"> <semantic:incoming>_6-178</semantic:incoming> <semantic:outgoing>_6-420</semantic:outgoing> </semantic:task> <semantic:eventBasedGateway id=\"_6-180\" name=\"\"> <semantic:incoming>_6-420</semantic:incoming> <semantic:incoming>_6-430</semantic:incoming> <semantic:outgoing>_6-422</semantic:outgoing> <semantic:outgoing>_6-424</semantic:outgoing> </semantic:eventBasedGateway> <semantic:intermediateCatchEvent id=\"_6-202\" name=\"pizza received\"> <semantic:incoming>_6-422</semantic:incoming> <semantic:outgoing>_6-428</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932198\" /> </semantic:intermediateCatchEvent> <semantic:intermediateCatchEvent id=\"_6-219\" name=\"60 minutes\"> <semantic:incoming>_6-424</semantic:incoming> <semantic:outgoing>_6-426</semantic:outgoing> <semantic:timerEventDefinition> <semantic:timeDate /> </semantic:timerEventDefinition> </semantic:intermediateCatchEvent> <semantic:task id=\"_6-236\" name=\"Ask for the pizza\"> <semantic:incoming>_6-426</semantic:incoming> <semantic:outgoing>_6-430</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-304\" name=\"Pay the pizza\"> <semantic:incoming>_6-428</semantic:incoming> <semantic:outgoing>_6-434</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-355\" name=\"Eat the pizza\"> <semantic:incoming>_6-434</semantic:incoming> <semantic:outgoing>_6-436</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-406\" name=\"Hunger satisfied\"> <semantic:incoming>_6-436</semantic:incoming> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-125\" name=\"\" sourceRef=\"_6-61\" targetRef=\"SelectAPizzaTask\" /> <semantic:sequenceFlow id=\"_6-178\" name=\"\" sourceRef=\"SelectAPizzaTask\" targetRef=\"_6-127\" /> <semantic:sequenceFlow id=\"_6-420\" name=\"\" sourceRef=\"_6-127\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-422\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-202\" /> <semantic:sequenceFlow id=\"_6-424\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-219\" /> <semantic:sequenceFlow id=\"_6-426\" name=\"\" sourceRef=\"_6-219\" targetRef=\"_6-236\" /> <semantic:sequenceFlow id=\"_6-428\" name=\"\" sourceRef=\"_6-202\" targetRef=\"_6-304\" /> <semantic:sequenceFlow id=\"_6-430\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-434\" name=\"\" sourceRef=\"_6-304\" targetRef=\"_6-355\" /> <semantic:sequenceFlow id=\"_6-436\" name=\"\" sourceRef=\"_6-355\" targetRef=\"_6-406\" /> </semantic:process> <semantic:collaboration id=\"C1275940932557\"> <semantic:participant id=\"_6-53\" name=\"Pizza Customer\" processRef=\"_6-2\" /> <semantic:participant id=\"_6-438\" name=\"Pizza vendor\" processRef=\"_6-1\" /> <semantic:messageFlow id=\"_6-638\" name=\"pizza order\" sourceRef=\"_6-127\" targetRef=\"OrderReceivedEvent\" /> <semantic:messageFlow id=\"_6-642\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-674\" /> <semantic:messageFlow id=\"_6-646\" name=\"receipt\" sourceRef=\"_6-565\" targetRef=\"_6-304\" /> <semantic:messageFlow id=\"_6-648\" name=\"money\" sourceRef=\"_6-304\" targetRef=\"_6-565\" /> <semantic:messageFlow id=\"_6-640\" name=\"pizza\" sourceRef=\"_6-514\" targetRef=\"_6-202\" /> <semantic:messageFlow id=\"_6-750\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-236\" /> </semantic:collaboration> <bpmndi:BPMNDiagram id=\"Trisotech.Visio-_6\" name=\"Untitled Diagram\" documentation=\"\" resolution=\"96.00000267028808\"> <bpmndi:BPMNPlane bpmnElement=\"C1275940932557\"> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-53\" bpmnElement=\"_6-53\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"12\" width=\"1044\" height=\"294\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-438\" bpmnElement=\"_6-438\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"372\" width=\"905\" height=\"337\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-650\" bpmnElement=\"_6-650\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"372\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-446\" bpmnElement=\"_6-446\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"486\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-448\" bpmnElement=\"_6-448\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"600\" width=\"875\" height=\"109\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_OrderReceivedEvent\" bpmnElement=\"OrderReceivedEvent\"> <dc:Bounds x=\"79\" y=\"405\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-652\" bpmnElement=\"_6-652\"> <dc:Bounds x=\"140\" y=\"399\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-674\" bpmnElement=\"_6-674\"> <dc:Bounds x=\"218\" y=\"404\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_CalmCustomerTask\" bpmnElement=\"CalmCustomerTask\"> <dc:Bounds x=\"286\" y=\"386\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-463\" bpmnElement=\"_6-463\"> <dc:Bounds x=\"252\" y=\"521\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-514\" bpmnElement=\"_6-514\"> <dc:Bounds x=\"464\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-565\" bpmnElement=\"_6-565\"> <dc:Bounds x=\"603\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-616\" bpmnElement=\"_6-616\"> <dc:Bounds x=\"722\" y=\"647\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-61\" bpmnElement=\"_6-61\"> <dc:Bounds x=\"66\" y=\"96\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-74\" bpmnElement=\"SelectAPizzaTask\"> <dc:Bounds x=\"145\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-127\" bpmnElement=\"_6-127\"> <dc:Bounds x=\"265\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-180\" bpmnElement=\"_6-180\"> <dc:Bounds x=\"378\" y=\"90\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-202\" bpmnElement=\"_6-202\"> <dc:Bounds x=\"647\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-219\" bpmnElement=\"_6-219\"> <dc:Bounds x=\"448\" y=\"184\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-236\" bpmnElement=\"_6-236\"> <dc:Bounds x=\"517\" y=\"166\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-304\" bpmnElement=\"_6-304\"> <dc:Bounds x=\"726\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-355\" bpmnElement=\"_6-355\"> <dc:Bounds x=\"834\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-406\" bpmnElement=\"_6-406\"> <dc:Bounds x=\"956\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-640\" bpmnElement=\"_6-640\"> <di:waypoint x=\"506\" y=\"629\" /> <di:waypoint x=\"506\" y=\"384\" /> <di:waypoint x=\"663\" y=\"384\" /> <di:waypoint x=\"663\" y=\"127\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-630\" bpmnElement=\"_6-630\"> <di:waypoint x=\"109\" y=\"420\" /> <di:waypoint x=\"140\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-691\" bpmnElement=\"_6-691\"> <di:waypoint x=\"182\" y=\"420\" /> <di:waypoint x=\"200\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-648\" bpmnElement=\"_6-648\"> <di:waypoint x=\"754\" y=\"145\" /> <di:waypoint x=\"754\" y=\"408\" /> <di:waypoint x=\"630\" y=\"408\" /> <di:waypoint x=\"631\" y=\"629\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-422\" bpmnElement=\"_6-422\"> <di:waypoint x=\"420\" y=\"111\" /> <di:waypoint x=\"438\" y=\"111\" /> <di:waypoint x=\"647\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-646\" bpmnElement=\"_6-646\" messageVisibleKind=\"non_initiating\"> <di:waypoint x=\"658\" y=\"629\" /> <di:waypoint x=\"658\" y=\"432\" /> <di:waypoint x=\"782\" y=\"432\" /> <di:waypoint x=\"782\" y=\"145\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-428\" bpmnElement=\"_6-428\"> <di:waypoint x=\"679\" y=\"111\" /> <di:waypoint x=\"726\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-748\" bpmnElement=\"_6-748\"> <di:waypoint x=\"250\" y=\"420\" /> <di:waypoint x=\"268\" y=\"420\" /> <di:waypoint x=\"286\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-420\" bpmnElement=\"_6-420\"> <di:waypoint x=\"348\" y=\"111\" /> <di:waypoint x=\"366\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-636\" bpmnElement=\"_6-636\"> <di:waypoint x=\"686\" y=\"663\" /> <di:waypoint x=\"704\" y=\"663\" /> <di:waypoint x=\"722\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-750\" bpmnElement=\"_6-750\"> <di:waypoint x=\"328\" y=\"386\" /> <di:waypoint x=\"328\" y=\"348\" /> <di:waypoint x=\"572\" y=\"348\" /> <di:waypoint x=\"572\" y=\"234\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-436\" bpmnElement=\"_6-436\"> <di:waypoint x=\"918\" y=\"111\" /> <di:waypoint x=\"936\" y=\"111\" /> <di:waypoint x=\"956\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-632\" bpmnElement=\"_6-632\"> <di:waypoint x=\"335\" y=\"555\" /> <di:waypoint x=\"353\" y=\"555\" /> <di:waypoint x=\"353\" y=\"663\" /> <di:waypoint x=\"464\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-634\" bpmnElement=\"_6-634\"> <di:waypoint x=\"548\" y=\"663\" /> <di:waypoint x=\"603\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-125\" bpmnElement=\"_6-125\"> <di:waypoint x=\"96\" y=\"111\" /> <di:waypoint x=\"114\" y=\"111\" /> <di:waypoint x=\"145\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-430\" bpmnElement=\"_6-430\"> <di:waypoint x=\"600\" y=\"200\" /> <di:waypoint x=\"618\" y=\"200\" /> <di:waypoint x=\"618\" y=\"252\" /> <di:waypoint x=\"576\" y=\"252\" /> <di:waypoint x=\"549\" y=\"252\" /> <di:waypoint x=\"360\" y=\"252\" /> <di:waypoint x=\"360\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-642\" bpmnElement=\"_6-642\"> <di:waypoint x=\"545\" y=\"234\" /> <di:waypoint x=\"545\" y=\"324\" /> <di:waypoint x=\"234\" y=\"324\" /> <di:waypoint x=\"234\" y=\"404\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-424\" bpmnElement=\"_6-424\"> <di:waypoint x=\"399\" y=\"132\" /> <di:waypoint x=\"399\" y=\"200\" /> <di:waypoint x=\"448\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-638\" bpmnElement=\"_6-638\"> <di:waypoint x=\"306\" y=\"145\" /> <di:waypoint x=\"306\" y=\"252\" /> <di:waypoint x=\"94\" y=\"252\" /> <di:waypoint x=\"94\" y=\"405\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-426\" bpmnElement=\"_6-426\"> <di:waypoint x=\"480\" y=\"200\" /> <di:waypoint x=\"498\" y=\"200\" /> <di:waypoint x=\"517\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-693\" bpmnElement=\"_6-693\"> <di:waypoint x=\"161\" y=\"441\" /> <di:waypoint x=\"161\" y=\"556\" /> <di:waypoint x=\"252\" y=\"555\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-178\" bpmnElement=\"_6-178\"> <di:waypoint x=\"228\" y=\"111\" /> <di:waypoint x=\"265\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-746\" bpmnElement=\"_6-746\"> <di:waypoint x=\"370\" y=\"420\" /> <di:waypoint x=\"386\" y=\"420\" /> <di:waypoint x=\"386\" y=\"474\" /> <di:waypoint x=\"191\" y=\"474\" /> <di:waypoint x=\"191\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-434\" bpmnElement=\"_6-434\"> <di:waypoint x=\"810\" y=\"111\" /> <di:waypoint x=\"834\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions> ``` /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions>","title":"Editing this guide"},{"location":"about/editing_this_guide/#editing-this-guide","text":"This guide uses MkDocs + Material for MkDocs . This page contains the reference for the material theme. Install extra MkDocs plugins in build.gradle + mkdocs.yml. If you are using IntelliJ for editing, it is recommended to install the plugin Grazie Professional for spell checking.","title":"Editing this guide"},{"location":"about/editing_this_guide/#editing","text":"The first header should be # . Inserted images with Markdown, not HTML: ![description](url){width=\"600px\"} . Set the with to 600px or 300px, depending on how big or small the image is footnotes syntax The target=_blank attribute and an icon for external links gets automatically added to links. The following symbols must be escaped: $ is &#36; because it collides with inline Latex blocks.","title":"Editing"},{"location":"about/editing_this_guide/#extensions","text":"Besides the Material extensions, the project used the following Pymdown extensions: pymdownx.betterem : different emphasis handling pymdownx.inlinehilite : inline code highlighting; example: #!js var test = 0; pymdownx.magiclink : linkafies URLs pymdownx.smartsymbols : inserts commonly used Unicode characters via ASCII representations. pymdownx.superfences : extension to Markdown fences pymdownx.details : collapsible elements pymdownx.highlight pymdownx.snippets : include other Markdown or HTML snippets into the current Markdown file pymdownx.keys : simplifies inserting key inputs; example: Ctrl + Alt + Del pymdownx.caret : superscript text via caret pymdownx.mark : enables marking words pymdownx.tilde : subscript text via tilde pymdownx.emoji : support for custom Emojis. Some example icons are in MPS Icons . pymdownx.tasklist : support for lists with checkboxes mk_in_html : support for markdown in HTML pymdownx.magiclink : additional link related features","title":"Extensions"},{"location":"about/editing_this_guide/#macros","text":"The plugin mkdocs-macros-plugin is activated. You can add variables to the extra section of mkdocs.yml (example: mps_latest ) and use the available macros: contribution_by(github_username) question_by(github_username) answer_by(github_username) mps_url(identifier) image_popup() iets3() mbeddr() mbeddr_platform() mps_extensions() mps Look through main.py to see how they are implemented. The identifier can start with one of the following special identifiers: @openapi @mps @baselang @mpsutil @itemis @mbeddr @iets3 The special identifiers get translated to the corresponding package names. Only the last part of the identifier has to be the correct name. The identifier can reference classes, interfaces, concept, and interface declarations in baselanguage, mps-extensions, mbeddr, and iets3. The rest of the identifier only helps to find the correct node and doesn\u2019t have to be exact. Example: @mps.ClassConcept will find jetbrains.mps.baseLanguage.structure.ClassConcept . When the wrong node is selected, enter more parts of the full qualified name of the node.","title":"Macros"},{"location":"about/editing_this_guide/#diagrams","text":"Kroki enables support for diagrams ( examples ). It supports the following diagrams: BlockDiag BlockDiag (simple block diagrams) SeqDiag (simple sequence diagrams) ActDiag (simple activity diagrams) NwDiag (simple network diagrams) PacketDiag (packet header diagrams) RackDiag (rack diagrams) BPMN Bytefield C4 (with PlantUML) Ditaa Erd Excalidraw GraphViz Mermaid Nomnoml Pikchr PlantUML Structurizr SvgBob UMLet Vega Vega-Lite WaveDrom They can be embedded by creating a code block and the text kroki-[diagramtype] . The following sections contain ideas for diagrams.","title":"Diagrams"},{"location":"about/editing_this_guide/#blockdiag","text":"","title":"blockdiag"},{"location":"about/editing_this_guide/#diagram-1","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 blockdiag { orientation = portrait R -> A R -> B B -> C C -> E B -> D D -> F F -> E D -> G A <- C B -> D }","title":"Diagram 1"},{"location":"about/editing_this_guide/#diagram-2","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 blockdiag { default_node_color = 'yellow' if [shape=\"roundedbox\", color='white'] condition [numbered = 1, shape=\"roundedbox\", description=\"the condition\"] true_block [numbered = 1, shape=\"roundedbox\"] false_block [numbered = 0-1, shape=\"roundedbox\"] if -> condition if -> true_block if -> false_block }","title":"Diagram 2"},{"location":"about/editing_this_guide/#seqdiag","text":"Diagram Code 1 2 3 4 5 6 7 seqdiag { MPS -> Clipboard [label = \"Copy Node Reference as URL\"] Clipboard -> Browser [label = \"Paste URL\"] http_server [label=\"MPS HTTP Server\"] Browser -> http_server [label = \"Send request\"] http_server -> MPS [label = \"Open Node\"] }","title":"SeqDiag"},{"location":"about/editing_this_guide/#actdiag","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 actdiag { createConcept -> createEditor -> createNodes lane language { label = \"Language\" createConcept [label = \"Create concept\"] createEditor [label = \"Create editor\"] } lane solution { label =\"Solution\" createNodes [label = \"Create nodes\"] } }","title":"ActDiag"},{"location":"about/editing_this_guide/#graphviz","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 digraph finite_state_machine { rankdir=LR; planning -> analysis analysis -> design design -> implementation ti [label=\"testing & integration\"] implementation -> ti ti -> maintenance maintenance -> planning }","title":"Graphviz"},{"location":"about/editing_this_guide/#ditaa","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 +--------+ | | | User | | | +--------+ ^ request | v +-------------+ | | | Kroki | | |---+ +-------------+ | ^ ^ | inflate | | | v +---------+ +-------------+ | | | Ditaa | | |----+ +-------------+ | ^ | process | | +-------+","title":"Ditaa"},{"location":"about/editing_this_guide/#mermaidjs","text":"Diagram Code 1 2 3 4 5 graph TD; A-->B; A-->C; B-->D; C-->D;","title":"mermaid.js"},{"location":"about/editing_this_guide/#nomnoml","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [Pirate|eyeCount: Int|raid();pillage()| [beard]--[parrot] [beard]-:>[foul mouth] ] [<table>mischief | bawl | sing || yell | drink] [<abstract>Marauder]<:--[Pirate] [Pirate]- 0..7[mischief] [jollyness]->[Pirate] [jollyness]->[rum] [jollyness]->[singing] [Pirate]-> *[rum|tastiness: Int|swig()] [Pirate]->[singing] [singing]<->[rum] [<start>st]->[<state>plunder] [plunder]->[<choice>more loot] [more loot]->[st] [more loot] no ->[<end>e] [<actor>Sailor] - [<usecase>shiver me;timbers]","title":"nomnoml"},{"location":"about/editing_this_guide/#plantuml","text":"","title":"plantUML"},{"location":"about/editing_this_guide/#diagram-1_1","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml","title":"Diagram 1"},{"location":"about/editing_this_guide/#diagram-2_1","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs","title":"Diagram 2"},{"location":"about/editing_this_guide/#bpmn","text":"Diagram Code ``` <?xml version=\u201d1.0\u201d encoding=\u201dUTF-8\u201d?> OrderReceivedEvent _6-652 _6-674 CalmCustomerTask _6-463 _6-514 _6-565 _6-616 _6-630 _6-630 _6-691 _6-693 _6-691 _6-746 _6-748 _6-748 _6-746 _6-693 _6-632 _6-632 _6-634 _6-634 _6-636 _6-636 _6-125 _6-125 _6-178 _6-178 _6-420 _6-420 _6-430 _6-422 _6-424 _6-422 _6-428 _6-424 _6-426 _6-426 _6-430 _6-428 _6-434 _6-434 _6-436 _6-436 <di:waypoint x=\u201d834\u201d y=\u201d111\u201d### plantUML","title":"BPMN"},{"location":"about/editing_this_guide/#diagram-1_2","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 @startuml left to right direction skinparam packageStyle rectangle skinparam monochrome true actor customer actor clerk rectangle checkout { customer -- (checkout) (checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk } @enduml","title":"Diagram 1"},{"location":"about/editing_this_guide/#diagram-2_2","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @startwbs skinparam monochrome true * Business Process Modelling WBS ** Launch the project *** Complete Stakeholder Research *** Initial Implementation Plan ** Design phase *** Model of AsIs Processes Completed **** Model of AsIs Processes Completed1 **** Model of AsIs Processes Completed2 *** Measure AsIs performance metrics *** Identify Quick Wins ** Complete innovate phase @endwbs","title":"Diagram 2"},{"location":"about/editing_this_guide/#bpmn_1","text":"Diagram Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <semantic:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:semantic=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" id=\"_1275940932088\" targetNamespace=\"http://www.trisotech.com/definitions/_1275940932088\" exporter=\"Camunda Modeler\" exporterVersion=\"1.16.0\"> <semantic:message id=\"_1275940932310\" /> <semantic:message id=\"_1275940932433\" /> <semantic:process id=\"_6-1\" isExecutable=\"false\"> <semantic:laneSet id=\"ls_6-438\"> <semantic:lane id=\"_6-650\" name=\"clerk\"> <semantic:flowNodeRef>OrderReceivedEvent</semantic:flowNodeRef> <semantic:flowNodeRef>_6-652</semantic:flowNodeRef> <semantic:flowNodeRef>_6-674</semantic:flowNodeRef> <semantic:flowNodeRef>CalmCustomerTask</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-446\" name=\"pizza chef\"> <semantic:flowNodeRef>_6-463</semantic:flowNodeRef> </semantic:lane> <semantic:lane id=\"_6-448\" name=\"delivery boy\"> <semantic:flowNodeRef>_6-514</semantic:flowNodeRef> <semantic:flowNodeRef>_6-565</semantic:flowNodeRef> <semantic:flowNodeRef>_6-616</semantic:flowNodeRef> </semantic:lane> </semantic:laneSet> <semantic:startEvent id=\"OrderReceivedEvent\" name=\"Order received\"> <semantic:outgoing>_6-630</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932310\" /> </semantic:startEvent> <semantic:parallelGateway id=\"_6-652\" name=\"\"> <semantic:incoming>_6-630</semantic:incoming> <semantic:outgoing>_6-691</semantic:outgoing> <semantic:outgoing>_6-693</semantic:outgoing> </semantic:parallelGateway> <semantic:intermediateCatchEvent id=\"_6-674\" name=\"\u201ewhere is my pizza?\u201c\"> <semantic:incoming>_6-691</semantic:incoming> <semantic:incoming>_6-746</semantic:incoming> <semantic:outgoing>_6-748</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932433\" /> </semantic:intermediateCatchEvent> <semantic:task id=\"CalmCustomerTask\" name=\"Calm customer\"> <semantic:incoming>_6-748</semantic:incoming> <semantic:outgoing>_6-746</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-463\" name=\"Bake the pizza\"> <semantic:incoming>_6-693</semantic:incoming> <semantic:outgoing>_6-632</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-514\" name=\"Deliver the pizza\"> <semantic:incoming>_6-632</semantic:incoming> <semantic:outgoing>_6-634</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-565\" name=\"Receive payment\"> <semantic:incoming>_6-634</semantic:incoming> <semantic:outgoing>_6-636</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-616\" name=\"\"> <semantic:incoming>_6-636</semantic:incoming> <semantic:terminateEventDefinition /> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-630\" name=\"\" sourceRef=\"OrderReceivedEvent\" targetRef=\"_6-652\" /> <semantic:sequenceFlow id=\"_6-632\" name=\"\" sourceRef=\"_6-463\" targetRef=\"_6-514\" /> <semantic:sequenceFlow id=\"_6-634\" name=\"\" sourceRef=\"_6-514\" targetRef=\"_6-565\" /> <semantic:sequenceFlow id=\"_6-636\" name=\"\" sourceRef=\"_6-565\" targetRef=\"_6-616\" /> <semantic:sequenceFlow id=\"_6-691\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-693\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-463\" /> <semantic:sequenceFlow id=\"_6-746\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-674\" /> <semantic:sequenceFlow id=\"_6-748\" name=\"\" sourceRef=\"_6-674\" targetRef=\"CalmCustomerTask\" /> </semantic:process> <semantic:message id=\"_1275940932198\" /> <semantic:process id=\"_6-2\" isExecutable=\"false\"> <semantic:startEvent id=\"_6-61\" name=\"Hungry for pizza\"> <semantic:outgoing>_6-125</semantic:outgoing> </semantic:startEvent> <semantic:task id=\"SelectAPizzaTask\" name=\"Select a pizza\"> <semantic:incoming>_6-125</semantic:incoming> <semantic:outgoing>_6-178</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-127\" name=\"Order a pizza\"> <semantic:incoming>_6-178</semantic:incoming> <semantic:outgoing>_6-420</semantic:outgoing> </semantic:task> <semantic:eventBasedGateway id=\"_6-180\" name=\"\"> <semantic:incoming>_6-420</semantic:incoming> <semantic:incoming>_6-430</semantic:incoming> <semantic:outgoing>_6-422</semantic:outgoing> <semantic:outgoing>_6-424</semantic:outgoing> </semantic:eventBasedGateway> <semantic:intermediateCatchEvent id=\"_6-202\" name=\"pizza received\"> <semantic:incoming>_6-422</semantic:incoming> <semantic:outgoing>_6-428</semantic:outgoing> <semantic:messageEventDefinition messageRef=\"_1275940932198\" /> </semantic:intermediateCatchEvent> <semantic:intermediateCatchEvent id=\"_6-219\" name=\"60 minutes\"> <semantic:incoming>_6-424</semantic:incoming> <semantic:outgoing>_6-426</semantic:outgoing> <semantic:timerEventDefinition> <semantic:timeDate /> </semantic:timerEventDefinition> </semantic:intermediateCatchEvent> <semantic:task id=\"_6-236\" name=\"Ask for the pizza\"> <semantic:incoming>_6-426</semantic:incoming> <semantic:outgoing>_6-430</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-304\" name=\"Pay the pizza\"> <semantic:incoming>_6-428</semantic:incoming> <semantic:outgoing>_6-434</semantic:outgoing> </semantic:task> <semantic:task id=\"_6-355\" name=\"Eat the pizza\"> <semantic:incoming>_6-434</semantic:incoming> <semantic:outgoing>_6-436</semantic:outgoing> </semantic:task> <semantic:endEvent id=\"_6-406\" name=\"Hunger satisfied\"> <semantic:incoming>_6-436</semantic:incoming> </semantic:endEvent> <semantic:sequenceFlow id=\"_6-125\" name=\"\" sourceRef=\"_6-61\" targetRef=\"SelectAPizzaTask\" /> <semantic:sequenceFlow id=\"_6-178\" name=\"\" sourceRef=\"SelectAPizzaTask\" targetRef=\"_6-127\" /> <semantic:sequenceFlow id=\"_6-420\" name=\"\" sourceRef=\"_6-127\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-422\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-202\" /> <semantic:sequenceFlow id=\"_6-424\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-219\" /> <semantic:sequenceFlow id=\"_6-426\" name=\"\" sourceRef=\"_6-219\" targetRef=\"_6-236\" /> <semantic:sequenceFlow id=\"_6-428\" name=\"\" sourceRef=\"_6-202\" targetRef=\"_6-304\" /> <semantic:sequenceFlow id=\"_6-430\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-180\" /> <semantic:sequenceFlow id=\"_6-434\" name=\"\" sourceRef=\"_6-304\" targetRef=\"_6-355\" /> <semantic:sequenceFlow id=\"_6-436\" name=\"\" sourceRef=\"_6-355\" targetRef=\"_6-406\" /> </semantic:process> <semantic:collaboration id=\"C1275940932557\"> <semantic:participant id=\"_6-53\" name=\"Pizza Customer\" processRef=\"_6-2\" /> <semantic:participant id=\"_6-438\" name=\"Pizza vendor\" processRef=\"_6-1\" /> <semantic:messageFlow id=\"_6-638\" name=\"pizza order\" sourceRef=\"_6-127\" targetRef=\"OrderReceivedEvent\" /> <semantic:messageFlow id=\"_6-642\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-674\" /> <semantic:messageFlow id=\"_6-646\" name=\"receipt\" sourceRef=\"_6-565\" targetRef=\"_6-304\" /> <semantic:messageFlow id=\"_6-648\" name=\"money\" sourceRef=\"_6-304\" targetRef=\"_6-565\" /> <semantic:messageFlow id=\"_6-640\" name=\"pizza\" sourceRef=\"_6-514\" targetRef=\"_6-202\" /> <semantic:messageFlow id=\"_6-750\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-236\" /> </semantic:collaboration> <bpmndi:BPMNDiagram id=\"Trisotech.Visio-_6\" name=\"Untitled Diagram\" documentation=\"\" resolution=\"96.00000267028808\"> <bpmndi:BPMNPlane bpmnElement=\"C1275940932557\"> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-53\" bpmnElement=\"_6-53\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"12\" width=\"1044\" height=\"294\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6-438\" bpmnElement=\"_6-438\" isHorizontal=\"true\"> <dc:Bounds x=\"12\" y=\"372\" width=\"905\" height=\"337\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-650\" bpmnElement=\"_6-650\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"372\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-446\" bpmnElement=\"_6-446\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"486\" width=\"875\" height=\"114\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-448\" bpmnElement=\"_6-448\" isHorizontal=\"true\"> <dc:Bounds x=\"42\" y=\"600\" width=\"875\" height=\"109\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_OrderReceivedEvent\" bpmnElement=\"OrderReceivedEvent\"> <dc:Bounds x=\"79\" y=\"405\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-652\" bpmnElement=\"_6-652\"> <dc:Bounds x=\"140\" y=\"399\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-674\" bpmnElement=\"_6-674\"> <dc:Bounds x=\"218\" y=\"404\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6_CalmCustomerTask\" bpmnElement=\"CalmCustomerTask\"> <dc:Bounds x=\"286\" y=\"386\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-463\" bpmnElement=\"_6-463\"> <dc:Bounds x=\"252\" y=\"521\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-514\" bpmnElement=\"_6-514\"> <dc:Bounds x=\"464\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-565\" bpmnElement=\"_6-565\"> <dc:Bounds x=\"603\" y=\"629\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-616\" bpmnElement=\"_6-616\"> <dc:Bounds x=\"722\" y=\"647\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-61\" bpmnElement=\"_6-61\"> <dc:Bounds x=\"66\" y=\"96\" width=\"30\" height=\"30\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-74\" bpmnElement=\"SelectAPizzaTask\"> <dc:Bounds x=\"145\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-127\" bpmnElement=\"_6-127\"> <dc:Bounds x=\"265\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-180\" bpmnElement=\"_6-180\"> <dc:Bounds x=\"378\" y=\"90\" width=\"42\" height=\"42\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-202\" bpmnElement=\"_6-202\"> <dc:Bounds x=\"647\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-219\" bpmnElement=\"_6-219\"> <dc:Bounds x=\"448\" y=\"184\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-236\" bpmnElement=\"_6-236\"> <dc:Bounds x=\"517\" y=\"166\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-304\" bpmnElement=\"_6-304\"> <dc:Bounds x=\"726\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-355\" bpmnElement=\"_6-355\"> <dc:Bounds x=\"834\" y=\"77\" width=\"83\" height=\"68\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-406\" bpmnElement=\"_6-406\"> <dc:Bounds x=\"956\" y=\"95\" width=\"32\" height=\"32\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNShape> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-640\" bpmnElement=\"_6-640\"> <di:waypoint x=\"506\" y=\"629\" /> <di:waypoint x=\"506\" y=\"384\" /> <di:waypoint x=\"663\" y=\"384\" /> <di:waypoint x=\"663\" y=\"127\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-630\" bpmnElement=\"_6-630\"> <di:waypoint x=\"109\" y=\"420\" /> <di:waypoint x=\"140\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-691\" bpmnElement=\"_6-691\"> <di:waypoint x=\"182\" y=\"420\" /> <di:waypoint x=\"200\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-648\" bpmnElement=\"_6-648\"> <di:waypoint x=\"754\" y=\"145\" /> <di:waypoint x=\"754\" y=\"408\" /> <di:waypoint x=\"630\" y=\"408\" /> <di:waypoint x=\"631\" y=\"629\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-422\" bpmnElement=\"_6-422\"> <di:waypoint x=\"420\" y=\"111\" /> <di:waypoint x=\"438\" y=\"111\" /> <di:waypoint x=\"647\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-646\" bpmnElement=\"_6-646\" messageVisibleKind=\"non_initiating\"> <di:waypoint x=\"658\" y=\"629\" /> <di:waypoint x=\"658\" y=\"432\" /> <di:waypoint x=\"782\" y=\"432\" /> <di:waypoint x=\"782\" y=\"145\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-428\" bpmnElement=\"_6-428\"> <di:waypoint x=\"679\" y=\"111\" /> <di:waypoint x=\"726\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-748\" bpmnElement=\"_6-748\"> <di:waypoint x=\"250\" y=\"420\" /> <di:waypoint x=\"268\" y=\"420\" /> <di:waypoint x=\"286\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-420\" bpmnElement=\"_6-420\"> <di:waypoint x=\"348\" y=\"111\" /> <di:waypoint x=\"366\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-636\" bpmnElement=\"_6-636\"> <di:waypoint x=\"686\" y=\"663\" /> <di:waypoint x=\"704\" y=\"663\" /> <di:waypoint x=\"722\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-750\" bpmnElement=\"_6-750\"> <di:waypoint x=\"328\" y=\"386\" /> <di:waypoint x=\"328\" y=\"348\" /> <di:waypoint x=\"572\" y=\"348\" /> <di:waypoint x=\"572\" y=\"234\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-436\" bpmnElement=\"_6-436\"> <di:waypoint x=\"918\" y=\"111\" /> <di:waypoint x=\"936\" y=\"111\" /> <di:waypoint x=\"956\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-632\" bpmnElement=\"_6-632\"> <di:waypoint x=\"335\" y=\"555\" /> <di:waypoint x=\"353\" y=\"555\" /> <di:waypoint x=\"353\" y=\"663\" /> <di:waypoint x=\"464\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-634\" bpmnElement=\"_6-634\"> <di:waypoint x=\"548\" y=\"663\" /> <di:waypoint x=\"603\" y=\"663\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-125\" bpmnElement=\"_6-125\"> <di:waypoint x=\"96\" y=\"111\" /> <di:waypoint x=\"114\" y=\"111\" /> <di:waypoint x=\"145\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-430\" bpmnElement=\"_6-430\"> <di:waypoint x=\"600\" y=\"200\" /> <di:waypoint x=\"618\" y=\"200\" /> <di:waypoint x=\"618\" y=\"252\" /> <di:waypoint x=\"576\" y=\"252\" /> <di:waypoint x=\"549\" y=\"252\" /> <di:waypoint x=\"360\" y=\"252\" /> <di:waypoint x=\"360\" y=\"111\" /> <di:waypoint x=\"378\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-642\" bpmnElement=\"_6-642\"> <di:waypoint x=\"545\" y=\"234\" /> <di:waypoint x=\"545\" y=\"324\" /> <di:waypoint x=\"234\" y=\"324\" /> <di:waypoint x=\"234\" y=\"404\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-424\" bpmnElement=\"_6-424\"> <di:waypoint x=\"399\" y=\"132\" /> <di:waypoint x=\"399\" y=\"200\" /> <di:waypoint x=\"448\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-638\" bpmnElement=\"_6-638\"> <di:waypoint x=\"306\" y=\"145\" /> <di:waypoint x=\"306\" y=\"252\" /> <di:waypoint x=\"94\" y=\"252\" /> <di:waypoint x=\"94\" y=\"405\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-426\" bpmnElement=\"_6-426\"> <di:waypoint x=\"480\" y=\"200\" /> <di:waypoint x=\"498\" y=\"200\" /> <di:waypoint x=\"517\" y=\"200\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-693\" bpmnElement=\"_6-693\"> <di:waypoint x=\"161\" y=\"441\" /> <di:waypoint x=\"161\" y=\"556\" /> <di:waypoint x=\"252\" y=\"555\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-178\" bpmnElement=\"_6-178\"> <di:waypoint x=\"228\" y=\"111\" /> <di:waypoint x=\"265\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-746\" bpmnElement=\"_6-746\"> <di:waypoint x=\"370\" y=\"420\" /> <di:waypoint x=\"386\" y=\"420\" /> <di:waypoint x=\"386\" y=\"474\" /> <di:waypoint x=\"191\" y=\"474\" /> <di:waypoint x=\"191\" y=\"420\" /> <di:waypoint x=\"218\" y=\"420\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-434\" bpmnElement=\"_6-434\"> <di:waypoint x=\"810\" y=\"111\" /> <di:waypoint x=\"834\" y=\"111\" /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions> ``` /> <bpmndi:BPMNLabel /> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </semantic:definitions>","title":"BPMN"},{"location":"about/original_authors/","text":"Original authors \u00b6 This site includes documents and contributions from different sites. If you have contributed content and aren\u2019t listed on this page, please add yourself. This repository includes knowledge of the following people (and probably more) in alphabetical order: @abstraktor ( internal knowledge base ) @AlexeiQ ( mbeddr wiki , internal knowledge base ) @arimer ( internal knowledge base ) @coolya ( mbeddr wiki , internal knowledge base ) @dbinkele (internal knowledge base) @DomenikP ( mbeddr wiki ) @enikao ( mbeddr wiki ) @hbaechmann (internal knowledge base) @itnef (internal project) @JanMosigItemis ( mbeddr wiki ) @joao-silveira ( answered questions ) @jonaskraemer (internal knowledge base) @joswarmer ( mbeddr wiki ) @kbirken ( mbeddr wiki ) @krinara86 ( mbeddr wiki ) @markusvoelter ( mbeddr wiki ) @sergej-koscejev ( mbeddr wiki , answered questions ) @slisson ( answers to many questions , internal knowledge base ) @szabta89 ( mbeddr wiki ) @till-f ( mbeddr wiki ) @wsafonov (internal knowledge base, answered questions)","title":"Original authors"},{"location":"about/original_authors/#original-authors","text":"This site includes documents and contributions from different sites. If you have contributed content and aren\u2019t listed on this page, please add yourself. This repository includes knowledge of the following people (and probably more) in alphabetical order: @abstraktor ( internal knowledge base ) @AlexeiQ ( mbeddr wiki , internal knowledge base ) @arimer ( internal knowledge base ) @coolya ( mbeddr wiki , internal knowledge base ) @dbinkele (internal knowledge base) @DomenikP ( mbeddr wiki ) @enikao ( mbeddr wiki ) @hbaechmann (internal knowledge base) @itnef (internal project) @JanMosigItemis ( mbeddr wiki ) @joao-silveira ( answered questions ) @jonaskraemer (internal knowledge base) @joswarmer ( mbeddr wiki ) @kbirken ( mbeddr wiki ) @krinara86 ( mbeddr wiki ) @markusvoelter ( mbeddr wiki ) @sergej-koscejev ( mbeddr wiki , answered questions ) @slisson ( answers to many questions , internal knowledge base ) @szabta89 ( mbeddr wiki ) @till-f ( mbeddr wiki ) @wsafonov (internal knowledge base, answered questions)","title":"Original authors"},{"location":"aspects/actions/","text":"Action aspect \u00b6 The action aspect defines node factories and copy/paste related handlers. Are node factories used when calling new node ? No. More information can be found in Editor Actions | MPS . Where can you find all key mappings for the editor? Windows and mac shortcuts for editor actions can be found in MPSEditorActions.xml . Why is a custom action map not executed on a CellModel_Collection ? In MPS I have the possiblity to reference an action map from a editor collection cell. However it seems like my defined actions are never executed when the editor is used. Why is this so and how to fix it? Reason for the Problem In general the applied actions should be invoked and executed. However depending on the content of the collection cells, MPS might generate some default actions which will override your custom actions. Example You have a read only model access cell inside the collection cell: In this case the internal MPS generator for CellModel_ReadOnlyModelAccessor will automatically generate and register some default actions like delete/backspace which in the end will prohibit your custom action to be applied. Solution You can use the cell explorer ( Language Debug \u2192 Show Cell in Explorer ) to see which actions are defined for a cell. Deactivate the automatically applied action with the help of custom editor cells( CellModel_CustomFactory ). You can use CellModel_CustomFactory to wrap the cells in your collection which generate unwanted actions and deactivate them. contributed by: @arimer","title":"Actions"},{"location":"aspects/actions/#action-aspect","text":"The action aspect defines node factories and copy/paste related handlers. Are node factories used when calling new node ? No. More information can be found in Editor Actions | MPS . Where can you find all key mappings for the editor? Windows and mac shortcuts for editor actions can be found in MPSEditorActions.xml . Why is a custom action map not executed on a CellModel_Collection ? In MPS I have the possiblity to reference an action map from a editor collection cell. However it seems like my defined actions are never executed when the editor is used. Why is this so and how to fix it? Reason for the Problem In general the applied actions should be invoked and executed. However depending on the content of the collection cells, MPS might generate some default actions which will override your custom actions. Example You have a read only model access cell inside the collection cell: In this case the internal MPS generator for CellModel_ReadOnlyModelAccessor will automatically generate and register some default actions like delete/backspace which in the end will prohibit your custom action to be applied. Solution You can use the cell explorer ( Language Debug \u2192 Show Cell in Explorer ) to see which actions are defined for a cell. Deactivate the automatically applied action with the help of custom editor cells( CellModel_CustomFactory ). You can use CellModel_CustomFactory to wrap the cells in your collection which generate unwanted actions and deactivate them. contributed by: @arimer","title":"Action aspect"},{"location":"aspects/behavior/","text":"Behavior aspect \u00b6 The behavior aspect can be use for defining methods for the concepts of the language. General \u00b6 Can you use asynchronous code in behaviour methods such as calling external tools? Be careful when doing so. Make sure to not mix concurrent locking aspects such as write and read actions with behaviour code. It should always be assumed that you have the correct lock in this methods. Move the code concerning the concurrent access for example into a background task. More information can be found in Progress indicators | MPS . Where can you save temporary information about nodes? Consider saving temporay data about nodes in annotations and user objects ( node/.putUserObject , node/.getUserObject ) instead of introducing properties. You can store and access Java-Objects in SNode::putUserObject() as key-value pairs)where you normally could not access them in the MPS context, e.g. storing it as node member and access it in an editor, a checking-rule or anything else. This approach is difficult to trace and maintain and should only be used in exceptional cases. For the generator consult the section Transferring User Data of the generator documentation . How to mark a constructor-created child optional? (created by a light quotation) Example: Solutions: Initialize it with null in the light quotation. Create it without light quotation. Allow the child to be optional ( [0..1] ). How can you delete a child node from a node where the child\u2019s concept no longer exists and the parent node\u2019s child link is no longer defined? 1 2 3 node . getChildren (). where ( \u2026 ). foreach { it => it . delete } Why does the virtual method have isVirtual=false ? Given there is a virtual behavior method getPresentation . When I override getPresentation in a subconcept then I see it displays the overriding method to be virtual. Yet, I see that methodDeclNode.isVirtual is null . Why is that? Note that isVirtual and isVirtual() on a method have different semantics. 1 2 3 public boolean isVirtual () { return this . isVirtual || this . overridenMethod != null ; } The editor shows that a method is virtual when isVirtual() is true. As a result, overriding methods of virtual methods are not necessarily having isVirtual=true , but will still display virtual . The rationale behind may be that if a method is overriding another one, both of them must be virtual. This is needed so that the runtime will find out which of the two implementations to call. So we may read the isVirtual more precisely as \u201eis explicitly virtual\u201d, and isVirtual() as \u201cis effectively virtual\u201d. contributed by: @abstraktor Initialization \u00b6 How do you initialize a node? How can I ensure that all created node will have a non-null HTMLDescription ? Using a node factory The node factory will be called when The code completion menu is invoked to create such a node or to replace another one. add new initialized , set new initialized , or replace new initialized is called. Such a node is created as a root from the context menu in the project view. The node factory is not called when using quotations <Car()> . viewing the node in the editor. adding it as a root with model.add root(<Car()>) . adding it as a root with model.add new root(Car) . Using a behavior constructor Using a behavior constructor will only partially achieve this. Note that it will only be called when creating nodes with add new initialized() , set new initialized() and similar methods from j.m.lang.actions and j.m.lang.smodel . creating a node with new node<Car>() . Using a quotation will not call this constructor. Using a property getter You could use an initialized variable and use a combination of property getters and setters. This would work only for properties though, not for children or references, and requires quotations to also set the initialized value if trying to override the default. Furthermore, your quotations will still be marked. Usage Can you access the parent in the constructor? No, it doesn\u2019t work because the node is not attached yet ( Concept constructors | MPS ). Use for example a node factory to access the parent instead. How can you query the context in a node constructor? Does anyone know a way to find the contextExpression from the node constructor? Use a node factories instead of constructors and make use of the enclosingNode parameter. Constructors are invoked always when creating a node. Node factories are invoked only by the editor and by the new initialized ... expression. Note: Node factories are invoked in the inverse order of constructors. MPS will first invoke the specific node factory and the more generic ones if the exist. Is there a way to call the constructor of a super concept inside the constructor of a subconcept? Something like: java constructor { superConcept() } concept / MyConcept / . new initialized instance () provides this behaviour. Bugs/missing features \u00b6 How can you use generic return types? 1 No, it is not possible ( MPS -22502 ). Can you use a more specific return type while overriding a behavior method? No, it is not possible ( MPS -27720 ). Can you use variable arguments (varArgs) in behavior methods? No, it is not possible ( MPS -31056 ). Can you enter a throws clause in behavior methods? No, it is not possible ( MPS -22306 ). MPS forum - Generics for return type of behavior method \u21a9","title":"Behavior"},{"location":"aspects/behavior/#behavior-aspect","text":"The behavior aspect can be use for defining methods for the concepts of the language.","title":"Behavior aspect"},{"location":"aspects/behavior/#general","text":"Can you use asynchronous code in behaviour methods such as calling external tools? Be careful when doing so. Make sure to not mix concurrent locking aspects such as write and read actions with behaviour code. It should always be assumed that you have the correct lock in this methods. Move the code concerning the concurrent access for example into a background task. More information can be found in Progress indicators | MPS . Where can you save temporary information about nodes? Consider saving temporay data about nodes in annotations and user objects ( node/.putUserObject , node/.getUserObject ) instead of introducing properties. You can store and access Java-Objects in SNode::putUserObject() as key-value pairs)where you normally could not access them in the MPS context, e.g. storing it as node member and access it in an editor, a checking-rule or anything else. This approach is difficult to trace and maintain and should only be used in exceptional cases. For the generator consult the section Transferring User Data of the generator documentation . How to mark a constructor-created child optional? (created by a light quotation) Example: Solutions: Initialize it with null in the light quotation. Create it without light quotation. Allow the child to be optional ( [0..1] ). How can you delete a child node from a node where the child\u2019s concept no longer exists and the parent node\u2019s child link is no longer defined? 1 2 3 node . getChildren (). where ( \u2026 ). foreach { it => it . delete } Why does the virtual method have isVirtual=false ? Given there is a virtual behavior method getPresentation . When I override getPresentation in a subconcept then I see it displays the overriding method to be virtual. Yet, I see that methodDeclNode.isVirtual is null . Why is that? Note that isVirtual and isVirtual() on a method have different semantics. 1 2 3 public boolean isVirtual () { return this . isVirtual || this . overridenMethod != null ; } The editor shows that a method is virtual when isVirtual() is true. As a result, overriding methods of virtual methods are not necessarily having isVirtual=true , but will still display virtual . The rationale behind may be that if a method is overriding another one, both of them must be virtual. This is needed so that the runtime will find out which of the two implementations to call. So we may read the isVirtual more precisely as \u201eis explicitly virtual\u201d, and isVirtual() as \u201cis effectively virtual\u201d. contributed by: @abstraktor","title":"General"},{"location":"aspects/behavior/#initialization","text":"How do you initialize a node? How can I ensure that all created node will have a non-null HTMLDescription ? Using a node factory The node factory will be called when The code completion menu is invoked to create such a node or to replace another one. add new initialized , set new initialized , or replace new initialized is called. Such a node is created as a root from the context menu in the project view. The node factory is not called when using quotations <Car()> . viewing the node in the editor. adding it as a root with model.add root(<Car()>) . adding it as a root with model.add new root(Car) . Using a behavior constructor Using a behavior constructor will only partially achieve this. Note that it will only be called when creating nodes with add new initialized() , set new initialized() and similar methods from j.m.lang.actions and j.m.lang.smodel . creating a node with new node<Car>() . Using a quotation will not call this constructor. Using a property getter You could use an initialized variable and use a combination of property getters and setters. This would work only for properties though, not for children or references, and requires quotations to also set the initialized value if trying to override the default. Furthermore, your quotations will still be marked. Usage Can you access the parent in the constructor? No, it doesn\u2019t work because the node is not attached yet ( Concept constructors | MPS ). Use for example a node factory to access the parent instead. How can you query the context in a node constructor? Does anyone know a way to find the contextExpression from the node constructor? Use a node factories instead of constructors and make use of the enclosingNode parameter. Constructors are invoked always when creating a node. Node factories are invoked only by the editor and by the new initialized ... expression. Note: Node factories are invoked in the inverse order of constructors. MPS will first invoke the specific node factory and the more generic ones if the exist. Is there a way to call the constructor of a super concept inside the constructor of a subconcept? Something like: java constructor { superConcept() } concept / MyConcept / . new initialized instance () provides this behaviour.","title":"Initialization"},{"location":"aspects/behavior/#bugsmissing-features","text":"How can you use generic return types? 1 No, it is not possible ( MPS -22502 ). Can you use a more specific return type while overriding a behavior method? No, it is not possible ( MPS -27720 ). Can you use variable arguments (varArgs) in behavior methods? No, it is not possible ( MPS -31056 ). Can you enter a throws clause in behavior methods? No, it is not possible ( MPS -22306 ). MPS forum - Generics for return type of behavior method \u21a9","title":"Bugs/missing features"},{"location":"aspects/constraints/","text":"Constraints aspect \u00b6 The constraints aspect defines constraints for the concepts of the language. General \u00b6 How do you hide inapplicable operands in dot expressions? Specific Languages blog: Dot expressions: hiding inapplicable operands Are there any useful helper classes? ModelConstraints : This class can be used to calculate the constraint/scope of a specific concept/node programmatically. Properties \u00b6 How can you set default values for properties? Use the language com.mbeddr.mpsutil.propertydefault from mbeddr platform . The property value isn\u2019t valid. Specific Languages Blog: Invalid property values References \u00b6 How can you emulate references? Specific Languages blog: Pseudo-references: emulating references Scopes \u00b6 What\u2019s the best way to wrap a list of nodes into a Scope ? I have a list of nodes and want to wrap them into a scope How do you do that? You\u2019re probably looking for ListScope . forResolvableElements ( sequence < node <>> elements ) . forResolvableElements creates list scopes and also implements getName(child) like forNamedElements, yet returning the resolveInfo if the node is an IResolveInfo , the name if it is an INamedConcept or else calls getPresentation () . forNamedElements I\u2019m unsure about the use-case of ListScope . forNamedElements ( sequence < node <>> elements ) , but it behaves unexpected in some cases: Note that elements with a blank name are not part of the scope created by ListScope.forNamedElements(sequence<node<>> elements) . They\u2019ll get silently omitted. Note that elements that are not an instance of INamedConcept , will make forNamedElements throw an exception. contributed by: @abstraktor How can you combine scopes? Use the class CompositeScope . What\u2019s the difference between parent scope and super.getScope ? parent scope asks of your node or up in the hierarchy for the scope until it finds a scope provider. super.getScope will use the implementation from the super concept.","title":"Constraints"},{"location":"aspects/constraints/#constraints-aspect","text":"The constraints aspect defines constraints for the concepts of the language.","title":"Constraints aspect"},{"location":"aspects/constraints/#general","text":"How do you hide inapplicable operands in dot expressions? Specific Languages blog: Dot expressions: hiding inapplicable operands Are there any useful helper classes? ModelConstraints : This class can be used to calculate the constraint/scope of a specific concept/node programmatically.","title":"General"},{"location":"aspects/constraints/#properties","text":"How can you set default values for properties? Use the language com.mbeddr.mpsutil.propertydefault from mbeddr platform . The property value isn\u2019t valid. Specific Languages Blog: Invalid property values","title":"Properties"},{"location":"aspects/constraints/#references","text":"How can you emulate references? Specific Languages blog: Pseudo-references: emulating references","title":"References"},{"location":"aspects/constraints/#scopes","text":"What\u2019s the best way to wrap a list of nodes into a Scope ? I have a list of nodes and want to wrap them into a scope How do you do that? You\u2019re probably looking for ListScope . forResolvableElements ( sequence < node <>> elements ) . forResolvableElements creates list scopes and also implements getName(child) like forNamedElements, yet returning the resolveInfo if the node is an IResolveInfo , the name if it is an INamedConcept or else calls getPresentation () . forNamedElements I\u2019m unsure about the use-case of ListScope . forNamedElements ( sequence < node <>> elements ) , but it behaves unexpected in some cases: Note that elements with a blank name are not part of the scope created by ListScope.forNamedElements(sequence<node<>> elements) . They\u2019ll get silently omitted. Note that elements that are not an instance of INamedConcept , will make forNamedElements throw an exception. contributed by: @abstraktor How can you combine scopes? Use the class CompositeScope . What\u2019s the difference between parent scope and super.getScope ? parent scope asks of your node or up in the hierarchy for the scope until it finds a scope provider. super.getScope will use the implementation from the super concept.","title":"Scopes"},{"location":"aspects/dataflow/","text":"Dataflow aspect \u00b6 A language\u2019s data flow aspect allows you to find unreachable statements, detect unused assignments, or check whether a variable might not be initialized before it\u2019s read. \u2014 MPS documentation Where can you find good examples to understand how dataflow works? Have a look at the data flow builders of jetbrains.mps.baselanguage . You can also search for usages of DataFlowBuilderDeclaration in general.","title":"Dataflow"},{"location":"aspects/dataflow/#dataflow-aspect","text":"A language\u2019s data flow aspect allows you to find unreachable statements, detect unused assignments, or check whether a variable might not be initialized before it\u2019s read. \u2014 MPS documentation Where can you find good examples to understand how dataflow works? Have a look at the data flow builders of jetbrains.mps.baselanguage . You can also search for usages of DataFlowBuilderDeclaration in general.","title":"Dataflow aspect"},{"location":"aspects/documentation/","text":"Generator aspect \u00b6 This aspect is contributed by the language com.mbeddr.doc in mbeddr . It allows to define a documentation node which can be exported to xhtml, latex and markdown. New targets can be implemented easily. When you invoke the intention Add Reference to Documented Concept while defining a new section as part of a chapter, the documention for this concept will be shown in the Documentation tool at the bottom part of the screen. How do you export the documentation? Click make or rebuild in the menu of the model that contains the documentation. A new folder doc_gen will get generated. Should you write documentation? Is this aspect necessary? Yes, code is not always self documenting. You have the following possibilities for writing documention: JavaDoc 1 the intention Document com.mbeddr.documentation com.mbeddr.doc the short description property of concepts DocumentedNodeAnnotation How can you show the documentation of a concept in the documentation tool? Take a look at the doc.aspect project in mbeddr . There is a node attribute that can be attached on pieces of a document to bind the document to some concept or node. There is also an example project which demonstrates the usage. answered by: @szabta89 Is there a way to resolve references to embedded images (screenshots) across different documents? This is enabled by adding the document to the depends on section. Use javadoc liberally \u21a9","title":"Documentation"},{"location":"aspects/documentation/#generator-aspect","text":"This aspect is contributed by the language com.mbeddr.doc in mbeddr . It allows to define a documentation node which can be exported to xhtml, latex and markdown. New targets can be implemented easily. When you invoke the intention Add Reference to Documented Concept while defining a new section as part of a chapter, the documention for this concept will be shown in the Documentation tool at the bottom part of the screen. How do you export the documentation? Click make or rebuild in the menu of the model that contains the documentation. A new folder doc_gen will get generated. Should you write documentation? Is this aspect necessary? Yes, code is not always self documenting. You have the following possibilities for writing documention: JavaDoc 1 the intention Document com.mbeddr.documentation com.mbeddr.doc the short description property of concepts DocumentedNodeAnnotation How can you show the documentation of a concept in the documentation tool? Take a look at the doc.aspect project in mbeddr . There is a node attribute that can be attached on pieces of a document to bind the document to some concept or node. There is also an example project which demonstrates the usage. answered by: @szabta89 Is there a way to resolve references to embedded images (screenshots) across different documents? This is enabled by adding the document to the depends on section. Use javadoc liberally \u21a9","title":"Generator aspect"},{"location":"aspects/editor/","text":"Editor aspect \u00b6 The editor aspect defines the projectional editor of a concept. General \u00b6 What happens when you press F5 in the editor? Specific Languages Blog: F5 in editor How can you delete non-existing children, references, or properties from a node? Switch to the reflective editor and remove the offending parts. There is also an enhancement script that can remove properties. Menus \u00b6 Explain the different menu related terms. Menu definitions have two flavours named and +default+ and can be defined in transformation or substitute menus. Default substitutions will replace the default menu that MPS shows. Shortcut: Ctrl + Space or Cmd + Space Default menu Transformation menus define UI actions that will be shown in various locations. The menu is defined as a list of sections. Each section contains a list of menu parts for a set of locations. At runtime the menu parts and locations are used to generate the content of the completion menu. The contents of the completion menu are called menu items. Parameterized actions allow to calculate a list of elements of a specific type to be shown in the completion menu. They calculate all elements for the substitution menu and have an influence on the node creation. Moreover, they definesthe selection where the cursor should be placed. How do you find out where a substitute menu entry is coming from? Use the Menu Trace Tool window. More information can be found in Menu Trace Tool Window | MPS . What\u2019s the best way to improve the autocomplete description of concepts? As you can see in the screenshot, the concepts of both opening braces are indistinguishable. By changing the short description in the concept structure, I can change the description. What\u2019s the best format to improve these descriptions? Is this way the correct/best one to change the autocomplete concept description? asked by: @aquapp In general, it\u2019s up to the users and specific context to decide what makes sense to put to the description text. Usually it should provide additional semantic information to those not familiar with the language to help them to pick up the right concept from the code completion menu. The short description in the concept is the original, simple way to provide static description in the code completion menu. You can also add your own substitute action in the substitute menu of the concept (editor aspect) to get full control over the code completion menu and to be able to generate the text dynamically based on the context. answered by: @wsafonov Languages \u00b6 I need a specific graphical notation/feature for the editor. Have a look at the full extension list from MPS -extensions . I need hyperlinks. Use the language com.mbeddr.mpsutil.hyperlink from mbeddr platform . How do you create clickable links? Specific Languages Blog: Creating clickable URL links in the editor Specific Languages Blog: More clickable URL links How can you include non-child relations in the editor?. Use the language com.mbeddr.mpsutil.editor.querylist from MPS -extensions . Editor declaration \u00b6 Is there a disadvantage by using the indent layout instead of the indent cell mode? No. There used to be performance issues with bigger models that were fixed in MPS 2021.1 . How do you use an empty text for empty cells? Specific Languages Blog: Use empty text for empty cells Explain all cell related variables. A cell takes up a specific amount of space in the editor component (width and height). padding-left/right/top/bottom: a floating point number, which specifies the padding of a text cell, i.e. how much space will be between cell\u2019s text and cell\u2019s left and right sides, respectively. inset: representation of the borders of an element. It specifies the space that an element must leave at each of its edges. baseline: the line upon which most letters sit. ascent: the recommended distance above the baseline for singled spaced text. descent: the recommended distance below the baseline for singled spaced text. height: ascent + descent gap: space between cells in a collection. There is a left and right gap. How can you set editor hints? you can set hints via editorContext . getEditorComponent (). getUpdater () explicit hints for nodes initial hints globally; they behave similar to pushed hints. via right-click: push editor hints and select a specific one. via an EditorHintToggleAction (e.g. in action declarations) They are not visible in the push Editor hints menu. If you need the same behavior e.g. in intentions, you can use code from there (via ConceptEditorHintSettingsComponent.HintsState ) Explicit hints for nodes and hints via EditorHintToggleAction . The usage of ConceptEditorHintSettingsComponent.HintsState is not so obvious. How do you set the cursor to the first editable cell? (A) What it looks like after creation (B) Initial situation with cursor at (1) : pressing Enter leads to (C) The problem is, that in (C) the cursor is at (2) , right before a read-only cell and thus editing or moving to the next cell is not possible. I would like the cursor to jump to the first editable cell, which is at position (3) . Structure of the new node in (C) : Editor of the new node in (C) : Usually, you would set the attracts focus property of the cell, where the cursor should be positioned, to attractsFocus or FirstEditableCell . But, since ( C.2 and C.3 ) are error cells, the default behaviour is to set the cursor in front of the first error cell, which is (C.2) . Therefore, change the first part of your editor to a querylist cell (A) , which references the \u201cmember\u201d in the cell properties (B) and set the read-only property on the querylist. contributed by: @aquapp Is it possible to access the selected value of one swing component from inside another swing component? Yes: Is it possible to access the selected value of one swing component from inside another swing component? | MPS forum How can you access an icon stored in a concept? Create a new custom cell : 1 2 3 4 5 6 7 8 new AbstractCellProvider () { @Override public EditorCell createEditorCell ( EditorContext p1 ) { EditorCell_Image . createImageCell ( context , node , { EditorContext context , SNode node => GlobalIconManager . getInstance (). getIconFor ( concept ); }); } }; How can you paint the background of certain editor cells with a different color based on analysis of the model? with the help of a conditional editor by using the class NodeHighlightManager : 1 2 3 4 NodeHighlightManager highlightManager = this . editorComponent . getHighlightManager (); EditorMessageOwner messageOwner = this . editorComponent . getHighlightMessagesOwner (); (...) highlightManager . mark ((( SNode ) ref ), HighlightConstants . INSTANCES_COLOR , \"usage\" , messageOwner ); The second approach has a better performance, because the highlighter runs asynchronously and not during the editor rebuild. How can you hide a custom cell in the editor? ( show if property) Custom cells expect only a cell provider in the inspector, but don\u2019t offer the possibility to specify other attributes to set e.g. \u201cshow if\u201d. How can I hide a custom cell under a specific condition? ( MPS -33195 ) The meta model actually allows to specify the show if property and other attributes on a custom cell and the generator will generate the correct code for it. It is just not included in the editor for the inspector. You can use the reflective editor to specify the condition. Since these attributes are hidden and you need this knowledge to find them, the alternative for a better visibility is to surround the custom cell with a collection and set the show if property on the collection. contributed by: @aquapp Open API \u00b6 How can you open the inspector programmatically? 1 editorContext . openInspector () Specific Languages Blog: Opening Inspector automatically Specific Languages Blog: Opening Inspector automatically: Selection listeners Specific Languages Blog: Opening Inspector automatically: Editor extensions How can you open the editor for a node programmatically? 1 NavigationSupport . getInstance (). openNode () How can you override an arbitrary editor? Use the language de.slisson.mps.conditionalEditor from MPS -extensions . How can you get the font of an editor? 1 jetbrains . mps . nodeEditor . EditorSettings # getDefaultEditorFont () How can you subscribe to editor changes? Add a tool that subscribes to editor changes | MPS forum . How do you get the text of an EditorCell programmatically? 1 EditorCell . renderText (). getText () How can you find out if an editor cell is readonly? 1 ReadOnlyUtil . isCellsReadOnlyInEditor ( this . editorComponent , new singleton < EditorCell > ( editorCell )) How do you get an editor for a node as a swing component? 1 2 3 HeadlessEditorComponent component = new HeadlessEditorComponent ( # project . getRepository ()); component . editNode ( node ); return component ; How do you get a Project instance for an ActionEvent ? 1 2 3 4 5 button . addActionListener ( new ActionListener () { public void actionPerformed ( ActionEvent e ) { Project mpsProject = UiUtils . getMpsProjectFromActionEvent ( e ); } } How to you get the selection/ selected node in the editor? 1 editorComponent . getSelectionManager (). getSelection () / editorContext . getSelectedNode () How to get the current MPS project from within the editor? Specific Languages Blog: How to get the current MPS project from within the editor How do you find all open editors? Specific Languages Blog: Finding all open editors How do you programmatically collapse editor cells? 1 2 3 4 EditorCell_Collection . fold () / unfold () // You can check if is foldable by calling: EditorCell_Collection . isFoldable () Is there a callback/hook when an editor tab closes? When closing an editor tab, MPS removes the highlighting from all nodes in the editor. I.e., when an editor is opened again for the same root node all highlighting is gone. In my code, I want to react on this editor-close event. Is there are way to implement a callback or hook which is called when an editor tab is closed? You can register an EditorComponentCreateListener , that also receives an editorComponentDisposed event ( example ). Is there a utility class related to editor hints? Yes, there is in mbeddr : EditorHintHelper . Bugs \u00b6 Highlighting of constraint errors in inspector doesn\u2019t work. Known bug ( MPS -32350 ). Pressing F5 helps. MPS forum - hierarchical tree structure and editing \u21a9","title":"Editor"},{"location":"aspects/editor/#editor-aspect","text":"The editor aspect defines the projectional editor of a concept.","title":"Editor aspect"},{"location":"aspects/editor/#general","text":"What happens when you press F5 in the editor? Specific Languages Blog: F5 in editor How can you delete non-existing children, references, or properties from a node? Switch to the reflective editor and remove the offending parts. There is also an enhancement script that can remove properties.","title":"General"},{"location":"aspects/editor/#menus","text":"Explain the different menu related terms. Menu definitions have two flavours named and +default+ and can be defined in transformation or substitute menus. Default substitutions will replace the default menu that MPS shows. Shortcut: Ctrl + Space or Cmd + Space Default menu Transformation menus define UI actions that will be shown in various locations. The menu is defined as a list of sections. Each section contains a list of menu parts for a set of locations. At runtime the menu parts and locations are used to generate the content of the completion menu. The contents of the completion menu are called menu items. Parameterized actions allow to calculate a list of elements of a specific type to be shown in the completion menu. They calculate all elements for the substitution menu and have an influence on the node creation. Moreover, they definesthe selection where the cursor should be placed. How do you find out where a substitute menu entry is coming from? Use the Menu Trace Tool window. More information can be found in Menu Trace Tool Window | MPS . What\u2019s the best way to improve the autocomplete description of concepts? As you can see in the screenshot, the concepts of both opening braces are indistinguishable. By changing the short description in the concept structure, I can change the description. What\u2019s the best format to improve these descriptions? Is this way the correct/best one to change the autocomplete concept description? asked by: @aquapp In general, it\u2019s up to the users and specific context to decide what makes sense to put to the description text. Usually it should provide additional semantic information to those not familiar with the language to help them to pick up the right concept from the code completion menu. The short description in the concept is the original, simple way to provide static description in the code completion menu. You can also add your own substitute action in the substitute menu of the concept (editor aspect) to get full control over the code completion menu and to be able to generate the text dynamically based on the context. answered by: @wsafonov","title":"Menus"},{"location":"aspects/editor/#languages","text":"I need a specific graphical notation/feature for the editor. Have a look at the full extension list from MPS -extensions . I need hyperlinks. Use the language com.mbeddr.mpsutil.hyperlink from mbeddr platform . How do you create clickable links? Specific Languages Blog: Creating clickable URL links in the editor Specific Languages Blog: More clickable URL links How can you include non-child relations in the editor?. Use the language com.mbeddr.mpsutil.editor.querylist from MPS -extensions .","title":"Languages"},{"location":"aspects/editor/#editor-declaration","text":"Is there a disadvantage by using the indent layout instead of the indent cell mode? No. There used to be performance issues with bigger models that were fixed in MPS 2021.1 . How do you use an empty text for empty cells? Specific Languages Blog: Use empty text for empty cells Explain all cell related variables. A cell takes up a specific amount of space in the editor component (width and height). padding-left/right/top/bottom: a floating point number, which specifies the padding of a text cell, i.e. how much space will be between cell\u2019s text and cell\u2019s left and right sides, respectively. inset: representation of the borders of an element. It specifies the space that an element must leave at each of its edges. baseline: the line upon which most letters sit. ascent: the recommended distance above the baseline for singled spaced text. descent: the recommended distance below the baseline for singled spaced text. height: ascent + descent gap: space between cells in a collection. There is a left and right gap. How can you set editor hints? you can set hints via editorContext . getEditorComponent (). getUpdater () explicit hints for nodes initial hints globally; they behave similar to pushed hints. via right-click: push editor hints and select a specific one. via an EditorHintToggleAction (e.g. in action declarations) They are not visible in the push Editor hints menu. If you need the same behavior e.g. in intentions, you can use code from there (via ConceptEditorHintSettingsComponent.HintsState ) Explicit hints for nodes and hints via EditorHintToggleAction . The usage of ConceptEditorHintSettingsComponent.HintsState is not so obvious. How do you set the cursor to the first editable cell? (A) What it looks like after creation (B) Initial situation with cursor at (1) : pressing Enter leads to (C) The problem is, that in (C) the cursor is at (2) , right before a read-only cell and thus editing or moving to the next cell is not possible. I would like the cursor to jump to the first editable cell, which is at position (3) . Structure of the new node in (C) : Editor of the new node in (C) : Usually, you would set the attracts focus property of the cell, where the cursor should be positioned, to attractsFocus or FirstEditableCell . But, since ( C.2 and C.3 ) are error cells, the default behaviour is to set the cursor in front of the first error cell, which is (C.2) . Therefore, change the first part of your editor to a querylist cell (A) , which references the \u201cmember\u201d in the cell properties (B) and set the read-only property on the querylist. contributed by: @aquapp Is it possible to access the selected value of one swing component from inside another swing component? Yes: Is it possible to access the selected value of one swing component from inside another swing component? | MPS forum How can you access an icon stored in a concept? Create a new custom cell : 1 2 3 4 5 6 7 8 new AbstractCellProvider () { @Override public EditorCell createEditorCell ( EditorContext p1 ) { EditorCell_Image . createImageCell ( context , node , { EditorContext context , SNode node => GlobalIconManager . getInstance (). getIconFor ( concept ); }); } }; How can you paint the background of certain editor cells with a different color based on analysis of the model? with the help of a conditional editor by using the class NodeHighlightManager : 1 2 3 4 NodeHighlightManager highlightManager = this . editorComponent . getHighlightManager (); EditorMessageOwner messageOwner = this . editorComponent . getHighlightMessagesOwner (); (...) highlightManager . mark ((( SNode ) ref ), HighlightConstants . INSTANCES_COLOR , \"usage\" , messageOwner ); The second approach has a better performance, because the highlighter runs asynchronously and not during the editor rebuild. How can you hide a custom cell in the editor? ( show if property) Custom cells expect only a cell provider in the inspector, but don\u2019t offer the possibility to specify other attributes to set e.g. \u201cshow if\u201d. How can I hide a custom cell under a specific condition? ( MPS -33195 ) The meta model actually allows to specify the show if property and other attributes on a custom cell and the generator will generate the correct code for it. It is just not included in the editor for the inspector. You can use the reflective editor to specify the condition. Since these attributes are hidden and you need this knowledge to find them, the alternative for a better visibility is to surround the custom cell with a collection and set the show if property on the collection. contributed by: @aquapp","title":"Editor declaration"},{"location":"aspects/editor/#open-api","text":"How can you open the inspector programmatically? 1 editorContext . openInspector () Specific Languages Blog: Opening Inspector automatically Specific Languages Blog: Opening Inspector automatically: Selection listeners Specific Languages Blog: Opening Inspector automatically: Editor extensions How can you open the editor for a node programmatically? 1 NavigationSupport . getInstance (). openNode () How can you override an arbitrary editor? Use the language de.slisson.mps.conditionalEditor from MPS -extensions . How can you get the font of an editor? 1 jetbrains . mps . nodeEditor . EditorSettings # getDefaultEditorFont () How can you subscribe to editor changes? Add a tool that subscribes to editor changes | MPS forum . How do you get the text of an EditorCell programmatically? 1 EditorCell . renderText (). getText () How can you find out if an editor cell is readonly? 1 ReadOnlyUtil . isCellsReadOnlyInEditor ( this . editorComponent , new singleton < EditorCell > ( editorCell )) How do you get an editor for a node as a swing component? 1 2 3 HeadlessEditorComponent component = new HeadlessEditorComponent ( # project . getRepository ()); component . editNode ( node ); return component ; How do you get a Project instance for an ActionEvent ? 1 2 3 4 5 button . addActionListener ( new ActionListener () { public void actionPerformed ( ActionEvent e ) { Project mpsProject = UiUtils . getMpsProjectFromActionEvent ( e ); } } How to you get the selection/ selected node in the editor? 1 editorComponent . getSelectionManager (). getSelection () / editorContext . getSelectedNode () How to get the current MPS project from within the editor? Specific Languages Blog: How to get the current MPS project from within the editor How do you find all open editors? Specific Languages Blog: Finding all open editors How do you programmatically collapse editor cells? 1 2 3 4 EditorCell_Collection . fold () / unfold () // You can check if is foldable by calling: EditorCell_Collection . isFoldable () Is there a callback/hook when an editor tab closes? When closing an editor tab, MPS removes the highlighting from all nodes in the editor. I.e., when an editor is opened again for the same root node all highlighting is gone. In my code, I want to react on this editor-close event. Is there are way to implement a callback or hook which is called when an editor tab is closed? You can register an EditorComponentCreateListener , that also receives an editorComponentDisposed event ( example ). Is there a utility class related to editor hints? Yes, there is in mbeddr : EditorHintHelper .","title":"Open API"},{"location":"aspects/editor/#bugs","text":"Highlighting of constraint errors in inspector doesn\u2019t work. Known bug ( MPS -32350 ). Pressing F5 helps. MPS forum - hierarchical tree structure and editing \u21a9","title":"Bugs"},{"location":"aspects/feedback/","text":"Feedback aspect \u00b6 The feedback aspect defines custom messages to show to the user when an error or a warning is detected in the model. Can I override error messages? Yes, in this aspect: Feedback - MPS .","title":"Feedback"},{"location":"aspects/feedback/#feedback-aspect","text":"The feedback aspect defines custom messages to show to the user when an error or a warning is detected in the model. Can I override error messages? Yes, in this aspect: Feedback - MPS .","title":"Feedback aspect"},{"location":"aspects/findusages/","text":"FindUsages aspect \u00b6 Custom finders for discovering related nodes can be implemented in this aspect. I click Find usages in the context menu of a node, and it doesn\u2019t find anything. The standard search scope is the project. Try to expand it to global in the find usages settings. Also check that you are using the correcting finders in the Finders section of the settings. I want to execute Find usages more than once, but the result tab gets overridden. Select the option Open in new tab in the section View of the Find usages preferences or pin the result tabs by right-clicking and selecting Pin Tab . How to restrict the scope of a Finder execution? I am using this finder and would like to restrict the scope from global , to lets say project . How do I do this? You can pass any FindUsages Scope implementation to the expression, for instance the ProjectScope : 1 SearchResults results = execute finders ( NodeUsages , node , new ProjectScope ( project ), < default > );","title":"Find Usages"},{"location":"aspects/findusages/#findusages-aspect","text":"Custom finders for discovering related nodes can be implemented in this aspect. I click Find usages in the context menu of a node, and it doesn\u2019t find anything. The standard search scope is the project. Try to expand it to global in the find usages settings. Also check that you are using the correcting finders in the Finders section of the settings. I want to execute Find usages more than once, but the result tab gets overridden. Select the option Open in new tab in the section View of the Find usages preferences or pin the result tabs by right-clicking and selecting Pin Tab . How to restrict the scope of a Finder execution? I am using this finder and would like to restrict the scope from global , to lets say project . How do I do this? You can pass any FindUsages Scope implementation to the expression, for instance the ProjectScope : 1 SearchResults results = execute finders ( NodeUsages , node , new ProjectScope ( project ), < default > );","title":"FindUsages aspect"},{"location":"aspects/generator/","text":"Generator aspect \u00b6 Generator is a part of language specification that defines the denotational semantics for the concepts in the language. \u2014 MPS documentation General \u00b6 Are there any best practices for generators? coolya: Maintainable MPS Generators Can you invoke the generator from an external tool? 2 Yes, it can be run from Ant. How can you copy the output to another location? Use the @CopyOutcome annotation. How do I obtain a temporary model? Use the class TemporaryModels . Which variable names aren\u2019t available because they are used in the generator? Underlined variables are specific variables that are available. Console: ConsoleContext context , ConsoleStream console Constraint: Scope: ReferenceConstraintsContext _context Typesystem: all rules: IsApplicable2Status status , TypeCheckingContext typeCheckingContext comparison rule: SNode node1 , SNode node2 , inequation replacement rule custom condition: SNode subtype , SNode supertype , rule: SNode subtype , SNode supertype , EquationInfo equationInfo , TypeCheckingContext typeCheckingContext , boolean inequalityIsWeak , boolean inequalityIsLessThan substitute type rule: SNode originalType Generator: mapping configuration: CreateRootRuleContext _context Editor: General: SNode myNode How does the IDE collect generators to engage on a model? Specific Languages Blog: How MPS collects generators to engage on a model genplan (in devkit) vs. generator priorities? The genplan is applied instead of the generator priorities. If your generator should be applied in a model using a genplan, your generator has to be part of the genplan. When developing a language, which is used within an aspect, e.g. typesystem, the MPS aspect\u2019s genplan can block the generator. How can you use generated classes which implement an extension-point? Let \\(L_A\\) be a language which offers an extension-point over class \\(E\\) . Then it is quite simple to provide a static implementation for extension-point for \\(E\\) for example in another language. What if we have want map a concept \\(Q\\) of \\(B\\) to that extension-point? We want to be able to generated Code \\(C\\) from a oncept instance of \\(Q\\) which is a subclass of \\(E\\) , such that we can use it for the extension-point over class \\(E\\) . Create the extension point in the plugin aspect of language \\(L_A\\) . In generator main you need to create two root mapping rules for \\(Q\\) (which is ModelMerge in our case). map_ModelMerge maps \\(Q\\) to a class which extends \\(E\\) (here ConceptMergeSpec ). map_ModelMerge_extension will generate an extension for \\(Q\\) . It is a extension RootMapping which can be selected from the intention. The code for the Reference-Macro in the figure above should look like this. Make sure you have jetbrains.mps.lang.extension included as language in the plugin. Now create a solution, not a sandbox. Set Solution Kind in the properties to Other . Afterwards create a model named plugin (not optional). Add an instance of \\(Q\\) to your model plugin and build it. Looking now at your last transient model, there must be 3 artifacts related to \\(Q\\) : 1.the generated class 2.the generated extension 3.an ExtensionDescriptor which provides all found extensions Now you should be able to locate your extension with a code fragment like this: 1 2 3 foreach obj in extensionPoint / ModelMergeExt / . objects { System . out . println ( \"---> extension \" + obj ); } contributed by: @dbinkele Where should you put classes that you need on the user side and in the generator? Move the classes to a solution and add that solution as a runtime solution to the language (in the module properties). Can you access the output model in a property macro? In reference macros in generators, I can use the provided \u201coutputNode\u201d parameter as an entry point into the output model of the current transformation and e.g. use this to find the root node my generated reference will be contained in. Can I do something similar in property macros? For those, there obviously is no \u201coutputNode\u201d. I\u2019d still like to find, for example, the Node in my output model that my generated property belongs to. Is there a way to do that? asked by: @jonaskraemer You can try to use the post-processing function of a $MAP_SRC$ macro. How to generate XY \u00b6 What can be generated? Have a look at the language repository . You might also find other languages on GitHub. In general there doesn\u2019t have to be an existing language. Any text can be generated with TextGen or Plaintextgen from MPS -extensions . It\u2019s also possible to generate code from an action or pre/post-processing script in the generator by using an existing Java library such as Apache Poi. A tutorial for example for excel can be found here . I want to create multi outputs for a language. 1 Use a dummy concept or a generation plan with a fork. This quesion is also answered in the generator cookbook . How can you generate latex files? The mbeddr documentation language can do this. Have a look at the documentation . How can you generate some text? Use the textgen aspect or use mps-plaintextgen from MPS -extensions . Can you use an alternative approach to generating code? You can interpret your models instead. Use mbeddr.mpsutil.interpreter from mbeddr platform . Should you use generation plans or generator priorities? Have a look at the motivation for generation plans in the official documentation . Generation plans should be used when the generation order is simple. How do you generate language X from MPS ? Specific Languages blog: How do I generate language XY from MPS ? How can you make sure that a generator B can use the output of a generator A? Define priorities or a fixed genplan for \\(B\\) (and maybe \\(A\\) ) If you can\u2019t run / don\u2019t want to run both generators in the same \u201cphase\u201d, configure them to run one after each other. Solution 1 : Define a \\(MM\\) (structure) (INFO-NODE) in \\(A\\) where you accumulate all required information and pass for all other generators. Configure \\(A\\) to remove INFO-NODE if not required (separate mapping configuration). Solution 2 : Define an annotation and store all req. infos there Configure \\(A\\) to drop annotation if not required (separate mapping configuration), Solution 3 : Use user objects to store required information as part of the real AST nodes. User objects are volatile children/properties which are not persisted but survive several generation phases. Use com.mbeddr.mpsutil.genutil to achieve this. Solution 4 : Define a fixed genplan with checkpoints. Organize the whole generation process manually. How to generate large strings? Given I am writing a generator and it generates a java string for a string property. That property holds a string of more than 64000 characters and the java compiler gives me a constant string too long error. What can I do? This is how it looks like so far: Option 1 : Extract into a separate file Of course it would be better to not fill the java file too much and instead generate the string into a file that gets loaded at this place. Option 2 : Split and join again The restriction only applies to the size of string literals. However, at runtime, it is allowed to have larger strings. So that we can split it into a concatenation that gets assembled at runtime then: Here we use the Guiva classes Joiner and Splitter from MPS.Core/google.common.base and java.util.Arrays . We use the splitter at generation time to split it into parts of maximal 50000 characters. Then we map it onto an arbitrary node that has a string property, as $LOOP$ requires a node In the property macro inside the loop, we simply pull that property out of the node again (the inspector of this is not visible in the screenshot) It is just a coincidence that we create nodes of the same concept and use the same property for the loop content, than for the outside context node. You may light-quote anything of type string here. contributed by: @abstraktor Open API \u00b6 How can you preview the generated text programmatically? Use the MPS action TextPreviewModel or call the methods in TextGeneratorEngine if you want to use the text generator. How do you get the output path for a solution? To get an IFile , call SModelOperations . getOutputLocation ( model ) . To get an string, call ProjectPathUtil . getGeneratorOutputPath ( module . getModuleDescriptor ()) . You have to first cast the module to an AbstractModule. How can I check if a model requires generation programmatically? The project view shows generation required if a model has been changed. What is the source of this information, and how reliable is it? (regarding the 2 nd part of the question: sometimes the text in the project view is not up to date, but pressing F5 fixes it. Is it just the UI that is not updated when the underlying state changes, or is the state itself not updated properly until F5 is pressed?) ModelGenerationStatusManager provides a corresponding API. This is how to use it: 1 2 3 4 MPSProject project = /* ... */ ; SModel model = /* ... */ ; ModelGenerationStatusManager statusManager = project . getComponent ( ModelGenerationStatusManager . class ); if ( statusManager . generationRequired ( model )) { /* ... */ } Unfortunately, it does\u2019nt seem to be reliable, e.g. when changing something in the model, the API behaves correctly in the first place. But after executing the Synchronize action, MPS for some reason believes that generation is not required any more (even though the change would have an effect on the output and Synchronize doesn\u2019t execute the generation). This odd behavior can also be seen in the project view (note: this might be outdated information). contributed by: @till-f Troubleshooting \u00b6 MPS can\u2019t resolve the import XY. 3 The solution that contains the class has to be added as a runtime solution (see here ). Why are root nodes generated more than once? Have you used one of your root nodes as a child of another node? It will still act as a root node in this case. No output location for XY. Make sure that the Java facet is enabled in the properties of the language or solution. This error can often be seen when opening an old MPS project. How do I debug generators? Specific Languages Blog: Debugging generators The generated code has no debug symbols. Locate the build solution in MPS that is building your languages and adjust the java settings: java options <project default> generate debug info false generate no warnings false fork false compiler <default compiler> java compliance level 1.8 java compiler options <no additional options> copy resources false Then set generate debug info to true. If no java options exist in your build solution, simply add one in the project structure. How can you debug the differences of generation between command line and MPS ? Given I have an MPS project and it compiles well in my MPS . When I run the same in a command line then I see a compile error. How can I debug this? The issue behind this kind of issues usually lies in one of these three things: Issue Area 1 : Settings (inplace, threading) Try turning off Apply transformations in place in your MPS settings under Build, Execution, Deployment \u2192 Generator \u2192 General , as this is unset in the command line (note, that this setting doesn\u2019t appear in the search): Also, disabling the build in parallel threads may help. Issue Area 2 : Dependencies A second issue may originate from the separate type of class loading and dependency loading in the command line. Issue Area 3 : Generation plans The command line build runs the generator plans that are included in the devkits of a model, or that are explicitly added to the generator facet+tab of a module. If your code starts the build for an explicit generation plan other than that, consider if a different plan could be the culprit. (Remember, right-clicking a model and Show Generation Plan to see if all looks as expected). Remark 1: Inplace transformations are on or off depending on your build script, same applied to parallel generation. On the command line if nothing specified it defaults to 4 threads. The biggest difference is that in the command line build not project is opened, which means anything that tried to access the project including virtual files will fail. Remark 2: One potential source of problems could be packaging of languages and generators. Because in the command line build generators might need to be loaded from packaged jars, any issues with that packaging could affect the generation. For example, as it currently may happen due to MPS -32026 that whole generator models with templates are not loaded and therefore not applied during the generation in the command line. contributed by: @abstraktor MPS forum - I want to export multiple languages from MPS \u21a9 MPS forum - Is it possible to export a DSL compiler created with MPS and use it independently \u21a9 MPS forum - Generator error: uncaught exception ?no classifier? \u21a9","title":"Generator"},{"location":"aspects/generator/#generator-aspect","text":"Generator is a part of language specification that defines the denotational semantics for the concepts in the language. \u2014 MPS documentation","title":"Generator aspect"},{"location":"aspects/generator/#general","text":"Are there any best practices for generators? coolya: Maintainable MPS Generators Can you invoke the generator from an external tool? 2 Yes, it can be run from Ant. How can you copy the output to another location? Use the @CopyOutcome annotation. How do I obtain a temporary model? Use the class TemporaryModels . Which variable names aren\u2019t available because they are used in the generator? Underlined variables are specific variables that are available. Console: ConsoleContext context , ConsoleStream console Constraint: Scope: ReferenceConstraintsContext _context Typesystem: all rules: IsApplicable2Status status , TypeCheckingContext typeCheckingContext comparison rule: SNode node1 , SNode node2 , inequation replacement rule custom condition: SNode subtype , SNode supertype , rule: SNode subtype , SNode supertype , EquationInfo equationInfo , TypeCheckingContext typeCheckingContext , boolean inequalityIsWeak , boolean inequalityIsLessThan substitute type rule: SNode originalType Generator: mapping configuration: CreateRootRuleContext _context Editor: General: SNode myNode How does the IDE collect generators to engage on a model? Specific Languages Blog: How MPS collects generators to engage on a model genplan (in devkit) vs. generator priorities? The genplan is applied instead of the generator priorities. If your generator should be applied in a model using a genplan, your generator has to be part of the genplan. When developing a language, which is used within an aspect, e.g. typesystem, the MPS aspect\u2019s genplan can block the generator. How can you use generated classes which implement an extension-point? Let \\(L_A\\) be a language which offers an extension-point over class \\(E\\) . Then it is quite simple to provide a static implementation for extension-point for \\(E\\) for example in another language. What if we have want map a concept \\(Q\\) of \\(B\\) to that extension-point? We want to be able to generated Code \\(C\\) from a oncept instance of \\(Q\\) which is a subclass of \\(E\\) , such that we can use it for the extension-point over class \\(E\\) . Create the extension point in the plugin aspect of language \\(L_A\\) . In generator main you need to create two root mapping rules for \\(Q\\) (which is ModelMerge in our case). map_ModelMerge maps \\(Q\\) to a class which extends \\(E\\) (here ConceptMergeSpec ). map_ModelMerge_extension will generate an extension for \\(Q\\) . It is a extension RootMapping which can be selected from the intention. The code for the Reference-Macro in the figure above should look like this. Make sure you have jetbrains.mps.lang.extension included as language in the plugin. Now create a solution, not a sandbox. Set Solution Kind in the properties to Other . Afterwards create a model named plugin (not optional). Add an instance of \\(Q\\) to your model plugin and build it. Looking now at your last transient model, there must be 3 artifacts related to \\(Q\\) : 1.the generated class 2.the generated extension 3.an ExtensionDescriptor which provides all found extensions Now you should be able to locate your extension with a code fragment like this: 1 2 3 foreach obj in extensionPoint / ModelMergeExt / . objects { System . out . println ( \"---> extension \" + obj ); } contributed by: @dbinkele Where should you put classes that you need on the user side and in the generator? Move the classes to a solution and add that solution as a runtime solution to the language (in the module properties). Can you access the output model in a property macro? In reference macros in generators, I can use the provided \u201coutputNode\u201d parameter as an entry point into the output model of the current transformation and e.g. use this to find the root node my generated reference will be contained in. Can I do something similar in property macros? For those, there obviously is no \u201coutputNode\u201d. I\u2019d still like to find, for example, the Node in my output model that my generated property belongs to. Is there a way to do that? asked by: @jonaskraemer You can try to use the post-processing function of a $MAP_SRC$ macro.","title":"General"},{"location":"aspects/generator/#how-to-generate-xy","text":"What can be generated? Have a look at the language repository . You might also find other languages on GitHub. In general there doesn\u2019t have to be an existing language. Any text can be generated with TextGen or Plaintextgen from MPS -extensions . It\u2019s also possible to generate code from an action or pre/post-processing script in the generator by using an existing Java library such as Apache Poi. A tutorial for example for excel can be found here . I want to create multi outputs for a language. 1 Use a dummy concept or a generation plan with a fork. This quesion is also answered in the generator cookbook . How can you generate latex files? The mbeddr documentation language can do this. Have a look at the documentation . How can you generate some text? Use the textgen aspect or use mps-plaintextgen from MPS -extensions . Can you use an alternative approach to generating code? You can interpret your models instead. Use mbeddr.mpsutil.interpreter from mbeddr platform . Should you use generation plans or generator priorities? Have a look at the motivation for generation plans in the official documentation . Generation plans should be used when the generation order is simple. How do you generate language X from MPS ? Specific Languages blog: How do I generate language XY from MPS ? How can you make sure that a generator B can use the output of a generator A? Define priorities or a fixed genplan for \\(B\\) (and maybe \\(A\\) ) If you can\u2019t run / don\u2019t want to run both generators in the same \u201cphase\u201d, configure them to run one after each other. Solution 1 : Define a \\(MM\\) (structure) (INFO-NODE) in \\(A\\) where you accumulate all required information and pass for all other generators. Configure \\(A\\) to remove INFO-NODE if not required (separate mapping configuration). Solution 2 : Define an annotation and store all req. infos there Configure \\(A\\) to drop annotation if not required (separate mapping configuration), Solution 3 : Use user objects to store required information as part of the real AST nodes. User objects are volatile children/properties which are not persisted but survive several generation phases. Use com.mbeddr.mpsutil.genutil to achieve this. Solution 4 : Define a fixed genplan with checkpoints. Organize the whole generation process manually. How to generate large strings? Given I am writing a generator and it generates a java string for a string property. That property holds a string of more than 64000 characters and the java compiler gives me a constant string too long error. What can I do? This is how it looks like so far: Option 1 : Extract into a separate file Of course it would be better to not fill the java file too much and instead generate the string into a file that gets loaded at this place. Option 2 : Split and join again The restriction only applies to the size of string literals. However, at runtime, it is allowed to have larger strings. So that we can split it into a concatenation that gets assembled at runtime then: Here we use the Guiva classes Joiner and Splitter from MPS.Core/google.common.base and java.util.Arrays . We use the splitter at generation time to split it into parts of maximal 50000 characters. Then we map it onto an arbitrary node that has a string property, as $LOOP$ requires a node In the property macro inside the loop, we simply pull that property out of the node again (the inspector of this is not visible in the screenshot) It is just a coincidence that we create nodes of the same concept and use the same property for the loop content, than for the outside context node. You may light-quote anything of type string here. contributed by: @abstraktor","title":"How to generate XY"},{"location":"aspects/generator/#open-api","text":"How can you preview the generated text programmatically? Use the MPS action TextPreviewModel or call the methods in TextGeneratorEngine if you want to use the text generator. How do you get the output path for a solution? To get an IFile , call SModelOperations . getOutputLocation ( model ) . To get an string, call ProjectPathUtil . getGeneratorOutputPath ( module . getModuleDescriptor ()) . You have to first cast the module to an AbstractModule. How can I check if a model requires generation programmatically? The project view shows generation required if a model has been changed. What is the source of this information, and how reliable is it? (regarding the 2 nd part of the question: sometimes the text in the project view is not up to date, but pressing F5 fixes it. Is it just the UI that is not updated when the underlying state changes, or is the state itself not updated properly until F5 is pressed?) ModelGenerationStatusManager provides a corresponding API. This is how to use it: 1 2 3 4 MPSProject project = /* ... */ ; SModel model = /* ... */ ; ModelGenerationStatusManager statusManager = project . getComponent ( ModelGenerationStatusManager . class ); if ( statusManager . generationRequired ( model )) { /* ... */ } Unfortunately, it does\u2019nt seem to be reliable, e.g. when changing something in the model, the API behaves correctly in the first place. But after executing the Synchronize action, MPS for some reason believes that generation is not required any more (even though the change would have an effect on the output and Synchronize doesn\u2019t execute the generation). This odd behavior can also be seen in the project view (note: this might be outdated information). contributed by: @till-f","title":"Open API"},{"location":"aspects/generator/#troubleshooting","text":"MPS can\u2019t resolve the import XY. 3 The solution that contains the class has to be added as a runtime solution (see here ). Why are root nodes generated more than once? Have you used one of your root nodes as a child of another node? It will still act as a root node in this case. No output location for XY. Make sure that the Java facet is enabled in the properties of the language or solution. This error can often be seen when opening an old MPS project. How do I debug generators? Specific Languages Blog: Debugging generators The generated code has no debug symbols. Locate the build solution in MPS that is building your languages and adjust the java settings: java options <project default> generate debug info false generate no warnings false fork false compiler <default compiler> java compliance level 1.8 java compiler options <no additional options> copy resources false Then set generate debug info to true. If no java options exist in your build solution, simply add one in the project structure. How can you debug the differences of generation between command line and MPS ? Given I have an MPS project and it compiles well in my MPS . When I run the same in a command line then I see a compile error. How can I debug this? The issue behind this kind of issues usually lies in one of these three things: Issue Area 1 : Settings (inplace, threading) Try turning off Apply transformations in place in your MPS settings under Build, Execution, Deployment \u2192 Generator \u2192 General , as this is unset in the command line (note, that this setting doesn\u2019t appear in the search): Also, disabling the build in parallel threads may help. Issue Area 2 : Dependencies A second issue may originate from the separate type of class loading and dependency loading in the command line. Issue Area 3 : Generation plans The command line build runs the generator plans that are included in the devkits of a model, or that are explicitly added to the generator facet+tab of a module. If your code starts the build for an explicit generation plan other than that, consider if a different plan could be the culprit. (Remember, right-clicking a model and Show Generation Plan to see if all looks as expected). Remark 1: Inplace transformations are on or off depending on your build script, same applied to parallel generation. On the command line if nothing specified it defaults to 4 threads. The biggest difference is that in the command line build not project is opened, which means anything that tried to access the project including virtual files will fail. Remark 2: One potential source of problems could be packaging of languages and generators. Because in the command line build generators might need to be loaded from packaged jars, any issues with that packaging could affect the generation. For example, as it currently may happen due to MPS -32026 that whole generator models with templates are not loaded and therefore not applied during the generation in the command line. contributed by: @abstraktor MPS forum - I want to export multiple languages from MPS \u21a9 MPS forum - Is it possible to export a DSL compiler created with MPS and use it independently \u21a9 MPS forum - Generator error: uncaught exception ?no classifier? \u21a9","title":"Troubleshooting"},{"location":"aspects/intentions/","text":"Intentions aspect \u00b6 Intentions provide fast access to the most used operations with syntactical constructions of a language. \u2014 MPS documentation How can you go to the declaration of an intention when you open the intention menu? Select the intention and click the arrow/press right arrow key \u2192 Go to intention declaration . How do you execute an action as an intention? Add the action to the action group ActionsAsIntentions . How can you group intentions and give them names? Use com.mbeddr.mpsutil.intentions from MPS -extensions . Alternatively, you can split the description into multiple literals. The first literal will then be used to group intentions. I need to get all available intentions for a node. 1 IntentionsManager . getInstance (). getAvailableIntentions (); How can you make intentions visible? Specific Languages blog: Making intentions visible How can you show a submenu in the intention menu? Specific Languages blog: Showing a submenu in the intentions menu An Intention isn\u2019t visible, although it should be. What can you do? Intention X should be visible on Concept Y. However, when I select an instance of Y, it is not listed in the intention menu. What can I do? Make sure the language that declares the intention is in Used Languages of the model: - Check if the intention applies to the concept you want it to apply to. (Maybe *visible on child nodes* is not set). - Check if the *isApplicable* condition evaluated to true (try to avoid adding `System.err.our` prints to the model). contributed by: @coolya Failed to evaluate isApplicable for XY. Starting from 2021.1.4 JetBrains made a change to the isApplicable method of intentions ( commits ). After the changes they regenerated all the intentions in the project. This change also affects 2020.3.6. The exception happens, for example, when languages compiled with 2021.1.3 and 2021.1.4 are used together.","title":"Intentions"},{"location":"aspects/intentions/#intentions-aspect","text":"Intentions provide fast access to the most used operations with syntactical constructions of a language. \u2014 MPS documentation How can you go to the declaration of an intention when you open the intention menu? Select the intention and click the arrow/press right arrow key \u2192 Go to intention declaration . How do you execute an action as an intention? Add the action to the action group ActionsAsIntentions . How can you group intentions and give them names? Use com.mbeddr.mpsutil.intentions from MPS -extensions . Alternatively, you can split the description into multiple literals. The first literal will then be used to group intentions. I need to get all available intentions for a node. 1 IntentionsManager . getInstance (). getAvailableIntentions (); How can you make intentions visible? Specific Languages blog: Making intentions visible How can you show a submenu in the intention menu? Specific Languages blog: Showing a submenu in the intentions menu An Intention isn\u2019t visible, although it should be. What can you do? Intention X should be visible on Concept Y. However, when I select an instance of Y, it is not listed in the intention menu. What can I do? Make sure the language that declares the intention is in Used Languages of the model: - Check if the intention applies to the concept you want it to apply to. (Maybe *visible on child nodes* is not set). - Check if the *isApplicable* condition evaluated to true (try to avoid adding `System.err.our` prints to the model). contributed by: @coolya Failed to evaluate isApplicable for XY. Starting from 2021.1.4 JetBrains made a change to the isApplicable method of intentions ( commits ). After the changes they regenerated all the intentions in the project. This change also affects 2020.3.6. The exception happens, for example, when languages compiled with 2021.1.3 and 2021.1.4 are used together.","title":"Intentions aspect"},{"location":"aspects/listener/","text":"Listener aspect \u00b6 This aspects allows to create listeners that can react to changes in the model. It can react to different events such as adding and removing children or value changes of properties. How do you react to change in the model? Use com.mbeddr.mpsutil.modellisteners from mbeddr platform . Is there a way to listen to changes in any descendant? Add a single change listener to BaseConcept . You still need to define your logic for every kind of a change (property, reference, child\u2026) separately there. Are they executed synchronously or asynchronously? They are executed synchronously.","title":"Listener"},{"location":"aspects/listener/#listener-aspect","text":"This aspects allows to create listeners that can react to changes in the model. It can react to different events such as adding and removing children or value changes of properties. How do you react to change in the model? Use com.mbeddr.mpsutil.modellisteners from mbeddr platform . Is there a way to listen to changes in any descendant? Add a single change listener to BaseConcept . You still need to define your logic for every kind of a change (property, reference, child\u2026) separately there. Are they executed synchronously or asynchronously? They are executed synchronously.","title":"Listener aspect"},{"location":"aspects/migration/","text":"Migration aspect \u00b6 To nicely support language evolution, migrations automatically upgrade client code to use the latest version of a language or multiple languages. \u2014 MPS documentation General \u00b6 What are the best practises? 1 Have a look at this answer . I want to migrate an MPS project that\u2019s many years old. How do you do that? First of all make sure that you don\u2019t skip too many MPS versions, otherwise the migration won\u2019t succeed. For old projects you have to edit the module files manually because the structure slightly changed. Open the .mpl files in an text editor and change all occurences of <language id=\"%ID\" fqName=\"%FQNAME\" version=\"%VERSION\" /> into <language slang=\"l:%ID:%FQNAME\" version=\"%VERSION\" /> . The next step is to start the migration assistant. It will fail because it can\u2019t find migrations for some language versions. For example: jetbrains.mps.lang.editor only has a migration starting with version 7.You have to find all occurences of this language in your project with an terxt editor and change the attribute version to 7. Then run the migration assistant again and hope that everything works. Some concepts cannot be migrated automatically such as the substitute and transformation menues. There will also be other issues that have to be fixed manually. I want to replace a node A with another node B where A and B share the same super concept. Use the class RefactoringRuntime . This class can be use to set/unset property or replace nodes with other ones. Example: RefactoringRuntime.replaceWithNewConcept(old, concept/ComponentConfigRef/) Are there any best practises about feature branches and language migrations? languageengineering.io: MPS , Feature Branches and Language Migrations: DOs and DON\u2019Ts How can you detect that migrations are running? I have code that needs to know if migrations are currently executed e.g. modelisteners that update the model when a change by the user appears. I would like to detect when migrations are executed to prevent this code from executing in the middle of a migration to prevent manipulating the model in an incomplete state during the migration. PersistenceRegistry . getInstance (). isFastSearch () returns false while migrations are running. You can check it in the model lister: 1 2 3 4 5 6 model listener for MyNode { child added in role values ( instance , child ) -> void { // don't run as part of migrations. if ( ! PersistenceRegistry . getInstance (). isFastSearch ()) { return ; } } } contributed by: @abstraktor How can you find all references to a specified root node and change these references, so they point to another root node? Search through the methods in RefactoringRuntime . Example with finders: 1 2 3 4 5 6 7 SearchResults < node <>> results = execute finders ( NodeUsages , node , unspecified scope , < default > ); foreach result in results . getSearchResults () { node <> resultObject = result . getObject (); sequence < reference > references = resultObject . references . where ({ ~ it => it . target : eq : node ; }); references . forEach ({ ~ it => resultObject / . setReferenceTarget ( it . link , reuseact ); }); } Troubleshooting \u00b6 When creating root nodes as part of language migration via java model.add root(someRoot) , it throws the exception UnsupportedOperationException . Make sure that the affected model is not a non-editable model. MPS forum - Migration scripts: the best practice \u21a9","title":"Migration"},{"location":"aspects/migration/#migration-aspect","text":"To nicely support language evolution, migrations automatically upgrade client code to use the latest version of a language or multiple languages. \u2014 MPS documentation","title":"Migration aspect"},{"location":"aspects/migration/#general","text":"What are the best practises? 1 Have a look at this answer . I want to migrate an MPS project that\u2019s many years old. How do you do that? First of all make sure that you don\u2019t skip too many MPS versions, otherwise the migration won\u2019t succeed. For old projects you have to edit the module files manually because the structure slightly changed. Open the .mpl files in an text editor and change all occurences of <language id=\"%ID\" fqName=\"%FQNAME\" version=\"%VERSION\" /> into <language slang=\"l:%ID:%FQNAME\" version=\"%VERSION\" /> . The next step is to start the migration assistant. It will fail because it can\u2019t find migrations for some language versions. For example: jetbrains.mps.lang.editor only has a migration starting with version 7.You have to find all occurences of this language in your project with an terxt editor and change the attribute version to 7. Then run the migration assistant again and hope that everything works. Some concepts cannot be migrated automatically such as the substitute and transformation menues. There will also be other issues that have to be fixed manually. I want to replace a node A with another node B where A and B share the same super concept. Use the class RefactoringRuntime . This class can be use to set/unset property or replace nodes with other ones. Example: RefactoringRuntime.replaceWithNewConcept(old, concept/ComponentConfigRef/) Are there any best practises about feature branches and language migrations? languageengineering.io: MPS , Feature Branches and Language Migrations: DOs and DON\u2019Ts How can you detect that migrations are running? I have code that needs to know if migrations are currently executed e.g. modelisteners that update the model when a change by the user appears. I would like to detect when migrations are executed to prevent this code from executing in the middle of a migration to prevent manipulating the model in an incomplete state during the migration. PersistenceRegistry . getInstance (). isFastSearch () returns false while migrations are running. You can check it in the model lister: 1 2 3 4 5 6 model listener for MyNode { child added in role values ( instance , child ) -> void { // don't run as part of migrations. if ( ! PersistenceRegistry . getInstance (). isFastSearch ()) { return ; } } } contributed by: @abstraktor How can you find all references to a specified root node and change these references, so they point to another root node? Search through the methods in RefactoringRuntime . Example with finders: 1 2 3 4 5 6 7 SearchResults < node <>> results = execute finders ( NodeUsages , node , unspecified scope , < default > ); foreach result in results . getSearchResults () { node <> resultObject = result . getObject (); sequence < reference > references = resultObject . references . where ({ ~ it => it . target : eq : node ; }); references . forEach ({ ~ it => resultObject / . setReferenceTarget ( it . link , reuseact ); }); }","title":"General"},{"location":"aspects/migration/#troubleshooting","text":"When creating root nodes as part of language migration via java model.add root(someRoot) , it throws the exception UnsupportedOperationException . Make sure that the affected model is not a non-editable model. MPS forum - Migration scripts: the best practice \u21a9","title":"Troubleshooting"},{"location":"aspects/plugin/","text":"Plugin aspect \u00b6 Plugins are a way to integrate your code with the MPS IDE functionality. \u2014 MPS documentation General \u00b6 Should you use this aspect? No. You should use plugin solutions instead. How do facets work? Red rectangles: marker facets Do not define dependencies on other facets. They are known to the MPS make process and are available for user. You can define where you own facet should fit in and decide if you require some facet. Usage: Targets act as filters working on a stream of data delivered to them. The data flowing along targets is called resources . Resources are represented as Java interfaces and tuples. How do I move a solution? Given I have a project with a test solution open and the solution is stored in code/com.my/solutions/com.my.solution.to.move , which is the wrong place. It should be code/com.my/test/com.my.solution.to.move instead. I want to move the solution in the filesystem to its correct place. How can I move the solution without breaking the project? Move code/com.my/solutions/com.my.solution.to.move to code/com.my.project/test/com.my.project.solution.to.move . Close the MPS project and reopen it (no need to restart MPS ). Add back the .msd files as follows: On the workspace root node, right-click and open Project Paths ( Alt + Enter ). Click on the red, old solution file and on - . Click on + and select the new location of this .msd file. Open your build script for CI tests and update the solution path in the project structure. contributed by: @abstraktor How to you guide the user through cleaning up after deleting a referenced node? Given I have a concept Ball and I have a reference BallRef . When I have a Ball node and I have BallRef s to it all over my model. When I delete the ball then I have a lot of dangling references. How may I get guidance in cleaning up these dangling references? You can show a balloon that says for example: 1 2 Deleting ball has left some dangling references _Show_, _Ignore_ When clicking show , it will open a usage search for the deleted node using ConsoleUtil . show . This is implemented with a modellistener in a quite generic fashion. Here are a few insights: Make sure to not show the node in the searched for part of the window. VCS will try to highlight it and run into an NPE ( MPS 2019.3) Consider cut and paste, or moving elements: these operations yield a removal event as well. Hide the balloon again, once the node gets added again. contributed by: @abstraktor How can you make sure that the IDE loads a jar exactly once and then never again? I have a .jar that depends on a native libray (.dll/.so/\u2026). To use it in an MPS plugin I have a stubs solution for it. Unfortunately, without further ado, MPS tries to reload the jar in some cases (e.g. after a rebuild). This will fail, because the JVM does not allow reloading of native libraries. How can I avoid this problem? To prevent that MPS will ever (re-)load .jars / stubs of a solution, you can check the facet \u201cIDEA Plugin\u201d in the \u201cFacets\u201d tab of the solution properties. This will show another tab where you have to set the Plugin ID `com.intellij. Now we just have to ensure that the .jars can be found at runtime (i.e. they must be on the classpath). The simplest approach would be to put them into the lib directory of the application (e.g. MPS installation / your product RCP ). contributed by: @till-f How can you use an IntelliJ icon for an action? I want to use one of the icons shipped with IntelliJ for my own action ( jetbrains.mps.lang.plugin.structure.ActionDeclaration ). How can I reference the icon? (note: this question might be deprecated for newer MPS versions) You can use IconLoader.getIcon(...) in the reflective editor. Right-click the editor for the icon, use show reflective editor and enter the expression as shown in the screenshot: contributed by: @till-f How to use a projection mode switcher to alter an editor component? I have a concept editor in which I use an EditorComponent \\(A\\) . Using the projection menu entry, I would like to switch to another editor component \\(B\\) upon activation. First \\(B\\) must override \\(A\\) and the applicable concept also must not differ. Then for \\(B\\) in applicable in context we must provide a concept editor context hint . This hint must also be referenced from a Projection Mode Switcher . Afterwards you will find a new entry in the Projection menu. Hint when used with Grammar Cells: you have to disable component inlining which can be activated by an intention at the position where the include of \\(A\\) happens. Also in any editor component that inherits from \\(A\\) and \\(A\\) itself we cannot use Grammar Cells. contributed by: @dbinkele Languages/features \u00b6 I want to merge models. Use the language de.itemis.mps.modelmerger from MPS -extensions . I want to verify the structure of a node. Use the language de.slisson.mps.structurecheck from MPS -extensions . I want to store different states/versions of a node inside the model. Use the language de.itemis.mps.nodeversioning from MPS -extensions . Open API \u00b6 How do you create a new SContainmentLink for a non-existent role? 1 . Create it through MetaAdapterFactory . How to you check if a model is a generator model, a test model etc.? Call the corresponding method in SModelStereotype . How do you add imports to a model? Use the class ModelImportHelper and call addImport . How can you open an MPS Editor Tab programmatically? 1 EditorContext . getEditorPanelManager (). openEditor ( node ); Is it possible to associate an MPS -Aspect with more than one node? 1 IConceptAspect . getBaseConceptCollection (); Troubleshooting \u00b6 A reference to a key in an action context parameter is out of search scope. You need to add a dependency to MPSCommonDataKeys . This class extends PlatformDataKeys and this class extends CommonDataKeys . An action isn\u2019t visible. You have to add it to an ActionGroup that can be attached to differenct places such as the context menu or the build menu. All of the action context parameters that are marked as required have to be available and the isApplicable block must return true for an action to be visible. For debugging purposes you can set always visible to true to check if your action is registered at all. You also need to have a standalone descriptor in your model for it to work. Additionaly, the solution kind should be set to Other in the Java tab of the solution properties ( Plugin | MPS ). How to create new SContainmentLink for a non-existent role? \u21a9","title":"Plugin"},{"location":"aspects/plugin/#plugin-aspect","text":"Plugins are a way to integrate your code with the MPS IDE functionality. \u2014 MPS documentation","title":"Plugin aspect"},{"location":"aspects/plugin/#general","text":"Should you use this aspect? No. You should use plugin solutions instead. How do facets work? Red rectangles: marker facets Do not define dependencies on other facets. They are known to the MPS make process and are available for user. You can define where you own facet should fit in and decide if you require some facet. Usage: Targets act as filters working on a stream of data delivered to them. The data flowing along targets is called resources . Resources are represented as Java interfaces and tuples. How do I move a solution? Given I have a project with a test solution open and the solution is stored in code/com.my/solutions/com.my.solution.to.move , which is the wrong place. It should be code/com.my/test/com.my.solution.to.move instead. I want to move the solution in the filesystem to its correct place. How can I move the solution without breaking the project? Move code/com.my/solutions/com.my.solution.to.move to code/com.my.project/test/com.my.project.solution.to.move . Close the MPS project and reopen it (no need to restart MPS ). Add back the .msd files as follows: On the workspace root node, right-click and open Project Paths ( Alt + Enter ). Click on the red, old solution file and on - . Click on + and select the new location of this .msd file. Open your build script for CI tests and update the solution path in the project structure. contributed by: @abstraktor How to you guide the user through cleaning up after deleting a referenced node? Given I have a concept Ball and I have a reference BallRef . When I have a Ball node and I have BallRef s to it all over my model. When I delete the ball then I have a lot of dangling references. How may I get guidance in cleaning up these dangling references? You can show a balloon that says for example: 1 2 Deleting ball has left some dangling references _Show_, _Ignore_ When clicking show , it will open a usage search for the deleted node using ConsoleUtil . show . This is implemented with a modellistener in a quite generic fashion. Here are a few insights: Make sure to not show the node in the searched for part of the window. VCS will try to highlight it and run into an NPE ( MPS 2019.3) Consider cut and paste, or moving elements: these operations yield a removal event as well. Hide the balloon again, once the node gets added again. contributed by: @abstraktor How can you make sure that the IDE loads a jar exactly once and then never again? I have a .jar that depends on a native libray (.dll/.so/\u2026). To use it in an MPS plugin I have a stubs solution for it. Unfortunately, without further ado, MPS tries to reload the jar in some cases (e.g. after a rebuild). This will fail, because the JVM does not allow reloading of native libraries. How can I avoid this problem? To prevent that MPS will ever (re-)load .jars / stubs of a solution, you can check the facet \u201cIDEA Plugin\u201d in the \u201cFacets\u201d tab of the solution properties. This will show another tab where you have to set the Plugin ID `com.intellij. Now we just have to ensure that the .jars can be found at runtime (i.e. they must be on the classpath). The simplest approach would be to put them into the lib directory of the application (e.g. MPS installation / your product RCP ). contributed by: @till-f How can you use an IntelliJ icon for an action? I want to use one of the icons shipped with IntelliJ for my own action ( jetbrains.mps.lang.plugin.structure.ActionDeclaration ). How can I reference the icon? (note: this question might be deprecated for newer MPS versions) You can use IconLoader.getIcon(...) in the reflective editor. Right-click the editor for the icon, use show reflective editor and enter the expression as shown in the screenshot: contributed by: @till-f How to use a projection mode switcher to alter an editor component? I have a concept editor in which I use an EditorComponent \\(A\\) . Using the projection menu entry, I would like to switch to another editor component \\(B\\) upon activation. First \\(B\\) must override \\(A\\) and the applicable concept also must not differ. Then for \\(B\\) in applicable in context we must provide a concept editor context hint . This hint must also be referenced from a Projection Mode Switcher . Afterwards you will find a new entry in the Projection menu. Hint when used with Grammar Cells: you have to disable component inlining which can be activated by an intention at the position where the include of \\(A\\) happens. Also in any editor component that inherits from \\(A\\) and \\(A\\) itself we cannot use Grammar Cells. contributed by: @dbinkele","title":"General"},{"location":"aspects/plugin/#languagesfeatures","text":"I want to merge models. Use the language de.itemis.mps.modelmerger from MPS -extensions . I want to verify the structure of a node. Use the language de.slisson.mps.structurecheck from MPS -extensions . I want to store different states/versions of a node inside the model. Use the language de.itemis.mps.nodeversioning from MPS -extensions .","title":"Languages/features"},{"location":"aspects/plugin/#open-api","text":"How do you create a new SContainmentLink for a non-existent role? 1 . Create it through MetaAdapterFactory . How to you check if a model is a generator model, a test model etc.? Call the corresponding method in SModelStereotype . How do you add imports to a model? Use the class ModelImportHelper and call addImport . How can you open an MPS Editor Tab programmatically? 1 EditorContext . getEditorPanelManager (). openEditor ( node ); Is it possible to associate an MPS -Aspect with more than one node? 1 IConceptAspect . getBaseConceptCollection ();","title":"Open API"},{"location":"aspects/plugin/#troubleshooting","text":"A reference to a key in an action context parameter is out of search scope. You need to add a dependency to MPSCommonDataKeys . This class extends PlatformDataKeys and this class extends CommonDataKeys . An action isn\u2019t visible. You have to add it to an ActionGroup that can be attached to differenct places such as the context menu or the build menu. All of the action context parameters that are marked as required have to be available and the isApplicable block must return true for an action to be visible. For debugging purposes you can set always visible to true to check if your action is registered at all. You also need to have a standalone descriptor in your model for it to work. Additionaly, the solution kind should be set to Other in the Java tab of the solution properties ( Plugin | MPS ). How to create new SContainmentLink for a non-existent role? \u21a9","title":"Troubleshooting"},{"location":"aspects/polyfun/","text":"Polyfun aspect \u00b6 This aspect allows to declare polymorphic functions and is part of Shadow Models in MPS -extensions . You can declare a function that can have different implementations per language. To get a better understanding, have a look at the corresponding sandbox. Is there a handler which the IDE calls when it loads a language? I have a language \\(K\\) with some languages extending \\(K\\) named \\(A\\) , \\(B\\) and \\(C\\) . \\(K\\) needs to access some behavior implemented by \\(A\\) , \\(B\\) or \\(C\\) , depending on which of these are deployed. In order to do that, I implemented a registry where \\(A\\) , \\(B\\) , and \\(C\\) can register and which \\(K\\) uses to retrieve a common interface with a specific implementation by \\(A\\) , \\(B\\) or \\(C\\) . The question remains: How can \\(A\\) , \\(B\\) and \\(C\\) register their implementation at the registry? Is there maybe better mechanism I should use here? The language de.q60.mps.polymorphicfunctions allows you to do that. It provides a new language aspect where you can declare a function in one language and multiple implementations in other languages. It supports polymorphic dispatch and even priority rules in case there are multiple applicable implementations. answered by: @slisson Alternative Typically you would implement this by using the extension point mechanism: language \\(K\\) defines an extension point \\(EP\\) (inside of its plugin aspect) with an interface \\(EPI\\) for the extension implementors. language \\(A\\) , \\(B\\) and \\(C\\) contribute extensions for the EP with specific implementations of the \\(EPI\\) interface (also inside of the plugin aspect). language \\(K\\) provides a facade for querying current extensions registered for the \\(EP\\) and implements an approriate strategy for handling multiple implementors of \\(EPI\\) contributed by different extensions from languages \\(A\\) , \\(B\\) and \\(C\\) : by returning the implementor from the first extension, if your scenario expects only one deployed language with a specific implementation. by picking up one of the implementors from multiple extensions using some criteria, like a priority. by combining/chaining multiple implementors according to your specific logic. Because the facade would typically implement some simple caching of the resulting \\(EPI\\) implementation (to not query the \\(EP\\) every time the functionality is required), this would mean that you might need to implement some additional mechanism to allow for dynamical reload/reset of the current \\(EPI\\) implementation during the development, when a new extension is created and tested. answered by: @wsafonov","title":"Polyfun"},{"location":"aspects/polyfun/#polyfun-aspect","text":"This aspect allows to declare polymorphic functions and is part of Shadow Models in MPS -extensions . You can declare a function that can have different implementations per language. To get a better understanding, have a look at the corresponding sandbox. Is there a handler which the IDE calls when it loads a language? I have a language \\(K\\) with some languages extending \\(K\\) named \\(A\\) , \\(B\\) and \\(C\\) . \\(K\\) needs to access some behavior implemented by \\(A\\) , \\(B\\) or \\(C\\) , depending on which of these are deployed. In order to do that, I implemented a registry where \\(A\\) , \\(B\\) , and \\(C\\) can register and which \\(K\\) uses to retrieve a common interface with a specific implementation by \\(A\\) , \\(B\\) or \\(C\\) . The question remains: How can \\(A\\) , \\(B\\) and \\(C\\) register their implementation at the registry? Is there maybe better mechanism I should use here? The language de.q60.mps.polymorphicfunctions allows you to do that. It provides a new language aspect where you can declare a function in one language and multiple implementations in other languages. It supports polymorphic dispatch and even priority rules in case there are multiple applicable implementations. answered by: @slisson Alternative Typically you would implement this by using the extension point mechanism: language \\(K\\) defines an extension point \\(EP\\) (inside of its plugin aspect) with an interface \\(EPI\\) for the extension implementors. language \\(A\\) , \\(B\\) and \\(C\\) contribute extensions for the EP with specific implementations of the \\(EPI\\) interface (also inside of the plugin aspect). language \\(K\\) provides a facade for querying current extensions registered for the \\(EP\\) and implements an approriate strategy for handling multiple implementors of \\(EPI\\) contributed by different extensions from languages \\(A\\) , \\(B\\) and \\(C\\) : by returning the implementor from the first extension, if your scenario expects only one deployed language with a specific implementation. by picking up one of the implementors from multiple extensions using some criteria, like a priority. by combining/chaining multiple implementors according to your specific logic. Because the facade would typically implement some simple caching of the resulting \\(EPI\\) implementation (to not query the \\(EP\\) every time the functionality is required), this would mean that you might need to implement some additional mechanism to allow for dynamical reload/reset of the current \\(EPI\\) implementation during the development, when a new extension is created and tested. answered by: @wsafonov","title":"Polyfun aspect"},{"location":"aspects/refactorings/","text":"Refactorings aspect \u00b6 Simple refactorings can be written using the jetbrains.mps.lang.refactoring language. \u2014 MPS documentation Is this aspect widely used? No, even in MPS languages there are just a few use cases. Can you change the concept of a node while keeping all properties, references, and children? Yes, call RefactoringRuntime.replaceWithNewConcept with your node and new concept als parameters. In this class there are also some othere useful methods such as changePropertyInstance(node, oldProp, newProp) and changeReferenceLinkInstances(node, oldLink, newLink) . Specific Languages Blog: Changing the concept of a node","title":"Refactorings"},{"location":"aspects/refactorings/#refactorings-aspect","text":"Simple refactorings can be written using the jetbrains.mps.lang.refactoring language. \u2014 MPS documentation Is this aspect widely used? No, even in MPS languages there are just a few use cases. Can you change the concept of a node while keeping all properties, references, and children? Yes, call RefactoringRuntime.replaceWithNewConcept with your node and new concept als parameters. In this class there are also some othere useful methods such as changePropertyInstance(node, oldProp, newProp) and changeReferenceLinkInstances(node, oldLink, newLink) . Specific Languages Blog: Changing the concept of a node","title":"Refactorings aspect"},{"location":"aspects/scripts/","text":"Scripts aspect \u00b6 The scripts aspect lets you perform changes to your models in batches. \u2014 MPS documentation Are enhancement scripts executed as part of the migration process? No, they are not.","title":"Scripts"},{"location":"aspects/scripts/#scripts-aspect","text":"The scripts aspect lets you perform changes to your models in batches. \u2014 MPS documentation Are enhancement scripts executed as part of the migration process? No, they are not.","title":"Scripts aspect"},{"location":"aspects/structure/","text":"Structure aspect \u00b6 The structure aspect contains all the concept and interface declarations of a language. Concepts \u00b6 How can you create an MPS concept declaration programmatically? Specific Languages blog: Create a MPS concept declaration programmatically Concept XY wasn\u2019t found in the language. Specific Languages blog: Concept not found How do you find examples of MPS concepts? Specific Languages blog: Finding examples of MPS concepts When a concept extends another concept/implements some interfaces, which method is called when they are defined in more than one concepts/interfaces? The used algorithm is a a variant of C3 linearization ( source ). When the concept doesn\u2019t implement the method itself, first the implemented interfaces are recursively considered in declaration order, then the extended concept. You can try it yourself, for example for the concept ClassConcept : 1 2 3 BehaviorRegistryImpl r = ( BehaviorRegistryImpl ) ConceptRegistry . getInstance (). getBehaviorRegistry (); BHDescriptor d = r . getBHDescriptor ( concept / ClassConcept / ); # print r . getMRO (). calcLinearization ( _SAbstractConcept . wrap ( concept / ClassConcept / )); If you want to call a specific type () implementation, you have to just cast the node to the corresponding concept and then call the method e.g. myNode as MyITypeable . type () How can you get the short node ID from the node ID and vice versa? Short one: new IdEncoder (). toText ( node . getNodeId ()) Long one: new IdEncoder (). parseNodeId ( nodeId ) Interfaces \u00b6 The concept implements ISuppressErrors but errors are still shown for the node. You have to implement IDontApplyTypesystemRules and ISkipConstraintsChecking . More information can be found in Suppressing Errors | MPS . What\u2019s IMainClass used for? It allows to execute baselanguage code. An example can be found in Shapes tutorial - Running the code . Properties \u00b6 How do you use a list of string properties? Wrap your property into a new concept and use a child collection: Can properties be overridden? No, more info can be found in MPS -17143 . References \u00b6 How do you get the previous label of a reference? 1 2 3 (( SReference ) node . getReference ( link )). getResolveInfo () ` // or node . reference < ref > . resolveInfo Can you use the resolve info to fix a broken reference? 1 ResolverComponent . getInstance (). resolve (...) How can you find broken references on the console? 1 2 3 # instances < scope = global > ( BaseConcept ). where ({ ~ it => it . references . any ({ ~ it => it . target == null ; }); })","title":"Structure"},{"location":"aspects/structure/#structure-aspect","text":"The structure aspect contains all the concept and interface declarations of a language.","title":"Structure aspect"},{"location":"aspects/structure/#concepts","text":"How can you create an MPS concept declaration programmatically? Specific Languages blog: Create a MPS concept declaration programmatically Concept XY wasn\u2019t found in the language. Specific Languages blog: Concept not found How do you find examples of MPS concepts? Specific Languages blog: Finding examples of MPS concepts When a concept extends another concept/implements some interfaces, which method is called when they are defined in more than one concepts/interfaces? The used algorithm is a a variant of C3 linearization ( source ). When the concept doesn\u2019t implement the method itself, first the implemented interfaces are recursively considered in declaration order, then the extended concept. You can try it yourself, for example for the concept ClassConcept : 1 2 3 BehaviorRegistryImpl r = ( BehaviorRegistryImpl ) ConceptRegistry . getInstance (). getBehaviorRegistry (); BHDescriptor d = r . getBHDescriptor ( concept / ClassConcept / ); # print r . getMRO (). calcLinearization ( _SAbstractConcept . wrap ( concept / ClassConcept / )); If you want to call a specific type () implementation, you have to just cast the node to the corresponding concept and then call the method e.g. myNode as MyITypeable . type () How can you get the short node ID from the node ID and vice versa? Short one: new IdEncoder (). toText ( node . getNodeId ()) Long one: new IdEncoder (). parseNodeId ( nodeId )","title":"Concepts"},{"location":"aspects/structure/#interfaces","text":"The concept implements ISuppressErrors but errors are still shown for the node. You have to implement IDontApplyTypesystemRules and ISkipConstraintsChecking . More information can be found in Suppressing Errors | MPS . What\u2019s IMainClass used for? It allows to execute baselanguage code. An example can be found in Shapes tutorial - Running the code .","title":"Interfaces"},{"location":"aspects/structure/#properties","text":"How do you use a list of string properties? Wrap your property into a new concept and use a child collection: Can properties be overridden? No, more info can be found in MPS -17143 .","title":"Properties"},{"location":"aspects/structure/#references","text":"How do you get the previous label of a reference? 1 2 3 (( SReference ) node . getReference ( link )). getResolveInfo () ` // or node . reference < ref > . resolveInfo Can you use the resolve info to fix a broken reference? 1 ResolverComponent . getInstance (). resolve (...) How can you find broken references on the console? 1 2 3 # instances < scope = global > ( BaseConcept ). where ({ ~ it => it . references . any ({ ~ it => it . target == null ; }); })","title":"References"},{"location":"aspects/test/","text":"Test aspect \u00b6 Testing is an essential part of language designer\u2019s work. \u2014 MPS documentation General \u00b6 Can you add an annotation to skip tests the way it normally works with JUnit? No, it isn\u2019t supported. You have to comment out the test case. The only statement that supports this behaviour is the assert statement of KernelF ( AssertTestItem ). What\u2019s the TestInfo node used for? Specific Languages Blog: How to create a TestInfo node for your tests How do node tests work? Specific Languages Blog: How do node tests work? How to know if some MPS code is inside a test? Given I am writing some code in MPS that is supposed to run only if we\u2019re not running tests. How can I detect if I\u2019m running a test? Don\u2019t. Consider mocking something out instead or ensuring that you are testing on a low-enough level. here are two options, if you really need to to this: 1 2 3 4 5 // true if running tests from inside the MPS process or from command line jetbrains . mps . RuntimeFlags . getTestMode (). isInsideTestEnvironment () // true if running tests from command line only jetbrains . mps . RuntimeFlags . isTestMode () contributed by: @abstraktor Why does the node ID change during a node test? Given I have a node test case. My test case has a check node called data and my test case has a a test test1 which prints the node ID of data My test case has a a test test2 which prints the node id of data . When I run the test test1 and test2 print different node IDs. Why is that? Terms used: check-node for these fixture nodes that you enter into the test case under nodes test case for the root node, the chunk that contains the tests tests for the test methods of which we have test1 and test2 Each test case runs on its own copy of its model. MPS tries to keep tests reproducible and isolated even when being run in-process. For that, MPS copies the whole model into a temporary model. Modifications of one test case will then be invisible to the next test case, since it will work on a new temporary model. This prevents test-cases from interacting. Running tests in a separate model ensures that they will never modify the original model (as long as you don\u2019t explicitly start acting on other models). Check-nodes per test A test-case may have multiple tests though. MPS also isolates single tests within the same test case. For that, the check-nodes are copied once for each test. Each test may then act on their own copy. 1 2 // there is one data node in the model for each test assert 2 equals data . model . nodes ( Data ). size All tests of a test-case share their referenced nodes To save memory though, these check-nodes all lie in the same model for each test case. References to other nodes outside the test case will only need to be copied once and be shared by all tests of that test case. As a result, the IDs of check-nodes change and the IDs of non-check-nodes are the same as in the original model. 1 2 // nodes in this model that are not check-nodes of this test case will only be there once assert 1 equals dataRef . model . nodes ( Chunk ). size ; Consequently, multiple tests of the same test case are not fully isolated. In the following example, both tests assert and do the same, yet test3 passes while test4 fails. The data element is now located in a separate chunk outside the testcase and the check-node is a reference to it. As a result, test4 is running red because test3 already modified the referenced node. Kinds of tests I checked this behavior in-depth for node tests. I think it is similar for editor tests. I am sure that this does not apply to baseLang-tests since they don\u2019t prepare a temporary model for you. Practical effects of this \u00b6 These are some rules of thumb that result from that: The tests of a test-case may interact, so you should inline all modified nodes into the testcase to be check-nodes . Whenever you modify many nodes in the model, consider writing a migration and migration test instead. Remember that the console and each test will output separate IDs for the conceptually same node. And they will change from run to run. Especially when stepping through tests, it is easy to be confused by that and draw false conclusions Whenever your code queries for the nodes of a model, be ready to see duplicates for each test (as in the dataRef example). You may test this by asserting that something is included or excluded instead of asserting true equality of the expected and actual lists. Another source for duplicates is if the test model imports itself. If you need full power on the temporary model, consider writing a baseLanguage test and creating your repository and model by hand. jetbrains.mps.smodel.TestModelFactory allows to do that, e.g. the ModelListenerTest uses that TestModelFactory. It is unfortunately not available as stubs, so that you\u2019ll need to copy it to your project contributed by: @abstraktor How to test \u00b6 How to set up a generator smoke test? I would like to write a generator smoke test. Therefor, I have some solutions with models (regular one, not @test models) which are build from command line and the generators invoked are generating some .c files. In addition, I also have a @test model in the same solution with some unit tests which checks if the output directories of these models contain any generated files. I don\u2019t invoke the generation of the models programatically but rely on the ant task which is generating the solution. Unfortunately this setup always leads to broken tests. It seems like the unit tests are executed before the models (which are build during CI run) and though the test fails. asked by: @arimer When the tests work fine when run from within the IDE , then the problem is most probably that when your tests are executed, they are running from the jars and not the sources. The generator output location points into the jar file that the tests are executed from and not to the real source location. You could change the packaging to include the source_gen folder for you specific test solution. This can be done the following way in the default layout of your build model: In this case you would need to detect if you are running from sources or from jar in CI and the change the location where you look for the generated files. This can be done by calculation a solution relative path for the test solution containing the packed sources. 1 2 3 4 5 6 7 8 9 10 11 12 13 //case running from .jar if ( module instanceof AbstractModule && (( AbstractModule ) module ). getModuleSourceDir () != null ) { AbstractModule s = (( AbstractModule ) module ); if ( s . isPackaged () && s . getModuleSourceDir (). getBundleHome () != null ) { IFile bundleHome = s . getModuleSourceDir (). getBundleHome (); return bundleHome . getFileSystem (). getFile ( bundleHome . getPath () + \"!\" + path ); } // case: running from sources IFile relativePath = s . getModuleSourceDir (). getDescendant ( path ); return relativePath ; } The easier solution is to place the tests in separate solution and then invoke the make process for the solution that contains your input programmatically, so you can assert over the output. An example implementation how the make process is invoked can be found in the mbeddr-c part . answered by: @coolya How to write editor tests for context assistants? I need to unit tests context assistants , ideally with an EditorTestCase, but it is not supported out of the box, any idea? This snippet allows to automatically test context assistant in the code section of the EditorTestCase : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Context assistants takes some time to popup,otherwise getActiveAssistant returns null Thread . sleep ( 3000 ); ContextAssistantManager contextAssistantManager = editor component . getEditorContext (). getContextAssistantManager (); final ContextAssistantController controller = (( ContextAssistantController ) contextAssistantManager . getActiveAssistant ()); foreach menuItem in contextAssistantManager . getActiveMenuItems () { if ( \"Item Name\" : eq : (( ActionItemBase ) menuItem ). getLabelText ( \"\" )) { // Execute it in a BaseEditorTestBody context final Project project = _this . [ Project ] < no instance > . getProject (); _this . [ void ] < no instance > . runUndoableInEDTAndWait ( new Runnable () { @Override public void run () { project . getModelAccess (). executeCommand ({ => controller . executeActionItem (( ActionItemBase ) menuItem ); }); } }); } } Note: - \u201cItem Name\u201d must be replaced with the name of the item as shown in the editor - \u201c_this\u201d is a concept from internalBaseLanguage DSL . contributed by: @cmoine How to name checking errors with dynamic messages? When I make the error text dynamic: Then my error is named UnnamedError and I have a hard time selecting the right one: How do I name errors with dynamic messages? Go to your error statement in your checking rule. Import the language jetbrains.mps.lang.test . Run the intention Add Message Annotation . Type a nice name. Note that this does not work for errors that result from constraints . contributed by: @abstraktor What\u2019s the best way to test the contents of the code completion/substitution menu for a given cursor position using a NodesTestCase or an EditorTestCase ? Example for an EditorTestCase : 1 2 3 4 SubstituteInfo si = ( editor component . getSelectedCell ()). getSubstituteInfo (); list < SubstituteAction > actions = si . getMatchingActions ( \"\" , false ); assert actions . size == 4 ; assert actions . any ({ it => it . getMatchingText (). equals ( \"something\" ); }); Troubleshooting \u00b6 Tests aren\u2019t running at all. A test info node has to be added to the model of the tests, so that the tests can find the path of the project. The project path also has to be set in this node. Make sure that variables that are used in this path are set in Preferences \u2192 Appearance & Behavior \u2192 Path Variables ( TestInfo | MPS ). Tests have a long warm up time and run slowly. When running the tests from a run configuration, enable Execute in the same process in the configuration settings. Also check the box Allow parallel run ( Running the tests | MPS ). Why does my test execution fail with \u201cTest project \u2018$\u2026\u2019 is not opened. Aborted\u201d? This is happening because the used variable in the TestInfo is not set. Go to File \u2192 Settings \u2192 Path Variables and create an entry for your variable, with a path to the project location on your hard drive.","title":"Test"},{"location":"aspects/test/#test-aspect","text":"Testing is an essential part of language designer\u2019s work. \u2014 MPS documentation","title":"Test aspect"},{"location":"aspects/test/#general","text":"Can you add an annotation to skip tests the way it normally works with JUnit? No, it isn\u2019t supported. You have to comment out the test case. The only statement that supports this behaviour is the assert statement of KernelF ( AssertTestItem ). What\u2019s the TestInfo node used for? Specific Languages Blog: How to create a TestInfo node for your tests How do node tests work? Specific Languages Blog: How do node tests work? How to know if some MPS code is inside a test? Given I am writing some code in MPS that is supposed to run only if we\u2019re not running tests. How can I detect if I\u2019m running a test? Don\u2019t. Consider mocking something out instead or ensuring that you are testing on a low-enough level. here are two options, if you really need to to this: 1 2 3 4 5 // true if running tests from inside the MPS process or from command line jetbrains . mps . RuntimeFlags . getTestMode (). isInsideTestEnvironment () // true if running tests from command line only jetbrains . mps . RuntimeFlags . isTestMode () contributed by: @abstraktor Why does the node ID change during a node test? Given I have a node test case. My test case has a check node called data and my test case has a a test test1 which prints the node ID of data My test case has a a test test2 which prints the node id of data . When I run the test test1 and test2 print different node IDs. Why is that? Terms used: check-node for these fixture nodes that you enter into the test case under nodes test case for the root node, the chunk that contains the tests tests for the test methods of which we have test1 and test2 Each test case runs on its own copy of its model. MPS tries to keep tests reproducible and isolated even when being run in-process. For that, MPS copies the whole model into a temporary model. Modifications of one test case will then be invisible to the next test case, since it will work on a new temporary model. This prevents test-cases from interacting. Running tests in a separate model ensures that they will never modify the original model (as long as you don\u2019t explicitly start acting on other models). Check-nodes per test A test-case may have multiple tests though. MPS also isolates single tests within the same test case. For that, the check-nodes are copied once for each test. Each test may then act on their own copy. 1 2 // there is one data node in the model for each test assert 2 equals data . model . nodes ( Data ). size All tests of a test-case share their referenced nodes To save memory though, these check-nodes all lie in the same model for each test case. References to other nodes outside the test case will only need to be copied once and be shared by all tests of that test case. As a result, the IDs of check-nodes change and the IDs of non-check-nodes are the same as in the original model. 1 2 // nodes in this model that are not check-nodes of this test case will only be there once assert 1 equals dataRef . model . nodes ( Chunk ). size ; Consequently, multiple tests of the same test case are not fully isolated. In the following example, both tests assert and do the same, yet test3 passes while test4 fails. The data element is now located in a separate chunk outside the testcase and the check-node is a reference to it. As a result, test4 is running red because test3 already modified the referenced node. Kinds of tests I checked this behavior in-depth for node tests. I think it is similar for editor tests. I am sure that this does not apply to baseLang-tests since they don\u2019t prepare a temporary model for you.","title":"General"},{"location":"aspects/test/#practical-effects-of-this","text":"These are some rules of thumb that result from that: The tests of a test-case may interact, so you should inline all modified nodes into the testcase to be check-nodes . Whenever you modify many nodes in the model, consider writing a migration and migration test instead. Remember that the console and each test will output separate IDs for the conceptually same node. And they will change from run to run. Especially when stepping through tests, it is easy to be confused by that and draw false conclusions Whenever your code queries for the nodes of a model, be ready to see duplicates for each test (as in the dataRef example). You may test this by asserting that something is included or excluded instead of asserting true equality of the expected and actual lists. Another source for duplicates is if the test model imports itself. If you need full power on the temporary model, consider writing a baseLanguage test and creating your repository and model by hand. jetbrains.mps.smodel.TestModelFactory allows to do that, e.g. the ModelListenerTest uses that TestModelFactory. It is unfortunately not available as stubs, so that you\u2019ll need to copy it to your project contributed by: @abstraktor","title":"Practical effects of this"},{"location":"aspects/test/#how-to-test","text":"How to set up a generator smoke test? I would like to write a generator smoke test. Therefor, I have some solutions with models (regular one, not @test models) which are build from command line and the generators invoked are generating some .c files. In addition, I also have a @test model in the same solution with some unit tests which checks if the output directories of these models contain any generated files. I don\u2019t invoke the generation of the models programatically but rely on the ant task which is generating the solution. Unfortunately this setup always leads to broken tests. It seems like the unit tests are executed before the models (which are build during CI run) and though the test fails. asked by: @arimer When the tests work fine when run from within the IDE , then the problem is most probably that when your tests are executed, they are running from the jars and not the sources. The generator output location points into the jar file that the tests are executed from and not to the real source location. You could change the packaging to include the source_gen folder for you specific test solution. This can be done the following way in the default layout of your build model: In this case you would need to detect if you are running from sources or from jar in CI and the change the location where you look for the generated files. This can be done by calculation a solution relative path for the test solution containing the packed sources. 1 2 3 4 5 6 7 8 9 10 11 12 13 //case running from .jar if ( module instanceof AbstractModule && (( AbstractModule ) module ). getModuleSourceDir () != null ) { AbstractModule s = (( AbstractModule ) module ); if ( s . isPackaged () && s . getModuleSourceDir (). getBundleHome () != null ) { IFile bundleHome = s . getModuleSourceDir (). getBundleHome (); return bundleHome . getFileSystem (). getFile ( bundleHome . getPath () + \"!\" + path ); } // case: running from sources IFile relativePath = s . getModuleSourceDir (). getDescendant ( path ); return relativePath ; } The easier solution is to place the tests in separate solution and then invoke the make process for the solution that contains your input programmatically, so you can assert over the output. An example implementation how the make process is invoked can be found in the mbeddr-c part . answered by: @coolya How to write editor tests for context assistants? I need to unit tests context assistants , ideally with an EditorTestCase, but it is not supported out of the box, any idea? This snippet allows to automatically test context assistant in the code section of the EditorTestCase : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Context assistants takes some time to popup,otherwise getActiveAssistant returns null Thread . sleep ( 3000 ); ContextAssistantManager contextAssistantManager = editor component . getEditorContext (). getContextAssistantManager (); final ContextAssistantController controller = (( ContextAssistantController ) contextAssistantManager . getActiveAssistant ()); foreach menuItem in contextAssistantManager . getActiveMenuItems () { if ( \"Item Name\" : eq : (( ActionItemBase ) menuItem ). getLabelText ( \"\" )) { // Execute it in a BaseEditorTestBody context final Project project = _this . [ Project ] < no instance > . getProject (); _this . [ void ] < no instance > . runUndoableInEDTAndWait ( new Runnable () { @Override public void run () { project . getModelAccess (). executeCommand ({ => controller . executeActionItem (( ActionItemBase ) menuItem ); }); } }); } } Note: - \u201cItem Name\u201d must be replaced with the name of the item as shown in the editor - \u201c_this\u201d is a concept from internalBaseLanguage DSL . contributed by: @cmoine How to name checking errors with dynamic messages? When I make the error text dynamic: Then my error is named UnnamedError and I have a hard time selecting the right one: How do I name errors with dynamic messages? Go to your error statement in your checking rule. Import the language jetbrains.mps.lang.test . Run the intention Add Message Annotation . Type a nice name. Note that this does not work for errors that result from constraints . contributed by: @abstraktor What\u2019s the best way to test the contents of the code completion/substitution menu for a given cursor position using a NodesTestCase or an EditorTestCase ? Example for an EditorTestCase : 1 2 3 4 SubstituteInfo si = ( editor component . getSelectedCell ()). getSubstituteInfo (); list < SubstituteAction > actions = si . getMatchingActions ( \"\" , false ); assert actions . size == 4 ; assert actions . any ({ it => it . getMatchingText (). equals ( \"something\" ); });","title":"How to test"},{"location":"aspects/test/#troubleshooting","text":"Tests aren\u2019t running at all. A test info node has to be added to the model of the tests, so that the tests can find the path of the project. The project path also has to be set in this node. Make sure that variables that are used in this path are set in Preferences \u2192 Appearance & Behavior \u2192 Path Variables ( TestInfo | MPS ). Tests have a long warm up time and run slowly. When running the tests from a run configuration, enable Execute in the same process in the configuration settings. Also check the box Allow parallel run ( Running the tests | MPS ). Why does my test execution fail with \u201cTest project \u2018$\u2026\u2019 is not opened. Aborted\u201d? This is happening because the used variable in the TestInfo is not set. Go to File \u2192 Settings \u2192 Path Variables and create an entry for your variable, with a path to the project location on your hard drive.","title":"Troubleshooting"},{"location":"aspects/textgen/","text":"TextGen aspect \u00b6 The TextGen language aspect defines a model to text transformation. \u2014 MPS documentation How do you get the TextGen for a node? Use the class TextGeneratorEngine . It only works for root nodes such as ClassConcept and returns null when there is no text output. Can you also generate the text from the generator aspect? Use the language com.dslfoundry.plaintextgen from MPS -extensions . Can I implement TextGen for another language? I would like to implement a textgen for language A in a separate language B. Concretely, I need a different textgen for some of the KernelF concepts. When I try to do this, I get a compile error, because it looks like the generated descriptor does not include \u201cinherited\u201d concepts: 1 2 3 4 5 6 7 8 9 10 11 12 public TextGenDescriptor getDescriptor ( @NotNull SAbstractConcept concept ) { switch ( myIndex . index ( concept )) { case LanguageConceptSwitch . Component : return new Component_TextGen (); case LanguageConceptSwitch . Contract : return new Contract_TextGen (); case LanguageConceptSwitch . EmptyContent : return new EmptyContent_TextGen (); case LanguageConceptSwitch . Library : return new Library_TextGen (); case LanguageConceptSwitch . Port : return new Port_TextGen (); Is it not possible to \u201coverride the textgen\u201d this way? asked by: @markusvoelter It\u2019s not possible this way. So far the two ways I found to make this happen are: Extend the original language (A.ex) and create subconcepts of all the concepts you need to specialise the textgen. You will then need to do M2M transformation to replace the extended concepts. You can do this in a very generic way by using a scrip the generator that searches for all node of concepts that are extended in A.ex and replaces them by using the RefactoringRuntime.replaceWithNewConcept method. Create annotations that override the text gen of the concepts and attache them in a generator. Then MPS will first call the text gen of the annotation and you can override it there. There is MPS -22092 which describes this request. answered by: @coolya","title":"TextGen"},{"location":"aspects/textgen/#textgen-aspect","text":"The TextGen language aspect defines a model to text transformation. \u2014 MPS documentation How do you get the TextGen for a node? Use the class TextGeneratorEngine . It only works for root nodes such as ClassConcept and returns null when there is no text output. Can you also generate the text from the generator aspect? Use the language com.dslfoundry.plaintextgen from MPS -extensions . Can I implement TextGen for another language? I would like to implement a textgen for language A in a separate language B. Concretely, I need a different textgen for some of the KernelF concepts. When I try to do this, I get a compile error, because it looks like the generated descriptor does not include \u201cinherited\u201d concepts: 1 2 3 4 5 6 7 8 9 10 11 12 public TextGenDescriptor getDescriptor ( @NotNull SAbstractConcept concept ) { switch ( myIndex . index ( concept )) { case LanguageConceptSwitch . Component : return new Component_TextGen (); case LanguageConceptSwitch . Contract : return new Contract_TextGen (); case LanguageConceptSwitch . EmptyContent : return new EmptyContent_TextGen (); case LanguageConceptSwitch . Library : return new Library_TextGen (); case LanguageConceptSwitch . Port : return new Port_TextGen (); Is it not possible to \u201coverride the textgen\u201d this way? asked by: @markusvoelter It\u2019s not possible this way. So far the two ways I found to make this happen are: Extend the original language (A.ex) and create subconcepts of all the concepts you need to specialise the textgen. You will then need to do M2M transformation to replace the extended concepts. You can do this in a very generic way by using a scrip the generator that searches for all node of concepts that are extended in A.ex and replaces them by using the RefactoringRuntime.replaceWithNewConcept method. Create annotations that override the text gen of the concepts and attache them in a generator. Then MPS will first call the text gen of the annotation and you can override it there. There is MPS -22092 which describes this request. answered by: @coolya","title":"TextGen aspect"},{"location":"aspects/transformations/","text":"Transformations aspect \u00b6 This language is part of Shadow Models in MPS -extensions . Consult the documentation for more information. What\u2019s a fork? It can group a list of rules which can be applied. If there are nodes in the output where one of the transformations would again be applicable, nothing will happen unless you enable the fixpoint mode. When you use the transform keyword it will just copy the input and all its descendants. If any input concept matches a transformation rule parameter in the auto apply part, it will transform the input according to the matched transformation. What does the transform statement do? It has the same meaning as a COPY_SRC macro in MPS and it will just copy the input node and apply a rule.","title":"Transformations"},{"location":"aspects/transformations/#transformations-aspect","text":"This language is part of Shadow Models in MPS -extensions . Consult the documentation for more information. What\u2019s a fork? It can group a list of rules which can be applied. If there are nodes in the output where one of the transformations would again be applicable, nothing will happen unless you enable the fixpoint mode. When you use the transform keyword it will just copy the input and all its descendants. If any input concept matches a transformation rule parameter in the auto apply part, it will transform the input according to the matched transformation. What does the transform statement do? It has the same meaning as a COPY_SRC macro in MPS and it will just copy the input node and apply a rule.","title":"Transformations aspect"},{"location":"aspects/typesystem/","text":"Typstem aspect \u00b6 A type system is part of a language definition assigning types to the nodes in the models written using the language. The type system language is also used to check certain constraints on nodes and their types. \u2014 MPS documentation Type system rules aren\u2019t executing. Turn off the power save mode . Also make sure that the languages that contains the rules is used. Make sure that under Tool \u2192 Model Checker the typesystem checks are enabled. Some rules are only checked when Check model is invoked. In this case the option do not apply on the fly is set to true in a checking rule. Are comparison rules often used? No, they are rarely used (not many results across various code bases). How do you learn more about MPS CodeRules? This is kind of a new typesystem bases on constraints. Visit JetBrains/mps-coderules for more information. There is also a blog post about this project. The new MPS implementation of the Kotlin language uses CodeRules. More information can be found in JetBrains/mps-kotlin-typesystem . There is also a free course about it on stepik . Type system vs constraints? Specific Languages blog: Type system vs constraints Subtyping vs inheritance? Specific Languages blog: Subtyping vs inheritance How can you speed up model checks? Specific Languages blog: Speeding up model checks with Scope Cache How do you build a language extension for checking rules? I built a baselanguage extension which can be used in a checking rule (i.e., in the typesystem aspect of another language) buut the new language\u2019s generator isn\u2019t engaged during the generation of some checking rule using the extension (generation plan says: \u201cNOT IN THE PLAN\u201d). The generator of the new language must have a dependency to the baseLanguage generator with the scope set to Extends . contributed by: @kbirken When and why should you copy a type in an inference rule? I\u2019ve seen basically the same code, where one time the type is copied and another time it\u2019s just used (without the copy). When should we copy the type and why? 1 2 3 4 5 6 7 8 9 inference rule typeof_Member { applicable for concept = Member as member applicable always overrides false do { typeof ( member ) : == : member . type . copy ; } } The type should only be copied if you want to use it in another type as a child. In the example it should be fine to simply use member.type . But let\u2019s say you have a SetType concept in your language that contains an innerType as a child. If you want to construct an instance of that concept, you would write code like this: 1 2 3 node < SetType > result = new node < SetType > ; result . innerType = member . type . copy ; typeof ( member ) : == : result If you omit the .copy in the code, you would attempt to \u201chijack\u201d the member.type node from the member and break the model. MPS will complain. contributed by: @sergej-koscejev How do you suppress errors? Given I have a piece of embedded demonstration code and don\u2019t want it to show warnings (e.g. on unused variables). How can I do that? Make your node implement ISuppressErrors . If you don\u2019t override any methods of it, it will suppress all constraint, typesystem and cardinality errors and warnings. You may override #suppress(node<>) to only suppress the errors of certain subnodes. You may override #suppress(NodeReportItem) to only suppress certain errors. Overriding this will take precedence of overriding #suppress(node<>) . Xou should implement only one of them or manually call #suppress(node<>) from #suppress(NodeReportItem) . If there are nested nodes that implement ISuppressErrors , the error will be suppressed if any of them returns true. You may debug such by copying the errornode to the console (e.g. nodeRef@50283 ) and running this line: 1 2 3 > nodeRef @ 50283. ancestors < concept = ISuppressErrors > . select ({ ~ it => [ it , it . suppress ( nodeRef @ 50283 ) ] ; }); [[ dummy , false ] , [< no name >[ LiteralProgramFragment ] : dummy (): void , false ] , [ Demo1 , true ]] The result is the path from that node to the top and will tell you which node is suppressing that error. The concept IAntisuppressErrors also plays a role there, although it is deprecated (implement the suppress method instead). contributed by: @abstraktor Is there an elegant way to express inference rules on lists? If you want to calculate the common type of more than one node you can use a type system variable for that. Example: 1 2 3 4 5 6 7 var x ; foreach it in self . items { infer x : >= : typeof ( it ) } typeof ( self ) : == : operation type ( self , x , null ); Given that you really need the operation type in the end. You most probably need to change the implementation of the rules contributing to the operation type to only use \u201cone side\u201d. If the type of the expression is simply the type of the variable x you can omit it. answered by: @coolya What\u2019s Helgins? It\u2019s the old name of the typesystem. The name is nowadays not used anymore.","title":"Typesystem"},{"location":"aspects/typesystem/#typstem-aspect","text":"A type system is part of a language definition assigning types to the nodes in the models written using the language. The type system language is also used to check certain constraints on nodes and their types. \u2014 MPS documentation Type system rules aren\u2019t executing. Turn off the power save mode . Also make sure that the languages that contains the rules is used. Make sure that under Tool \u2192 Model Checker the typesystem checks are enabled. Some rules are only checked when Check model is invoked. In this case the option do not apply on the fly is set to true in a checking rule. Are comparison rules often used? No, they are rarely used (not many results across various code bases). How do you learn more about MPS CodeRules? This is kind of a new typesystem bases on constraints. Visit JetBrains/mps-coderules for more information. There is also a blog post about this project. The new MPS implementation of the Kotlin language uses CodeRules. More information can be found in JetBrains/mps-kotlin-typesystem . There is also a free course about it on stepik . Type system vs constraints? Specific Languages blog: Type system vs constraints Subtyping vs inheritance? Specific Languages blog: Subtyping vs inheritance How can you speed up model checks? Specific Languages blog: Speeding up model checks with Scope Cache How do you build a language extension for checking rules? I built a baselanguage extension which can be used in a checking rule (i.e., in the typesystem aspect of another language) buut the new language\u2019s generator isn\u2019t engaged during the generation of some checking rule using the extension (generation plan says: \u201cNOT IN THE PLAN\u201d). The generator of the new language must have a dependency to the baseLanguage generator with the scope set to Extends . contributed by: @kbirken When and why should you copy a type in an inference rule? I\u2019ve seen basically the same code, where one time the type is copied and another time it\u2019s just used (without the copy). When should we copy the type and why? 1 2 3 4 5 6 7 8 9 inference rule typeof_Member { applicable for concept = Member as member applicable always overrides false do { typeof ( member ) : == : member . type . copy ; } } The type should only be copied if you want to use it in another type as a child. In the example it should be fine to simply use member.type . But let\u2019s say you have a SetType concept in your language that contains an innerType as a child. If you want to construct an instance of that concept, you would write code like this: 1 2 3 node < SetType > result = new node < SetType > ; result . innerType = member . type . copy ; typeof ( member ) : == : result If you omit the .copy in the code, you would attempt to \u201chijack\u201d the member.type node from the member and break the model. MPS will complain. contributed by: @sergej-koscejev How do you suppress errors? Given I have a piece of embedded demonstration code and don\u2019t want it to show warnings (e.g. on unused variables). How can I do that? Make your node implement ISuppressErrors . If you don\u2019t override any methods of it, it will suppress all constraint, typesystem and cardinality errors and warnings. You may override #suppress(node<>) to only suppress the errors of certain subnodes. You may override #suppress(NodeReportItem) to only suppress certain errors. Overriding this will take precedence of overriding #suppress(node<>) . Xou should implement only one of them or manually call #suppress(node<>) from #suppress(NodeReportItem) . If there are nested nodes that implement ISuppressErrors , the error will be suppressed if any of them returns true. You may debug such by copying the errornode to the console (e.g. nodeRef@50283 ) and running this line: 1 2 3 > nodeRef @ 50283. ancestors < concept = ISuppressErrors > . select ({ ~ it => [ it , it . suppress ( nodeRef @ 50283 ) ] ; }); [[ dummy , false ] , [< no name >[ LiteralProgramFragment ] : dummy (): void , false ] , [ Demo1 , true ]] The result is the path from that node to the top and will tell you which node is suppressing that error. The concept IAntisuppressErrors also plays a role there, although it is deprecated (implement the suppress method instead). contributed by: @abstraktor Is there an elegant way to express inference rules on lists? If you want to calculate the common type of more than one node you can use a type system variable for that. Example: 1 2 3 4 5 6 7 var x ; foreach it in self . items { infer x : >= : typeof ( it ) } typeof ( self ) : == : operation type ( self , x , null ); Given that you really need the operation type in the end. You most probably need to change the implementation of the rules contributing to the operation type to only use \u201cone side\u201d. If the type of the expression is simply the type of the variable x you can omit it. answered by: @coolya What\u2019s Helgins? It\u2019s the old name of the typesystem. The name is nowadays not used anymore.","title":"Typstem aspect"},{"location":"aspects/vcs/","text":"VCS aspect \u00b6 The VCS merge aspect language aspect defines strategies to automatically resolve merge conflicts for nodes, their children, references and properties. \u2014 MPS documentation I pulled some changes or did some other VCS related stuff and strange errors appear or changes aren\u2019t visible. There might be a bug related to caching or VCS in general. Invalidating the cache or restarting the project might help. There are quite some bugs in VCS . How do you avoid merge conflicts? Specific Languages blog: Avoiding merge conflicts","title":"VCS"},{"location":"aspects/vcs/#vcs-aspect","text":"The VCS merge aspect language aspect defines strategies to automatically resolve merge conflicts for nodes, their children, references and properties. \u2014 MPS documentation I pulled some changes or did some other VCS related stuff and strange errors appear or changes aren\u2019t visible. There might be a bug related to caching or VCS in general. Invalidating the cache or restarting the project might help. There are quite some bugs in VCS . How do you avoid merge conflicts? Specific Languages blog: Avoiding merge conflicts","title":"VCS aspect"},{"location":"aspects/virtualinterfaces/","text":"Virtual Interfaces aspect \u00b6 This aspect allows declaring virtual interfaces and is part of Shadow Models in MPS -extensions . To get a better understanding, have a look at the corresponding sandbox.","title":"Virtual Interfaces"},{"location":"aspects/virtualinterfaces/#virtual-interfaces-aspect","text":"This aspect allows declaring virtual interfaces and is part of Shadow Models in MPS -extensions . To get a better understanding, have a look at the corresponding sandbox.","title":"Virtual Interfaces aspect"},{"location":"build/","text":"Build language \u00b6 How can you override the build directory name build to something different? You can do it when you invoke Ant by passing -Dbuild.dir = otherDir . Dependencies on a module not visible from the current build project. Specific Languages blog: Build script error: \u201cDependency on a module not visible from current build project\u201d Build script error: unsatisfied dependency. Specific Languages blog: Build script error: \u201cUnsatisfied dependency\u201d Build script error: can\u2019t find used language in dependencies. Specific Languages blog: Build script error: \u201cCannot find used language in dependencies\u201d Can\u2019t find extended language in dependencies. Check this answer . How do you build an MPS project with maven? Specific Languages blog: Building MPS projects using Maven - a sample How can you find out the supported MPS version of a project? Search the readme for this information. If the project uses a gradle script, you can most likely find this information in the file build.gradle (for example in this line in mps-extension). For older MPS projects there is no waying of finding out the version. What do you need to put into the .gitignore file? Have a look at this .gitignore file. Why is it possible to successfully build models with missing imports? Specific Languages blog: Why can I successfully build models with missing imports? X errors before generation. Specific Languages blog: 3358 errors before generation How do you clean the generated files in MPS ? Possible solutions: Specific Languages Blog: mpsclean When using a build script, have a dedicated clean task ( gradle example ). The files from operation from the MPS build model, changes the access permissions of the copied over files. As a workaround you can use Buildlayout_Filemode or unzip the files using Gradle. MPS build script \u00b6 The build-language is one of the oldest parts of MPS , designed to generate the ant files in an easier way, but it isn\u2019t refactored until today. The generator of the build language has to find out what, for example, \u201csolution needs baselanguage\u201d means at runtime-level. To execute code from the solution, the JVM needs the baselanguage.jar on the classpath. The more dependencies the solution has, the more complex becomes the generated ant file, because the generator has to consider all these transitive dependencies. The generator needs to know what artefact a module generates and how the generated artefact/module is used at runtime. Therefore, the jars must be on the classpath. The modules in the mps-groups in the MPS build script contain information from the serialized descriptors (.msd files, .mpl files, \u2026). The Reload all modules from disk intention loads them explicitly. The descriptor files aren\u2019t read before generation, so that you should always verify before you push if your MPS build scripts are up-to-date. For every dependency added to a module or a changed reexport flag, this intention has to be triggered by hand. Problem: the current implementation of the build-language isn\u2019t extensible, because it always looks into the original model. The main part of the ant file generation is the dependency analysis (for the modules), and for this it needs to access the original model for some technical reasons. These limit you to languages which are provided by MPS . You can\u2019t use your own patterns, for example, you can\u2019t write an extension which picks all modules from a folder, generates an intellij-plugin out of them and stores the result in a zip file and generates all the code required for the command-line build. But this isn\u2019t possible because of the build-language-inherent dependency analysis mechanism. The code generator of the build language has to verify for dependencies like jars in stub-models, jars at runtime etc., but the error messages aren\u2019t well-designed. For example, you have a jar file xyz.jar entered as java runtime dependency of the language abc. Instead of something like \u201cyou have to enter xyz.jar to your build layout plugin-123, cause language abc specifies it as java runtime dependency\u201d you get for example \u201cjar stub library should be extracted into build-script: ${my.project}/very/long/path/lib/xyz.jar \u201d, which isn\u2019t helpful. Many problems the generator finds could also be found by the model checker, but the checks are done at generation time and implemented as \u201cgencontext.show error\u201d in the generator. Generated ant scripts ( build.xml ) \u00b6 The mps build scripts are generated to ant scripts, which then generate the modules. The ant script starts a headless- MPS with all required dependencies, puts jars on the classpath and does some further magic. Tasks can be passed to the ant script like the \u201cgenerate\u201d task. Modules have several models with dependencies. For example, for a language, the behavior uses the structure aspect; the type-system uses the behavior aspect etc. which can result in complex dependencies between these models. These have to be considered when the models are generated and compiled. The order is derived by the code generator of the build language and results in an execution plan where the \u201ccompile units\u201d are grouped in \u201cchunks\u201d. Chunks with bootstrap-dependencies are explicitly marked, which means all modules in the chunk have to be compiled at the same time. MPS consists of hundreds of jar files which must be on the classpath for the code generation and compilation, which leads to giant ant scripts (with some thousand lines). Even simple mps build scripts, which only use BaseLanguage result into big ant scripts. The build layout in the MPS build script defines how your modules are packaged e.g. as zip containing multiple plugins, as simple plugin-folder, as lib-folder with a flat list of jars, etc. The ant script needs to know where the local MPS is installed and where your modules and dependencies are located. This is usually done using folder macros in the mps build script which are generated as \u201cproperties\u2019\u2018 in the ant script. This makes the build independent of your local machine and the ant script can be executed on the CI or any other machine. The Headless- MPS , which is started by the ant script, behaves differently in some cases compared to an IDE - MPS . For example, circular dependencies can be resolved in the IDE by just applying Make Project multiple times, which doesn\u2019t work on the command line and thus also fails on the CI. Dependencies which are visible in the IDE aren\u2019t always visible in the MPS build script/ ant script and can result in failing builds. MPS holds one big global repository, where all modules are loaded into the modules pool (project libraries, global libraries, \u2026). In the IDE everything\u2019s always visible and wrong dependencies can be resolved but on the command line the build can fail, because the referenced model isn\u2019t loaded. The build language generator doesn\u2019t check the nodes for e.g. references out of scope (like the model-checker does), it only looks into meta-data/model-properties and relies on that information.","title":"Build"},{"location":"build/#build-language","text":"How can you override the build directory name build to something different? You can do it when you invoke Ant by passing -Dbuild.dir = otherDir . Dependencies on a module not visible from the current build project. Specific Languages blog: Build script error: \u201cDependency on a module not visible from current build project\u201d Build script error: unsatisfied dependency. Specific Languages blog: Build script error: \u201cUnsatisfied dependency\u201d Build script error: can\u2019t find used language in dependencies. Specific Languages blog: Build script error: \u201cCannot find used language in dependencies\u201d Can\u2019t find extended language in dependencies. Check this answer . How do you build an MPS project with maven? Specific Languages blog: Building MPS projects using Maven - a sample How can you find out the supported MPS version of a project? Search the readme for this information. If the project uses a gradle script, you can most likely find this information in the file build.gradle (for example in this line in mps-extension). For older MPS projects there is no waying of finding out the version. What do you need to put into the .gitignore file? Have a look at this .gitignore file. Why is it possible to successfully build models with missing imports? Specific Languages blog: Why can I successfully build models with missing imports? X errors before generation. Specific Languages blog: 3358 errors before generation How do you clean the generated files in MPS ? Possible solutions: Specific Languages Blog: mpsclean When using a build script, have a dedicated clean task ( gradle example ). The files from operation from the MPS build model, changes the access permissions of the copied over files. As a workaround you can use Buildlayout_Filemode or unzip the files using Gradle.","title":"Build language"},{"location":"build/#mps-build-script","text":"The build-language is one of the oldest parts of MPS , designed to generate the ant files in an easier way, but it isn\u2019t refactored until today. The generator of the build language has to find out what, for example, \u201csolution needs baselanguage\u201d means at runtime-level. To execute code from the solution, the JVM needs the baselanguage.jar on the classpath. The more dependencies the solution has, the more complex becomes the generated ant file, because the generator has to consider all these transitive dependencies. The generator needs to know what artefact a module generates and how the generated artefact/module is used at runtime. Therefore, the jars must be on the classpath. The modules in the mps-groups in the MPS build script contain information from the serialized descriptors (.msd files, .mpl files, \u2026). The Reload all modules from disk intention loads them explicitly. The descriptor files aren\u2019t read before generation, so that you should always verify before you push if your MPS build scripts are up-to-date. For every dependency added to a module or a changed reexport flag, this intention has to be triggered by hand. Problem: the current implementation of the build-language isn\u2019t extensible, because it always looks into the original model. The main part of the ant file generation is the dependency analysis (for the modules), and for this it needs to access the original model for some technical reasons. These limit you to languages which are provided by MPS . You can\u2019t use your own patterns, for example, you can\u2019t write an extension which picks all modules from a folder, generates an intellij-plugin out of them and stores the result in a zip file and generates all the code required for the command-line build. But this isn\u2019t possible because of the build-language-inherent dependency analysis mechanism. The code generator of the build language has to verify for dependencies like jars in stub-models, jars at runtime etc., but the error messages aren\u2019t well-designed. For example, you have a jar file xyz.jar entered as java runtime dependency of the language abc. Instead of something like \u201cyou have to enter xyz.jar to your build layout plugin-123, cause language abc specifies it as java runtime dependency\u201d you get for example \u201cjar stub library should be extracted into build-script: ${my.project}/very/long/path/lib/xyz.jar \u201d, which isn\u2019t helpful. Many problems the generator finds could also be found by the model checker, but the checks are done at generation time and implemented as \u201cgencontext.show error\u201d in the generator.","title":"MPS build script"},{"location":"build/#generated-ant-scripts-buildxml","text":"The mps build scripts are generated to ant scripts, which then generate the modules. The ant script starts a headless- MPS with all required dependencies, puts jars on the classpath and does some further magic. Tasks can be passed to the ant script like the \u201cgenerate\u201d task. Modules have several models with dependencies. For example, for a language, the behavior uses the structure aspect; the type-system uses the behavior aspect etc. which can result in complex dependencies between these models. These have to be considered when the models are generated and compiled. The order is derived by the code generator of the build language and results in an execution plan where the \u201ccompile units\u201d are grouped in \u201cchunks\u201d. Chunks with bootstrap-dependencies are explicitly marked, which means all modules in the chunk have to be compiled at the same time. MPS consists of hundreds of jar files which must be on the classpath for the code generation and compilation, which leads to giant ant scripts (with some thousand lines). Even simple mps build scripts, which only use BaseLanguage result into big ant scripts. The build layout in the MPS build script defines how your modules are packaged e.g. as zip containing multiple plugins, as simple plugin-folder, as lib-folder with a flat list of jars, etc. The ant script needs to know where the local MPS is installed and where your modules and dependencies are located. This is usually done using folder macros in the mps build script which are generated as \u201cproperties\u2019\u2018 in the ant script. This makes the build independent of your local machine and the ant script can be executed on the CI or any other machine. The Headless- MPS , which is started by the ant script, behaves differently in some cases compared to an IDE - MPS . For example, circular dependencies can be resolved in the IDE by just applying Make Project multiple times, which doesn\u2019t work on the command line and thus also fails on the CI. Dependencies which are visible in the IDE aren\u2019t always visible in the MPS build script/ ant script and can result in failing builds. MPS holds one big global repository, where all modules are loaded into the modules pool (project libraries, global libraries, \u2026). In the IDE everything\u2019s always visible and wrong dependencies can be resolved but on the command line the build can fail, because the referenced model isn\u2019t loaded. The build language generator doesn\u2019t check the nodes for e.g. references out of scope (like the model-checker does), it only looks into meta-data/model-properties and relies on that information.","title":"Generated ant scripts (build.xml)"},{"location":"build/ci/","text":"Continuous integration \u00b6 How to attach debugger to a CI build on GitHub actions? Note: GitHub actions can be run locally with act . The plan is to first teach the build to open up a reachable SSH connection, and then tunnel a local port onto it so that we can connect IntelliJ to it. Sign up with ngrok and get your authtoken Since build agents usually are not reachable from the web, we\u2019ll need someone to bridge the build agents\u2019 firewalls. A common solution for that seems to be https://ngrok.com/ which requires a free signup. I tried tmate as well, but that doesn\u2019t support port forwarding. Open ssh from your .github/workflows/build.yml Lucky us, there are prepared GitHub actions that start up sshd with ngrok. I used debug-via-ssh . All we need to give it is our ngrok authtoken from above, and our public ssh key of the key that we want to use to get into the machine. Given we already have .github/workflows/build.yml , I added a step right before the failing step: 1 2 3 4 5 6 7 # \u2026 - name: Start SSH session uses: luchihoratiu/debug-via-ssh@main with: NGROK_AUTH_TOKEN: 2343953890afgaegaewgi\u00f6oio2332\u00e4\u00e4\u00e4 SSH_PASS: ssh-rsa AAAJOAKJFLJWKLJLEKJLEFKJLFEKJLK\u2026JAOIFJOFA bkruck@itemis.com # \u2026 Since this is a private repository, I was fine with directly pasting my authtoken and public SSH key into it directly (I didn\u2019t have permissions to add secrets to the repo). After the whole session, I reset my ngrok auth token. Another note worth mentioning is, that we trust the author of the action and ngrok here to not man-in-the-middle us here. Tell MPS to wait for us Now we can run the GitHub build and see that ngrok is stopping the build at the desired location, being ready for us to connect. In the endpoints list , our agent should be listed with a domain name and port. Taking the two, we can now ssh into it: 1 2 # SSH through ngrok onto the build machine, already forwarding local 5020 to the remote machine ssh -L 5020:localhost:5020 -p11720 runner@4.tcp.ngrok.io If you are asked for a password, fix the casing of -p . If still asked for a password, check which user is running the build. On GitHub, that user seems to be called runner right now. Even though he has sudo rights. We now want to teach MPS to open the debug ports and wait for us to connect before running any tests. On CLI, this doesn\u2019t work with .vmoptions files, but instead, we\u2019re running the tests from an ant-file in this project. Since the allScripts generation was already performed, we only need to open the ant-file and add a jvm argument. I like to open build/myProject/build-tests.xml with vim and then execute the following search-expression: %s/<\\/jvmargs>/ <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/>\\r <\\/jvmargs>/g . In other terms: Look for </jvmargs> and add <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/> right in front of it. The suspend=y will tell java to not start doing anything before we are connected, while teh address=5020 tells it to be welcoming us on port 5020. 1 2 3 4 5 6 7 8 9 10 --- build/myProject/build-tests.xml 2021-09-17 21:15:50.000000000 +0200 +++ build/myProject/build-tests.xml.before 2021-09-17 21:32:09.000000000 +0200 @@ -342,7 +342,6 @@ <jvmargs> <arg value=\"-ea\" /> <arg value=\"-Xmx3072m\" /> - <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5020\" /> </jvmargs> <macro name=\"mps_home\" path=\"${mps_home}\" /> <macro name=\"myProject.home\" path=\"${myProject.home}\" /> Run the tests from within SSH Since I don\u2019t know how to move ngrok into the background while proceeding the build, I just ran the next github action by hand: 1 2 3 4 5 $ cd worker/myProject $ ./gradlew testLanguages \u2026 \u2026 Listening for transport dt_socket at address: 5020 We should now see the command line MPS start up and say that it is waiting for us on 5020 . Connect with your local IntelliJ Assuming, that you have the MPS sources checked out, opened it in IntelliJ and added the sources of your project as a module, we should be ready to connect now: Just start a remote debugging session on port 5020. It will forward the requests over SSH to the agent machine. Once connected, you\u2019ll be able to set breakpoints (for example, I set an Exception breakpoint for StackOverflowError ), and then proceed the build to run into the break point. Cleanup After you found your issue and everything is shiny, remember to remove the step from your github workflow again and reset your ngrok auth token. Docker \u00b6 mbeddr , MPS -extensions , IETS3 Docker is a linux container technology that the platform projects use a lot. You can think of it as a lightweight virtual machine. Besides the container runtime, Docker also includes the tools required to build preconfigured images that are then executed in the container. These images are built from a Dockerfile. Essentially, everything in the infrastructure is provisioning using docker from the teamcity frontend over the database to the build agent. For the building agent, this approach allows us to keep the building agents consistent with their installed software and their versions. The Dockerfile for our general purpose agents can be found at GitHub. The docker image build from the docker file is published to docker hub, hosting service for images, and then used in our build server. The complete docker configuration for our build server is hosted on GitLab. It also included the scripts that download/update the docker image and run the agent. Since our teamcity setup uses multiple containers, a separate container for the database or the webserver that handles the encrypted connection, we are using docker-compose as an orchestration tool.","title":"CI"},{"location":"build/ci/#continuous-integration","text":"How to attach debugger to a CI build on GitHub actions? Note: GitHub actions can be run locally with act . The plan is to first teach the build to open up a reachable SSH connection, and then tunnel a local port onto it so that we can connect IntelliJ to it. Sign up with ngrok and get your authtoken Since build agents usually are not reachable from the web, we\u2019ll need someone to bridge the build agents\u2019 firewalls. A common solution for that seems to be https://ngrok.com/ which requires a free signup. I tried tmate as well, but that doesn\u2019t support port forwarding. Open ssh from your .github/workflows/build.yml Lucky us, there are prepared GitHub actions that start up sshd with ngrok. I used debug-via-ssh . All we need to give it is our ngrok authtoken from above, and our public ssh key of the key that we want to use to get into the machine. Given we already have .github/workflows/build.yml , I added a step right before the failing step: 1 2 3 4 5 6 7 # \u2026 - name: Start SSH session uses: luchihoratiu/debug-via-ssh@main with: NGROK_AUTH_TOKEN: 2343953890afgaegaewgi\u00f6oio2332\u00e4\u00e4\u00e4 SSH_PASS: ssh-rsa AAAJOAKJFLJWKLJLEKJLEFKJLFEKJLK\u2026JAOIFJOFA bkruck@itemis.com # \u2026 Since this is a private repository, I was fine with directly pasting my authtoken and public SSH key into it directly (I didn\u2019t have permissions to add secrets to the repo). After the whole session, I reset my ngrok auth token. Another note worth mentioning is, that we trust the author of the action and ngrok here to not man-in-the-middle us here. Tell MPS to wait for us Now we can run the GitHub build and see that ngrok is stopping the build at the desired location, being ready for us to connect. In the endpoints list , our agent should be listed with a domain name and port. Taking the two, we can now ssh into it: 1 2 # SSH through ngrok onto the build machine, already forwarding local 5020 to the remote machine ssh -L 5020:localhost:5020 -p11720 runner@4.tcp.ngrok.io If you are asked for a password, fix the casing of -p . If still asked for a password, check which user is running the build. On GitHub, that user seems to be called runner right now. Even though he has sudo rights. We now want to teach MPS to open the debug ports and wait for us to connect before running any tests. On CLI, this doesn\u2019t work with .vmoptions files, but instead, we\u2019re running the tests from an ant-file in this project. Since the allScripts generation was already performed, we only need to open the ant-file and add a jvm argument. I like to open build/myProject/build-tests.xml with vim and then execute the following search-expression: %s/<\\/jvmargs>/ <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/>\\r <\\/jvmargs>/g . In other terms: Look for </jvmargs> and add <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/> right in front of it. The suspend=y will tell java to not start doing anything before we are connected, while teh address=5020 tells it to be welcoming us on port 5020. 1 2 3 4 5 6 7 8 9 10 --- build/myProject/build-tests.xml 2021-09-17 21:15:50.000000000 +0200 +++ build/myProject/build-tests.xml.before 2021-09-17 21:32:09.000000000 +0200 @@ -342,7 +342,6 @@ <jvmargs> <arg value=\"-ea\" /> <arg value=\"-Xmx3072m\" /> - <arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5020\" /> </jvmargs> <macro name=\"mps_home\" path=\"${mps_home}\" /> <macro name=\"myProject.home\" path=\"${myProject.home}\" /> Run the tests from within SSH Since I don\u2019t know how to move ngrok into the background while proceeding the build, I just ran the next github action by hand: 1 2 3 4 5 $ cd worker/myProject $ ./gradlew testLanguages \u2026 \u2026 Listening for transport dt_socket at address: 5020 We should now see the command line MPS start up and say that it is waiting for us on 5020 . Connect with your local IntelliJ Assuming, that you have the MPS sources checked out, opened it in IntelliJ and added the sources of your project as a module, we should be ready to connect now: Just start a remote debugging session on port 5020. It will forward the requests over SSH to the agent machine. Once connected, you\u2019ll be able to set breakpoints (for example, I set an Exception breakpoint for StackOverflowError ), and then proceed the build to run into the break point. Cleanup After you found your issue and everything is shiny, remember to remove the step from your github workflow again and reset your ngrok auth token.","title":"Continuous integration"},{"location":"build/ci/#docker","text":"mbeddr , MPS -extensions , IETS3 Docker is a linux container technology that the platform projects use a lot. You can think of it as a lightweight virtual machine. Besides the container runtime, Docker also includes the tools required to build preconfigured images that are then executed in the container. These images are built from a Dockerfile. Essentially, everything in the infrastructure is provisioning using docker from the teamcity frontend over the database to the build agent. For the building agent, this approach allows us to keep the building agents consistent with their installed software and their versions. The Dockerfile for our general purpose agents can be found at GitHub. The docker image build from the docker file is published to docker hub, hosting service for images, and then used in our build server. The complete docker configuration for our build server is hosted on GitLab. It also included the scripts that download/update the docker image and run the agent. Since our teamcity setup uses multiple containers, a separate container for the database or the webserver that handles the encrypted connection, we are using docker-compose as an orchestration tool.","title":"Docker"},{"location":"build/command_line_tool/","text":"Basic code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class CommandLineTool { public static void main ( string [] args ) throws Exception { final string projectPath = YOUR_PATH /* (1) Get project path, for example, from args or system properties */ ; final EnvironmentConfig config = EnvironmentConfig . emptyConfig () . withDefaultPlugins () . withBootstrapLibraries (); config . addPlugin ( \"http-support\" , \"jetbrains.mps.ide.httpsupport\" ); final IdeaEnvironment env = new IdeaEnvironment ( config ); env . init (); final Project project = env . openProject ( new File ( projectPath )); Throwable thrown = null ; try { doSomething (); // 2 } catch ( Exception e ) { thrown = e ; } finally { env . dispose (); } if ( thrown != null ) { System . err . println ( \"ERROR:\" ); thrown . printStackTrace (); System . exit ( 1 ); } else { // You need `System.exit` even in a successful case to stop threads that MPS plugins may be leaving behind. System . exit ( 0 ); } } } What can you do with the project (at point 2)? Here is how you invoke a static method foo() on class Bar in module Baz : 1 2 3 4 5 6 7 8 9 class InvokeMethod { void execute () { ModuleRepositoryFacade facade = new ModuleRepositoryFacade ( project ); ReloadableModule module = ( ReloadableModule ) ( facade . getModule ( module - reference / Baz / )); Class <?> classToInvoke = module . getClass ( \"some-package.Bar\" ); Method methodToInvoke = classToInvoke . getMethod ( \"foo\" ); methodToInvoke . invoke ( null ); } } Why all the reflection tricks and why not call the class directly instead? The answer is that when MPS is initialized and a project is opened, it sets up classloaders, putts on the classpath any dependencies that module Baz might have, so that you don\u2019t have to specify them ourselves. We still need to have on the classpath the initial set of JARs to run our class and start MPS . Here is how you would run our tool from Gradle: 1 2 3 4 5 task runCommandLineTool ( type: JavaExec ) { main = 'CommandLineTool' classpath file ( 'solutions/commandline/classes_gen' ) // Location of CommandLineTool.class classpath fileTree ( \"$mps_home/lib\" ) // $mps_home points to the MPS installation } You can also add MPS to the gradle dependencies block: 1 2 3 4 5 dependencies { testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2' implementation fileTree ( \"$mps_home/lib\" ) }","title":"Creating a command line tool"},{"location":"build/git/","text":"Git \u00b6 How do you compare Git branches? Have a look at this guide . How should you configure Git? Generated files should not be checked into Git (\u2018classes_gen\u2019, \u2018source_gen\u2019) unless the output of generators should be checked. Example from mps-extensions : .gitignore .gitattributes . Is there a hook in MPS that will be called when switching branches? Register a BranchChangeListener in an application or project plugin. Example: 1 ProjectHelper . toIdeaProject ( # project ). getMessageBus (). connect (). subscribe ( BranchChangeListener . VCS_BRANCH_CHANGED , new MyListener ()). How can you find the Git commit that deleted a concept? Assuming the concept is called Foo , search with Git Log in the corresponding structure model: git log -SFoo -- path/to/structure.mps General GitHub publishing checklist \u00b6 Ready to use templates Template #1 Template #2 Necessary files/text README.md LICENSE description in about section of GitHub repository More extensive checklists Open Source Check List Am I ready to Open Source This?","title":"Git"},{"location":"build/git/#git","text":"How do you compare Git branches? Have a look at this guide . How should you configure Git? Generated files should not be checked into Git (\u2018classes_gen\u2019, \u2018source_gen\u2019) unless the output of generators should be checked. Example from mps-extensions : .gitignore .gitattributes . Is there a hook in MPS that will be called when switching branches? Register a BranchChangeListener in an application or project plugin. Example: 1 ProjectHelper . toIdeaProject ( # project ). getMessageBus (). connect (). subscribe ( BranchChangeListener . VCS_BRANCH_CHANGED , new MyListener ()). How can you find the Git commit that deleted a concept? Assuming the concept is called Foo , search with Git Log in the corresponding structure model: git log -SFoo -- path/to/structure.mps","title":"Git"},{"location":"build/git/#general-github-publishing-checklist","text":"Ready to use templates Template #1 Template #2 Necessary files/text README.md LICENSE description in about section of GitHub repository More extensive checklists Open Source Check List Am I ready to Open Source This?","title":"General GitHub publishing checklist"},{"location":"build/gradle/","text":"Questions \u00b6 How do you set up a gradle build for an MPS project? There is a gist for a minimal build . There is a mps-gradle-plugin . For more complex projects look at build scripts of big projects such as MPS -extensions . Is there a Gradle plugin for downloading things? Yes, gradle-download-task . Is there a Gradle plugin for making HTTP requests? Yes, gradle-http-plugin . The gradle build fails with exception: incremental build fails during generation on no changed models Run git clean -xdf and rebuild everything ( MPS -33541 .) How can you fetch dependencies using Gradle? Specific Languages blog: Fetching dependencies with Gradle How to get dependencies from private GitHub repositories within a GitHub action? Follow the default way for GitHub packages access, as described in GitHub Actions . It might simply work if the other private repository is part of the same organization. If not, ensure the GITHUB_TOKEN permissions are correct: Permissions for the GITHUB_TOKEN Depending on the organizational settings, it might be impossible to obtain the artifact via the generic GITHUB_TOKEN . In this case you need to create a new personal access token (PAT). Next, add this token as a secret to the project (e.g. as PRIVATE_REPO_ACCESS_ACTOR and PRIVATE_REPO_ACCESS_TOKEN ): Granting additional permissions Make sure that this secret is not in an environment but generally available. Also add the username. Even though no username is required for token access, an error will occur if you leave it empty. Make sure you authorize the PAT for the SSO org (warning: this resets when changing permissions!) Next you need to access this special token in your workflow yaml file, e.g: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 name : Build and Test Languages [ ... ] # Obtain tokens and secrets from GitHub repository secrets env : GITHUB_ACTOR : ${{ github.actor }} GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} PRIVATE_ACTOR : ${{ secrets.PRIVATE_REPO_ACCESS_ACTOR }} PRIVATE_TOKEN : ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }} [ ... ] jobs : buildAndTest : [ ... ] - name : Build with Gradle uses : gradle/gradle-build-action@v1.3.3 with : arguments : buildLanguages Within your gradle file you can then access these variables via: build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 [ ... ] repositories { val gpr_user : String? by extra val gpr_token : String? by extra val githubUsername = System . getenv ( \"GITHUB_ACTOR\" ) ?: gpr_user val githubToken = System . getenv ( \"GITHUB_TOKEN\" ) ?: gpr_token if ( githubUsername == null || githubUsername == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_ACTOR ) or via gradle properties (gpr_user) for auth towards Github packages\" ) } if ( githubToken == null || githubToken == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_TOKEN ) or via gradle properties (gpr_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com//mbeddr/mbeddr.core\" ) credentials { username = githubUsername password = githubToken } } val private_user : String? by extra val private_token : String? by extra val privateUsername = System . getenv ( \"PRIVATE_ACTOR\" ) ?: private_user val privateToken = System . getenv ( \"PRIVATE_TOKEN\" ) ?: private_token if ( privateUsername == null || privateUsername == \"\" ) { throw GradleException ( \"No private credentials found via envrionment variable (\\ $ PRIVATE_ACTOR ) or via gradle properties (private_user) for auth towards Github packages\" ) } if ( privateToken == null || privateToken == \"\" ) { throw GradleException ( \"No credentials found via environment variable (\\ $ PRIVATE_TOKEN ) or via gradle properties (private_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com/ORGANIZATION/PRIVATE-PROJECT/\" ) credentials { username = privateUsername password = privateToken } } [ ... ] You can locally set the token by adding the following entries to your gradle.properties file (assuming your token has the correct access rights for the repositories): gpr_user=XXX gpr_token=YYY private_user=XXX private_token=YYY contributed by: @nkoester Gradle Tips \u00b6 Item Description closures The closure does it (delay) {} which will delay the value propagation to execution instead of configuration time. buildAll scripts This is the meta build script (platforms only). This build model is generated and its artifact (ant-xml task) is committed to the gradle repo. project properties can be defined as ext.myPropName passed through: - P myPop_name from CL can be access like variables in the build project can be checked if the are set or not System properties passed through -D from CL are available in the gradle build file though norma java mechanism: System.getProperty(); Project properties can be specified as system properties. They need to be prefixed with org.gradle.project.NAME gradle.properties are by default project properties if they are prefixed with systemProp. they are system properties configurations are also separated in the same way as dependencies Gradle Wrapper ( gradlew/gradlew.bat ) \u00b6 The gradle wrapper script downloads gradle in the specified version, independent of your local installed gradle, and then starts the downloaded gradle. It consists of a small java program (located under ./gradle/wrapper/gradle-wrapper.jar ), an init-file which contains the gradle version ( ./gradle/wrapper/gradle-wrapper.properties ) and start scripts for Windows, Mac and Linux ( ./gradlew and ./gradlew.bat ). Why do we use gradle? Gradle build scripts have the advantage that you write code instead of XML, like it\u2019s the case using Maven or Ant. We use gradle to download MPS and the dependencies in the correct version and put them in the right place, generate the Ant scripts from the mps build scripts using a build-allScripts.xml Ant scripts and then start Ant with correct parameters (where is MPS on disc, where are the dependencies on disc, \u2026). This is easier than doing it with and directly. For defining the gradle scripts you can use groove ( build.gradle ) or kotlin ( build.gradle.kts ), both can do the same. Groovy is enough for smaller building scripts, but it\u2019s dynamically typed and thus fails late when the gradle task is executed. Kotlin provides type-checking and the auto-completion works better compared to groovy (with Intellij); this makes it easier to use with complex scripts. Dependencies \u00b6 Dependencies inside the buildScript{\u2026} block \u00b6 are placed on the classpath of the build script itself (for the current gradle file which will also be compiled (like java)) To be able to compile the build script into bytecode, its dependencies need to be resolved Dependencies outside the buildScript{\u2026} block \u00b6 are project dependencies these dependencies are added to the project code\u2019s classpath example: Gson is used inside a gradle project and needs to be on the classpath of the project to be able to compile the project. If the dependency in only used in the buildscript (i.e. only from the build.gradle file) then it should be in a buildscript { } block. Dependencies used in both project code and build scripts will effectively need to be listed twice. A good explanation of gradle configurations can be found in Gradle Configurations Explained: What is the difference between API and Implementation? | medium.com . Creating a gradle plugin \u00b6 There are three choices: build script buildSrc project standalone project Standalone project \u00b6 define all dependencies in gradle file create a properties file in the resource folder with the same name as the plugin id example: org.samples.greeting.properties in src/main/resources/META-INF/gradle-plugins/ plugin IDs full qualified identifiers, similar to Java packages Use pattern component/company/plugin-name examples com.github.[name].[plugin-name] com.github.[arimer].[migration-checker]","title":"Gradle"},{"location":"build/gradle/#questions","text":"How do you set up a gradle build for an MPS project? There is a gist for a minimal build . There is a mps-gradle-plugin . For more complex projects look at build scripts of big projects such as MPS -extensions . Is there a Gradle plugin for downloading things? Yes, gradle-download-task . Is there a Gradle plugin for making HTTP requests? Yes, gradle-http-plugin . The gradle build fails with exception: incremental build fails during generation on no changed models Run git clean -xdf and rebuild everything ( MPS -33541 .) How can you fetch dependencies using Gradle? Specific Languages blog: Fetching dependencies with Gradle How to get dependencies from private GitHub repositories within a GitHub action? Follow the default way for GitHub packages access, as described in GitHub Actions . It might simply work if the other private repository is part of the same organization. If not, ensure the GITHUB_TOKEN permissions are correct: Permissions for the GITHUB_TOKEN Depending on the organizational settings, it might be impossible to obtain the artifact via the generic GITHUB_TOKEN . In this case you need to create a new personal access token (PAT). Next, add this token as a secret to the project (e.g. as PRIVATE_REPO_ACCESS_ACTOR and PRIVATE_REPO_ACCESS_TOKEN ): Granting additional permissions Make sure that this secret is not in an environment but generally available. Also add the username. Even though no username is required for token access, an error will occur if you leave it empty. Make sure you authorize the PAT for the SSO org (warning: this resets when changing permissions!) Next you need to access this special token in your workflow yaml file, e.g: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 name : Build and Test Languages [ ... ] # Obtain tokens and secrets from GitHub repository secrets env : GITHUB_ACTOR : ${{ github.actor }} GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} PRIVATE_ACTOR : ${{ secrets.PRIVATE_REPO_ACCESS_ACTOR }} PRIVATE_TOKEN : ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }} [ ... ] jobs : buildAndTest : [ ... ] - name : Build with Gradle uses : gradle/gradle-build-action@v1.3.3 with : arguments : buildLanguages Within your gradle file you can then access these variables via: build.gradle.kts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 [ ... ] repositories { val gpr_user : String? by extra val gpr_token : String? by extra val githubUsername = System . getenv ( \"GITHUB_ACTOR\" ) ?: gpr_user val githubToken = System . getenv ( \"GITHUB_TOKEN\" ) ?: gpr_token if ( githubUsername == null || githubUsername == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_ACTOR ) or via gradle properties (gpr_user) for auth towards Github packages\" ) } if ( githubToken == null || githubToken == \"\" ) { throw GradleException ( \"No credentials found via envrionment variable (\\ $ GITHUB_TOKEN ) or via gradle properties (gpr_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com//mbeddr/mbeddr.core\" ) credentials { username = githubUsername password = githubToken } } val private_user : String? by extra val private_token : String? by extra val privateUsername = System . getenv ( \"PRIVATE_ACTOR\" ) ?: private_user val privateToken = System . getenv ( \"PRIVATE_TOKEN\" ) ?: private_token if ( privateUsername == null || privateUsername == \"\" ) { throw GradleException ( \"No private credentials found via envrionment variable (\\ $ PRIVATE_ACTOR ) or via gradle properties (private_user) for auth towards Github packages\" ) } if ( privateToken == null || privateToken == \"\" ) { throw GradleException ( \"No credentials found via environment variable (\\ $ PRIVATE_TOKEN ) or via gradle properties (private_token) for auth towards Github packages\" ) } maven { url = uri ( \"https://maven.pkg.github.com/ORGANIZATION/PRIVATE-PROJECT/\" ) credentials { username = privateUsername password = privateToken } } [ ... ] You can locally set the token by adding the following entries to your gradle.properties file (assuming your token has the correct access rights for the repositories): gpr_user=XXX gpr_token=YYY private_user=XXX private_token=YYY contributed by: @nkoester","title":"Questions"},{"location":"build/gradle/#gradle-tips","text":"Item Description closures The closure does it (delay) {} which will delay the value propagation to execution instead of configuration time. buildAll scripts This is the meta build script (platforms only). This build model is generated and its artifact (ant-xml task) is committed to the gradle repo. project properties can be defined as ext.myPropName passed through: - P myPop_name from CL can be access like variables in the build project can be checked if the are set or not System properties passed through -D from CL are available in the gradle build file though norma java mechanism: System.getProperty(); Project properties can be specified as system properties. They need to be prefixed with org.gradle.project.NAME gradle.properties are by default project properties if they are prefixed with systemProp. they are system properties configurations are also separated in the same way as dependencies","title":"Gradle Tips"},{"location":"build/gradle/#gradle-wrapper-gradlewgradlewbat","text":"The gradle wrapper script downloads gradle in the specified version, independent of your local installed gradle, and then starts the downloaded gradle. It consists of a small java program (located under ./gradle/wrapper/gradle-wrapper.jar ), an init-file which contains the gradle version ( ./gradle/wrapper/gradle-wrapper.properties ) and start scripts for Windows, Mac and Linux ( ./gradlew and ./gradlew.bat ). Why do we use gradle? Gradle build scripts have the advantage that you write code instead of XML, like it\u2019s the case using Maven or Ant. We use gradle to download MPS and the dependencies in the correct version and put them in the right place, generate the Ant scripts from the mps build scripts using a build-allScripts.xml Ant scripts and then start Ant with correct parameters (where is MPS on disc, where are the dependencies on disc, \u2026). This is easier than doing it with and directly. For defining the gradle scripts you can use groove ( build.gradle ) or kotlin ( build.gradle.kts ), both can do the same. Groovy is enough for smaller building scripts, but it\u2019s dynamically typed and thus fails late when the gradle task is executed. Kotlin provides type-checking and the auto-completion works better compared to groovy (with Intellij); this makes it easier to use with complex scripts.","title":"Gradle Wrapper (gradlew/gradlew.bat)"},{"location":"build/gradle/#dependencies","text":"","title":"Dependencies"},{"location":"build/gradle/#dependencies-inside-the-buildscript-block","text":"are placed on the classpath of the build script itself (for the current gradle file which will also be compiled (like java)) To be able to compile the build script into bytecode, its dependencies need to be resolved","title":"Dependencies inside the buildScript{...} block"},{"location":"build/gradle/#dependencies-outside-the-buildscript-block","text":"are project dependencies these dependencies are added to the project code\u2019s classpath example: Gson is used inside a gradle project and needs to be on the classpath of the project to be able to compile the project. If the dependency in only used in the buildscript (i.e. only from the build.gradle file) then it should be in a buildscript { } block. Dependencies used in both project code and build scripts will effectively need to be listed twice. A good explanation of gradle configurations can be found in Gradle Configurations Explained: What is the difference between API and Implementation? | medium.com .","title":"Dependencies outside the buildScript{...} block"},{"location":"build/gradle/#creating-a-gradle-plugin","text":"There are three choices: build script buildSrc project standalone project","title":"Creating a gradle plugin"},{"location":"build/gradle/#standalone-project","text":"define all dependencies in gradle file create a properties file in the resource folder with the same name as the plugin id example: org.samples.greeting.properties in src/main/resources/META-INF/gradle-plugins/ plugin IDs full qualified identifiers, similar to Java packages Use pattern component/company/plugin-name examples com.github.[name].[plugin-name] com.github.[arimer].[migration-checker]","title":"Standalone project"},{"location":"clean_code/java/","text":"refactoring.guru has information about general code smells. Be aware of common Java gotchas . Avoid acronyms and abbreviations that may not be clear to others. Name methods and variables after what they mean. Before giving a name, consider the responsibility of that piece of code. 1 Return empty collections instead of returning null elements ( reference ). It saves the efforts needed for testing on null elements. Efficiency: use StringBuilder or StringBuffer for String concatenation Refactor your code regularly , especially when your classes or methods become too big. 2 ^, ^ 3 . Remember to test parameters of public methods for illegal values. These methods shouldn\u2019t crash because of a NullPointer. Order class members by scope from private to public 4 ^, ^ 5 (the reverse order is also fine) Minimize the accessibility of class members. It enforces information hiding or encapsulation . Avoid hardcoded values. Use lazy initialization if performance is critical or use caching if necessary. Utility and helper classes \u00b6 Utility class: include only static methods and are stateless. Don\u2019t create an instance of such a class. Helper class: they can be utility classes, or it can be stateful or require an instance. It can be any class whose design is to aid another class. Try to make the name of the utility or helper class more specific (for example: AdministrationHelper , LoginHelper instead of Helper ). More tips \u00b6 If you use functional interfaces, use the standard java ones . If you want to understand the functional style, consult Unterstand the functional style page. If you want to use newer Java features, have a look at Modernize old code page. Have a look at common sources of complexity . Naming 101: A Programmer\u2019s Guide on How to Name Things \u21a9 Rule of 30 \u2013 When is a Method, Class or Subsystem Too Big? \u21a9 Avoid basic style errors \u21a9 Ordering Class Members by Scopes \u21a9 Separate public and private members \u21a9","title":"Index"},{"location":"clean_code/java/#utility-and-helper-classes","text":"Utility class: include only static methods and are stateless. Don\u2019t create an instance of such a class. Helper class: they can be utility classes, or it can be stateful or require an instance. It can be any class whose design is to aid another class. Try to make the name of the utility or helper class more specific (for example: AdministrationHelper , LoginHelper instead of Helper ).","title":"Utility and helper classes"},{"location":"clean_code/java/#more-tips","text":"If you use functional interfaces, use the standard java ones . If you want to understand the functional style, consult Unterstand the functional style page. If you want to use newer Java features, have a look at Modernize old code page. Have a look at common sources of complexity . Naming 101: A Programmer\u2019s Guide on How to Name Things \u21a9 Rule of 30 \u2013 When is a Method, Class or Subsystem Too Big? \u21a9 Avoid basic style errors \u21a9 Ordering Class Members by Scopes \u21a9 Separate public and private members \u21a9","title":"More tips"},{"location":"clean_code/java/java_style_guide/","text":"These are some points taken from the Google Java Style Guide that make sense in MPS . Fall-through: commented : write a comment why a fall-through is necessary in a switch statement. Default case is present : always write a default case for switch statements. Rules common to all identifiers : identifiers use only ASCII letters and digits, and, in a few cases noted below, underscores. Don\u2019t use prefixes or suffixes with particular meanings. For example, these names don\u2019t adhere to the style: name_ , mName , s_name and kName . Package names : package names are all lowercase, with consecutive words concatenated together (no underscores). For example, com.example.deepspace , not com.example.deepSpace or com.example.deep_space . Class names : should be in UpperCamelCase. Class names are typically nouns or noun phrases. For example, Character or ImmutableList . Interface names may also be nouns or noun phrases (for example, List ), but may sometimes be adjectives or adjective phrases instead (for example, Readable ). Test classes should start with the name of the class they\u2019re testing, and ending with Test. For example, HashTest or HashIntegrationTest . Method names : should be in lowerCamelCase. Method names are typically verbs or verb phrases. For example: sendMessage or stop . Underscores may appear in JUnit test method names to separate logical components of the name, with each component written in lowerCamelCase. One typical pattern is _ , for example pop_emptyStack . No correct way exists for naming test methods. Constant names : use all uppercase letters, with each word separated from the next by a single underscore Non-constant field names : non-constant field names (static or otherwise) should be lowerCamelCase . These names are typically nouns or noun phrases. For example, computedValues or index . Parameter names should be lowerCamelCase . One-character parameter names in public methods should be avoided. Local variable names should be in lowerCamelCase. Even when final and immutable, local variables are not considered to be constants, and should not be styled as constants. Type variable names : each type variable should adhere to one of two styles: a single capital letter, optionally followed by a single numeral (such as E , T , X , T2 ) or a name in the form used for classes, followed by the capital letter T (examples: RequestT , FooBarT ). Camel case: defined : tutorial on how to write camelcase Don\u2019t ignore caught exceptions (see also: Avoid empty catch blocks ) Additional java practises can be found at javapractices.com .","title":"Java style guide"},{"location":"clean_code/java/programming_principles/","text":"Programming principles \u00b6 These are some general programming principles taken from this article which can also be applied to MPS : KISS (Keep It Simple, Stupid): you may notice that developers at the beginning of their journey try to implement complicated, ambiguous design. DRY (Don\u2019t Repeat Yourself): try to avoid any duplicates, instead, you put them into a single part of the system or a method. YAGNI (You Ain\u2019t Gonna Need It): if you run into a situation where you are asking yourself, \u201cWhat about adding extra (feature, code, \u2026etc.) ?\u201d, you probably need to rethink it. Clean code over clever code : speaking of clean code, leave your ego at the door, and forget about writing clever code. Avoid premature optimization : the problem with premature optimization is that you can never really know where a program\u2019s bottlenecks will be until after the fact. Single responsibility : every class or module in a program should only concern itself with providing one bit of specific functionality. Fail fast, fail hard : the fail-fast principle stands for stopping the current operation as soon as any unexpected error occurs. Adhering to this principle generally results in a more stable solution refactoring.guru describes general Java design patterns and also includes very nice illustrations.","title":"Programming principles"},{"location":"clean_code/java/programming_principles/#programming-principles","text":"These are some general programming principles taken from this article which can also be applied to MPS : KISS (Keep It Simple, Stupid): you may notice that developers at the beginning of their journey try to implement complicated, ambiguous design. DRY (Don\u2019t Repeat Yourself): try to avoid any duplicates, instead, you put them into a single part of the system or a method. YAGNI (You Ain\u2019t Gonna Need It): if you run into a situation where you are asking yourself, \u201cWhat about adding extra (feature, code, \u2026etc.) ?\u201d, you probably need to rethink it. Clean code over clever code : speaking of clean code, leave your ego at the door, and forget about writing clever code. Avoid premature optimization : the problem with premature optimization is that you can never really know where a program\u2019s bottlenecks will be until after the fact. Single responsibility : every class or module in a program should only concern itself with providing one bit of specific functionality. Fail fast, fail hard : the fail-fast principle stands for stopping the current operation as soon as any unexpected error occurs. Adhering to this principle generally results in a more stable solution refactoring.guru describes general Java design patterns and also includes very nice illustrations.","title":"Programming principles"},{"location":"clean_code/mps/","text":"This document lists some recommendations for code written it MPS . Implementation \u00b6 Specific Languages blog: Prefer composition over inheritance Implement INamedConcept in concepts that have a name. The name property can be automatically used as the name for root nodes, references etc. Avoid deep nested call chains, for example: nodea.nodeb.nodec.property . Consider providing a method to access a property or method for the deeper levels. Use isInstanceOf to check if a node is an instance of a concept. Use the built-in collection classes such as collections, set, list, and map ( documentation ). Use the correct type of collection 4 . Use the access language instead of directly calling ModelAccess methods. Write tests for new features and bugs that you have fixed that weren\u2019t caught by a test. Don\u2019t invoke specific features in MPS at places that don\u2019t officially support it, for example, invoking the generator in type system rules. This might not work in future versions of MPS . Null safety \u00b6 Use language checkedDots for saver access of possible null values. You can check nodes for null: node.isNull Use annotation @NotNull and @Nullable for baselanguage code. a specific type system rule in MPS checks these annotations. Use :eq: ( NPE safe equals operation) and :ne: NPE safe not equals operation instead of == and equals . Return optional values instead of null in baselanguage code 1 . Exceptions and warnings \u00b6 Use checked exceptions for recoverable conditions and run-time exceptions for programming errors 2 , 3 . Consider alternative ways of showing errors than throwing exceptions such as showing notifications . Examples for such notifications are balloons and dialogs. Attach throwable objects to logging statements if available: log error \"This is an error\" , errorObject Clean up in the finally block of a try statement. Treat warnings in MPS as errors 5 and also don\u2019t ignore warnings and errors. Warnings might become errors or even make the compilation fail in the future. Ignoring too many messages can hide real errors that you have to address. Specific Languages blog: Warnings should not replace documentation Swing components \u00b6 Use components from the IntelliJ platform. here describe some more components. Use the IntelliJ platform UI guidelines to create consistent and usable user interfaces. Capitalization: most of the short textual items (menus, buttons, labels, for example) should have headline capitalization. Capitalize all words except for common words with up to three letters ( a , an , the , and , or , so , yet , etc.), and don\u2019t appear as the first or last word. If the text isn\u2019t short, then you should use the capitalization used in ordinary prose (sentence capitalization) instead. Read the Swing tutorials to get a better understanding of the components. Multithreading and asynchronous code \u00b6 Be careful with multithreading code in any of the language aspects. It\u2019s better placed in an action or background task. When asynchronous code freezes (for example: on the console), try to call it with ApplicationManager.getApplication().invokeLater(runnable) . Use tasks for asynchronous work or work that takes a long time. Miscellaneous \u00b6 Be careful when using unicode inside MPS . It might break something ( MPS -33687 , MPS -31835 ). Use gradle for build scripts ( minimal example ). Do not leave debug statements in production code (exception debug log statements). Return Optional not null \u21a9 Java Best Practices Quick Reference \u21a9 Checked versus unchecked exceptions \u21a9 Choosing the right Collection \u21a9 Treat Warnings As Errors \u21a9","title":"Index"},{"location":"clean_code/mps/#implementation","text":"Specific Languages blog: Prefer composition over inheritance Implement INamedConcept in concepts that have a name. The name property can be automatically used as the name for root nodes, references etc. Avoid deep nested call chains, for example: nodea.nodeb.nodec.property . Consider providing a method to access a property or method for the deeper levels. Use isInstanceOf to check if a node is an instance of a concept. Use the built-in collection classes such as collections, set, list, and map ( documentation ). Use the correct type of collection 4 . Use the access language instead of directly calling ModelAccess methods. Write tests for new features and bugs that you have fixed that weren\u2019t caught by a test. Don\u2019t invoke specific features in MPS at places that don\u2019t officially support it, for example, invoking the generator in type system rules. This might not work in future versions of MPS .","title":"Implementation"},{"location":"clean_code/mps/#null-safety","text":"Use language checkedDots for saver access of possible null values. You can check nodes for null: node.isNull Use annotation @NotNull and @Nullable for baselanguage code. a specific type system rule in MPS checks these annotations. Use :eq: ( NPE safe equals operation) and :ne: NPE safe not equals operation instead of == and equals . Return optional values instead of null in baselanguage code 1 .","title":"Null safety"},{"location":"clean_code/mps/#exceptions-and-warnings","text":"Use checked exceptions for recoverable conditions and run-time exceptions for programming errors 2 , 3 . Consider alternative ways of showing errors than throwing exceptions such as showing notifications . Examples for such notifications are balloons and dialogs. Attach throwable objects to logging statements if available: log error \"This is an error\" , errorObject Clean up in the finally block of a try statement. Treat warnings in MPS as errors 5 and also don\u2019t ignore warnings and errors. Warnings might become errors or even make the compilation fail in the future. Ignoring too many messages can hide real errors that you have to address. Specific Languages blog: Warnings should not replace documentation","title":"Exceptions and warnings"},{"location":"clean_code/mps/#swing-components","text":"Use components from the IntelliJ platform. here describe some more components. Use the IntelliJ platform UI guidelines to create consistent and usable user interfaces. Capitalization: most of the short textual items (menus, buttons, labels, for example) should have headline capitalization. Capitalize all words except for common words with up to three letters ( a , an , the , and , or , so , yet , etc.), and don\u2019t appear as the first or last word. If the text isn\u2019t short, then you should use the capitalization used in ordinary prose (sentence capitalization) instead. Read the Swing tutorials to get a better understanding of the components.","title":"Swing components"},{"location":"clean_code/mps/#multithreading-and-asynchronous-code","text":"Be careful with multithreading code in any of the language aspects. It\u2019s better placed in an action or background task. When asynchronous code freezes (for example: on the console), try to call it with ApplicationManager.getApplication().invokeLater(runnable) . Use tasks for asynchronous work or work that takes a long time.","title":"Multithreading and asynchronous code"},{"location":"clean_code/mps/#miscellaneous","text":"Be careful when using unicode inside MPS . It might break something ( MPS -33687 , MPS -31835 ). Use gradle for build scripts ( minimal example ). Do not leave debug statements in production code (exception debug log statements). Return Optional not null \u21a9 Java Best Practices Quick Reference \u21a9 Checked versus unchecked exceptions \u21a9 Choosing the right Collection \u21a9 Treat Warnings As Errors \u21a9","title":"Miscellaneous"},{"location":"clean_code/mps/deprecation/","text":"Don\u2019t use commands from the access language without a repository (see: access language ). Don\u2019t use node/myNode . Use node-ptr (myNode).resolve(repository) instead. Don\u2019t use model/myModel . Use model-ptr (myModel).resolve(repository) instead. Don\u2019t use module/myModule or language-module . Use module-reference/myModule instead. Don\u2019t use linkNode/concept:link/ . Use link:concept:link/ instead. Don\u2019t use conceptNode/concept/ . Use concept/concept/ instead. Don\u2019t use node.delete . Use node.detach instead. Don\u2019t use node.containingRole . Use node.getContainmentLink instead. Don\u2019t use interface the IDon\u2019tSubstituteByDefault . Create an empty default substitute menu for the concept instead. Don\u2019t use print , System . out or System . err for logging. Use log for low-level logging or message for high-level logging instead. Use the explicit presentation of a node when used in a string. For example: \"my node: \" + node . getPresentation () instead of \"my node: \" + node . Don\u2019t use counter variable in LoopMacro. Use LOOP index in code instead. Don\u2019t use IOperationContext . You can find more info in the attached comment of the interface. Avoid getting the repository from the opened project or using the global repository. The code might break in the future.","title":"Deprecation"},{"location":"clean_code/mps/readability_maintainability/","text":"Use enhanced for loops instead of for loops with counters: for ( type variable : iterable ) and foreach variable in iterable Mark classes/concepts etc. as deprecated when you shouldn\u2019t use them. DeprecatedNodeAnnotation DeprecatedBlockDocTag Java Deprecated annotation Use the text TODO in comments. The TODO tool can find these strings. Check for redundant variable initializers (type system warning). Use empty lines between statements (for example method declarations) for readability. Use virtual packages to organize your code.","title":"Readability/maintainability"},{"location":"home/console/","text":"I can\u2019t enter the print statement. It can\u2019t be used in nested structures. Use it at the top level instead. How can you enter more than one statement into the console? Enter an opening curly brace (this starts a new statement list in baselanguage) and enter your statements. How can you find all System.out.println statements? Code snippet: ] #nodes, #models, #usages etc. don\u2019t show any result. What went wrong? Make sure that your query is correct. You also have to set a scope for these statements in square brackets such as # nodes < scope = global > to find all the nodes in the global scope. Is the console a regular root node? Yes, it is of concept ConsoleRoot and is located in a temporary model. It is possible to open it in a normal tab. Right-click in the console (for example at the top) and click Show Node in Explorer . Click the ConsoleRoot and it will open in a new tab (keyboard shortcuts such as run line won\u2019t work here). After executing the current line, an error says that the console class wasn\u2019t found. This can happen when the compilation of the model of the console was not successful. It can happen if you import a custom generation plan into the console that disables some generators. It can also happen if you import a solution that doesn\u2019t have the java facet enabled or has a different solution kind such as other . What does the expression #internalMode do? It tells you if the internal mode is activated. It can be achieved by calling RuntimeFlags.setInternalMode(true) or by setting a system variable. Start MPS with argument -Dmps.internal = true or add mps.internal = true to the mps.vmoptions file: use Main menu -> Help -> Edit Custom VM Options . The exact functionality of this flag can be found by looking at the MPS source code . One of the new action groups that it adds, is called Internal . There is also an Internal Actions Menu in Intellij IDE \u2018s. Consolute the documentation for more info. How do you open the selected node in console? Given I have a node selected in the editor. How can I select it to manipulate it in the MPS console? asked by: @aquapp You can simply copy the node and paste it into the console: Copy a node in the editor ( Cmd + C or Ctrl + C ) Go to the console. Paste the content ( Cmd + V or Ctrl + V ) MPS pastes a node reference that you can use to directly manipulate the node: answered by: @coolya","title":"Console"},{"location":"home/debugging/","text":"Debugging \u00b6 See also: Specific Languages blog: Debugging in MPS The menu entry Tools \u2192 Internal Actions provides many useful debugging features, for example, the UI Inspector (Swing debugging). Right-click \u2192 Preview Generated Text : show the result of the M2T transformation (for example generated code) for the current node Inspect Node: right-click \u2192 Show Node in Explorer Inspector: right-click \u2192 Inspect Node Right-click \u2192 Language Debug Show Type : show type system type of current node. Rule which caused Error : find Checking-Rule/Constraint, which caused an error. Cell in Explorer : debug editor cells and collections. Generation Traceback : debug the generator. In transient models you can find the source node for the generated (intermediate) node. Find Action: Help \u2192 Find Action or Ctrl + Shift + A if you forgot the name of your action. Changing IDE settings Two locations: bin folder ( MPS / IDE folder) and Preferences folder (overwrites bin-folder) JVM : bin/mps.vmoptions (RAM/Xmx, debugger port, \u2026) Log-level (Log4J): bin/log.xml IDEA properties: bin/idea.properties: change default paths, advanced IDE settings Log file: is stored in the logs folder, e.g. Logs/<My-MPS-/My-RCP-Identifier>/idea.log How do I debug action maps? Set a breakpoint in CellActionExecutorFinder . General Blog posts \u00b6 24 debugging tips and tricks The Debugger Checklist \u2013 Part I The Debugger Checklist \u2013 Part II Debugging tips 10 Debugging Tips for Beginners","title":"Debugging"},{"location":"home/debugging/#debugging","text":"See also: Specific Languages blog: Debugging in MPS The menu entry Tools \u2192 Internal Actions provides many useful debugging features, for example, the UI Inspector (Swing debugging). Right-click \u2192 Preview Generated Text : show the result of the M2T transformation (for example generated code) for the current node Inspect Node: right-click \u2192 Show Node in Explorer Inspector: right-click \u2192 Inspect Node Right-click \u2192 Language Debug Show Type : show type system type of current node. Rule which caused Error : find Checking-Rule/Constraint, which caused an error. Cell in Explorer : debug editor cells and collections. Generation Traceback : debug the generator. In transient models you can find the source node for the generated (intermediate) node. Find Action: Help \u2192 Find Action or Ctrl + Shift + A if you forgot the name of your action. Changing IDE settings Two locations: bin folder ( MPS / IDE folder) and Preferences folder (overwrites bin-folder) JVM : bin/mps.vmoptions (RAM/Xmx, debugger port, \u2026) Log-level (Log4J): bin/log.xml IDEA properties: bin/idea.properties: change default paths, advanced IDE settings Log file: is stored in the logs folder, e.g. Logs/<My-MPS-/My-RCP-Identifier>/idea.log How do I debug action maps? Set a breakpoint in CellActionExecutorFinder .","title":"Debugging"},{"location":"home/debugging/#general-blog-posts","text":"24 debugging tips and tricks The Debugger Checklist \u2013 Part I The Debugger Checklist \u2013 Part II Debugging tips 10 Debugging Tips for Beginners","title":"General Blog posts"},{"location":"home/external_files_and_tools/","text":"Import/export \u00b6 How do you write an importer? Specific Languages Blog: Writing an importer: Introduction Specific Languages Blog: Writing an importer: Adding the action to a menu Specific Languages Blog: Writing an importer: Invoking from the editor Specific Languages Blog: Writing an importer: Error handling considerations Specific Languages Blog: Writing an importer: Updating existing nodes Alternative solution: use custom persistence . How do you deal with errors when writing an importer? Create a new tab in the messages view and show the errors. Create error concepts in the language. If the import fails for a particular node, it can be replaced with one of these error nodes in the output model and some error message can be appended. By doing this you can also implement checking rules for the error nodes so that they errors also are displayed as part of model checking. You can also use finders to find all occurrences of errors in the model. Is there a wizard available to set up an MPS language based on an XML schema (defined in .xsd files)? No, not possible at the moment but you can create new projects from local or GitHub hosted templates with Lochkarte . Where do you put JARs? Specific Languages blog: Where do I put my JARs? Tools \u00b6 How can you run an LSP server for MPS grammars? There is no support for this in IntelliJ products (see IDEABKL-7409 ) and also no implementation exist in MPS . How can you use databases in MPS ? MPS doesn\u2019t have any special support for databases or for frameworks such as Spring Boot (unlike IntelliJ IDEA) . Specific Languages blog: MPS is not a (relational) database How can you create a standalone utility (not a complete IDE ) for language generation with MPS ? 2 This is not possible at the moment but you can interact with MPS models from Java when you setup the necessary dependencies: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import jetbrains.mps.smodel.ModelAccess ; import jetbrains.mps.tool.environment.EnvironmentConfig ; import jetbrains.mps.project.Project ; import jetbrains.mps.tool.environment.MpsEnvironment ; import org.jetbrains.mps.openapi.model.SModel ; import org.jetbrains.mps.openapi.module.SModule ; import java.io.File ; public class Test { static String projectDir = \"your MPS project path\" ; public static void main ( String [] args ) { EnvironmentConfig config = EnvironmentConfig . emptyConfig (); MpsEnvironment ourEnv = new MpsEnvironment ( config ); ourEnv . init (); Project myProject = ourEnv . openProject ( new File ( projectDir )); myProject . getModelAccess (). runReadAction (() -> { for ( SModule module : myProject . getProjectModules ()) { for ( SModel model : module . getModels ()) { System . out . println ( model . getName ()); } } }); } } How can you share MPS snippets? You can use Skadi Cloud Gists . How can you run MPS in the browser? You can try Skadi Cloud . There is also Modelix and JetBrains Projector . How can you embed a web browser in MPS ? Since Intellij 2020.1 it is possible to use the Java Chromium Embedded Framework . Create a new swing component in the editor: 1 2 JBCefBrowser myBrowser = new JBCefBrowser ( myUrl ); return myBrowser . getComponent (); MPS forum - How to migrate existing data into MPS ? \u21a9 MPS forum - Standalone language generator \u21a9","title":"External files and tools"},{"location":"home/external_files_and_tools/#importexport","text":"How do you write an importer? Specific Languages Blog: Writing an importer: Introduction Specific Languages Blog: Writing an importer: Adding the action to a menu Specific Languages Blog: Writing an importer: Invoking from the editor Specific Languages Blog: Writing an importer: Error handling considerations Specific Languages Blog: Writing an importer: Updating existing nodes Alternative solution: use custom persistence . How do you deal with errors when writing an importer? Create a new tab in the messages view and show the errors. Create error concepts in the language. If the import fails for a particular node, it can be replaced with one of these error nodes in the output model and some error message can be appended. By doing this you can also implement checking rules for the error nodes so that they errors also are displayed as part of model checking. You can also use finders to find all occurrences of errors in the model. Is there a wizard available to set up an MPS language based on an XML schema (defined in .xsd files)? No, not possible at the moment but you can create new projects from local or GitHub hosted templates with Lochkarte . Where do you put JARs? Specific Languages blog: Where do I put my JARs?","title":"Import/export"},{"location":"home/external_files_and_tools/#tools","text":"How can you run an LSP server for MPS grammars? There is no support for this in IntelliJ products (see IDEABKL-7409 ) and also no implementation exist in MPS . How can you use databases in MPS ? MPS doesn\u2019t have any special support for databases or for frameworks such as Spring Boot (unlike IntelliJ IDEA) . Specific Languages blog: MPS is not a (relational) database How can you create a standalone utility (not a complete IDE ) for language generation with MPS ? 2 This is not possible at the moment but you can interact with MPS models from Java when you setup the necessary dependencies: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import jetbrains.mps.smodel.ModelAccess ; import jetbrains.mps.tool.environment.EnvironmentConfig ; import jetbrains.mps.project.Project ; import jetbrains.mps.tool.environment.MpsEnvironment ; import org.jetbrains.mps.openapi.model.SModel ; import org.jetbrains.mps.openapi.module.SModule ; import java.io.File ; public class Test { static String projectDir = \"your MPS project path\" ; public static void main ( String [] args ) { EnvironmentConfig config = EnvironmentConfig . emptyConfig (); MpsEnvironment ourEnv = new MpsEnvironment ( config ); ourEnv . init (); Project myProject = ourEnv . openProject ( new File ( projectDir )); myProject . getModelAccess (). runReadAction (() -> { for ( SModule module : myProject . getProjectModules ()) { for ( SModel model : module . getModels ()) { System . out . println ( model . getName ()); } } }); } } How can you share MPS snippets? You can use Skadi Cloud Gists . How can you run MPS in the browser? You can try Skadi Cloud . There is also Modelix and JetBrains Projector . How can you embed a web browser in MPS ? Since Intellij 2020.1 it is possible to use the Java Chromium Embedded Framework . Create a new swing component in the editor: 1 2 JBCefBrowser myBrowser = new JBCefBrowser ( myUrl ); return myBrowser . getComponent (); MPS forum - How to migrate existing data into MPS ? \u21a9 MPS forum - Standalone language generator \u21a9","title":"Tools"},{"location":"home/general/","text":"Who is MPS for? Specific Languages blog: Who is MPS for? What can you do if a problem occurs that isn\u2019t in this list? Try invalidating the cache and restarting MPS (same menu). Search the forum and issue tracker . Ask a question on Slack . I changed something in a settings page and nothing changed. There might be a bug related to caching. Reopening the dialog, invalidating the cache or restarting the project might help. Which standard IDE settings should you change? The maximum heap size setting should be changed to a higher values such as 8 GB when using many languages or plugins. Another reason for high memory usage can be many (poorly) implemented checking rules. I am running low on memory or the IDE is running slow. What can you do without restarting MPS ? When you have enabled the loaded models indicator in the lower right corner of the screen, you can click on the text to unload not needed models . The memory indicator at the same location can be used to free memory. As a last resort the power saving mode can be enabled which disables background tasks such as the model checker (not recommended). What\u2019s the difference between a module and a model? Specific Languages blog: Ambiguous terms: Modules and models What\u2019s a SRepository and how\u2019s it structured? The answer can be found in the MPS source code .Multiple repositories could be available in the feature. Given a repository, references to modules/models/nodes can be resolved. There\u2019s no need in making ids unique globally as each subsystem knows, which exact repository it needs to use at any moment. (e.g. the type-system knows where it stores its type-nodes, so it will not try to resolve references to them ) A repository contains modules, modules have model roots, each model root can load models. Also a module can be a models container itself (without model root). A model is then a set of root nodes. Each root node is a root of a tree of nodes, So that overall, a repository is a tree structure. Is there an existing expression/scripting language? There is the expressions sample project. For a full language that can also be evaluated, have a look at KernelF available at IETS3 . How do you organize large projects in MPS ? Read the two answers in this thread . How do you debug MPS projects? Have a look at this blog post or this guide . Where are the log messages? log info logs to the MPS log file idea.log , message info logs to the messages view . Which log level should you use? Have a look at this Stack Overflow answer . How to you export data from MPS ? Specific Languages blog: The simplest way to export your data from MPS Specific Languages blog: Good and bad ways of exporting DSL models Specific Languages blog: Translation vs export Why is a project read-only? Specific Languages blog: Why is my project suddenly read-only? How do you work with more than one project in MPS ? Given I want to work on a MPS project that uses other projects and I want to switch between tasks that sometimes need changes on both, in the dependent project and the root project. I would like to switch back and forth between using the default prepackaged project dependencies and my own repository of them where I build them myself. How could I do that? Option 0 : Open multiple projects in MPS at the same time Works when doing small changes fast unreliable: when changing dependencies in my source models, this leads to a reload operation on the repository, which sometimes messes up the loaded repository and caches Option 1 : Publish and pull from local maven ( IETS3 ) reliable example gradle script needs to be told to pull from local repository \u2013 e.g. by providing -PforceLocalDependencies to IETS3 \u2013 or use dependency overrides Option 3 : Changing project libraries does not affect command line builds Option 3a : Command line setup Task ( IETS3 ) We usually have a ./gradlew setup task in our projects that replaces your .mps/libraries.xml . When you want to change the project, you\u2019ll need to change the configuration of that command line setup task and rerun it. Option 3b : MPS Path variables in settings (deprecated) In the MPS setttings, you can configure path variables that can be used in .mps/libraries.xml to pinpoint to the location of a target project. They will only configure the MPS behavior and not affect the command line builds. So in most cases, you don\u2019t want to use them and instead let your build script setup these files. contributed by: @abstraktor Why is MPS shipped with JBR instead of using an installed JDK / JRE ? JBR is a fork of OpenJDK with specific bugfixes and improvements for JetBrains IDEs. More info can be found in JetBrains/JetBrainsRuntime .","title":"General"},{"location":"home/platform_specific_bugs/","text":"Windows \u00b6 Compilation from the command line might fail due to none ASCII chars. The error message looks something like this: 1 [generate] NewLanguage\\behavior\\rtzj__BehaviorDescriptor.java : Invalid character constant (line: 27) If this happens, set the environment variable JAVA_TOOL_OPTIONS to -Dfile.encoding = UTF8 ( MPS -23526 ). Tests are failing with a message, that a filename or extension is too long (Windows). The error message looks like this: Caused by: java.io.IOException: CreateProcess error=206, The filename or extension is too long There is a path that is too long for Windows in the build script. Choose the option compressArgs in test modules node to fix the issue ( MPS -24137 ). Mac \u00b6 How do I get my defined environment variables? Execute printenv on a shell. Using com.mbeddr.mpsutil.datepicker doesn\u2019t work when look and feel is set to macOS Light. Use the default light theme. There is no other workaround at the moment ( MPS -3388 , MBEDDR-2203 ). Can\u2019t find TBItem with uid \u2018XY\u2019. This is a MacBook Pro with touchbar related issue. No workaround at the moment ( MPS -31728 ). What other active bugs are there? Standalone application: impossible to define application icon ( MPS -32971 ) Linux \u00b6 Autocompleting doesn\u2019t work with MPS + i3 (linux window manager). No solution at the moment ( MPS -30499 ). Completion menu on wrong screen in multi monitor setup (linux+i3). No solution at the moment ( MPS -33689 ).","title":"OS-specific bugs"},{"location":"home/platform_specific_bugs/#windows","text":"Compilation from the command line might fail due to none ASCII chars. The error message looks something like this: 1 [generate] NewLanguage\\behavior\\rtzj__BehaviorDescriptor.java : Invalid character constant (line: 27) If this happens, set the environment variable JAVA_TOOL_OPTIONS to -Dfile.encoding = UTF8 ( MPS -23526 ). Tests are failing with a message, that a filename or extension is too long (Windows). The error message looks like this: Caused by: java.io.IOException: CreateProcess error=206, The filename or extension is too long There is a path that is too long for Windows in the build script. Choose the option compressArgs in test modules node to fix the issue ( MPS -24137 ).","title":"Windows"},{"location":"home/platform_specific_bugs/#mac","text":"How do I get my defined environment variables? Execute printenv on a shell. Using com.mbeddr.mpsutil.datepicker doesn\u2019t work when look and feel is set to macOS Light. Use the default light theme. There is no other workaround at the moment ( MPS -3388 , MBEDDR-2203 ). Can\u2019t find TBItem with uid \u2018XY\u2019. This is a MacBook Pro with touchbar related issue. No workaround at the moment ( MPS -31728 ). What other active bugs are there? Standalone application: impossible to define application icon ( MPS -32971 )","title":"Mac"},{"location":"home/platform_specific_bugs/#linux","text":"Autocompleting doesn\u2019t work with MPS + i3 (linux window manager). No solution at the moment ( MPS -30499 ). Completion menu on wrong screen in multi monitor setup (linux+i3). No solution at the moment ( MPS -33689 ).","title":"Linux"},{"location":"home/plugins/","text":"Where can you use a created language? 2 They can be used in MPS itself, or in a custom IDE based on MPS (a so called RCP ). Are MPS language often used as plugins in Intellij IDEs instead of MPS itself? (an IntelliJ IDEA plugin, not custom RCP ) No, this functionality is not used very often. How can you find plugins on the JetBrains marketplace that are usable in MPS ? Searching for the word MPS in all categories should do the trick. Why do many IntelliJ plugins don\u2019t work with MPS ? Many of these plugins operate on lines in a text editor. MPS uses projectional editors which are not normal text editors. It doesn\u2019t use documents and the PSI because MPS models are not text based. Using plugins that are not developed for MPS can interfere with certain features of MPS (e.g. find usages isn\u2019t working anymore). Are there any general purpose plugins for MPS from the community? Have a look at the plugin section of mps.rocks . Which kinds of plugins are there? Specific Languages Blog: Two kinds of MPS plugins How do I disable notifications for fatal errors? Add idea.fatal.error.notification = disabled to idea.properties . Are there existing projects regarding MPS on the web? Have a look at deployment options for MPS , this list and WebMPS by JetBrains. Specific Languages Blog: Web-based projectional editing is moving forward Specific Languages Blog: MPSServer and WebEditKit How do you translate every part of MPS ? 1 Install a language pack for Intellij. Hardcoded parts of MPS can\u2019t be translated. There are also known bugs with extented characters ( MPS -31835 ) and unicode in general in case you want to use special characters. Further information can be found in this article: Localizing an IntelliJ Plugin . Can you get information about a MPS installation via an HTTP request? Yes, this is possible through the IntelliJ Platform REST API : Send a GET request (or enter it into the browser address bar): http://localhost:63342/api/about?more=true . Make sure that you don\u2019t have IntelliJ opened at the same time as it has the same API. Example output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"name\" : \"MPS 2021.2.5\" , \"productName\" : \"MPS\" , \"baselineVersion\" : 212 , \"buildNumber\" : \"212.5284.1355\" , \"vendor\" : \"JetBrains s.r.o.\" , \"isEAP\" : false , \"productCode\" : \"MPS\" , \"buildDate\" : 1647561654804 , \"isSnapshot\" : false , \"configPath\" : \"/Users/user/Library/Application Support/JetBrains/MPS2021.2\" , \"systemPath\" : \"/Users/user/Library/Caches/JetBrains/MPS2021.2\" , \"binPath\" : \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents/bin\" , \"logPath\" : \"/Users/user/Library/Logs/JetBrains/MPS2021.2\" , \"homePath\" : \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents\" } How can you compare two nodes? Select them in the logical view, right-click \u2192 Compare two nodes . Use the language com.mbeddr.mpsutil.nodediff : Select first node: Set as First Node in Diff . Select second node: Show Diff with First Node . jetbrains.mps.module.ModuleClassLoaderIsNullException: ClassLoader of module XY could not be found. Make sure that the solution kind is not set to none. Any way to translate the whole MPS ? \u21a9 MPS forum - Plugin \u21a9","title":"Plugins"},{"location":"home/rcp/","text":"RCP stands for Rich Client Platform. The topic is explained in Building standalone IDEs for your languages | MPS . A plugin is incompatible with the current RCP version. Specific Languages blog: Fixing the \u2018Plugin incompatible with the current [CUSTOM RCP ] version\u2019 error How can you customize the welcome screen in an RCP ? Specific Languages blog: Customizing your RCP welcome screen: removing unwanted tabs The used library xml-patch uses XPath path selectors. A cheat sheet for the syntax can be found here . Specific Languages blog: Customizing your RCP welcome screen: stripping down even further Specific Languages blog: A fully custom welcome screen How can you reduce the size of an RCP ? Remove all packaged plugins that you don\u2019t need Use a JBR version without JCEF if you don\u2019t need an embedded browser (jbr_nomod). How can I deactivate a preference page? Remove the plugin that contains the preference page. For SPreference pages: they are project plugins, so you can find them through ProjectPluginManager . getPlugins and then call dispose or you could unregister the preference pages itself. For example: 1 2 3 4 Project ideaProject = ProjectPluginManager . getInstance ( ProjectHelper . toIdeaProject ( # project ); list < BaseProjectPlugin > plugins = new arraylist < BaseProjectPlugin > ( copy : ideaProject . getPlugins ()); BaseProjectPrefsComponent component = plugins . findFirst ({ ~ it => it . toString (). startsWith ( \"path_to_your._ProjectPlugin\" ); }). getPrefsComponents () get ( 0 ); component . getPages (). get ( 0 ). unregister (); For preference forms: they can be found through Configurable . APPLICATION_CONFIGURABLE . getPoint (). getExtensionList and removed by calling unregisterExtension . How can you replace the logical view on the left side with a custom one? Use the class com.mbeddr.mpsutil.projectview from MPS -extensions . You can find an example that replicates the logical view in mbeddr . How can you tell which IntelliJ version MPS runs with? Given I want to know, which version of IntelliJ Community my MPS is built from. How can I know? mbeddr : The easiest way to get the correct platform for an MPS version is by running ant in the root of your MPS sources: ant -f build/getDependencies.xml download-platform It will place the platform in the folder mps-platform of the repository and is automatically imported into the intelliJ project where you can read the sources and also step into them when debugging. In case you\u2019re looking at an RCP : /build.number provides this information and more, eg idea.platform.build.number=MPS\u2014203.7717.56 . The platform version is part of the build information e.g. MPS \u2014211.7442.1291 To get the baseline version e.g. 211, programatically: ApplicationInfo . getInstance (). getBuild (). getBaselineVersion () To get the full version e.g. 211.7442.1291, programatically: ApplicationInfo . getInstance (). getBuild (). currentVersion (). asString () How can you show a custom implemented project view instead of the MPS logical view? Assume that the view was build with com.mbeddr.mpsutil.projectview : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 SwingUtilities . invokeLater ( new Runnable () { public void run () { list < AbstractProjectViewPane > viewsToRemove = new linkedlist < AbstractProjectViewPane > ; ProjectView projectView = ProjectView . getInstance ( project . getProject ()); foreach paneID in projectView . getPaneIds () { if ( paneID . endsWith ( ProjectViewHelper . YOUR_PROJCET_VIEW_ID )) { if ( ! projectView . getCurrentViewId (). equals ( paneID )) { projectView . changeView ( paneID ); } } else if ( this . viewsToKeep . asSequence . any ({ ~ it => paneID . endsWith ( it ); })) { continue ; } else { viewsToRemove . add ( projectView . getProjectViewPaneById ( paneID )); } } viewsToRemove . forEach ({ ~ it => projectView . removeProjectPane ( it ); it . dispose (); }); ProjectPane . getInstance ( project ). activate (); } }) How can you customise the New Roots (mbeddr.platform) or New dialog of MPS /mbeddr? 1 CreateRootFilterEP . getInstance (). addFilter how to change (or turn off) the exception submission dialog? Remove all error handlers like this . Remove <appender name=\"DIALOG\" class=\"com.intellij.diagnostic.DialogAppender\"> from the log.xml file. This will also disable the error pop ups in the IDE where you can see the exception. Where can you find the latest MPS and IntelliJ icons? MPS : mps-icons IntelliJ: Icons list How can you restart MPS programmatically? 1 2 ApplicationEx app = ApplicationManagerEx . getApplicationEx (); app . restart ( true , true );","title":"RCP"},{"location":"home/trouble_shooting_guide/","text":"Troubleshooting guide \u00b6 This is a non-exhaustive list of common problems with MPS and platform projects. It is assumed that Gradle is used for building the project. MPS \u00b6 The IDE is sluggish and doesn\u2019t work the way it should. Edit the file mps(64).vmoptions and give it sufficient heap space: -Xmx8g MPS behaves strange. For instance: claims that a method is missing, although it exists.* Tools \u2192 Reload All Classes . File \u2192 Invalidate Caches , then restart. File \u2192 Invalidate Caches , shutdown MPS ; in the repository in question: run git clean -fxd -e build.properties -e gradle.properties , rebuild with Gradle ( ./gradlew ), restart MPS . MPS cannot find languages / solutions. For instance: \u201clanguage X is not deployed\u201d errors. File \u2192 Invalidate Caches , shutdown MPS . Run ./gradlew setup --refresh-dependencies . Start MPS again. The IDE doesn\u2019t let you enter some text / an intention isn\u2019t visible that should be there. check: is the concept / intention visible in the model? (open a context menu where baselanguage code is allowed and search for classes / concepts from the same language) \u2192 Use Edit \u2192 Add Language Import to import the language containing the concept / the intention. check the concept: is the type of the concept suitable for the place where you want to create an instance? Does it implement the right interface? check the tntention: is the isApplicable () -method called? (add a System . err . println () to the method and check what MPS outputs) \u2192 The intention is most probably not visible in the model \u2192 see above \u2192 Make sure the method returns true Concept: does a constraint on one of the ancestor-nodes prohibit you from creating it? MPS build fails. Does the MPS Model-Checker report problems? \u2192 Fix identified problems. Does the build log report intelligible problems? \u2192 Fix identified problems. Does it build in Gradle? \u2192 See: Gradle-Build fails . Gradle \u00b6 Gradle build fails. Did you call git clean -fxd -e build.properties before ./gradlew ? \u2192 Do it, retry. Did you call ./gradlew with --refresh-dependencies ? \u2192 Retry with --refresh-dependencies . Does the error message start with \u201cdependencies should be extracted into build script\u201d? In MPS , apply the model-checker to the \u201c_build\u201d-package. Many problems can be fixed by applying the intention \u201cReload modules from disk\u201d. Rebuild the \u201c_build\u201d-package. Retry the gradle build. Do you have local changes? \u2192 Use git stash to stash them away, retry. When the build works without your changes, then your changes are the problem. Redo them one-by-one to find the one that causes the problem. Does it work on CI? \u2192 Is the CI build recent? \u2192 Retrigger via a Whitespace-only commit. \u2192 Search for differences between your local Gradle build and the CI build (versions). \u2192 Is it the same error message? \u2192 Search for differences between your local Gradle build and the CI build (versions). is the master build green on CI? \u2192 Find out who broke it and make him fix it. After it is fixed, continue. is the master build recent? \u2192 Retrigger it via a whitespace-only commit. \u2192 Merge master into your branch, retry. If nothing helped: try cloning your repo again. Out of options. Ask somebody for help. CI \u00b6 Tests are failing on CI, but run green in the local MPS installation. What about the local Gradle build? The tests can be executed locally with: ./gradlew ant-build-tests -Dmps.home=PATH_TO_YOU_MPS_INSTALLTION . Afterwards the test results can be found in build/iets3-allScripts ( IETS3 ). It runs (green) -> there is a discrepancy between the CI and your local Gradle build. Make sure you are on the same branch/commit as the CI, It shows the same test failures as the CI \u2192 there is a discrepancy between the MPS Build and the Gradle Build Rebuild the build scripts in MPS . Try running the tests in a seperate Ppocess (edit the run configuration in MPS ). Make sure your MPS uses the same (versions of the) dependencies as the gradle build. This can be achieved in 2 different ways: Run ./gradlew dependencies to see which versions of which dependency gradle uses and make sure the OS and Mbeddr repos are checked out on the right branches / commits ( IETS3 ). Remove the file projectlibraries.overrides.properties from your repo and execute ./gradlew setup in both. This configures MPS to directy use the Java class files from the Gradle artifacts instead of the checked out repos.","title":"Trouble shooting guide"},{"location":"home/trouble_shooting_guide/#troubleshooting-guide","text":"This is a non-exhaustive list of common problems with MPS and platform projects. It is assumed that Gradle is used for building the project.","title":"Troubleshooting guide"},{"location":"home/trouble_shooting_guide/#mps","text":"The IDE is sluggish and doesn\u2019t work the way it should. Edit the file mps(64).vmoptions and give it sufficient heap space: -Xmx8g MPS behaves strange. For instance: claims that a method is missing, although it exists.* Tools \u2192 Reload All Classes . File \u2192 Invalidate Caches , then restart. File \u2192 Invalidate Caches , shutdown MPS ; in the repository in question: run git clean -fxd -e build.properties -e gradle.properties , rebuild with Gradle ( ./gradlew ), restart MPS . MPS cannot find languages / solutions. For instance: \u201clanguage X is not deployed\u201d errors. File \u2192 Invalidate Caches , shutdown MPS . Run ./gradlew setup --refresh-dependencies . Start MPS again. The IDE doesn\u2019t let you enter some text / an intention isn\u2019t visible that should be there. check: is the concept / intention visible in the model? (open a context menu where baselanguage code is allowed and search for classes / concepts from the same language) \u2192 Use Edit \u2192 Add Language Import to import the language containing the concept / the intention. check the concept: is the type of the concept suitable for the place where you want to create an instance? Does it implement the right interface? check the tntention: is the isApplicable () -method called? (add a System . err . println () to the method and check what MPS outputs) \u2192 The intention is most probably not visible in the model \u2192 see above \u2192 Make sure the method returns true Concept: does a constraint on one of the ancestor-nodes prohibit you from creating it? MPS build fails. Does the MPS Model-Checker report problems? \u2192 Fix identified problems. Does the build log report intelligible problems? \u2192 Fix identified problems. Does it build in Gradle? \u2192 See: Gradle-Build fails .","title":"MPS"},{"location":"home/trouble_shooting_guide/#gradle","text":"Gradle build fails. Did you call git clean -fxd -e build.properties before ./gradlew ? \u2192 Do it, retry. Did you call ./gradlew with --refresh-dependencies ? \u2192 Retry with --refresh-dependencies . Does the error message start with \u201cdependencies should be extracted into build script\u201d? In MPS , apply the model-checker to the \u201c_build\u201d-package. Many problems can be fixed by applying the intention \u201cReload modules from disk\u201d. Rebuild the \u201c_build\u201d-package. Retry the gradle build. Do you have local changes? \u2192 Use git stash to stash them away, retry. When the build works without your changes, then your changes are the problem. Redo them one-by-one to find the one that causes the problem. Does it work on CI? \u2192 Is the CI build recent? \u2192 Retrigger via a Whitespace-only commit. \u2192 Search for differences between your local Gradle build and the CI build (versions). \u2192 Is it the same error message? \u2192 Search for differences between your local Gradle build and the CI build (versions). is the master build green on CI? \u2192 Find out who broke it and make him fix it. After it is fixed, continue. is the master build recent? \u2192 Retrigger it via a whitespace-only commit. \u2192 Merge master into your branch, retry. If nothing helped: try cloning your repo again. Out of options. Ask somebody for help.","title":"Gradle"},{"location":"home/trouble_shooting_guide/#ci","text":"Tests are failing on CI, but run green in the local MPS installation. What about the local Gradle build? The tests can be executed locally with: ./gradlew ant-build-tests -Dmps.home=PATH_TO_YOU_MPS_INSTALLTION . Afterwards the test results can be found in build/iets3-allScripts ( IETS3 ). It runs (green) -> there is a discrepancy between the CI and your local Gradle build. Make sure you are on the same branch/commit as the CI, It shows the same test failures as the CI \u2192 there is a discrepancy between the MPS Build and the Gradle Build Rebuild the build scripts in MPS . Try running the tests in a seperate Ppocess (edit the run configuration in MPS ). Make sure your MPS uses the same (versions of the) dependencies as the gradle build. This can be achieved in 2 different ways: Run ./gradlew dependencies to see which versions of which dependency gradle uses and make sure the OS and Mbeddr repos are checked out on the right branches / commits ( IETS3 ). Remove the file projectlibraries.overrides.properties from your repo and execute ./gradlew setup in both. This configures MPS to directy use the Java class files from the Gradle artifacts instead of the checked out repos.","title":"CI"},{"location":"languages/","text":"What\u2019s the relationship between mbeddr.platform , iets3.opensource and mps-extensions ? Older versions of mbeddr platform and IETS3 contain a dependency to MPS -extensions and they repack it. The newest version of mbeddr platform doesn\u2019t repack it. MPS -extensions contains many extensions that were part of mbeddr platform . Why are some of these languages not migrated to mps-extensions? Some language have dependencies that would also need to be migrated to MPS -extensions . Other languages are deemed as not stable or important enough to be migrated.","title":"Index"},{"location":"languages/baselanguage/","text":"Base Language \u00b6 jetbrains.mps.baselanguage For a full list of baselanguage bugs and feature requests, have a look at this ticket search . Paste as Java class doesn\u2019t work. Not all newer Java features can be pasted such as the double colon operator(::) and static imports (fixed in the newest MPS versions). Loops with more than one variable also don\u2019t work. Set the `Export flag at the moduleX import. You are using a class that extends another class that is situated in another solution. That means that the export flag for the other solutions should be set in the current module, so that there is automatically a dependency to this module. More information can be found in dependencies: export flag . What Java language features aren\u2019t supported in baselanguage ? The following features are not supported (yet): local classes multiline strings/text blocks records sealed classes pattern matching for switch statements pattern matching for instanceof double brace initialization A function with baselanguage code doesn\u2019t return anything when called. baselanguage permits implicit returns. The last statement is automatically returned. In some places implicit returns aren\u2019t supported, such as when returning a new ListScope class. Make sure to add a return statement in such places. Var Variable \u00b6 jetbrains.mps.baselanguage.varVariable TextGen not found for concept of X language. Maybe a wrong generator order of languages. Example The generators of language x are executed first and then the generator of the var variable of the same language is called. It should be the other way around. You can specify a custom generation plan to fix this issue. Closures \u00b6 jetbrains.mps.baselanguage.closures Exception when passing closure literal as a parameter in a behaviour method call Closures can\u2019t be used for functional interface types such as java.util.Runnable in behaviour methods (see MPS -31866 ) Collections \u00b6 How can you create a sequence with one element? Use the singleton constructor: 1 new singleton < string > ( \"single\" ) ` How do you convert from a Java ArrayList to a baselanguage list? Use the copy constructor: 1 new arraylist < string > ( copy : yourArrayList ) ` How do you convert baselanguage collections to Java streams? First convert your collection to a list that you downcast to a Java list. Then you can convert it into a stream StreamSupport . stream ( list / . spliterator (), false ) Why doesn\u2019t yield work inside a select operation? Given I have this code: myNode.items.select({~it => yield it.index}) When I run it, then I expect the result [0,1,2,3,4] but unexpectedly, I get the same list of nodes, as if I ran myNode.items What\u2019s happening? Yield does not work with .select({\u2026}) . It will do what you expected if you just call .selectMany({\u2026}) instead. That\u2019ll also make it clear what happens if you yield multiple times during an iteration, and that the control flow doesn\u2019t end when you\u2019re yielding. contributed by: @abstraktor How do you sort a collection of children? Given I have a node myNode with a child collection myNode.children . How do I sort them by their toString() ? I tried myNode.children/.sort(Ordering.lexical()) , but that doesn\u2019t do anything. Stepping revealed that it seems to create a copy of that list and sort that one. Use the bold sort, call toList to materialize the result, and then .clear and .addAll it: 1 2 3 sequence < T > sorted = list . sort ({ ~ a , ~ b => ORDERING . compare ( a , b ); }, asc ). toList ; list . clear ; list . addAll ( sorted ); contributed by: @abstraktor Checked dots \u00b6 jetbrains.mps.baselanguage.checkeddots voids NullPointerException when Java executes a method call on a null variable. For example, it won\u2019t throw a NullPointerException , if myObject is null. bold methods or dot-expressions are null safe, for example new arraylist<string>() . where ({~it => }) Access language \u00b6 jetbrains.mps.lang.access Managing concurrent access | MPS Transactional property cells \u00b6 jetbrains.mps.lang.editor.structure An intention can mark a regular property-cell such as string, int, and boolean as transactional. MPS updates the editor, when the cursor leaves the cell (= commit). You must define the commit handler in the inspector. The benefit is that the editor isn\u2019t permanently updated on every key typed. Can be useful, for example, if you set your text-color dynamically. Images \u00b6 jetbrains.mps.lang.editor.figures Statically embed images into the editor. example: image cell","title":"Baselanguage and extensions"},{"location":"languages/baselanguage/#base-language","text":"jetbrains.mps.baselanguage For a full list of baselanguage bugs and feature requests, have a look at this ticket search . Paste as Java class doesn\u2019t work. Not all newer Java features can be pasted such as the double colon operator(::) and static imports (fixed in the newest MPS versions). Loops with more than one variable also don\u2019t work. Set the `Export flag at the moduleX import. You are using a class that extends another class that is situated in another solution. That means that the export flag for the other solutions should be set in the current module, so that there is automatically a dependency to this module. More information can be found in dependencies: export flag . What Java language features aren\u2019t supported in baselanguage ? The following features are not supported (yet): local classes multiline strings/text blocks records sealed classes pattern matching for switch statements pattern matching for instanceof double brace initialization A function with baselanguage code doesn\u2019t return anything when called. baselanguage permits implicit returns. The last statement is automatically returned. In some places implicit returns aren\u2019t supported, such as when returning a new ListScope class. Make sure to add a return statement in such places.","title":"Base Language"},{"location":"languages/baselanguage/#var-variable","text":"jetbrains.mps.baselanguage.varVariable TextGen not found for concept of X language. Maybe a wrong generator order of languages. Example The generators of language x are executed first and then the generator of the var variable of the same language is called. It should be the other way around. You can specify a custom generation plan to fix this issue.","title":"Var Variable"},{"location":"languages/baselanguage/#closures","text":"jetbrains.mps.baselanguage.closures Exception when passing closure literal as a parameter in a behaviour method call Closures can\u2019t be used for functional interface types such as java.util.Runnable in behaviour methods (see MPS -31866 )","title":"Closures"},{"location":"languages/baselanguage/#collections","text":"How can you create a sequence with one element? Use the singleton constructor: 1 new singleton < string > ( \"single\" ) ` How do you convert from a Java ArrayList to a baselanguage list? Use the copy constructor: 1 new arraylist < string > ( copy : yourArrayList ) ` How do you convert baselanguage collections to Java streams? First convert your collection to a list that you downcast to a Java list. Then you can convert it into a stream StreamSupport . stream ( list / . spliterator (), false ) Why doesn\u2019t yield work inside a select operation? Given I have this code: myNode.items.select({~it => yield it.index}) When I run it, then I expect the result [0,1,2,3,4] but unexpectedly, I get the same list of nodes, as if I ran myNode.items What\u2019s happening? Yield does not work with .select({\u2026}) . It will do what you expected if you just call .selectMany({\u2026}) instead. That\u2019ll also make it clear what happens if you yield multiple times during an iteration, and that the control flow doesn\u2019t end when you\u2019re yielding. contributed by: @abstraktor How do you sort a collection of children? Given I have a node myNode with a child collection myNode.children . How do I sort them by their toString() ? I tried myNode.children/.sort(Ordering.lexical()) , but that doesn\u2019t do anything. Stepping revealed that it seems to create a copy of that list and sort that one. Use the bold sort, call toList to materialize the result, and then .clear and .addAll it: 1 2 3 sequence < T > sorted = list . sort ({ ~ a , ~ b => ORDERING . compare ( a , b ); }, asc ). toList ; list . clear ; list . addAll ( sorted ); contributed by: @abstraktor","title":"Collections"},{"location":"languages/baselanguage/#checked-dots","text":"jetbrains.mps.baselanguage.checkeddots voids NullPointerException when Java executes a method call on a null variable. For example, it won\u2019t throw a NullPointerException , if myObject is null. bold methods or dot-expressions are null safe, for example new arraylist<string>() . where ({~it => })","title":"Checked dots"},{"location":"languages/baselanguage/#access-language","text":"jetbrains.mps.lang.access Managing concurrent access | MPS","title":"Access language"},{"location":"languages/baselanguage/#transactional-property-cells","text":"jetbrains.mps.lang.editor.structure An intention can mark a regular property-cell such as string, int, and boolean as transactional. MPS updates the editor, when the cursor leaves the cell (= commit). You must define the commit handler in the inspector. The benefit is that the editor isn\u2019t permanently updated on every key typed. Can be useful, for example, if you set your text-color dynamically.","title":"Transactional property cells"},{"location":"languages/baselanguage/#images","text":"jetbrains.mps.lang.editor.figures Statically embed images into the editor. example: image cell","title":"Images"},{"location":"languages/double_dispatch/","text":"This article explains the language jetbrains.mps.baselanguage.doubleDispatch . The example comes from this article : Most OOP programming languages support single dispatch, more commonly known as virtual methods. For example, consider the following code: Single dispatch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class SpaceShip { public string GetShipType () { return \"SpaceShip\" ; } } public class ApolloSpacecraft extends SpaceShip { public string GetShipType () { return \"ApolloSpacecraft\" ; } } SpaceShip ship = new ApolloSpacecraft (); System . out . println ( ship . GetShipType ()); // output: (1) ApolloSpacecraft The actual method implementation which should be called, is chosen at runtime based solely on the actual type of ship. So, only the type of single object is used to select the method, hence the name single dispatch. Note: Single dispatch is one form of dynamic dispatch , for example, the method is chosen at runtime. If the method is chosen at compile time (true for all non-virtual methods), it\u2019s called static dispatch . Now add some asteroids: Double dispatch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 public class Asteroid { public void collideWith ( SpaceShip s ) { System . out . println ( \"Asteroid hit a SpaceShip\" ); } public void collideWith ( ApolloSpacecraft a ) { System . out . println ( \"Asteroid hit an ApolloSpacecraft\" ); } } public class ExplodingAsteroid extends Asteroid { public void collideWith ( SpaceShip s ) { System . out . println ( \"ExplodingAsteroid hit a SpaceShip\" ); } public void collideWith ( ApolloSpacecraft a ) { System . out . println ( \"ExplodingAsteroid hit an ApolloSpacecraft\" ); } } public class DoubleDispatch { public static void main ( string [] args ) { Asteroid theAsteroid = new Asteroid (); SpaceShip theSpaceShip = new SpaceShip (); ApolloSpacecraft theApolloSpacecraft = new ApolloSpacecraft (); theAsteroid . collideWith ( theSpaceShip ); // output: (1) theAsteroid . collideWith ( theApolloSpacecraft ); // output: (2) System . out . println (); ExplodingAsteroid theExplodingAsteroid = new ExplodingAsteroid (); theExplodingAsteroid . collideWith ( theSpaceShip ); // output: (3) theExplodingAsteroid . collideWith ( theApolloSpacecraft ); // output: (4) System . out . println (); Asteroid theAsteroidReference = theExplodingAsteroid ; theAsteroidReference . collideWith ( theSpaceShip ); // output: (5) theAsteroidReference . collideWith ( theApolloSpacecraft ); // output: (6) System . out . println (); // Note the different datatypes SpaceShip theSpaceShipReference = theApolloSpacecraft ; theAsteroid . collideWith ( theSpaceShipReference ); // output: (7) theAsteroidReference . collideWith ( theSpaceShipReference ); // output: (8) } } Asteroid hit a SpaceShip Asteroid hit an ApolloSpacecraft Exploding Asteroid hit a SpaceShip Exploding Asteroid hit anApolloSpacecraft Exploding Asteroid hit a SpaceShip Exploding Asteroid hit an ApolloSpacecraft Asteroid hit an ApolloSpacecraft ExplodingAsteroid hit a SpaceShip The desired result here would be ExplodingAsteroid hit an ApolloSpacecraft but instead you get ExplodingAsteroid hit a SpaceShip . To support double dispatch, import the dispatch language and include dispatch modifiers in ExplodingAsteroid: 1 2 3 4 5 6 7 8 9 public class ExplodingAsteroid extends Asteroid { public dispatch void collideWith ( SpaceShip s ) { System . out . println ( \"ExplodingAsteroid hit a SpaceShip\" ); } public dispatch void collideWith ( ApolloSpacecraft a ) { System . out . println ( \"ExplodingAsteroid hit an ApolloSpacecrat\" ); } } The last method now correctly returns ExplodingAsteroid hit an ApolloSpacecraft .","title":"Double dispatch"},{"location":"languages/mps_extensions/","text":"Checkboxes \u00b6 Boolean checkboxes \u00b6 de.itemis.mps.editor.bool A boolean checkbox cell that provides custom icons for states. Enumeration/Multi-value \u00b6 de.itemis.mps.editor.enumeration A checkbox cell with more than one state. You have to define states by an enumeration property. Richtext \u00b6 slisson.richtext A multi-line text-block that\u2019s extendable (e.g. for images). It looks a bit latex-like. The mbeddr doc language used it for generating xhtml, latex, and markdown. The ordering of text and IWords can\u2019t be arbitrary, A checking rule enforces that the text is normalized: There has to be at least one child, it must start with a Word and a Word must always be betweeen two embedded nodes and there are noo two consecutive Words. Multiline property cell \u00b6 de.slisson.mps.editor.multiline A cell for string properties over multiple lines. Diagram \u00b6 de.itemis.mps.editor.diagram I encountered a bug. Check the meta Issue on Github. How do you use this language? Have a look at the samples of this language in MPS -extensions . There is also an external tutorial series . What\u2019s the edge ID in the diagrams used for? It\u2019s used in the map that contains the layout data. It can be any unique string. LayoutMapEntry.key is the property where this string is used ( source ). Conditional Editor \u00b6 de.slisson.mps.conditionalEditor Generation errors exist. The condition of the conditional editor is not optional, it has to be set. Tables \u00b6 de.slisson.mps.tables Use slisson-tables instead of mps-tables because the language is more flexible (and not deprecated). The language displays content in a tabular format. The table can be hard-coded or can consist of complex queries/dynamic content. You have to add new cells and rows in the editor. They can also be readonly. You need a little experience (trial-and-error) to create these tables. Features: table cell queries partial tables grid queries Strumenta blog: Tabular projections in Jetbrains MPS : let\u2019s start building an accounting system How do you get rid of the small little extra grid lines on the outside of the table rows? ( original question ) Change these properties to true. How can I improve my tables? even-odd coloring of rows coloring of columns and row headers group columns by color multi-column headers annotations for cells pagination + other UI buttons Cell Layout \u00b6 de.itemis.mps.editor.celllayout What does this language do? In the MPS layout algorithms the children decide about their width and height and the parent cell can only arrange the already layouted children. In the algorithms from the celllayout language are similar to the swing layouters where the child is asked for its min/max/preferred size, but the parent decides about the size of the child and the child then has to fit itself into these bounds. This is used in tables and diagram, but also for the styles defined in the de.itemis.mps.celllayout language ( source ). What does grow-x and push-x do? Grow-x grows the cell to the with of the parent. Push-x is like setting grow-x on the cell and all ancestor cells. Grammar Cells \u00b6 de.itemis.mps.grammarcells Grammar cells seem to need a dummy component. Is this necessary? Yes it is, otherwise the generator doesn\u2019t get used( source ). What combinations of cells aren\u2019t supported? The following combinations are not allowed: optional and constant optional and reference How can you enter enumerations easier? Specific Languages blog: Entering enumerations easier with grammar cells Querylist \u00b6 com.mbeddr.mpsutil.editor.querylist You can use nodes in the editor, which aren\u2019t directly available in the current context. The language is more powerful than (readonly) model access (displays a string). You can have editor cells, which can have actions and all other normal cell features. queryListNode allows to access the surrounding context node in the editor definition (which otherwise isn\u2019t available). How do I fold collections returned by a querylist? Surround the querylist with a vertical collection and and set the cell layout of the querylist (not its content) to vertical. How do I make cells in querylists navigatable? I\u2019m trying to create a list of navigatable cells via querylist from mpsutil. The querylists query collects some nodes from my model, and I\u2019d like to make it so that each cell produced with this querylist navigates to its respective node. Using the navigatable-node style attribute (returning node , the node from the query) on these cells doesn\u2019t seem to work though - ctrl+clicking them doesn\u2019t do anything. How can I make the cells in a querylist navigatable to that node? The navigatable-node style attribute won\u2019t allow you to point directly to the node from the querylist\u2019s query. Instead, you can use the hyperlink-node style attribute (also from mpsutil) to make the navigation work, and the hyperlink-style attribute to make it look like a regular reference: A common workaround to get similar behavior with navigatable-node is to point it to a child or parent of the desired node instead of that node itself. contributed by: @jonaskraemer Tool tips \u00b6 de.itemis.mps.tooltips.structure This language is deprecated, use jetbrains.mps.lang.editor.tooltips instead. It provides tooltips on hover. You have to define a regular editor and a hover editor. Dropdown \u00b6 de.itemis.mps.dropdown This language surrounds an editor cell with a dropdown cell with a button. It opens the code completion menu whe you click on it. The language might not be very stable. Collapsible cells \u00b6 de.itemis.mps.editor.collapsible This language defines collapsed/folded and expanded/unfolded editors. It provides plus(+) and minus(-) buttons in the editor. There is no need for foldable collections. Use them together with other languages such as query lists. Mathematical operators \u00b6 de.itemis.mps.editor.math.notations This language embeds mathematical operators into the editor and also provides a set of predefined operators.","title":"MPS-extensions"},{"location":"languages/mps_extensions/#checkboxes","text":"","title":"Checkboxes"},{"location":"languages/mps_extensions/#boolean-checkboxes","text":"de.itemis.mps.editor.bool A boolean checkbox cell that provides custom icons for states.","title":"Boolean checkboxes"},{"location":"languages/mps_extensions/#enumerationmulti-value","text":"de.itemis.mps.editor.enumeration A checkbox cell with more than one state. You have to define states by an enumeration property.","title":"Enumeration/Multi-value"},{"location":"languages/mps_extensions/#richtext","text":"slisson.richtext A multi-line text-block that\u2019s extendable (e.g. for images). It looks a bit latex-like. The mbeddr doc language used it for generating xhtml, latex, and markdown. The ordering of text and IWords can\u2019t be arbitrary, A checking rule enforces that the text is normalized: There has to be at least one child, it must start with a Word and a Word must always be betweeen two embedded nodes and there are noo two consecutive Words.","title":"Richtext"},{"location":"languages/mps_extensions/#multiline-property-cell","text":"de.slisson.mps.editor.multiline A cell for string properties over multiple lines.","title":"Multiline property cell"},{"location":"languages/mps_extensions/#diagram","text":"de.itemis.mps.editor.diagram I encountered a bug. Check the meta Issue on Github. How do you use this language? Have a look at the samples of this language in MPS -extensions . There is also an external tutorial series . What\u2019s the edge ID in the diagrams used for? It\u2019s used in the map that contains the layout data. It can be any unique string. LayoutMapEntry.key is the property where this string is used ( source ).","title":"Diagram"},{"location":"languages/mps_extensions/#conditional-editor","text":"de.slisson.mps.conditionalEditor Generation errors exist. The condition of the conditional editor is not optional, it has to be set.","title":"Conditional Editor"},{"location":"languages/mps_extensions/#tables","text":"de.slisson.mps.tables Use slisson-tables instead of mps-tables because the language is more flexible (and not deprecated). The language displays content in a tabular format. The table can be hard-coded or can consist of complex queries/dynamic content. You have to add new cells and rows in the editor. They can also be readonly. You need a little experience (trial-and-error) to create these tables. Features: table cell queries partial tables grid queries Strumenta blog: Tabular projections in Jetbrains MPS : let\u2019s start building an accounting system How do you get rid of the small little extra grid lines on the outside of the table rows? ( original question ) Change these properties to true. How can I improve my tables? even-odd coloring of rows coloring of columns and row headers group columns by color multi-column headers annotations for cells pagination + other UI buttons","title":"Tables"},{"location":"languages/mps_extensions/#cell-layout","text":"de.itemis.mps.editor.celllayout What does this language do? In the MPS layout algorithms the children decide about their width and height and the parent cell can only arrange the already layouted children. In the algorithms from the celllayout language are similar to the swing layouters where the child is asked for its min/max/preferred size, but the parent decides about the size of the child and the child then has to fit itself into these bounds. This is used in tables and diagram, but also for the styles defined in the de.itemis.mps.celllayout language ( source ). What does grow-x and push-x do? Grow-x grows the cell to the with of the parent. Push-x is like setting grow-x on the cell and all ancestor cells.","title":"Cell Layout"},{"location":"languages/mps_extensions/#grammar-cells","text":"de.itemis.mps.grammarcells Grammar cells seem to need a dummy component. Is this necessary? Yes it is, otherwise the generator doesn\u2019t get used( source ). What combinations of cells aren\u2019t supported? The following combinations are not allowed: optional and constant optional and reference How can you enter enumerations easier? Specific Languages blog: Entering enumerations easier with grammar cells","title":"Grammar Cells"},{"location":"languages/mps_extensions/#querylist","text":"com.mbeddr.mpsutil.editor.querylist You can use nodes in the editor, which aren\u2019t directly available in the current context. The language is more powerful than (readonly) model access (displays a string). You can have editor cells, which can have actions and all other normal cell features. queryListNode allows to access the surrounding context node in the editor definition (which otherwise isn\u2019t available). How do I fold collections returned by a querylist? Surround the querylist with a vertical collection and and set the cell layout of the querylist (not its content) to vertical. How do I make cells in querylists navigatable? I\u2019m trying to create a list of navigatable cells via querylist from mpsutil. The querylists query collects some nodes from my model, and I\u2019d like to make it so that each cell produced with this querylist navigates to its respective node. Using the navigatable-node style attribute (returning node , the node from the query) on these cells doesn\u2019t seem to work though - ctrl+clicking them doesn\u2019t do anything. How can I make the cells in a querylist navigatable to that node? The navigatable-node style attribute won\u2019t allow you to point directly to the node from the querylist\u2019s query. Instead, you can use the hyperlink-node style attribute (also from mpsutil) to make the navigation work, and the hyperlink-style attribute to make it look like a regular reference: A common workaround to get similar behavior with navigatable-node is to point it to a child or parent of the desired node instead of that node itself. contributed by: @jonaskraemer","title":"Querylist"},{"location":"languages/mps_extensions/#tool-tips","text":"de.itemis.mps.tooltips.structure This language is deprecated, use jetbrains.mps.lang.editor.tooltips instead. It provides tooltips on hover. You have to define a regular editor and a hover editor.","title":"Tool tips"},{"location":"languages/mps_extensions/#dropdown","text":"de.itemis.mps.dropdown This language surrounds an editor cell with a dropdown cell with a button. It opens the code completion menu whe you click on it. The language might not be very stable.","title":"Dropdown"},{"location":"languages/mps_extensions/#collapsible-cells","text":"de.itemis.mps.editor.collapsible This language defines collapsed/folded and expanded/unfolded editors. It provides plus(+) and minus(-) buttons in the editor. There is no need for foldable collections. Use them together with other languages such as query lists.","title":"Collapsible cells"},{"location":"languages/mps_extensions/#mathematical-operators","text":"de.itemis.mps.editor.math.notations This language embeds mathematical operators into the editor and also provides a set of predefined operators.","title":"Mathematical operators"},{"location":"mbeddr/","text":"General \u00b6 What languages are old/deprecated and should not be used anymore? com.mbeddr.mpsutil.breadcrumb (removed in a recent version of mbeddr ) com.mbeddr.mpsutil.buildutil (experimental) com.mbeddr.mpsutil.contextactions (use MPS context actions instead) com.mbeddr.mpsutil.multilingual (unused/unmaintained) com.mbeddr.mpsutil.typesystem.trace (use MPS Type system trace instead) com.mbeddr.mpsutil.test.util (not needed) com.mbeddr.mpsutil.bldoc (obsolete since MPS java doc refactoring) com.mbeddr.mpsutil.langstats (not needed) com.mbeddr.mpsutil.javainterpreter (can only interpret expression, was build as a demo for the interpret framework) com.mbeddr.mpsutil.spreferences (rarely used) com.mbeddr.mpsutil.uniquenames (performance issues) com.mbeddr.mpsutil.iconchar (replaced with MPS concept) com.mbeddr.mpsutil.propertydefault (not used) com.mbeddr.mpsutil.testScope (not used) com.mbeddr.mpsutil.varscope (replaced with MPS scopes) Why are there two context action tools? The context actions tool from com.mbeddr.mpsutil.contextactions was developed first. Later, JetBrains developed their own tool that works the same as the one from mpsutil. Nowadays both tool windows coexist. I am using some mbeddr languages in my project but some of them aren\u2019t deployed. There might be some additional plugins that need to be installed: de.itemis.mps.nativelibs.loader com.mbeddr.mpsutil.actionsfilter mbeddr.spawner They can be installed by calling gradlew.bat install \"-PMPS_Installation=<path to MPS>\" from the root folder of the mbeddr.core repository when building from source. The actionsfilter plugin is necessary for the actionsfilter language.","title":"General"},{"location":"mbeddr/#general","text":"What languages are old/deprecated and should not be used anymore? com.mbeddr.mpsutil.breadcrumb (removed in a recent version of mbeddr ) com.mbeddr.mpsutil.buildutil (experimental) com.mbeddr.mpsutil.contextactions (use MPS context actions instead) com.mbeddr.mpsutil.multilingual (unused/unmaintained) com.mbeddr.mpsutil.typesystem.trace (use MPS Type system trace instead) com.mbeddr.mpsutil.test.util (not needed) com.mbeddr.mpsutil.bldoc (obsolete since MPS java doc refactoring) com.mbeddr.mpsutil.langstats (not needed) com.mbeddr.mpsutil.javainterpreter (can only interpret expression, was build as a demo for the interpret framework) com.mbeddr.mpsutil.spreferences (rarely used) com.mbeddr.mpsutil.uniquenames (performance issues) com.mbeddr.mpsutil.iconchar (replaced with MPS concept) com.mbeddr.mpsutil.propertydefault (not used) com.mbeddr.mpsutil.testScope (not used) com.mbeddr.mpsutil.varscope (replaced with MPS scopes) Why are there two context action tools? The context actions tool from com.mbeddr.mpsutil.contextactions was developed first. Later, JetBrains developed their own tool that works the same as the one from mpsutil. Nowadays both tool windows coexist. I am using some mbeddr languages in my project but some of them aren\u2019t deployed. There might be some additional plugins that need to be installed: de.itemis.mps.nativelibs.loader com.mbeddr.mpsutil.actionsfilter mbeddr.spawner They can be installed by calling gradlew.bat install \"-PMPS_Installation=<path to MPS>\" from the root folder of the mbeddr.core repository when building from source. The actionsfilter plugin is necessary for the actionsfilter language.","title":"General"},{"location":"mbeddr/big_project/","text":"If you have introduced a migration to mbeddr and need to execute, you need to execute it on all MPS projects contained in mbeddr. Otherwise, migrations pop up at for other people who work on other parts of mbeddr. This is an unclean workflow. To avoid this, you can either open all the projects in mbeddr.core\\code\\languages individually and run the migration wizard, but this is tedious. A better approach is to use the BigProject contained in the mbeddr repository. This project loads all languages and solutions available in the individual projects, thus you can run a migration once that executes on all these modules. Open project mbeddr.core\\tools\\BigProject with IntelliJ IDEA community edition. In Idea click in the menu on Run \u2192 Run BigProjectGenerator . If an SDK isn\u2019t configured, follow the error message in the bottom right corner or via project settings and select a Java 11 SDK that\u2019s installed on your system. Use default for the project language level. If a project compiler output path isn\u2019t configured, set it to mbeddr.core\\tmp\\BigProject . Close and open the project again to run the project generator. Check generation feedback. It looks like this: 1 2 3 4 === TOTAL === Languages: 214 Solutions: 305 Devkits: 22 Open project mbeddr.core\\tools\\BigProject with MPS . When the migration wizard starts automatically, execute migrations, otherwise Check for the popup Migration suspended in the right bottom corner. It tells you, which languages aren\u2019t built /deployed. Build or rebuild all languages in that list. Usually, MPS must build all languages and a set of solutions for the wizard to start automatically.","title":"BigProject"},{"location":"mbeddr/development_guide/","text":"Development Guide \u00b6 This document describes how the mbeddr team uses Git for contributing changes. The guide was written some years ago, so it might not reflect the workflow and guidelines of newer committers anymore. Commit messages \u00b6 In general, try to follow this guide with some exceptions for minor changes: When you commit a major change that relates to a GitHub issue, start your commit message with a short title (less than 50 char). Ideally, it contains the title of the GitHub issue if it fits. If you can\u2019t fit the issue title, please reference the issue ID with #4711 notation in the title. The title is followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 ClassCastException on FilteringActionManager #1207 Lorem ipsum dolor sit amet, consectetur adipiscing elit. In contrast, if your commit is just a minor fix, then you mention the modified mbeddr subsystem (for example mpsutil: , core: or ext: ) and provide a short description, followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 core,ext: Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipiscing elit. The optional paragraph at the end of your commit message contains further information about the change. Tests were added or describe why the fix was necessary, maybe there are special conditions when the issue surfaces. This is also the place where you can put GitHub issue commands to close or reference other issues. Further information and ideas on how to write good commit messages can be found here and here Branches \u00b6 We make heavy use of branches in the development process. If your task requires more than one commit, commit your changes on a branch. Two types of branches exist: feature and refactor : the first is used for new features, the second for bug fixes or code refactorings. They are distinguished by prefix: a feature branch my-awesome-stuff would be named feature/my-awesome-stuff or refactor/my-awesome-stuff , if it\u2019s a refactoring branch. Both kinds of branches should be short living (a couple of days) to reduce the risk of diverting to far from master and causing huge afford to merge. Ideally, no commits happen directly to master and every commit is first evaluated on a feature/refactoring branch. Note: Nowadays we mostly do merging instead of rebasing. The following sections might therefore not accurately reflect the current workflow. Merging \u00b6 Once your work is done, it needs to be integrated into the master branch. Because your branch most likely diverted from master, merging it into master would normally end up with a merge commit on the master branch. We have learned the hard way that merging clutters Git history and makes all intermediate commits of the branch end up in master. To prevent this, the suggested workflow is to rebase your branch onto master and thereby squash all your commits into a single one. Example \u00b6 This example shows you how to integrate your branch into the master branch by using rebase instead of merge. The list of commands to use is: 1 2 3 4 5 6 7 git fetch git rebase -i origin/master git checkout origin/master git pull git merge --ff-only feature/my-awesome-stuff git pull --rebase git push They are all explained below. Below you can see the starting point in the repository: 1 2 * 1ed51e3 (HEAD -> master) added another file * 5cee848 initial commit Now create the new feature branch named feature/my-awesome-stuff and commit some changes on it. While working on your branch, someone else committed changes into the master branch. Hence, for integrating your changes into master you would end up with a merge: 1 2 3 4 5 6 * 3c36424 (HEAD -> master) fixed some super important issue | * 66beba4 (feature/my-awesome-stuff) more work on my awesome feature | * cca995e did some stuff |/ * 1ed51e3 added another file * 5cee848 initial commit To get your commits into master , first make sure that your local history is up-to-date by running git fetch . Next, rebase your commits. This prevents a merge from happening. This is achieved with the following git command on our branch: git rebase -i origin/master . Git will now ask you how to proceed with your commits: 1 2 pick cca995e did some stuff pick 66beba4 more work on my awesome feature Now squash all commits into a single commit while rebasing: 1 2 pick cca995e did some stuff squash 66beba4 more work on my awesome feature Afterward, Git asks you to enter a message for the new commit. The default message it offers is a concatenation of all the commit messages from the commits to squash. However, you want to make the new commit message fit the earlier described pattern. After rebasing your Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> feature/my-awesome-stuff) 42: super awesome feature * 3c36424 (master) fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You still have to branch; now it\u2019s time to merge them. Change your git branch to master using git checkout origin/master . Make sure you have pulled from the remote and your branch is up-to-date. Now run git merge --ff-only feature/my-awesome-stuff . The \u2013ff-only is important to force git to not merge if it would produce a merge commit. Now Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> master, feature/my-awesome-stuff) 42: super awesome feature * 3c36424 fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You haven\u2019t created a merge commit, and all commits from your branch appear as a single commit in the Git history. You are good to go to push back to the repo. But wait, what if somebody has changes things in the meantime on the remote, wouldn\u2019t the pull create a new merge? Yes it would! Therefor don\u2019t use a plain git pull but use git pull --rebase in case you are pulling from the repo into your local master branch. This way, Git doesn\u2019t produce a new merge commit but rebase your local changes on top of the remote changes. Test Organization \u00b6 Naming \u00b6 The test solution for language com.mbeddr.x.lang should be named test.com.mbeddr.x.lang . Respectively, the test solution for solution com.mbeddr.y.sol should be named test.com.mbeddr.y.sol . If you need a dedicated language for testing purposes, you should name it test.com.mbeddr.x.[lang|sol].testsupport (or a similar suffix). This way, you can discriminate between \u201creal\u201d code below namespace com.mbeddr and test code below namespace test . You should also place any demo or playground modules outside the com.mbeddr namespace for the same reason. By following this scheme, you can build productive code in the UI by building everything below com.mbeddr in the modules pool, and be assured not to be interfered by test, demo, or playground code. Project Structure \u00b6 All languages, solutions, tests, demos, and playgrounds of one feature should be placed below a common virtual folder bearing the name of the feature. An exception might be build models. Generators must be present only when required or deleted if empty. This allows us to access all artifacts constituting one feature. File System \u00b6 All test code should be placed in a special folder in the file system: Build \u00b6 Build script setup \u00b6 In mbeddr there are different build scripts. They are used on the local machines for building the languages and on the build server for various build-related tasks, such as testing or packaging. This documentation guides you in following the mbeddr standards for setting up your BuildProject and integrating it into Mbeddr\u2019s build infrastructure. Required BuildFolderMacros \u00b6 In your BuildProject (the build script\u2019s model representation in MPS ) you first need a BuildFolderMacro (a folder ) named mps.home (see code snippet below). If you want to run the generated ant script in your MPS , then you should specify the location of your MPS installation in a relative way, otherwise you don\u2019t need a path for mps.home . At script execution time, you will redefine mps.home , to point to the folder where your MPS installation is located at. 1 folder mps.home = <no defaultPath> Next, you need a BuildFolderMacro named artifacts.root that doesn\u2019t require a path (see snippet below). When executing the ant script, generated from your BuildProject , define this macro from outside to point to the folder where all your plugin dependencies (for example: mbeddr.platform ) are located. 1 folder artifacts.root = <no defaultPath> For each BuildProjectDependency (the dependency\u2019s section below your folders) we need a separate BuildFolderMacro that follows the naming convention .artifacts and points to $artifacts.root/<BuildProject name> . At build script execution time, those macros will point to the folders, where your required plugins are located. In the code snippet below you can see the resulting BuildFolderMacros for a BuildProject with two dependencies: mps-sl-all and com.mbeddr.platform. 1 2 folder sl-all.artifacts = $artifacts.root/mps-sl-all folder platform.artifacts = $artifacts.root/com.mbeddr.platform Type system tests \u00b6 When you want to build type system tests that require a specific path macro (for example: for specifying the project location inside your TestInfo ), then you must create a BuildFolderMacro for this path macro. The name of this BuildFolderMacro should start with mps.macro , followed by the name of the respective path macro. In the example below, you instruct MPS via mps.macro.mbeddr.github.core.home to create a path macro mbeddr.github.core.home that points to the relative path location specified in the other BuildFolderMacro mbeddr.github.core.home . 1 folder mps.macro.mbeddr.github.core.home = $mbeddr.github.core.home Furthermore, you need to mark solutions containing type system tests as content: (with sources and tests) . To achieve this, please perform the following steps: Inside your BuildProject move your cursor to the solution that contains your type system tests. Open the inspector. Inside the Inspector select the node sources, open the context menu and select sources and tests from it. To get your tests executed, you first need to add the module-tests plugin to your use plugins: section (on top of your BuildProject ). When you can\u2019t add the node module-tests to this section, import it from jetbrains.mps.build.mps.tests.accessories . Finally, create a BuildMpsLayout_TestModules (a test configuration ) at bottom of your BuildProject and list there all solutions that contain type system tests to be executed. Configurations for generator and compiler \u00b6 To make sure code is generated and compiled the same way as in MPS , you have to add the following configurations ( BuildSource_JavaOptions and BuildMps_GeneratorOptions ) to your BuildProject \u2018s project structure. Those configurations control the generator engine and the Java compiler to make sure we have the same build behavior as in the IDE . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 generator options <project default> strict mode true multiple threads true number of threads 4 inplace transform true hide warnings false resort to static references true java options <project default> generate debug info true generate no warnings false fork false compiler <default compiler> java compliance level 1.6 java compiler options <no additional options> copy resources false Building a release \u00b6 For preparing a mbeddr release, you can modify the version number that is set for the mbeddr plugins by overwriting the values of major.version , minor.version and build (see screenshot below). However, you don\u2019t change these values inside the MPS build scripts, instead, either you change them in the global gradle script ( mbeddr.core/build.gradle ), or you overwrite them via the command line while spawning a new release build: -PmajorVersion=1 -PbuildVersion=0 -PminorVersion=0000 build_mbeddr publishMbeddrAllInOnePublicationToMavenRepository","title":"Development guide"},{"location":"mbeddr/development_guide/#development-guide","text":"This document describes how the mbeddr team uses Git for contributing changes. The guide was written some years ago, so it might not reflect the workflow and guidelines of newer committers anymore.","title":"Development Guide"},{"location":"mbeddr/development_guide/#commit-messages","text":"In general, try to follow this guide with some exceptions for minor changes: When you commit a major change that relates to a GitHub issue, start your commit message with a short title (less than 50 char). Ideally, it contains the title of the GitHub issue if it fits. If you can\u2019t fit the issue title, please reference the issue ID with #4711 notation in the title. The title is followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 ClassCastException on FilteringActionManager #1207 Lorem ipsum dolor sit amet, consectetur adipiscing elit. In contrast, if your commit is just a minor fix, then you mention the modified mbeddr subsystem (for example mpsutil: , core: or ext: ) and provide a short description, followed by a short optional paragraph (not longer than 80 chars) describing the change: 1 2 3 core,ext: Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consectetur adipiscing elit. The optional paragraph at the end of your commit message contains further information about the change. Tests were added or describe why the fix was necessary, maybe there are special conditions when the issue surfaces. This is also the place where you can put GitHub issue commands to close or reference other issues. Further information and ideas on how to write good commit messages can be found here and here","title":"Commit messages"},{"location":"mbeddr/development_guide/#branches","text":"We make heavy use of branches in the development process. If your task requires more than one commit, commit your changes on a branch. Two types of branches exist: feature and refactor : the first is used for new features, the second for bug fixes or code refactorings. They are distinguished by prefix: a feature branch my-awesome-stuff would be named feature/my-awesome-stuff or refactor/my-awesome-stuff , if it\u2019s a refactoring branch. Both kinds of branches should be short living (a couple of days) to reduce the risk of diverting to far from master and causing huge afford to merge. Ideally, no commits happen directly to master and every commit is first evaluated on a feature/refactoring branch. Note: Nowadays we mostly do merging instead of rebasing. The following sections might therefore not accurately reflect the current workflow.","title":"Branches"},{"location":"mbeddr/development_guide/#merging","text":"Once your work is done, it needs to be integrated into the master branch. Because your branch most likely diverted from master, merging it into master would normally end up with a merge commit on the master branch. We have learned the hard way that merging clutters Git history and makes all intermediate commits of the branch end up in master. To prevent this, the suggested workflow is to rebase your branch onto master and thereby squash all your commits into a single one.","title":"Merging"},{"location":"mbeddr/development_guide/#example","text":"This example shows you how to integrate your branch into the master branch by using rebase instead of merge. The list of commands to use is: 1 2 3 4 5 6 7 git fetch git rebase -i origin/master git checkout origin/master git pull git merge --ff-only feature/my-awesome-stuff git pull --rebase git push They are all explained below. Below you can see the starting point in the repository: 1 2 * 1ed51e3 (HEAD -> master) added another file * 5cee848 initial commit Now create the new feature branch named feature/my-awesome-stuff and commit some changes on it. While working on your branch, someone else committed changes into the master branch. Hence, for integrating your changes into master you would end up with a merge: 1 2 3 4 5 6 * 3c36424 (HEAD -> master) fixed some super important issue | * 66beba4 (feature/my-awesome-stuff) more work on my awesome feature | * cca995e did some stuff |/ * 1ed51e3 added another file * 5cee848 initial commit To get your commits into master , first make sure that your local history is up-to-date by running git fetch . Next, rebase your commits. This prevents a merge from happening. This is achieved with the following git command on our branch: git rebase -i origin/master . Git will now ask you how to proceed with your commits: 1 2 pick cca995e did some stuff pick 66beba4 more work on my awesome feature Now squash all commits into a single commit while rebasing: 1 2 pick cca995e did some stuff squash 66beba4 more work on my awesome feature Afterward, Git asks you to enter a message for the new commit. The default message it offers is a concatenation of all the commit messages from the commits to squash. However, you want to make the new commit message fit the earlier described pattern. After rebasing your Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> feature/my-awesome-stuff) 42: super awesome feature * 3c36424 (master) fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You still have to branch; now it\u2019s time to merge them. Change your git branch to master using git checkout origin/master . Make sure you have pulled from the remote and your branch is up-to-date. Now run git merge --ff-only feature/my-awesome-stuff . The \u2013ff-only is important to force git to not merge if it would produce a merge commit. Now Git history looks like this: 1 2 3 4 * afc0fb5 (HEAD -> master, feature/my-awesome-stuff) 42: super awesome feature * 3c36424 fixed some super important issue * 1ed51e3 added another file * 5cee848 initial commit You haven\u2019t created a merge commit, and all commits from your branch appear as a single commit in the Git history. You are good to go to push back to the repo. But wait, what if somebody has changes things in the meantime on the remote, wouldn\u2019t the pull create a new merge? Yes it would! Therefor don\u2019t use a plain git pull but use git pull --rebase in case you are pulling from the repo into your local master branch. This way, Git doesn\u2019t produce a new merge commit but rebase your local changes on top of the remote changes.","title":"Example"},{"location":"mbeddr/development_guide/#test-organization","text":"","title":"Test Organization"},{"location":"mbeddr/development_guide/#naming","text":"The test solution for language com.mbeddr.x.lang should be named test.com.mbeddr.x.lang . Respectively, the test solution for solution com.mbeddr.y.sol should be named test.com.mbeddr.y.sol . If you need a dedicated language for testing purposes, you should name it test.com.mbeddr.x.[lang|sol].testsupport (or a similar suffix). This way, you can discriminate between \u201creal\u201d code below namespace com.mbeddr and test code below namespace test . You should also place any demo or playground modules outside the com.mbeddr namespace for the same reason. By following this scheme, you can build productive code in the UI by building everything below com.mbeddr in the modules pool, and be assured not to be interfered by test, demo, or playground code.","title":"Naming"},{"location":"mbeddr/development_guide/#project-structure","text":"All languages, solutions, tests, demos, and playgrounds of one feature should be placed below a common virtual folder bearing the name of the feature. An exception might be build models. Generators must be present only when required or deleted if empty. This allows us to access all artifacts constituting one feature.","title":"Project Structure"},{"location":"mbeddr/development_guide/#file-system","text":"All test code should be placed in a special folder in the file system:","title":"File System"},{"location":"mbeddr/development_guide/#build","text":"","title":"Build"},{"location":"mbeddr/development_guide/#build-script-setup","text":"In mbeddr there are different build scripts. They are used on the local machines for building the languages and on the build server for various build-related tasks, such as testing or packaging. This documentation guides you in following the mbeddr standards for setting up your BuildProject and integrating it into Mbeddr\u2019s build infrastructure.","title":"Build script setup"},{"location":"mbeddr/development_guide/#required-buildfoldermacros","text":"In your BuildProject (the build script\u2019s model representation in MPS ) you first need a BuildFolderMacro (a folder ) named mps.home (see code snippet below). If you want to run the generated ant script in your MPS , then you should specify the location of your MPS installation in a relative way, otherwise you don\u2019t need a path for mps.home . At script execution time, you will redefine mps.home , to point to the folder where your MPS installation is located at. 1 folder mps.home = <no defaultPath> Next, you need a BuildFolderMacro named artifacts.root that doesn\u2019t require a path (see snippet below). When executing the ant script, generated from your BuildProject , define this macro from outside to point to the folder where all your plugin dependencies (for example: mbeddr.platform ) are located. 1 folder artifacts.root = <no defaultPath> For each BuildProjectDependency (the dependency\u2019s section below your folders) we need a separate BuildFolderMacro that follows the naming convention .artifacts and points to $artifacts.root/<BuildProject name> . At build script execution time, those macros will point to the folders, where your required plugins are located. In the code snippet below you can see the resulting BuildFolderMacros for a BuildProject with two dependencies: mps-sl-all and com.mbeddr.platform. 1 2 folder sl-all.artifacts = $artifacts.root/mps-sl-all folder platform.artifacts = $artifacts.root/com.mbeddr.platform","title":"Required BuildFolderMacros"},{"location":"mbeddr/development_guide/#type-system-tests","text":"When you want to build type system tests that require a specific path macro (for example: for specifying the project location inside your TestInfo ), then you must create a BuildFolderMacro for this path macro. The name of this BuildFolderMacro should start with mps.macro , followed by the name of the respective path macro. In the example below, you instruct MPS via mps.macro.mbeddr.github.core.home to create a path macro mbeddr.github.core.home that points to the relative path location specified in the other BuildFolderMacro mbeddr.github.core.home . 1 folder mps.macro.mbeddr.github.core.home = $mbeddr.github.core.home Furthermore, you need to mark solutions containing type system tests as content: (with sources and tests) . To achieve this, please perform the following steps: Inside your BuildProject move your cursor to the solution that contains your type system tests. Open the inspector. Inside the Inspector select the node sources, open the context menu and select sources and tests from it. To get your tests executed, you first need to add the module-tests plugin to your use plugins: section (on top of your BuildProject ). When you can\u2019t add the node module-tests to this section, import it from jetbrains.mps.build.mps.tests.accessories . Finally, create a BuildMpsLayout_TestModules (a test configuration ) at bottom of your BuildProject and list there all solutions that contain type system tests to be executed.","title":"Type system tests"},{"location":"mbeddr/development_guide/#configurations-for-generator-and-compiler","text":"To make sure code is generated and compiled the same way as in MPS , you have to add the following configurations ( BuildSource_JavaOptions and BuildMps_GeneratorOptions ) to your BuildProject \u2018s project structure. Those configurations control the generator engine and the Java compiler to make sure we have the same build behavior as in the IDE . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 generator options <project default> strict mode true multiple threads true number of threads 4 inplace transform true hide warnings false resort to static references true java options <project default> generate debug info true generate no warnings false fork false compiler <default compiler> java compliance level 1.6 java compiler options <no additional options> copy resources false","title":"Configurations for generator and compiler"},{"location":"mbeddr/development_guide/#building-a-release","text":"For preparing a mbeddr release, you can modify the version number that is set for the mbeddr plugins by overwriting the values of major.version , minor.version and build (see screenshot below). However, you don\u2019t change these values inside the MPS build scripts, instead, either you change them in the global gradle script ( mbeddr.core/build.gradle ), or you overwrite them via the command line while spawning a new release build: -PmajorVersion=1 -PbuildVersion=0 -PminorVersion=0000 build_mbeddr publishMbeddrAllInOnePublicationToMavenRepository","title":"Building a release"},{"location":"mbeddr/misc_topics/","text":"Misc Topics \u00b6 Limitations to product line engineering when generating variant aware code \u00b6 The current PLE approach only generates a single variant. The generated artifacts aren\u2019t variant aware. We want to enable the that the generated code can contain #if statements to generate all variants at once. When we want to do this we have to limit variability to elements where we can represent this in the generated C code. The main problem is that presence conditions can\u2019t be applied to all nodes in the model. What doesn\u2019t work? \u00b6 In addition to elements with a cardinality of 1, some other items can\u2019t be removed from the AST with presence conditions: parameters of a function arguments from function calls extra declarations of for loops variable initializers expressions in array/user defined type initializers arguments of function macros (global function declarations) Code smells \u00b6 replacement of functioncall expression where parent is expression statement replace complete statement to generate readable code","title":"Miscellaneous topics"},{"location":"mbeddr/misc_topics/#misc-topics","text":"","title":"Misc Topics"},{"location":"mbeddr/misc_topics/#limitations-to-product-line-engineering-when-generating-variant-aware-code","text":"The current PLE approach only generates a single variant. The generated artifacts aren\u2019t variant aware. We want to enable the that the generated code can contain #if statements to generate all variants at once. When we want to do this we have to limit variability to elements where we can represent this in the generated C code. The main problem is that presence conditions can\u2019t be applied to all nodes in the model.","title":"Limitations to product line engineering when generating variant aware code"},{"location":"mbeddr/misc_topics/#what-doesnt-work","text":"In addition to elements with a cardinality of 1, some other items can\u2019t be removed from the AST with presence conditions: parameters of a function arguments from function calls extra declarations of for loops variable initializers expressions in array/user defined type initializers arguments of function macros (global function declarations)","title":"What doesn't work?"},{"location":"mbeddr/misc_topics/#code-smells","text":"replacement of functioncall expression where parent is expression statement replace complete statement to generate readable code","title":"Code smells"},{"location":"mps_internal/","text":"The project isn\u2019t a project. I want to call GenerationCheckHelper.checkModelsBeforeGenerationIfNeeded to check my model. It that takes a Project but my Project that I get as an action context isn\u2019t the correct project. The type system complains that it\u2019s not the correct class. How do I get the correct project class? The two Project interfaces are always a source of confusion. Essentially one comes from the IntelliJ platform and the other one holds MPS specific parts of the project. com.intellij.openapi.project.Project : The project from the platform stores basic information like the folder where the project is located and gives, for example, access to project plugins. jetbrains.mps.project.Project : MPS specific aspects of a project like model access or the repository. It also gives access to the modules (languages and solutions) of the project. To get the MPS Project from an Idea Project use fromIdeaProject from ProjectHelper . To the a Idea Project from the MPS Project case the interface to MPSProject , if you only have a jetbrains.mps.project.Project , call getProject on it. contributed by: @coolya How to you get started using MPS \u2018 Open API? Specific Languages blog: The simplest way to use MPS Open API How to you get MPS core components from code? From the console: 1 2 3 MPSProject p = (( MPSProject ) # project ); Platform host = ( Platform ) p . getPlatform (); # print host . findComponent ( MakeServiceComponent . class ); I want to change something inside a SModule such as adding a dependency but can\u2019t find the right method. Try casting it to AbstractModule first. Is there a way to start two instances of MPS , each with its own cache/state? You can create a copy of you MPS installation and edit the idea.properties file in the bin directory. Changing idea.system.path should allows you start a second instance with dedicated caches/state. If you don\u2019t want to share any configuration also update idea.config.path. Where can you find builtin icons? IntelliJ IDEA icons are declared in the class AllIcons . MPS icons are declared in the class MPSIcons . How can you have settings that get saved globally? 1 Preferences can be only used at the project level. Use the workaround described in this answer or save your values in the global IntelliJ IDEA Registry . More information about the Registry can be found in this Stack Overflow post . It can also be shown programmatically by calling new RegistryUi().show() . How can you call make or rebuild? Use the class MakeActionImpl . Example usages can be found in the same model. How to you add widgets to the status bar? (for example: memory indicator, save transient models) Have a look at this answer . Make sure to call this code from a project plugin . How do you display a message in the status bar? (left bottom corner) Note: the message might not be visible when executing the code from the console, because the rebuild of the model overrides it with a new message: WindowManager.getInstance().getStatusBar(ProjectHelper.toIdeaProject(#project)) How can I register an IntelliJ extension? Find the interface you want to add an extension on this page . The corresponding interface has a static field EP_NAME . If the interface is implemented in Kotlin it might have a static field Companion with a getEP_NAME() method. Extend this interface (EX) and register it through the extension point. Example: Interface.EP_NAME.getPoint().registerExtension(new Ex()) How can you add a status bar widget? Implement the interface StatusBarWidgetFactory and register it through the StatusBarWidgetFactory.EP_NAME extension point. How do you add model imports and used languages programmatically? Specific Languages Blog: Adding model imports and used languages programmatically How can you run some MPS code from the command line/CI? Specific Languages blog: Running MPS code from command line Specific Languages blog: Running code in MPS on CI How can you render a node as a text? Specific Languages blog: Rendering a node as text How can you associate more information with a node? Specific Languages blog: Associating additional information with a node How does shrinking of absolute paths work? Specific Languages blog: Shrinking of absolute paths How can you retrieve nodes of other models and modules? model.nodesIncludingImported returns all nodes including the ones from other models that are currently imported. How can you make an internal MPS editor read-only? Given I want to make a contribution to a generator the j.mps.lang.editor . When I download the MPS source , open the project in MPS under code and open j.m.l.editor/SubstituteMenuPart_ReferenceScope_declare , then I see the model being read-only. What can I do? You need to open MPS in IDEA (Community Edition is enough), compile and run it from there, then you can edit MPS sources. There are instructions in README . How can you do a fulltext search in the IDE ? I sometimes need a textual search which MPS doesn\u2019t provide out of the box. In that situation, I am unsure of the concept and type of what I see, so a top-down search is not an option. Instead I would like to search for that string to have a starting point for my investigation. Examples: I want to investigate in an editor in the user interface and don\u2019t want to reverse engineer what hints, editors and concepts lead to what I see. Behavioral view code, like custom cells, swing cells or querylists make it hard to figure out where the source logic of that is located. when the console shows something I don\u2019t understand, I\u2019d like to see its context source code, so that I can figure out what to do next. Option 0 : Use Language Debugging facilities of MPS instead. For built-in languages, MPS brings a load of dedicated debugging facilities: Debugging editor cells and nodes: When you right-click an item in the editor, you can find a submenu Language Debug . Debugging menu entries: Select an item that you\u2019re curious in and press Cmd + Alt + B / Ctrl + Alt + B to open the Menu Trace of it. Setup and an IntelliJ and connect it to step through java code. Option 1 : Search for literals from console. Option 2 : Search through serialized Java. Set up IntelliJ with your project. Hit Cmd + Shift + F / Ctrl + Shift + F to search in path. When you found a class of interest, open it in MPS via Cmd + N / Ctrl + N . The source node usually has a similar name. This is great for finding editor nodes, for example, if that java class is named Vehicle_EditorBuilder , your source node was an editor for the Vehicle concept. Last Resort : Search XML model directly. Use this only if you have no assembly and your project doesn\u2019t open. The serialized API is subject to change and using this should be the last barrier. Then use ack (or a similar tool) on the command line to find the relevant models that contain this string. The output even contains the node id though, as in this example: 1 2 3 4 5 6 7 $ ack \"ack com.mbeddr.mpsutil.grammarcells\" \u2026 <node concept=\"3bR9La\" id=\"1aL6sVX49Cb\" role=\"1SiIV1\"> <property role=\"3bR36h\" value=\"false\" /> <ref role=\"3bR37D\" to=\"90a9:F1NWDqq_DA\" resolve=\"com.mbeddr.mpsutil.grammarcells.runtime\" /> </node> \u2026 Use new IdEncoder (). parseNodeId ( \"1aL6sVX49Cb\" ) to get the node id. This will print the corresponding node to console. Clicking it will open in in MPS : 1 2 3 4 5 6 7 8 9 # nodes . where ({ ~ it => boolean equals = false ; try { equals = it / . getNodeId (). equals ( new IdEncoder (). parseNodeId ( \"1aL6sVX49Cb\" )); } catch ( Exception e ) { < no statements > } return equals ; }) How to get rid of Error: shall specify a repository to lock? When accessing model properties in rendering code, you must encapsulate the model accessing code in a read action: It always has an error \u201cError: shall specify a repository to lock\u201d. How can I get rid of it? What is a \u2018repository\u2019 and is there any documentation that explains the concept and how to use it correctly? asked by: @cwalesch The repository is what is represented as the \u201cmodules pool\u201d in the UI . It contains all the dependencies currently visible. At the moment there is only one global repository which causes several problems. MPS is slowly but steadily moving to project specific repositories. That would mean each project (window) of MPS would have it\u2019s own separate repository. To get the repository you will need access to the project. e.g. the editor context will give you access to the repository: editorContext.getRepository() . In other cases, for instance, when you don\u2019t have an editor context directly available you need to make sure that from UI (action) you pass the project or repository though to the place where you need it. answered by: @coolya How can you get an identifier of a node? Given I have a node myNode and I need to serialize something that identifies it. When I serialize that something and then deserialize that identifier again, then I will find exactly that node. How can I build such a thing? Option 1 : PersistenceFacade ID Since the url does not look nice; you may use this combined string of model ID and node ID that is used for the url. For that, import the class org.jetbrains.mps.openapi.persistence.PersistenceFacade from the MPS .OpenApi stub and run: 1 2 3 4 5 6 7 # serialize identifier string mySerializedId = SNodePointer . serialize ( node / . getReference ()) # find node based on serialized identifier node <> myFoundNode = SNodePointer . deserialize ( mySerializedId ). resolve ( repository ) # then , node == myFoundNode Option 2 : Url Import the httpsupport language and use node.getURL . This will be a url that you can use locally to open this node. It includes the node id and the model and thus is a pretty good globally unique id. This id is a local URL and looks odd though: http://127.0.0.1:63320/node?ref=r%3A4bc03cd1-b1e3-49da-84da-f27e7062f6f7%28integrityOfUpdate%29%2F2209769512593382448&project=SecurityAnalyst . Especially the code to find the node again based on this url contains some grepping then. Option 3 : Node Id Use node / . getNodeId (). toString () it will yield the nodes id. Note that a node ID is only unique within this model. If it should be globally unique, consider option 1. contributed by: @abstraktor Where does MPS store preferences? For a starting point, read Directories used by the IDE . CONFIG_DIR refers to the configuration directory. WORKSPACE_FILE refers to $PROJECT/.mps/workspace.xml : refactoring settings: CONFIG_DIR/options/refactoringSettings.xml override/implement setttings: WORKSPACE_FILE/OverrideImplementMethodComponent additional libraries: CONFIG_DIR/options/AdditionalLibrariesManager.xml default search options: WORKSPACE_FILE/DefaultSearchOptions3 make configuration: WORKSPACE_FILE/mpsMakeService code style settings: CONFIG_DIR/options/codeStyleSettings.xml break point settings: WORKSPACE_FILE/BreakpointViewSettings migration state: WORKSPACE_FILE/MigrationProperties model validation settings: CONFIG_DIR/options/mpsModelValidationSettings.xml concept editor settings: WORKSPACE_FILE/ConceptEditorHintSettings node search history: WORKSPACE_FILE/NodeEditorSearchHistory project libraries: WORKSPACE_FOLDER/libraries.xml bookmarks: WORKSPACE_FILE/BookmarksTool project view: WORKSPACE_FILE/ProjectView blame dialog: CONFIG_DIR/options/charismaBlameDialog.xml compiler settings: WORKSPACE_FOLDER/compiler.xml model checker settings: CONFIG_DIR/options/modelCheckerSettings.xml modules: WORKSPACE_FOLDER/modules.xml project plugin settings: WORKSPACE_FILE/ProjectPluginManager generation settings: CONFIG_DIR/options/generationSettings.xml console history: WORKSPACE_FILE/ConsoleHistory break points: WORKSPACE_FILE/BreakpointManager bookmarks: WORKSPACE_FILE/MPSBookmarkManager messages view tool settings: WORKSPACE_FILE/MessagesViewTool usages view tool settings: WORKSPACE_FILE/UsagesViewTool disabled intentions: CONFIG_DIR/options/intentions.xml editor settings: CONFIG_DIR/options/mpsEditor.xml migration trigger settings: WORKSPACE_FILE/MigrationTrigger https://mps-support.jetbrains.com/hc/en-us/community/posts/115000568670-Create-and-access-a-single-Preference-Component-which-is-common-for-all-projects \u21a9","title":"Index"},{"location":"mps_internal/classloading/","text":"Classloading \u00b6 Classloaders \u00b6 Different classloaders exist: bootstrap-class-loader, IDEA plugin classloaders and module class loaders. Loading a class into an MPS module involves the module class loader, the class of its dependencies and the bootstrap-class-loader. If a class comes from a jar in the MPS /lib folder (a bootstrap-loaded class), you practically can\u2019t load another version of it. They also have different life cycles. Module class loaders can reload classes after rebuilding and are resilient towards hot reloading. IDEA plugin class loaders are just for the installed plugins and didn\u2019t know what to do if a class needs reloading during runtime in the past. New versions of the intelliJ platform know how to reload classes, but now we\u2019re with MPS \u2019 implementation. The IDEA plugin classloaders load jars from the /plugins/ /lib directory. Jars from the /lib directory of the RCP are loaded from the root class loader. For your RCP , you usually don\u2019t want to put anything there. Code inside an IDEA plugin classloader may not access classes from module-class loaders but vice versa is fine If you pass a module-loaded class to an IDEA plugin-loaded class and reload the module-loaded class, and then try to access the stale class, you might get a ClassNotFoundException . If you register a class in the plugin.xml, you should make sure it can be loaded from the IDEA plugin classloader. To do so, add its jar to the /lib folder of your intellij-plugin. location description Java class MPS /lib root class loader,boostrap class loader com.intellij.util.lang.UrlClassLoader /plugins/ /lib IDEA plugin class loader com.intellij.ide.plugins.cl.PluginClassLoader any mps module with a java facet module class loader jetbrains.mps.classloading.ModuleClassLoader How to use Java classes shipped in MPS plugins \u00b6 For this example, assume that you want to use classes from the git4idea plugin inside your code. Solution 1 \u00b6 Create a solution MySolution . Create a model ending with \u201c.plugin,\u201d for example MySolution.plugin . Add the language jetbrains.mps.lang.plugin.standalone to both the MySolution.plugin model and the MySolution solution. Create a StandalonePluginDescriptor in the model MySolution.plugin . Add the MySolution to a build model named MySolution.build . Create an idea plugin the build model with id MySolution.IdeaPlugin . Add MySolution.build to the idea plugin MySolution.IdeaPlugin content. Add the dependency on git4idea to MySolution.IdeaPlugin dependencies. Execute the build script. In properties of solution MySolution , on the Facets tab, select Idea Plugin . In newly appearing Idea Plugin tab, set plugin ID to MySolution.IdeaPlugin . Restart MPS . Now the classes within git4idea are available within MySolution . Attention: MPS IDE won\u2019t build the code within solution MySolution anymore. Run the build script to activate any changes. Solution 2 \u00b6 You can find an example here . Create a solution git4idea.withJavaFacet . Edit the created msd file and make the following modifications: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <solution> ... <models> <modelRoot contentPath= \"${module}\" type= \"default\" > <sourceRoot location= \"models\" /> </modelRoot> <modelRoot contentPath= \"${mps_home}/plugins/git4idea/lib\" type= \"java_classes\" > <sourceRoot location= \"git4idea-rt.jar\" /> <sourceRoot location= \"git4idea.jar\" /> </modelRoot> </models> <facets> <facet type= \"java\" languageLevel= \"JAVA_8\" > <classes generated= \"true\" path= \"${module}/classes_gen\" /> </facet> <facet pluginId= \"Git4Idea\" type= \"ideaPlugin\" /> </facets> <stubModelEntries> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea-rt.jar\" /> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea.jar\" /> </stubModelEntries> <sourcePath /> <dependencies> ... </dependencies> ... </solution> The jar files are directly referenced from the mps plugins folder. The jars are then loaded as part of the Git4Idea facet. Classloading issues \u00b6 Sometimes you might get conflicts with existing libraries that MPS already ships. For instance while using the SAXBuilder . In these cases, you will get a class version exception or similar. As a workaround, you can set the classloader and the current thread while instantiating such classes: 1 2 3 4 5 6 7 8 9 10 11 12 class ClassLoading { void setClassLoader () { ClassLoader cl = Thread . currentThread (). getContextClassLoader (); try { Thread . currentThread (). setContextClassLoader ( this . getClass (). getClassLoader ()); SAXBuilder sax = new SAXBuilder (); return sax . build ( f ); } finally { Thread . currentThread (). setContextClassLoader ( cl ); } } } This prevents the exception but make sure to set the class loader back when you finish. Calling things written in MPS like behavior methods when the class loader changes is also likely to not work and gives you all kinds of strange exceptions.","title":"Classloading"},{"location":"mps_internal/classloading/#classloading","text":"","title":"Classloading"},{"location":"mps_internal/classloading/#classloaders","text":"Different classloaders exist: bootstrap-class-loader, IDEA plugin classloaders and module class loaders. Loading a class into an MPS module involves the module class loader, the class of its dependencies and the bootstrap-class-loader. If a class comes from a jar in the MPS /lib folder (a bootstrap-loaded class), you practically can\u2019t load another version of it. They also have different life cycles. Module class loaders can reload classes after rebuilding and are resilient towards hot reloading. IDEA plugin class loaders are just for the installed plugins and didn\u2019t know what to do if a class needs reloading during runtime in the past. New versions of the intelliJ platform know how to reload classes, but now we\u2019re with MPS \u2019 implementation. The IDEA plugin classloaders load jars from the /plugins/ /lib directory. Jars from the /lib directory of the RCP are loaded from the root class loader. For your RCP , you usually don\u2019t want to put anything there. Code inside an IDEA plugin classloader may not access classes from module-class loaders but vice versa is fine If you pass a module-loaded class to an IDEA plugin-loaded class and reload the module-loaded class, and then try to access the stale class, you might get a ClassNotFoundException . If you register a class in the plugin.xml, you should make sure it can be loaded from the IDEA plugin classloader. To do so, add its jar to the /lib folder of your intellij-plugin. location description Java class MPS /lib root class loader,boostrap class loader com.intellij.util.lang.UrlClassLoader /plugins/ /lib IDEA plugin class loader com.intellij.ide.plugins.cl.PluginClassLoader any mps module with a java facet module class loader jetbrains.mps.classloading.ModuleClassLoader","title":"Classloaders"},{"location":"mps_internal/classloading/#how-to-use-java-classes-shipped-in-mps-plugins","text":"For this example, assume that you want to use classes from the git4idea plugin inside your code.","title":"How to use Java classes shipped in MPS plugins"},{"location":"mps_internal/classloading/#solution-1","text":"Create a solution MySolution . Create a model ending with \u201c.plugin,\u201d for example MySolution.plugin . Add the language jetbrains.mps.lang.plugin.standalone to both the MySolution.plugin model and the MySolution solution. Create a StandalonePluginDescriptor in the model MySolution.plugin . Add the MySolution to a build model named MySolution.build . Create an idea plugin the build model with id MySolution.IdeaPlugin . Add MySolution.build to the idea plugin MySolution.IdeaPlugin content. Add the dependency on git4idea to MySolution.IdeaPlugin dependencies. Execute the build script. In properties of solution MySolution , on the Facets tab, select Idea Plugin . In newly appearing Idea Plugin tab, set plugin ID to MySolution.IdeaPlugin . Restart MPS . Now the classes within git4idea are available within MySolution . Attention: MPS IDE won\u2019t build the code within solution MySolution anymore. Run the build script to activate any changes.","title":"Solution 1"},{"location":"mps_internal/classloading/#solution-2","text":"You can find an example here . Create a solution git4idea.withJavaFacet . Edit the created msd file and make the following modifications: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <solution> ... <models> <modelRoot contentPath= \"${module}\" type= \"default\" > <sourceRoot location= \"models\" /> </modelRoot> <modelRoot contentPath= \"${mps_home}/plugins/git4idea/lib\" type= \"java_classes\" > <sourceRoot location= \"git4idea-rt.jar\" /> <sourceRoot location= \"git4idea.jar\" /> </modelRoot> </models> <facets> <facet type= \"java\" languageLevel= \"JAVA_8\" > <classes generated= \"true\" path= \"${module}/classes_gen\" /> </facet> <facet pluginId= \"Git4Idea\" type= \"ideaPlugin\" /> </facets> <stubModelEntries> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea-rt.jar\" /> <stubModelEntry path= \"${mps_home}/plugins/git4idea/lib/git4idea.jar\" /> </stubModelEntries> <sourcePath /> <dependencies> ... </dependencies> ... </solution> The jar files are directly referenced from the mps plugins folder. The jars are then loaded as part of the Git4Idea facet.","title":"Solution 2"},{"location":"mps_internal/classloading/#classloading-issues","text":"Sometimes you might get conflicts with existing libraries that MPS already ships. For instance while using the SAXBuilder . In these cases, you will get a class version exception or similar. As a workaround, you can set the classloader and the current thread while instantiating such classes: 1 2 3 4 5 6 7 8 9 10 11 12 class ClassLoading { void setClassLoader () { ClassLoader cl = Thread . currentThread (). getContextClassLoader (); try { Thread . currentThread (). setContextClassLoader ( this . getClass (). getClassLoader ()); SAXBuilder sax = new SAXBuilder (); return sax . build ( f ); } finally { Thread . currentThread (). setContextClassLoader ( cl ); } } } This prevents the exception but make sure to set the class loader back when you finish. Calling things written in MPS like behavior methods when the class loader changes is also likely to not work and gives you all kinds of strange exceptions.","title":"Classloading issues"},{"location":"mps_internal/dependencies/","text":"Dependencies \u00b6 First of all: the number of languages can be very important: Many small languages are hard to maintain while big languages take a long time building in the IDE . Many dependencies can create cycles which are described later on this page. By default, you can only reference nodes present in the current model. Dependencies add other models and modules that you can reference from the current model. Models listed as dependencies of Model \\(A\\) need to be contained within modules listed in the dependencies (including transitive entries) of the module containing this model. Example: You can\u2019t mark a model internal and hide it from outside access. Export flag \u00b6 It exports a Module Dependency again to be used by modules depending on this module. Example: Scope \u00b6 Default Scope is available for all module types. Extends Scope is a superset of Default Scope , for example, you never need to have both a Default Scope and an Extends Scope dependency on another module. Extends scope for languages \u00b6 LanguageB (containing ConceptB ) must extend LanguageA (containing ConceptA and ConceptInterfaceA ) if and only if Another case is if LanguageB defines a generator outputting ConceptA and LanguageA has a runtime solution. LanguageB shouldn\u2019t extend LanguageA (but needs a Default Scope dependency) if LanguageB can\u2019t define To be precise, it is possible to remove all errors flagged on behaviors and constraints in LanguageB . However, they aren\u2019t taken into account for ConceptA . Extends scope for generators \u00b6 GeneratorB (inside LanguageB , and containing ConceptB ) must extend GeneratorA (inside LanguageA , and containing ConceptA ), if and only if Implicit dependencies \u00b6 MPS adds some dependencies implicitly without listing them in the corresponding dialog. Warning: even if the dependencies described below are established implicitly, they aren\u2019t taken into account in every aspect of MPS . So if an error occurs, make sure you didn\u2019t rely on some implicit dependency. If in doubt, make the dependency explicit. Implicit dependencies inherited by a generator from its language \u00b6 A Generator inherits some dependencies from the language where it\u2019s defined in: The language\u2019s runtime solutions are added to the generator module dependencies. The language\u2019s module is added to the generator module dependencies. The language is added to the generator Used languages . Except the case of generating a concept of a language that has a runtime solution, there is no requirement on the language\u2019s dependencies or Used Languages stemming from the generator. Implicit exports of used language and language structure aspect \u00b6 Both a Used Language and the language structure aspect implicitly make it possible to access the language\u2019s behavior methods. However, they not export again the complete behavior aspect. For example, a baselanguage class contained in the behavior Aspect isn\u2019t visible. Implicit exports of runtime language settings \u00b6 Runtime solutions are implicitly loaded into the Java classpath of any module using this language. implicitly added to the Dependencies of the Generator contained in this language. Accessory Models are implicitly loaded into the dependencies of any model using this language. Accessory Models aren\u2019t designed to keep any classes. This is design-only information. They shouldn\u2019t affect Java class path anyhow. Neither runtime solutions nor accessory models constitute a dependency from the language to the referenced solution or model. Cyclic dependencies \u00b6 Cyclic dependencies between modules should be avoided in general. They tend to render generation orders and other behavior non-deterministic. Languages are explicitly checked not to have a cyclic Extends Scope dependency. Cycles between models in the same module are fine. Starting with MPS 2021.1, there is a higher chance that you could run into troubles with cyclic dependencies. The reason is the new javax compiler that doesn\u2019t act as forgiving as the earlier one (ECJ). Distinctive cases are runtime solutions, accessory models, and utility models. In contrast to runtime solutions, utility models are used while accessing behavior or running a generator. Code within runtime solutions is used after the generator ran from the generated code. Thus, a runtime solution shouldn\u2019t use or reference the language it is referenced from. A utility model can use or reference the language it is reference from. Accessory models can use or reference the language they\u2019re referenced from. For build scripts there is a flag that allows bootstrap dependencies. More information can be found in section MPS Settings of the build language documentation .","title":"Dependencies"},{"location":"mps_internal/dependencies/#dependencies","text":"First of all: the number of languages can be very important: Many small languages are hard to maintain while big languages take a long time building in the IDE . Many dependencies can create cycles which are described later on this page. By default, you can only reference nodes present in the current model. Dependencies add other models and modules that you can reference from the current model. Models listed as dependencies of Model \\(A\\) need to be contained within modules listed in the dependencies (including transitive entries) of the module containing this model. Example: You can\u2019t mark a model internal and hide it from outside access.","title":"Dependencies"},{"location":"mps_internal/dependencies/#export-flag","text":"It exports a Module Dependency again to be used by modules depending on this module. Example:","title":"Export flag"},{"location":"mps_internal/dependencies/#scope","text":"Default Scope is available for all module types. Extends Scope is a superset of Default Scope , for example, you never need to have both a Default Scope and an Extends Scope dependency on another module.","title":"Scope"},{"location":"mps_internal/dependencies/#extends-scope-for-languages","text":"LanguageB (containing ConceptB ) must extend LanguageA (containing ConceptA and ConceptInterfaceA ) if and only if Another case is if LanguageB defines a generator outputting ConceptA and LanguageA has a runtime solution. LanguageB shouldn\u2019t extend LanguageA (but needs a Default Scope dependency) if LanguageB can\u2019t define To be precise, it is possible to remove all errors flagged on behaviors and constraints in LanguageB . However, they aren\u2019t taken into account for ConceptA .","title":"Extends scope for languages"},{"location":"mps_internal/dependencies/#extends-scope-for-generators","text":"GeneratorB (inside LanguageB , and containing ConceptB ) must extend GeneratorA (inside LanguageA , and containing ConceptA ), if and only if","title":"Extends scope for generators"},{"location":"mps_internal/dependencies/#implicit-dependencies","text":"MPS adds some dependencies implicitly without listing them in the corresponding dialog. Warning: even if the dependencies described below are established implicitly, they aren\u2019t taken into account in every aspect of MPS . So if an error occurs, make sure you didn\u2019t rely on some implicit dependency. If in doubt, make the dependency explicit.","title":"Implicit dependencies"},{"location":"mps_internal/dependencies/#implicit-dependencies-inherited-by-a-generator-from-its-language","text":"A Generator inherits some dependencies from the language where it\u2019s defined in: The language\u2019s runtime solutions are added to the generator module dependencies. The language\u2019s module is added to the generator module dependencies. The language is added to the generator Used languages . Except the case of generating a concept of a language that has a runtime solution, there is no requirement on the language\u2019s dependencies or Used Languages stemming from the generator.","title":"Implicit dependencies inherited by a generator from its language"},{"location":"mps_internal/dependencies/#implicit-exports-of-used-language-and-language-structure-aspect","text":"Both a Used Language and the language structure aspect implicitly make it possible to access the language\u2019s behavior methods. However, they not export again the complete behavior aspect. For example, a baselanguage class contained in the behavior Aspect isn\u2019t visible.","title":"Implicit exports of used language and language structure aspect"},{"location":"mps_internal/dependencies/#implicit-exports-of-runtime-language-settings","text":"Runtime solutions are implicitly loaded into the Java classpath of any module using this language. implicitly added to the Dependencies of the Generator contained in this language. Accessory Models are implicitly loaded into the dependencies of any model using this language. Accessory Models aren\u2019t designed to keep any classes. This is design-only information. They shouldn\u2019t affect Java class path anyhow. Neither runtime solutions nor accessory models constitute a dependency from the language to the referenced solution or model.","title":"Implicit exports of runtime language settings"},{"location":"mps_internal/dependencies/#cyclic-dependencies","text":"Cyclic dependencies between modules should be avoided in general. They tend to render generation orders and other behavior non-deterministic. Languages are explicitly checked not to have a cyclic Extends Scope dependency. Cycles between models in the same module are fine. Starting with MPS 2021.1, there is a higher chance that you could run into troubles with cyclic dependencies. The reason is the new javax compiler that doesn\u2019t act as forgiving as the earlier one (ECJ). Distinctive cases are runtime solutions, accessory models, and utility models. In contrast to runtime solutions, utility models are used while accessing behavior or running a generator. Code within runtime solutions is used after the generator ran from the generated code. Thus, a runtime solution shouldn\u2019t use or reference the language it is referenced from. A utility model can use or reference the language it is reference from. Accessory models can use or reference the language they\u2019re referenced from. For build scripts there is a flag that allows bootstrap dependencies. More information can be found in section MPS Settings of the build language documentation .","title":"Cyclic dependencies"},{"location":"mps_internal/gui/","text":"Where can you find an overview of the user interface? It can be found in the IntelliJ IDEA documentation . A more technical explanation can be found in the IntelliJ Platform Plugin SDK . How can you show modal dialogs for inputting text? Use the class com.intellij.openapi.ui.Messages . How do you add messages to the right side of the window? In IntelliJ IDEA it is called error stripe , in MPS MessagesGutter : 1 2 3 jetbrains . mps . nodeEditor . EditorComponent component = (( EditorComponent ) editorContext . getEditorComponent ()); NodeHighlightManager highlightManager = component . getHighlightManager (); highlightManager . mark ( message ); How can you add things to the left of the editor? (examples: breakpoints, go subclasses etc.) The component is called LeftEditorHighlighter . A checker has to be implemented that can show messages in this component (example: OverrideMethodsChecker ). How to you add an icon to the status bar? Have a look at the the implementation of the transient models widget and its initialisation in TransientModelsNotification . What parts of the IntelliJ Platform SDK can\u2019t be used in MPS because they are not supported? Everything related to text files: Documents , PSI files , Templates , QuickDoc, IDE Features Trainer , CodeSmellDetector and Custom Language Support . How do you add an action to the menu bar of a tool window? Example: 1 2 3 4 ToolWindow window = ToolWindowManager . getInstance ( myProject ). getToolWindow ( ToolWindowId . PROJECT_VIEW ); if ( window != null ) { window . setTitleActions ( titleActions ); } How can you have clickable icons in the left editor margin? Specific Languages Blog: Clickable icons in the left editor margin Are there alternatives to message boxes? Specific Languages Blog: Use notification balloons instead of message boxes What IDEA UI elements are available? Specific Languages Blog: Polished UI for free: IDEA UI components How do you create menu items with checkboxes? Specific Languages Blog: Extended actions: Checkboxes How can you retrieve all opened windows in split screen mode ? 1 FileEditorManagerEx . getInstanceEx ( ProjectHelper . toIdeaProject ( # project )). getSplitters (). getWindows ()","title":"GUI"},{"location":"mps_internal/intellij_sdk/","text":"IntelliJ SDK \u00b6 Introduction to creating IntelliJ IDEA plugins Advanced guide to creating IntelliJ IDEA plugins IDEA thread modeling (for example: invokeLater ), PSI , Virtual Files, Dynamic plugins, UI Listeners and message bus \u00b6 Message bus (message interface) \u00b6 listens for IntelliJ events/messages connection and subscription for different topics through listeners Just disconnect, you have not to store and remove each listener you added. Reference IntelliJ Messaging Infrastructure Declarative registration of Plugin Listeners Topics AppTopics ProjectTopics Further Topics (through MPS console with checkeddots imported) # nodes < scope = global > . ofConcept < StaticFieldDeclaration > . where ({ ~ it => it . type . isInstanceOf ( ClassifierType ) && it . type : ClassifierType . ? classifier . ? name . ? equals ( \"Topic\" ); }) Example: 1 2 3 4 5 6 7 8 9 10 11 12 class MessageBusExample { void connect () { this . busConnection = ideaProject . getMessageBus (). connect (); FileEditorManagerListener myListener = new FileEditorManagerListener () { // implement listener (1) @Override public void selectionChanged ( @NotNull () FileEditoManagerEvent event ) { // code } }; this . busConnection . subscribe ( FileEditorManagerListener . FILE_EDITOR . MANAGER , myListener ); } } You have to implement selectionChanged for this listener.","title":"IntelliJ SDK"},{"location":"mps_internal/intellij_sdk/#intellij-sdk","text":"Introduction to creating IntelliJ IDEA plugins Advanced guide to creating IntelliJ IDEA plugins IDEA thread modeling (for example: invokeLater ), PSI , Virtual Files, Dynamic plugins, UI","title":"IntelliJ SDK"},{"location":"mps_internal/intellij_sdk/#listeners-and-message-bus","text":"","title":"Listeners and message bus"},{"location":"mps_internal/intellij_sdk/#message-bus-message-interface","text":"listens for IntelliJ events/messages connection and subscription for different topics through listeners Just disconnect, you have not to store and remove each listener you added. Reference IntelliJ Messaging Infrastructure Declarative registration of Plugin Listeners Topics AppTopics ProjectTopics Further Topics (through MPS console with checkeddots imported) # nodes < scope = global > . ofConcept < StaticFieldDeclaration > . where ({ ~ it => it . type . isInstanceOf ( ClassifierType ) && it . type : ClassifierType . ? classifier . ? name . ? equals ( \"Topic\" ); }) Example: 1 2 3 4 5 6 7 8 9 10 11 12 class MessageBusExample { void connect () { this . busConnection = ideaProject . getMessageBus (). connect (); FileEditorManagerListener myListener = new FileEditorManagerListener () { // implement listener (1) @Override public void selectionChanged ( @NotNull () FileEditoManagerEvent event ) { // code } }; this . busConnection . subscribe ( FileEditorManagerListener . FILE_EDITOR . MANAGER , myListener ); } } You have to implement selectionChanged for this listener.","title":"Message bus (message interface)"},{"location":"mps_internal/models/","text":"Model \u00b6 UI : entry below module in the logical view. They may be nested in folders. Container for model contents limiting dependencies to other models. They are within the boundaries of the containing module. Models can be nested in folders. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or any other aspect. Types of models \u00b6 The IDE knows several types of models. They differ in their semantics and sometimes presentation. They don\u2019t differ from a technical point of view. Regular models \u00b6 UI : entry below solution in the logical view They contain root nodes with no specific semantics or presentation. Language aspects \u00b6 UI : entry below language in the logical view Aspects are models within a language with a special meaning. They are recognized by their name. Plugin aspect \u00b6 Although this aspect adheres to the plugin model naming convention, don\u2019t use it. Use it only to define MPS extension points (from language jetbrains.mps.lang.extension ). Test model \u00b6 UI : entry below solution in a specific folder named `tests? with specific icon in the logical view. A model containing tests. Defined by the @tests stereotype. Generator model \u00b6 UI : entry with specific icon below generator in the logical view. A model containing the generator, defined by the @generator stereotype. Transient model \u00b6 UI : last entry below project in logical view. Temporary models produced during generation, defined by @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb stereotype. Accessories model \u00b6 UI : entry below language in a specific folder named accessories in the logical view or entry below the solution in the logical view. A model specially selected by a language. Nodes contained in these models are implicitly available on the Java classpath and the dependencies of any model using this language. A use case would be a default library of concept instances to be available at any place you use the Language. You can store accessory models in two places: either as an aspect of a language (recommended), or as a regular model below a solution. In both cases, the model needs to be added to the module runtime language settings. Utility model \u00b6 UI : entry below language in a special folder named util models in the logical view. It includes code required in other parts of a language or generator. If, for example, the behavior method logic is too complex for inline implementation or a generator needs to do complex model traversals. Create them as regular models within the language. Build model \u00b6 ** UI : entry below a solution in the logical view It includes nodes from the build language . MPS plugin model \u00b6 UI : model within a solution in the logical view. It includes MPS plugins. The model name needs to adhere to the naming convention \u00abmoduleName\u00bb.plugin . Model stereotype \u00b6 UI : attached to the model name, separated by @ . A model may have a stereotype. To change, add, or remove a stereotype, use Rename Model Refactoring in the context menu of a model. Using custom stereotypes interferes with lots of MPS internals and thus isn\u2019t advised to do. The IDE knows some predefined Stereotypes with specific meanings: @tests : Denotes test models. @generator : Denotes generator models. @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb : Denotes transient models. Model settings \u00b6 UI : context menu of a model, model properties For both dependencies and used languages, the settings of models only restrict the settings from the containing module. Dependencies model settings \u00b6 UI : tab in the model properties dialog It lists other models this model contains references to. Used languages model settings \u00b6 UI : tab in model properties dialog It lists languages used in this Model. Any Used Language listed in a model, needs to be in the list of Used Languages of the containing module. Advanced model settings \u00b6 UI : tab in the model properties dialog It contains other settings for a model: languages engaged on generation: Generators contained in languages listed here execute on this model in any case. Build language \u00b6 Abstracted Apache Ant files used to build and package MPS Modules outside the IDE . It\u2019s used in build models . MPS can execute them via the Run \u00abBuild Model name\u00bb context menu entry of the build model in the logical view. Dependencies \u00b6 UI : section within build model This is the scope import for all references to other build models. It provides access to resulting artifacts of other build models. IDEA plugin dependencies \u00b6 UI : section project structure in Build Model , subsection idea plugin , subsection dependencies . It contains the contents of IDEA plugin.xml depends tags. This plugin only loads if all dependencies listed here load before. The contents of dependencies are available for this IDEA plugin. Module Dependencies \u00b6 UI : section mps group in Build Model , subsection solution / module , inspector section dependencies . It contains a copy of relations of the described module. Runtime \u00b6 It contains a copy of module runtime language settings. Jars \u00b6 UI : section default layout in Build Model You have to include all jars included in any Java module settings somewhere in this section. .java files (from Java source paths) need to be compiled as java sources inside corresponding build script and manually included into the resulting build layout: corresponding .class files should be jared, .java files should be places in corresponding location if they are referenced by java_source_stub model root.","title":"Models"},{"location":"mps_internal/models/#model","text":"UI : entry below module in the logical view. They may be nested in folders. Container for model contents limiting dependencies to other models. They are within the boundaries of the containing module. Models can be nested in folders. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or any other aspect.","title":"Model"},{"location":"mps_internal/models/#types-of-models","text":"The IDE knows several types of models. They differ in their semantics and sometimes presentation. They don\u2019t differ from a technical point of view.","title":"Types of models"},{"location":"mps_internal/models/#regular-models","text":"UI : entry below solution in the logical view They contain root nodes with no specific semantics or presentation.","title":"Regular models"},{"location":"mps_internal/models/#language-aspects","text":"UI : entry below language in the logical view Aspects are models within a language with a special meaning. They are recognized by their name.","title":"Language aspects"},{"location":"mps_internal/models/#plugin-aspect","text":"Although this aspect adheres to the plugin model naming convention, don\u2019t use it. Use it only to define MPS extension points (from language jetbrains.mps.lang.extension ).","title":"Plugin aspect"},{"location":"mps_internal/models/#test-model","text":"UI : entry below solution in a specific folder named `tests? with specific icon in the logical view. A model containing tests. Defined by the @tests stereotype.","title":"Test model"},{"location":"mps_internal/models/#generator-model","text":"UI : entry with specific icon below generator in the logical view. A model containing the generator, defined by the @generator stereotype.","title":"Generator model"},{"location":"mps_internal/models/#transient-model","text":"UI : last entry below project in logical view. Temporary models produced during generation, defined by @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb stereotype.","title":"Transient model"},{"location":"mps_internal/models/#accessories-model","text":"UI : entry below language in a specific folder named accessories in the logical view or entry below the solution in the logical view. A model specially selected by a language. Nodes contained in these models are implicitly available on the Java classpath and the dependencies of any model using this language. A use case would be a default library of concept instances to be available at any place you use the Language. You can store accessory models in two places: either as an aspect of a language (recommended), or as a regular model below a solution. In both cases, the model needs to be added to the module runtime language settings.","title":"Accessories model"},{"location":"mps_internal/models/#utility-model","text":"UI : entry below language in a special folder named util models in the logical view. It includes code required in other parts of a language or generator. If, for example, the behavior method logic is too complex for inline implementation or a generator needs to do complex model traversals. Create them as regular models within the language.","title":"Utility model"},{"location":"mps_internal/models/#build-model","text":"** UI : entry below a solution in the logical view It includes nodes from the build language .","title":"Build model"},{"location":"mps_internal/models/#mps-plugin-model","text":"UI : model within a solution in the logical view. It includes MPS plugins. The model name needs to adhere to the naming convention \u00abmoduleName\u00bb.plugin .","title":"MPS plugin model"},{"location":"mps_internal/models/#model-stereotype","text":"UI : attached to the model name, separated by @ . A model may have a stereotype. To change, add, or remove a stereotype, use Rename Model Refactoring in the context menu of a model. Using custom stereotypes interferes with lots of MPS internals and thus isn\u2019t advised to do. The IDE knows some predefined Stereotypes with specific meanings: @tests : Denotes test models. @generator : Denotes generator models. @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb : Denotes transient models.","title":"Model stereotype"},{"location":"mps_internal/models/#model-settings","text":"UI : context menu of a model, model properties For both dependencies and used languages, the settings of models only restrict the settings from the containing module.","title":"Model settings"},{"location":"mps_internal/models/#dependencies-model-settings","text":"UI : tab in the model properties dialog It lists other models this model contains references to.","title":"Dependencies model settings"},{"location":"mps_internal/models/#used-languages-model-settings","text":"UI : tab in model properties dialog It lists languages used in this Model. Any Used Language listed in a model, needs to be in the list of Used Languages of the containing module.","title":"Used languages model settings"},{"location":"mps_internal/models/#advanced-model-settings","text":"UI : tab in the model properties dialog It contains other settings for a model: languages engaged on generation: Generators contained in languages listed here execute on this model in any case.","title":"Advanced model settings"},{"location":"mps_internal/models/#build-language","text":"Abstracted Apache Ant files used to build and package MPS Modules outside the IDE . It\u2019s used in build models . MPS can execute them via the Run \u00abBuild Model name\u00bb context menu entry of the build model in the logical view.","title":"Build language"},{"location":"mps_internal/models/#dependencies","text":"UI : section within build model This is the scope import for all references to other build models. It provides access to resulting artifacts of other build models.","title":"Dependencies"},{"location":"mps_internal/models/#idea-plugin-dependencies","text":"UI : section project structure in Build Model , subsection idea plugin , subsection dependencies . It contains the contents of IDEA plugin.xml depends tags. This plugin only loads if all dependencies listed here load before. The contents of dependencies are available for this IDEA plugin.","title":"IDEA plugin dependencies"},{"location":"mps_internal/models/#module-dependencies","text":"UI : section mps group in Build Model , subsection solution / module , inspector section dependencies . It contains a copy of relations of the described module.","title":"Module Dependencies"},{"location":"mps_internal/models/#runtime","text":"It contains a copy of module runtime language settings.","title":"Runtime"},{"location":"mps_internal/models/#jars","text":"UI : section default layout in Build Model You have to include all jars included in any Java module settings somewhere in this section. .java files (from Java source paths) need to be compiled as java sources inside corresponding build script and manually included into the resulting build layout: corresponding .class files should be jared, .java files should be places in corresponding location if they are referenced by java_source_stub model root.","title":"Jars"},{"location":"mps_internal/open_api/","text":"How do you get an icon for a concept? 1 GlobalIconManager . getInstance (). getIconFor ( concept ) How can you copy a language without the new one having duplicate model IDs? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { => SModule sm = module / module1 ; SModule tm = module / module2 ; map < SNode , SNode > node = new hashmap < SNode , SNode > ; foreach aspect in LanguageAspect . values { SModel s = aspect . get (( Language ) sm ); SModel t = aspect . get (( Language ) tm ); if ( s != null && t != null ) { foreach r in new arraylist < SNode > ( copy : t . getRootNodes ()) { (( node <> ) r ). detach ; } foreach r in CopyUtil . copyAndPreserveId (((( sequence < SNode > ) s , getRootNodes ())). toList , node ) { t . addRootNode ( r ) } } } }. invoke () How can you change the default project directory? Put the following code in an application plugin: 1 2 3 // set default project location string defaultProjectDir = Paths . get ( System . getProperty ( \"user.home\" ), \"NewProjectDir\" ). toString (); GeneralSettings . getInstance (). setDefaultProjectDirectory ( defaultProjectDir ); How can you execute an MPS action programmatically? Use ActionUtils to create an event and to run the action: 1 2 3 4 # cast to EditorContext class DataContext dataContext = DataManager . getInstance (). getDataContext ((( EditorContext ) editorContext ). getNodeEditorComponent ()); AnActionEvent event = ActionUtils . createEvent ( ActionPlaces . EDITOR_TAB , dataContext ); ActionUtils . updateAndPerformAction ( action < openHtmlReport > , event ); Since this is based on IDEA components, we need to get the getNodeEditorComponent , which is not part of the openapi. That\u2019s why we need to downcast it to the EditorComponent class. Note: action<\u2026> comes from the jetbrains.mps.lang.plugin language. How to shutdown MPS programmatically? In normal conditions one can use ApplicationManager . getApplication (). exit () . If this doesn\u2019t work, an exception can be thrown on purpose. How can you react to opening and closing of projects? Register a ProjectManagerListener in a plugin via the class ProjectManager . How do you change a model without creating an undo entry? Example: Setting a property (=flag) via a button. 1 repository . getModelAccess (). executeUndoTransparentCommand () How do you work with temporary models? 1 2 3 4 5 6 7 8 9 10 11 12 13 try { undo - transparent command with this . mpsProject . getRepository () { tmpModel = TemporaryModels . getInstance (). createReadOnly ( TempModuleOptions . forDefaultModule ()); tmpModel . addRootNode ( type ); TemporaryModels . getInstance (). addMissingImports ( tmpModel ); } // do something with the node } finally { undo - transparent command with this . mpsProject . getRepository () { tmpModel . removeRootNode ( type ); TemporaryModels . getInstance (). dispose ( tmpModel ); } } How can you react to selection changes in the editor? 1 editorContext . getSelectionManager (). addSelectionListener ( new SingularSelectionListenerAdapter () { ... }) How can I delete a model in a module programmatically? Get the model-to-be-deleted as SModel (interface) and use new ModelDeleteHelper ( model ). delete (); For more context see: DeleteModeHelper How can you add a language to the Used Languages settings of a model programmatically? Module level: (( AbstractModule ) moduleA ). addDependency ( moduleB . getModuleReference (), false ) Model level: new ModelImports ( model ). addUsedLanguage ( language ) To get the language from a reference, you can call: MetaAdapterFactory.getLanguage(moduleRef) . Can a node pointer point to non-root nodes? Yes, for example: 1 node - ptr / Integer -> parseInt -> radix / How can you create an MPS Language programmatically and add it to the current project? 1 NewModuleUtil . createLanguage ( namespace , rootPath , project , saveProject )","title":"Open API"},{"location":"mps_internal/recipes/","text":"Recipes \u00b6 This section lists all relations required for a specific task. If not specified otherwise, you should add all dependencies. If no dependency exists: with default scope and no export flag . If a dependency (no matter witch scope and export flag) exists: no change The IDE often creates the required relations on module level automatically if we add a relation on Model level. However, this doesn\u2019t work always, so double-check if the module level relation was created correctly if errors exist. Use a Java type \u00b6 ClassB inside ModelB inside ModuleB wants to create a variable of type ClassA inside ModelA inside ModuleA . To ModelB , add dependency to ModelA . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to ModuleA . Reuse (aka extend, reference) a external java type \u00b6 ClassB inside ModelB inside ModuleB extends ClassA inside ModelA inside ModuleA . ClassC inside ModelC inside ModuleC wants to use ClassB as simple as possible. To ModuleB , add the export flag to the dependency on ModuleA . To ModelC , add dependency to ModelB . Even if the IDE complains about the Dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleC to ModuleB . Remark: not sure if we should add the export flag to the dependency on ModuleA here. Create a concept instance \u00b6 Directly (aka root node) or indirectly (aka child node) within ModelB inside ModuleB , we want to create an instance of ConceptA inside LanguageA . To ModelB , add Used Language to LanguageA . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically add a Used Language from ModuleB to LanguageA . Use an intention \u00b6 Make IntentionC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC . Use a type system rule \u00b6 Make TypesystemRuleC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC . Use an alternate editor with a hint \u00b6 Make EditorC defined in LanguageC for ConceptA inside LanguageA using HintD defined in LanguageD available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC . Make sure that a generator is executed for a model \u00b6 Make sure that GeneratorC defined in LanguageC for ConceptA inside LanguageA is executed for ModelB inside ModuleB . To ModelB , add LanguageC to Languages engaged on generation . To ModuleB , add Used Language to LanguageC . Use node type \u00b6 ClassB inside ModelB inside ModuleB wants to create a variable of type node inside LanguageA . To ModelB , add Dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA . Call a behavior Method \u00b6 ClassB inside ModelB inside ModuleB wants to call behavior method opA inside ConceptA inside LanguageA . To ModelB , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA . Note: We could also add a dependency from ModelB to LanguageA.behavior . However, as we need to depend on LanguageA.structure anyway (to be able to access the type), the preceding recipe presented is preferred. Use a concept as a child or reference \u00b6 ConceptB inside LanguageB wants to have a child or reference of type ConceptA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from LanguageB to LanguageA . Extend a concept or implement a ConceptInterface \u00b6 ConceptB inside LanguageB wants to extend / implement ConceptA / ConceptInterfaceA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB to LanguageA has extends Scope, either by setting it manually or by using the intention on the error appearing on ConceptB . Create an editor \u00b6 LanguageB wants to define a new editor for EditorHintC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Create an editor component \u00b6 LanguageB wants to define a new editor component for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Use an editor component \u00b6 LanguageB wants to use EditorComponentC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageC has Extends Scope . Create a type system rule \u00b6 LanguageB wants to define a new type system rule for ConceptA inside LanguageA . To LanguageB.typesystem , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Note: The overrides flag in type system rules isn\u2019t related to dependencies. This flag specifies if type system rules of concepts extended by the applicable concept are evaluated. Example: ConceptX extends ConceptY extends ConceptZ ConceptZ defines type system rule ConceptZTypeRule ConceptY defines type system rule ConceptYTypeRule1[override=true] and ConceptYTypeRule2[override=false] ConceptX defines type system rule ConceptXTypeRule[override=false] Then: For ConceptZ , type system rule ConceptZTypeRule gets evaluated. For ConceptY , type system rules ConceptYTypeRule1 and ConceptYTypeRule2 get evaluated. ConceptZTypeRule is not evaluated, as at least one Rule for ConceptY defines [override=true] . For ConceptX , type system rules ConceptYTypeRule1 , ConceptYTypeRule2 and ConceptXTypeRule get evaluated. ConceptYTypeRule1 and ConceptYTypeRule2 get included because no rule for ConceptX defines [override=true] . ConceptZTypeRule*is not evaluated because the search for rules in extended Concepts stops at the first concept having at least one rule defining *[override=true] . Create an intention \u00b6 LanguageB wants to define a new intention for ConceptA inside LanguageA . To LanguageB.intentions , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Create a Generator \u00b6 Create Generator includes creating new root mappings creating new reduction rule creating new switches GeneratorB inside LanguageB wants to create a generator transforming ConceptA inside LanguageA into ConceptC inside LanguageC . To GeneratorB.main@generator , add dependency to LanguageA.structure . To GeneratorB.main@generator , add Used Language to LanguageC . Even if the IDE complains about the dependency or used language being \u201cout of scope,\u201d click ok . Don\u2019t forget to sort your generator into the generation process by defining some mapping priorities . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a Used Language from GeneratorB to GeneratorA . If LanguageC defines a runtime solution: To LanguageB , add Extends Scope dependency to LanguageC . Extend a generator \u00b6 Extend Generator includes Making sure that another generator is always executed if this generator gets executed. Creating new reduction ruled to be used in another generator. Createing a new switch entry for a switch in another generator. GeneratorB inside LanguageB wants to extend GeneratorA inside LanguageA . GeneratorA transforms ConceptC inside LanguageC into ConceptD inside LanguageD . GeneratorB transforms ConceptE inside LanguageE into ConceptF inside LanguageF . To #GeneratorB.main@generator , add dependency to GeneratorA.main@generator . Even if the IDE complains about the dependency being out of scope , click ok . MPS automatically adds a dependency from GeneratorB to GeneratorA . Make sure the dependency from GeneratorB*to *GeneratorA has Extends Scope . Generate a Java class extending a base class \u00b6 GeneratorB inside LanguageB wants to transform ConceptA inside LanguageA into a ConceptAJavaClass extending ConceptAJavaClassBase inside ModelC inside SolutionC . To #!java GeneratorB.main@generator , add dependency to LanguageA.structure . To #!java GeneratorB.main@generator , add dependency to ModelC . To #!java GeneratorB.main@generator , add Used Language to BaseLanguage . Even if the IDE complains about the dependency or Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a dependency from GeneratorB to SolutionC . MPS automatically adds a Used Language from GeneratorB to BaseLanguage . To LanguageB , add Extends Scope dependency to BaseLanguage (because BaseLanguage defines a runtime solution). To LanguageB , add runtime solution to SolutionC . Define a runtime solution \u00b6 LanguageB wants to use SolutionA as a runtime solution. To LanguageB , add a runtime solution to SolutionA . Note: We don\u2019t need any other relation, specifically, no dependency from LanguageB to SolutionA . Define an accessories model (aka make concept instances available everywhere a language is used) \u00b6 BuiltInNodeA as instance of BuiltInConcept inside LanguageA should be available to be referenced anywhere LanguageA is a Used Language . Create AccessoryModel as aspect in LanguageA To AccessoryModel , add Used Language to LanguageA . Create BuiltInNodeA inside AccessoryModel . To LanguageA , add an accessory Model to AccessoryModel (if not present already). Note: We don\u2019t need any other relation, specifically, no dependency from LanguageA to AccessorySolution . Create an utility Model (aka create complex implementations for Behavior Methods or Generators) \u00b6 complexBehavior() defined for ConceptA inside LanguageA needs ComplexBehaviorInternalJavaClass for its implementation or GeneratorA inside LanguageA needs ComplexGeneratorInternalJavaClass for its execution (e.g. for a complex condition or macro ). Create BehaviorUtilityModel / GeneratorUtilityModel as regular Model within LanguageA . To BehaviorUtilityModel / GeneratorUtilityModel , add Used Language to BaseLanguage . Create ComplexBehaviorInternalJavaClass / ComplexBehaviorInternalJavaClass within BehaviorUtilityModel / GeneratorUtilityModel . To LanguageA.behavior / GeneratorA.main@generator add dependency to BehaviorUtilityModel / GeneratorUtilityModel","title":"Recipes"},{"location":"mps_internal/recipes/#recipes","text":"This section lists all relations required for a specific task. If not specified otherwise, you should add all dependencies. If no dependency exists: with default scope and no export flag . If a dependency (no matter witch scope and export flag) exists: no change The IDE often creates the required relations on module level automatically if we add a relation on Model level. However, this doesn\u2019t work always, so double-check if the module level relation was created correctly if errors exist.","title":"Recipes"},{"location":"mps_internal/recipes/#use-a-java-type","text":"ClassB inside ModelB inside ModuleB wants to create a variable of type ClassA inside ModelA inside ModuleA . To ModelB , add dependency to ModelA . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to ModuleA .","title":"Use a Java type"},{"location":"mps_internal/recipes/#reuse-aka-extend-reference-a-external-java-type","text":"ClassB inside ModelB inside ModuleB extends ClassA inside ModelA inside ModuleA . ClassC inside ModelC inside ModuleC wants to use ClassB as simple as possible. To ModuleB , add the export flag to the dependency on ModuleA . To ModelC , add dependency to ModelB . Even if the IDE complains about the Dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleC to ModuleB . Remark: not sure if we should add the export flag to the dependency on ModuleA here.","title":"Reuse (aka extend, reference) a external java type"},{"location":"mps_internal/recipes/#create-a-concept-instance","text":"Directly (aka root node) or indirectly (aka child node) within ModelB inside ModuleB , we want to create an instance of ConceptA inside LanguageA . To ModelB , add Used Language to LanguageA . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically add a Used Language from ModuleB to LanguageA .","title":"Create a concept instance"},{"location":"mps_internal/recipes/#use-an-intention","text":"Make IntentionC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC .","title":"Use an intention"},{"location":"mps_internal/recipes/#use-a-type-system-rule","text":"Make TypesystemRuleC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC .","title":"Use a type system rule"},{"location":"mps_internal/recipes/#use-an-alternate-editor-with-a-hint","text":"Make EditorC defined in LanguageC for ConceptA inside LanguageA using HintD defined in LanguageD available in ModelB inside ModuleB . To ModelB , add Used Language to LanguageC . Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from ModuleB to LanguageC .","title":"Use an alternate editor with a hint"},{"location":"mps_internal/recipes/#make-sure-that-a-generator-is-executed-for-a-model","text":"Make sure that GeneratorC defined in LanguageC for ConceptA inside LanguageA is executed for ModelB inside ModuleB . To ModelB , add LanguageC to Languages engaged on generation . To ModuleB , add Used Language to LanguageC .","title":"Make sure that a generator is executed for a model"},{"location":"mps_internal/recipes/#use-node-type","text":"ClassB inside ModelB inside ModuleB wants to create a variable of type node inside LanguageA . To ModelB , add Dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA .","title":"Use node type"},{"location":"mps_internal/recipes/#call-a-behavior-method","text":"ClassB inside ModelB inside ModuleB wants to call behavior method opA inside ConceptA inside LanguageA . To ModelB , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from ModuleB to LanguageA . Note: We could also add a dependency from ModelB to LanguageA.behavior . However, as we need to depend on LanguageA.structure anyway (to be able to access the type), the preceding recipe presented is preferred.","title":"Call a behavior Method"},{"location":"mps_internal/recipes/#use-a-concept-as-a-child-or-reference","text":"ConceptB inside LanguageB wants to have a child or reference of type ConceptA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a Used Language from LanguageB to LanguageA .","title":"Use a concept as a child or reference"},{"location":"mps_internal/recipes/#extend-a-concept-or-implement-a-conceptinterface","text":"ConceptB inside LanguageB wants to extend / implement ConceptA / ConceptInterfaceA inside LanguageA . To LanguageB.structure , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB to LanguageA has extends Scope, either by setting it manually or by using the intention on the error appearing on ConceptB .","title":"Extend a concept or implement a ConceptInterface"},{"location":"mps_internal/recipes/#create-an-editor","text":"LanguageB wants to define a new editor for EditorHintC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope .","title":"Create an editor"},{"location":"mps_internal/recipes/#create-an-editor-component","text":"LanguageB wants to define a new editor component for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope .","title":"Create an editor component"},{"location":"mps_internal/recipes/#use-an-editor-component","text":"LanguageB wants to use EditorComponentC defined in LanguageC for ConceptA inside LanguageA . To LanguageB.editor , add dependency to LanguageC.editor . To LanguageB.editor , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageC . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageC has Extends Scope .","title":"Use an editor component"},{"location":"mps_internal/recipes/#create-a-type-system-rule","text":"LanguageB wants to define a new type system rule for ConceptA inside LanguageA . To LanguageB.typesystem , add dependency to LanguageA.structure . Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA . Make sure the dependency from LanguageB*to *LanguageA has Extends Scope . Note: The overrides flag in type system rules isn\u2019t related to dependencies. This flag specifies if type system rules of concepts extended by the applicable concept are evaluated. Example: ConceptX extends ConceptY extends ConceptZ ConceptZ defines type system rule ConceptZTypeRule ConceptY defines type system rule ConceptYTypeRule1[override=true] and ConceptYTypeRule2[override=false] ConceptX defines type system rule ConceptXTypeRule[override=false] Then: For ConceptZ , type system rule ConceptZTypeRule gets evaluated. For ConceptY , type system rules ConceptYTypeRule1 and ConceptYTypeRule2 get evaluated. ConceptZTypeRule is not evaluated, as at least one Rule for ConceptY defines [override=true] . For ConceptX , type system rules ConceptYTypeRule1 , ConceptYTypeRule2 and ConceptXTypeRule get evaluated. ConceptYTypeRule1 and ConceptYTypeRule2 get included because no rule for ConceptX defines [override=true] . ConceptZTypeRule*is not evaluated because the search for rules in extended Concepts stops at the first concept having at least one rule defining *[override=true] .","title":"Create a type system rule"},{"location":"mps_internal/recipes/#create-an-intention","text":"LanguageB wants to define a new intention for ConceptA inside LanguageA . To LanguageB.intentions , add dependency to LanguageA.structure . Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from LanguageB to LanguageA .","title":"Create an intention"},{"location":"mps_internal/recipes/#create-a-generator","text":"Create Generator includes creating new root mappings creating new reduction rule creating new switches GeneratorB inside LanguageB wants to create a generator transforming ConceptA inside LanguageA into ConceptC inside LanguageC . To GeneratorB.main@generator , add dependency to LanguageA.structure . To GeneratorB.main@generator , add Used Language to LanguageC . Even if the IDE complains about the dependency or used language being \u201cout of scope,\u201d click ok . Don\u2019t forget to sort your generator into the generation process by defining some mapping priorities . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a Used Language from GeneratorB to GeneratorA . If LanguageC defines a runtime solution: To LanguageB , add Extends Scope dependency to LanguageC .","title":"Create a Generator"},{"location":"mps_internal/recipes/#extend-a-generator","text":"Extend Generator includes Making sure that another generator is always executed if this generator gets executed. Creating new reduction ruled to be used in another generator. Createing a new switch entry for a switch in another generator. GeneratorB inside LanguageB wants to extend GeneratorA inside LanguageA . GeneratorA transforms ConceptC inside LanguageC into ConceptD inside LanguageD . GeneratorB transforms ConceptE inside LanguageE into ConceptF inside LanguageF . To #GeneratorB.main@generator , add dependency to GeneratorA.main@generator . Even if the IDE complains about the dependency being out of scope , click ok . MPS automatically adds a dependency from GeneratorB to GeneratorA . Make sure the dependency from GeneratorB*to *GeneratorA has Extends Scope .","title":"Extend a generator"},{"location":"mps_internal/recipes/#generate-a-java-class-extending-a-base-class","text":"GeneratorB inside LanguageB wants to transform ConceptA inside LanguageA into a ConceptAJavaClass extending ConceptAJavaClassBase inside ModelC inside SolutionC . To #!java GeneratorB.main@generator , add dependency to LanguageA.structure . To #!java GeneratorB.main@generator , add dependency to ModelC . To #!java GeneratorB.main@generator , add Used Language to BaseLanguage . Even if the IDE complains about the dependency or Used Language being \u201cout of scope,\u201d click ok . MPS automatically adds a dependency from GeneratorB to LanguageA . MPS automatically adds a dependency from GeneratorB to SolutionC . MPS automatically adds a Used Language from GeneratorB to BaseLanguage . To LanguageB , add Extends Scope dependency to BaseLanguage (because BaseLanguage defines a runtime solution). To LanguageB , add runtime solution to SolutionC .","title":"Generate a Java class extending a base class"},{"location":"mps_internal/recipes/#define-a-runtime-solution","text":"LanguageB wants to use SolutionA as a runtime solution. To LanguageB , add a runtime solution to SolutionA . Note: We don\u2019t need any other relation, specifically, no dependency from LanguageB to SolutionA .","title":"Define a runtime solution"},{"location":"mps_internal/recipes/#define-an-accessories-model-aka-make-concept-instances-available-everywhere-a-language-is-used","text":"BuiltInNodeA as instance of BuiltInConcept inside LanguageA should be available to be referenced anywhere LanguageA is a Used Language . Create AccessoryModel as aspect in LanguageA To AccessoryModel , add Used Language to LanguageA . Create BuiltInNodeA inside AccessoryModel . To LanguageA , add an accessory Model to AccessoryModel (if not present already). Note: We don\u2019t need any other relation, specifically, no dependency from LanguageA to AccessorySolution .","title":"Define an accessories model (aka make concept instances available everywhere a language is used)"},{"location":"mps_internal/recipes/#create-an-utility-model-aka-create-complex-implementations-for-behavior-methods-or-generators","text":"complexBehavior() defined for ConceptA inside LanguageA needs ComplexBehaviorInternalJavaClass for its implementation or GeneratorA inside LanguageA needs ComplexGeneratorInternalJavaClass for its execution (e.g. for a complex condition or macro ). Create BehaviorUtilityModel / GeneratorUtilityModel as regular Model within LanguageA . To BehaviorUtilityModel / GeneratorUtilityModel , add Used Language to BaseLanguage . Create ComplexBehaviorInternalJavaClass / ComplexBehaviorInternalJavaClass within BehaviorUtilityModel / GeneratorUtilityModel . To LanguageA.behavior / GeneratorA.main@generator add dependency to BehaviorUtilityModel / GeneratorUtilityModel","title":"Create an utility Model (aka create complex implementations for Behavior Methods or Generators)"},{"location":"mps_internal/terminology_and_ui_for_access/","text":"Terminology and user interface for access \u00b6 This section lists terms that aren\u2019t mentioned in the MPS guide or aren\u2019t explained well. MPS project structure should give an overview of the most important terms. Settings \u00b6 UI : File menu All global and project settings. IDE settings (aka global settings) \u00b6 Settings applied to all projects opened with this MPS installation ( official documentation ). (IDEA) Plugins \u00b6 UI : entry in settings dialog A packaged set of contributions to the IntelliJ IDEA platform , which MPS is based upon. Contained in one of the following places: ${mps_home}/plugins \u00abGlobalSettingsDir\u00bb/plugins MPS plugins bear no relationship to IDEA Plugins. However, you can package MPS plugins into IDEA plugins, just as any other content of MPS . Project settings \u00b6 UI : Entry in settings dialog Settings applied to one project. Stored in ${project}/.mps/ . Modules pool \u00b6 UI : second root entry in logical Vvew All content known to MPS is contained in its modules pool. This modules pool is shared between all windows of the same MPS installation. In some future MPS version, every window should have its independent modules pool. If a module is contained more than once in the Mmdules Pool (e.g. present both in the current project and in a global Library), the behavior is undefined (i.e. will mess up badly, don\u2019t do this). MPS window \u00b6 UI : If already open: Window menu, New File* menu: Open\u2026 \u2192 New Window Every Project is contained in its own window. Project \u00b6 UI : first root entry in logical view A project is a collection of modules. A module can be part of more than one project. They can be added via the Project Paths context menu entry of the project. Modules can be nested in folders. These folders are stored in the project, i.e. the same module can be in different folders inside different Projects. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or anything else. What are some known predefined path variables? ${module} : the containing module ${user.home} : the user home directory ${language_descriptor} : the descriptor file of the current language ${solution_descriptor} : the descriptor file of the current solution ${project} : the directory containing the project ${mps_home} : the directory of th MPS installation Don\u2019t point path variables to a subpath of another path variable. MPS always applies the first (predefined before user-defined, user-defined in order of definition) one matching. INVALID example: Path Variable a \u2192 /some/dir Path Variable b \u2192 /some/dir/below","title":"Terminology and UI for access"},{"location":"mps_internal/terminology_and_ui_for_access/#terminology-and-user-interface-for-access","text":"This section lists terms that aren\u2019t mentioned in the MPS guide or aren\u2019t explained well. MPS project structure should give an overview of the most important terms.","title":"Terminology and user interface for access"},{"location":"mps_internal/terminology_and_ui_for_access/#settings","text":"UI : File menu All global and project settings.","title":"Settings"},{"location":"mps_internal/terminology_and_ui_for_access/#ide-settings-aka-global-settings","text":"Settings applied to all projects opened with this MPS installation ( official documentation ).","title":"IDE settings (aka global settings)"},{"location":"mps_internal/terminology_and_ui_for_access/#idea-plugins","text":"UI : entry in settings dialog A packaged set of contributions to the IntelliJ IDEA platform , which MPS is based upon. Contained in one of the following places: ${mps_home}/plugins \u00abGlobalSettingsDir\u00bb/plugins MPS plugins bear no relationship to IDEA Plugins. However, you can package MPS plugins into IDEA plugins, just as any other content of MPS .","title":"(IDEA) Plugins"},{"location":"mps_internal/terminology_and_ui_for_access/#project-settings","text":"UI : Entry in settings dialog Settings applied to one project. Stored in ${project}/.mps/ .","title":"Project settings"},{"location":"mps_internal/terminology_and_ui_for_access/#modules-pool","text":"UI : second root entry in logical Vvew All content known to MPS is contained in its modules pool. This modules pool is shared between all windows of the same MPS installation. In some future MPS version, every window should have its independent modules pool. If a module is contained more than once in the Mmdules Pool (e.g. present both in the current project and in a global Library), the behavior is undefined (i.e. will mess up badly, don\u2019t do this).","title":"Modules pool"},{"location":"mps_internal/terminology_and_ui_for_access/#mps-window","text":"UI : If already open: Window menu, New File* menu: Open\u2026 \u2192 New Window Every Project is contained in its own window.","title":"MPS window"},{"location":"mps_internal/terminology_and_ui_for_access/#project","text":"UI : first root entry in logical view A project is a collection of modules. A module can be part of more than one project. They can be added via the Project Paths context menu entry of the project. Modules can be nested in folders. These folders are stored in the project, i.e. the same module can be in different folders inside different Projects. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or anything else. What are some known predefined path variables? ${module} : the containing module ${user.home} : the user home directory ${language_descriptor} : the descriptor file of the current language ${solution_descriptor} : the descriptor file of the current solution ${project} : the directory containing the project ${mps_home} : the directory of th MPS installation Don\u2019t point path variables to a subpath of another path variable. MPS always applies the first (predefined before user-defined, user-defined in order of definition) one matching. INVALID example: Path Variable a \u2192 /some/dir Path Variable b \u2192 /some/dir/below","title":"Project"},{"location":"mps_internal/utility_classes/","text":"Utility classes \u00b6 Class Description DirUtil directory related utilities MatchingUtil tests if two nodes match SubtypingUtil subtyping related utilities CopyUtil utility for copying models, nodes etc. FileUtil related utilities JavaNameUtil utilities related to java naming NameUtil related utilities such as pluralizing or escaping strings CopyPasteUtil / TextPasteUtil copy paste related utilities ActionUtils action related utilities; these methods can execute actions programmatically. NewModuleUtil utilities related to creating new modules such as creating solutions or languages TemporaryModels utilities for creating temporary models UIUtil utilities related to the Intellij UI such as checking for dark mode ( isUnderDarcula() ). PathManager / PathManager classes for getting all kinds of paths such as the plugins folder or the log folder. ClassLoaderManager class responsible for loading ( MPS ) classes FindUsagesManager class that has methods for invoking the find usage UI CloneUtil utility method for cloning a model ModelDigestUtil class that contains hash methods FindUtils class for finding nodes in MPS MatchingUtil method for checking if two nodes structurally match SubTypingManagerNew subtyping related methods such as isSubTypeOf and collectImmediateSupertypes . SubtypingUtil subtyping related methods such as leastCommonSuperTypes . PersistenceUtil methods for saving and loading models ModelsAutoImportsManager utility methods related to auto importing models ProjectManager project related methods such as creating projects and attaching listeners to projects CopyUtil methods for copying models and nodes ModelAccessHelper methods for running code as a command/read/write action","title":"Utility classes"},{"location":"mps_internal/utility_classes/#utility-classes","text":"Class Description DirUtil directory related utilities MatchingUtil tests if two nodes match SubtypingUtil subtyping related utilities CopyUtil utility for copying models, nodes etc. FileUtil related utilities JavaNameUtil utilities related to java naming NameUtil related utilities such as pluralizing or escaping strings CopyPasteUtil / TextPasteUtil copy paste related utilities ActionUtils action related utilities; these methods can execute actions programmatically. NewModuleUtil utilities related to creating new modules such as creating solutions or languages TemporaryModels utilities for creating temporary models UIUtil utilities related to the Intellij UI such as checking for dark mode ( isUnderDarcula() ). PathManager / PathManager classes for getting all kinds of paths such as the plugins folder or the log folder. ClassLoaderManager class responsible for loading ( MPS ) classes FindUsagesManager class that has methods for invoking the find usage UI CloneUtil utility method for cloning a model ModelDigestUtil class that contains hash methods FindUtils class for finding nodes in MPS MatchingUtil method for checking if two nodes structurally match SubTypingManagerNew subtyping related methods such as isSubTypeOf and collectImmediateSupertypes . SubtypingUtil subtyping related methods such as leastCommonSuperTypes . PersistenceUtil methods for saving and loading models ModelsAutoImportsManager utility methods related to auto importing models ProjectManager project related methods such as creating projects and attaching listeners to projects CopyUtil methods for copying models and nodes ModelAccessHelper methods for running code as a command/read/write action","title":"Utility classes"},{"location":"mps_internal/deps_and_classpath/","text":"Dependencies and classpath in MPS \u00b6 This page describes the meaning and effect of different types of dependencies within MPS , including the effects on the applicable Java classpath. It describes both the expected state and all bugs deviating from the expectations. Overview \u00b6 The module pool has all content known to MPS . The modules pool is filled from modules in the current project and all non-project sources . MPS in general cares about dependencies between modules. The dependencies on models only constrain further the dependencies of the modules. Two main types of relations exist: dependencies are needed for any reference to something in another module. Used Languages are needed to use something defined in a language. We refer to relations if we address both types. Other types of dependencies on modules include: Java stubs (in combination with Java libraries ), Java source stubs (in combination with Java source paths ), runtime solutions and accessory models (only available for languages), and languages engaged on generation . Build models abstract Ant files to build and package modules and IDEA plugins . They contain a copy of the relations defined in the modules, and dependencies to other build models and IDEA plugins. MPS Plugins \u00b6 MPS Plugins are automatically loaded according to the solution Kind set in Java module settings. MPS Plugins need to be contained in MPS plugin models. StandalonePluginDescriptor \u00b6 We need to add a StandalonePluginDescriptor (defined in Language jetbrains.mps.lang.plugin.standalone ) as a root node if a MPS plugin model uses any concept from the language jetbrains.mps.lang.plugin . Other concepts from the language jetbrains.mps.lang.plugin.standalone don\u2019t need a StandalonePluginDescriptor . Plugin disambiguation \u00b6 The term \u201cplugin\u201d is used at various places throughout MPS . It describes different things: IDEA plugins: a packaged set of contributions to the IntelliJ IDEA platform, which MPS is based upon. MPS plugins: automatically loaded Models. Plugin language aspect: model inside a aanguage defining extension points. Build model plugins: part of the build model language providing new entries for build models. Non-project sources \u00b6 Non-project sources are global libraries IDEA plugins project libraries common and Java module settings regarding Java classes and Java source files IDEA plugins referenced by a module These directories or jar files are recursively scanned for .mpl (languages), .msd (solutions), and .devkit (devkit) files. If found, the corresponding content is added to the modules pool. Java classpath versus relations \u00b6 The various settings on models and modules specify both the Java classpath and the relations of a model. However, these settings affect classpath and relations in a different way. As a rule of thumb, the classpath has all Java classes reachable through any kind of relation. The Classpath is populated generously. On the contrary, the relations are populated reluctantly, for example, they need to be specified explicitly. The dependency relations on modules and models are completely separated from the used language relations on modules and models. Thus, no dependency requires a Used Language or vice versa. Used languages \u00b6 No implicitly Used Languages are available except described for generators. Specifically, if LanguageB has an Extends Scope dependency on LanguageA and ModuleC uses LanguageB , LanguageA isn\u2019t a Used Language within ModuleC . You must add LanguageA (containing ConceptA ) to ModuleB\u2019s and contained ModelB\u2019s used languages if and only if ModelB instantiates ConceptA within the IDE . ModelB executes intentions from LanguageA . ModelB requires type checks from LanguageA . ModelB uses editors from LanguageA by selecting an editor hint but not if LanguageA only defines the editor hint. ModuleB is a generator and outputs instance of ConceptA . Executed generators \u00b6 GeneratorA contained in LanguageA (containing ConceptA ) will be executed for ModelS (contained in ModuleS ) if and only if ModelS uses LanguageA and contains an instance of ConceptA ModelS lists LanguageA in Languages engaged on generation The preceding conditions match LanguageB containing GeneratorB extending GeneratorA For discussion, we establish a continued scenario: (The Relations listed here are not complete in order to reduce clutter. The complete example is available.) SolutionBase doesn\u2019t change during generation, as LanguageBase doesn\u2019t define any generators. SolutionBaseGen doesn\u2019t change during generation either, as it doesn\u2019t contain any instances from LanguageBaseGen , thus removing LanguageBaseGen from the list of applicable generators, ending up with no generators at all. SolutionBaseGen2 ends up with a transformed NodeBase , as Languages engaged in generation are never removed. SolutionBaseGenExtends ends up with an unchanged NodeBase , but a transformed NodeBase2 . GeneratorBaseExtends gets executed, because LanguageBaseGenExtends is listed in Languages engaged in generation . However, the Dependencies of the Language aren\u2019t considered for selecting the running Generators. In SolutionBaseGenExtends2 both NodeBase and NodeBase2 will be transformed, as LanguageBaseGenExtends2 is listed in Languages engaged in generation and GeneratorBaseExtends2 extends GeneratorBase . Only NodeExtendsGen will be transformed in SolutionExtendsGen , as the only active Generator is GeneratorExtendsGen . The reason is that we found an instance of ConceptExtendsGen contained in the same language as the generator. The Generator doesn\u2019t extend any other applicable Generator. All nodes within SolutionExtendsGen2 get transformed, as an instance of ConceptExtendsGen2 was found, and the generator GeneratorExtendsGen2 contained in the same language extends GeneratorBase . Generated relations \u00b6 Relations on the output model are defined only by the contents of the output model that was created by the generator. Thus, all languages providing the concepts of generated instances are listed in Used Languages all models referenced from the output model are listed in the dependencies Extra relations on anything else (source module, source model, dependencies of the source model, languages used in the source model, dependencies of applied generators, languages used in applied Generators) are not added to the output model. Implicit dependencies apply as described. Tests \u00b6 Tests are regular or extended JUnit tests that can be executed within MPS or stand-alone. Test models contain tests, defined by the @tests stereotype. The Stereotype enables the Run Tests entry in the solution and test model context menu. Build language test instruction to search the model for tests. As soon as you are using any concepts from language jetbrains.mps.lang.test , you need to have a TestInfo root node in the same model. The TestInfo node needs to refer to a project to be used to execute the tests. This reference may not use a ${module} , ${language_descriptor} , ${solution_descriptor} , or ${project} builtin path variables. It needs to refer to a project containing the test.","title":"General"},{"location":"mps_internal/deps_and_classpath/#dependencies-and-classpath-in-mps","text":"This page describes the meaning and effect of different types of dependencies within MPS , including the effects on the applicable Java classpath. It describes both the expected state and all bugs deviating from the expectations.","title":"Dependencies and classpath in MPS"},{"location":"mps_internal/deps_and_classpath/#overview","text":"The module pool has all content known to MPS . The modules pool is filled from modules in the current project and all non-project sources . MPS in general cares about dependencies between modules. The dependencies on models only constrain further the dependencies of the modules. Two main types of relations exist: dependencies are needed for any reference to something in another module. Used Languages are needed to use something defined in a language. We refer to relations if we address both types. Other types of dependencies on modules include: Java stubs (in combination with Java libraries ), Java source stubs (in combination with Java source paths ), runtime solutions and accessory models (only available for languages), and languages engaged on generation . Build models abstract Ant files to build and package modules and IDEA plugins . They contain a copy of the relations defined in the modules, and dependencies to other build models and IDEA plugins.","title":"Overview"},{"location":"mps_internal/deps_and_classpath/#mps-plugins","text":"MPS Plugins are automatically loaded according to the solution Kind set in Java module settings. MPS Plugins need to be contained in MPS plugin models.","title":"MPS Plugins"},{"location":"mps_internal/deps_and_classpath/#standaloneplugindescriptor","text":"We need to add a StandalonePluginDescriptor (defined in Language jetbrains.mps.lang.plugin.standalone ) as a root node if a MPS plugin model uses any concept from the language jetbrains.mps.lang.plugin . Other concepts from the language jetbrains.mps.lang.plugin.standalone don\u2019t need a StandalonePluginDescriptor .","title":"StandalonePluginDescriptor"},{"location":"mps_internal/deps_and_classpath/#plugin-disambiguation","text":"The term \u201cplugin\u201d is used at various places throughout MPS . It describes different things: IDEA plugins: a packaged set of contributions to the IntelliJ IDEA platform, which MPS is based upon. MPS plugins: automatically loaded Models. Plugin language aspect: model inside a aanguage defining extension points. Build model plugins: part of the build model language providing new entries for build models.","title":"Plugin disambiguation"},{"location":"mps_internal/deps_and_classpath/#non-project-sources","text":"Non-project sources are global libraries IDEA plugins project libraries common and Java module settings regarding Java classes and Java source files IDEA plugins referenced by a module These directories or jar files are recursively scanned for .mpl (languages), .msd (solutions), and .devkit (devkit) files. If found, the corresponding content is added to the modules pool.","title":"Non-project sources"},{"location":"mps_internal/deps_and_classpath/#java-classpath-versus-relations","text":"The various settings on models and modules specify both the Java classpath and the relations of a model. However, these settings affect classpath and relations in a different way. As a rule of thumb, the classpath has all Java classes reachable through any kind of relation. The Classpath is populated generously. On the contrary, the relations are populated reluctantly, for example, they need to be specified explicitly. The dependency relations on modules and models are completely separated from the used language relations on modules and models. Thus, no dependency requires a Used Language or vice versa.","title":"Java classpath versus relations"},{"location":"mps_internal/deps_and_classpath/#used-languages","text":"No implicitly Used Languages are available except described for generators. Specifically, if LanguageB has an Extends Scope dependency on LanguageA and ModuleC uses LanguageB , LanguageA isn\u2019t a Used Language within ModuleC . You must add LanguageA (containing ConceptA ) to ModuleB\u2019s and contained ModelB\u2019s used languages if and only if ModelB instantiates ConceptA within the IDE . ModelB executes intentions from LanguageA . ModelB requires type checks from LanguageA . ModelB uses editors from LanguageA by selecting an editor hint but not if LanguageA only defines the editor hint. ModuleB is a generator and outputs instance of ConceptA .","title":"Used languages"},{"location":"mps_internal/deps_and_classpath/#executed-generators","text":"GeneratorA contained in LanguageA (containing ConceptA ) will be executed for ModelS (contained in ModuleS ) if and only if ModelS uses LanguageA and contains an instance of ConceptA ModelS lists LanguageA in Languages engaged on generation The preceding conditions match LanguageB containing GeneratorB extending GeneratorA For discussion, we establish a continued scenario: (The Relations listed here are not complete in order to reduce clutter. The complete example is available.) SolutionBase doesn\u2019t change during generation, as LanguageBase doesn\u2019t define any generators. SolutionBaseGen doesn\u2019t change during generation either, as it doesn\u2019t contain any instances from LanguageBaseGen , thus removing LanguageBaseGen from the list of applicable generators, ending up with no generators at all. SolutionBaseGen2 ends up with a transformed NodeBase , as Languages engaged in generation are never removed. SolutionBaseGenExtends ends up with an unchanged NodeBase , but a transformed NodeBase2 . GeneratorBaseExtends gets executed, because LanguageBaseGenExtends is listed in Languages engaged in generation . However, the Dependencies of the Language aren\u2019t considered for selecting the running Generators. In SolutionBaseGenExtends2 both NodeBase and NodeBase2 will be transformed, as LanguageBaseGenExtends2 is listed in Languages engaged in generation and GeneratorBaseExtends2 extends GeneratorBase . Only NodeExtendsGen will be transformed in SolutionExtendsGen , as the only active Generator is GeneratorExtendsGen . The reason is that we found an instance of ConceptExtendsGen contained in the same language as the generator. The Generator doesn\u2019t extend any other applicable Generator. All nodes within SolutionExtendsGen2 get transformed, as an instance of ConceptExtendsGen2 was found, and the generator GeneratorExtendsGen2 contained in the same language extends GeneratorBase .","title":"Executed generators"},{"location":"mps_internal/deps_and_classpath/#generated-relations","text":"Relations on the output model are defined only by the contents of the output model that was created by the generator. Thus, all languages providing the concepts of generated instances are listed in Used Languages all models referenced from the output model are listed in the dependencies Extra relations on anything else (source module, source model, dependencies of the source model, languages used in the source model, dependencies of applied generators, languages used in applied Generators) are not added to the output model. Implicit dependencies apply as described.","title":"Generated relations"},{"location":"mps_internal/deps_and_classpath/#tests","text":"Tests are regular or extended JUnit tests that can be executed within MPS or stand-alone. Test models contain tests, defined by the @tests stereotype. The Stereotype enables the Run Tests entry in the solution and test model context menu. Build language test instruction to search the model for tests. As soon as you are using any concepts from language jetbrains.mps.lang.test , you need to have a TestInfo root node in the same model. The TestInfo node needs to refer to a project to be used to execute the tests. This reference may not use a ${module} , ${language_descriptor} , ${solution_descriptor} , or ${project} builtin path variables. It needs to refer to a project containing the test.","title":"Tests"},{"location":"patterns/language_design/","text":"Language design \u00b6 This page contains tips and articles for patterns regarding the design of MPS languages. Inline Definitions (Specific Languages Blog) Escape hatch (Specific Languages Blog) Externalized names (Specific Languages Blog) Empty lines (Specific Languages Blog) Externalized names (and other common attributes) (F1RE Blog) Multiple generators for same language (F1RE Blog)","title":"Language design"},{"location":"patterns/language_design/#language-design","text":"This page contains tips and articles for patterns regarding the design of MPS languages. Inline Definitions (Specific Languages Blog) Escape hatch (Specific Languages Blog) Externalized names (Specific Languages Blog) Empty lines (Specific Languages Blog) Externalized names (and other common attributes) (F1RE Blog) Multiple generators for same language (F1RE Blog)","title":"Language design"},{"location":"patterns/ui_patterns/","text":"UI Patterns and Anti patterns \u00b6 Go through your editors and check the following list. Texts are readable. The contrast ratio between the background color and the foreground text color should be at least 4.5:1 article . Contrast checkers can also help you. Here are some colors with a high contrast: When using a gray scale color, make sure that the text color doesn\u2019t exceed 48% brightness ( source ). Make also sure to provide different colors for different color schemes (e.g. darcula theme vs light theme). Bad example #1 Bad example #2 Bold and underline aren\u2019t used together. This is an anti-pattern. More information can be found in this article . MPS related summary: Bold important phrases highlighting keywords Italic/Emphasis Used to highlight quotes (some use blockquotes). Foreign words. Underline Used for links CAPS Used for acronyms You use buttons correctly. (Swing) Buttons use appropriate symbols/text to make clear what they do. Buttons can alse be used as up and down keys. Buttons can also be hidden to not disrupt the text editing: Add option to hide buttons (checkbox, editor hint, action, etc.). Clickable elements appear clickable. When elements are clickable, they should appear clickable: They should use an indicator or different style (e.g. underlines and blue or styled like a button). You align collections when possible. Alignment is an important aspect in design ( introduction ). Use vertical grids instead of vertical collections to align cells nicely. It is also very important for readability. You use color for emphasis and to convey information. Not only bold font can be used to emphasize words but also color. Make sure that the used color is correctly associated by the user. Bad example Greyscale editor + grey is associated with disabled content/meta information such as comments. Good example Color is used to distinguish different language features: BLUE for numbers, lila/green for CONSTANTS. You use labels in a consistent way. Labels should be used consistently in the design (e.g. always bold, colon after label), the same goes for key value pairs. There is no best practise for the separation between label and text. Some ideas and common guidelines can be found here . The context of UI elements is consistent. Counterexample: There are 3 buttons next to each other that look similar: One opens an external documentation, the other navigates to a root node and the third one undos a change. This could be confusing and frustrating for the user. A default empty statement exists. There should always be a default concept that acts as an empty line or empty text. It should be editable and support autocompletion. They should have an indicator that they are editable. The easist way is to provide a placeholder value. Bad example Different groups are distinguishable from each other. Groups can be separated for example by whitespace, by drawing a border (box) or drawing brackets around the content. You emphasize non-standard operations/literals. Emphasize special operations or literals to make it clear that they are not. Another good examples in baselanguage are extension methods. Enough paddings surround elements. Make sure there is enough space between the content and its border (padding) otherwhise the editor looks too packed. More information from a design perspective can be found here . You use existing stylesheets. For baselanguage there is BaseLanguageStyle . You can search globally for instances of Stylesheet to find more styles. The font size conveys hierarchy. More information can be found in this beginner\u2019s guide to typographic hierarchy . Example hierarchy (source: Font Size And Weight Matters ) : You use the full window with for your editor. Often times the space in editor components is not good used and a lot of space is left empty on the right side of the window. This can be improved by using multiple groups next to each other or using the right hand side of the screen for some sort of legend for graphics or meta information about the (root) node (e.g. code review). Headers follow general UI principles. The following principles should be followed: hierarchical relationship of ideas consistency readability specificity More information can be found in Technical writing essentials - Headings . Headers are distinguishable from content. Bad example The header and the start of the child concepts use bold font and the same text. In this example the text \u201cOutput\u201d is redundant. The header should be larger in size. A common layout is header-input-output: At the top is the header, then there are the inputs/declarations, followed by the output/body. Make sure to separated this three groups in some ways (such as horizontal lines or empty lines). Mixed example Lines aren\u2019t too thick and not textual. A good maximum width for borders and other lines is 3 pixels. This is just a rough guideline but with thicker lines the design becomes overwhelming. Bad example You don\u2019t emphasize meta/not important information. Good example A smaller font, light gray color or maybe a different font seems to work well. Inherited value can also be shown this way: display them as placeholder values in a light gray color. Don\u2019t emphasize comments by making them bold or stand out in any way. Bad example The reflective editor is never shown. The reflective editor provides a default editor for nodes. The editor is only readonly and should only be used for debugging purposes. Bad example You use The right form of projection for the task in the editor. The right projections are used (text, tables, diagrams..) and different kind of projections are provided when necessary (switchable by menu or editor hints). Example: multiple projections You didn\u2019t forget to enable anti aliasing for custom swing components. When you create a custom component and have a paint-Method, call EditorComponent.turnOnAliasingIfPossible to enable anti aliasing. More information can be found in the Java documentation . All usages of symbols are clear. When using symbols, make sure that the user understands what it means. A Plus symbol might be easy to understand (add, increase), a complex shape that is not usuable used might be not. Common icons can be found for example in the fontawesome icon pack . You abbreviate often used words and symbol. Abbreviate words that are often used in the editor or use symbols. Examples: The Letter \u201cm\u201d or a red star * is often used to mark a field as mandatory. The plus sign \u2295 is used to indicate an \u201cadd\u201d action.","title":"UI patterns"},{"location":"patterns/ui_patterns/#ui-patterns-and-anti-patterns","text":"Go through your editors and check the following list. Texts are readable. The contrast ratio between the background color and the foreground text color should be at least 4.5:1 article . Contrast checkers can also help you. Here are some colors with a high contrast: When using a gray scale color, make sure that the text color doesn\u2019t exceed 48% brightness ( source ). Make also sure to provide different colors for different color schemes (e.g. darcula theme vs light theme). Bad example #1 Bad example #2 Bold and underline aren\u2019t used together. This is an anti-pattern. More information can be found in this article . MPS related summary: Bold important phrases highlighting keywords Italic/Emphasis Used to highlight quotes (some use blockquotes). Foreign words. Underline Used for links CAPS Used for acronyms You use buttons correctly. (Swing) Buttons use appropriate symbols/text to make clear what they do. Buttons can alse be used as up and down keys. Buttons can also be hidden to not disrupt the text editing: Add option to hide buttons (checkbox, editor hint, action, etc.). Clickable elements appear clickable. When elements are clickable, they should appear clickable: They should use an indicator or different style (e.g. underlines and blue or styled like a button). You align collections when possible. Alignment is an important aspect in design ( introduction ). Use vertical grids instead of vertical collections to align cells nicely. It is also very important for readability. You use color for emphasis and to convey information. Not only bold font can be used to emphasize words but also color. Make sure that the used color is correctly associated by the user. Bad example Greyscale editor + grey is associated with disabled content/meta information such as comments. Good example Color is used to distinguish different language features: BLUE for numbers, lila/green for CONSTANTS. You use labels in a consistent way. Labels should be used consistently in the design (e.g. always bold, colon after label), the same goes for key value pairs. There is no best practise for the separation between label and text. Some ideas and common guidelines can be found here . The context of UI elements is consistent. Counterexample: There are 3 buttons next to each other that look similar: One opens an external documentation, the other navigates to a root node and the third one undos a change. This could be confusing and frustrating for the user. A default empty statement exists. There should always be a default concept that acts as an empty line or empty text. It should be editable and support autocompletion. They should have an indicator that they are editable. The easist way is to provide a placeholder value. Bad example Different groups are distinguishable from each other. Groups can be separated for example by whitespace, by drawing a border (box) or drawing brackets around the content. You emphasize non-standard operations/literals. Emphasize special operations or literals to make it clear that they are not. Another good examples in baselanguage are extension methods. Enough paddings surround elements. Make sure there is enough space between the content and its border (padding) otherwhise the editor looks too packed. More information from a design perspective can be found here . You use existing stylesheets. For baselanguage there is BaseLanguageStyle . You can search globally for instances of Stylesheet to find more styles. The font size conveys hierarchy. More information can be found in this beginner\u2019s guide to typographic hierarchy . Example hierarchy (source: Font Size And Weight Matters ) : You use the full window with for your editor. Often times the space in editor components is not good used and a lot of space is left empty on the right side of the window. This can be improved by using multiple groups next to each other or using the right hand side of the screen for some sort of legend for graphics or meta information about the (root) node (e.g. code review). Headers follow general UI principles. The following principles should be followed: hierarchical relationship of ideas consistency readability specificity More information can be found in Technical writing essentials - Headings . Headers are distinguishable from content. Bad example The header and the start of the child concepts use bold font and the same text. In this example the text \u201cOutput\u201d is redundant. The header should be larger in size. A common layout is header-input-output: At the top is the header, then there are the inputs/declarations, followed by the output/body. Make sure to separated this three groups in some ways (such as horizontal lines or empty lines). Mixed example Lines aren\u2019t too thick and not textual. A good maximum width for borders and other lines is 3 pixels. This is just a rough guideline but with thicker lines the design becomes overwhelming. Bad example You don\u2019t emphasize meta/not important information. Good example A smaller font, light gray color or maybe a different font seems to work well. Inherited value can also be shown this way: display them as placeholder values in a light gray color. Don\u2019t emphasize comments by making them bold or stand out in any way. Bad example The reflective editor is never shown. The reflective editor provides a default editor for nodes. The editor is only readonly and should only be used for debugging purposes. Bad example You use The right form of projection for the task in the editor. The right projections are used (text, tables, diagrams..) and different kind of projections are provided when necessary (switchable by menu or editor hints). Example: multiple projections You didn\u2019t forget to enable anti aliasing for custom swing components. When you create a custom component and have a paint-Method, call EditorComponent.turnOnAliasingIfPossible to enable anti aliasing. More information can be found in the Java documentation . All usages of symbols are clear. When using symbols, make sure that the user understands what it means. A Plus symbol might be easy to understand (add, increase), a complex shape that is not usuable used might be not. Common icons can be found for example in the fontawesome icon pack . You abbreviate often used words and symbol. Abbreviate words that are often used in the editor or use symbols. Examples: The Letter \u201cm\u201d or a red star * is often used to mark a field as mandatory. The plus sign \u2295 is used to indicate an \u201cadd\u201d action.","title":"UI Patterns and Anti patterns"},{"location":"patterns/user_experience/","text":"User experience and user interfaces \u00b6 Basics \u00b6 7 Graphic Design Principles to Up-Level your Graphics 7 Gestalt Principles of Design 10 Graphic Design Rules You Should Never Break 20 Most Important UI Design Principles for UI Designer What are the basic rules of user interface design? (quora) Text \u00b6 UX Writing: Handy Tips on Text Improving User Experience The Punctuation Guide Technical Writing Essentials \u2013 Document Design UI \u00b6 Design Better Forms IntelliJ Platform UI Guidelines UX /Usability \u00b6 Ten Usability Heuristics for User Interface Design UX Design: How to Make User Interface Readable Dark theme \u00b6 Use the predefined colors in MPS or define your own colors using the class JBColor with the constructor JBColor(light theme color, dark theme color) . By using this class, it shouldn\u2019t be necessary to verify if the user is using the Darcula theme . The MPS colors already support the light and dark theme because they inherit from JBColor . As seen in the screenshot below, the colors can be different when using the dark theme (for example: the white and black colors). Don\u2019t use hard-coded hex colors or the class Color . Light theme Dark theme Make sure that the foreground color is readable for the chosen background (see preceding screenshots). You can use an online contrast checker tool to verify that the color combination is readable. Example for colors with a good contrast ratio (foreground: black, the ratio can be found after the hex code): If this change isn\u2019t feasible, you can switch to the default theme (useful for RCPs): 1 2 3 4 5 6 class LookAndFeel { void set () { LafManager lafManager = LafManager . getInstance (); QuickChangeLookAndFeel . switchLafAndUpdateUI ( lafManager , LafManagerImpl . getTestInstance (). getDefaultLightLaf (), false ); } } Additional useful resources: ColorUtil (fromHex, darker, brighter, withAlpha, saturate, desaturate\u2026) MPS color definitions: MPSColors.java JBColor. brighter () + JBColor. darker () e.g. new JBColor(JBColor.PINK, JBColor.PINK.darker().darker()) IntelliJ IDEA color definitions: JBColor IntelliJ IDEA platform colors + explanation: JBUI + Platform theme colors","title":"User experience"},{"location":"patterns/user_experience/#user-experience-and-user-interfaces","text":"","title":"User experience and user interfaces"},{"location":"patterns/user_experience/#basics","text":"7 Graphic Design Principles to Up-Level your Graphics 7 Gestalt Principles of Design 10 Graphic Design Rules You Should Never Break 20 Most Important UI Design Principles for UI Designer What are the basic rules of user interface design? (quora)","title":"Basics"},{"location":"patterns/user_experience/#text","text":"UX Writing: Handy Tips on Text Improving User Experience The Punctuation Guide Technical Writing Essentials \u2013 Document Design","title":"Text"},{"location":"patterns/user_experience/#ui","text":"Design Better Forms IntelliJ Platform UI Guidelines","title":"UI"},{"location":"patterns/user_experience/#uxusability","text":"Ten Usability Heuristics for User Interface Design UX Design: How to Make User Interface Readable","title":"UX/Usability"},{"location":"patterns/user_experience/#dark-theme","text":"Use the predefined colors in MPS or define your own colors using the class JBColor with the constructor JBColor(light theme color, dark theme color) . By using this class, it shouldn\u2019t be necessary to verify if the user is using the Darcula theme . The MPS colors already support the light and dark theme because they inherit from JBColor . As seen in the screenshot below, the colors can be different when using the dark theme (for example: the white and black colors). Don\u2019t use hard-coded hex colors or the class Color . Light theme Dark theme Make sure that the foreground color is readable for the chosen background (see preceding screenshots). You can use an online contrast checker tool to verify that the color combination is readable. Example for colors with a good contrast ratio (foreground: black, the ratio can be found after the hex code): If this change isn\u2019t feasible, you can switch to the default theme (useful for RCPs): 1 2 3 4 5 6 class LookAndFeel { void set () { LafManager lafManager = LafManager . getInstance (); QuickChangeLookAndFeel . switchLafAndUpdateUI ( lafManager , LafManagerImpl . getTestInstance (). getDefaultLightLaf (), false ); } } Additional useful resources: ColorUtil (fromHex, darker, brighter, withAlpha, saturate, desaturate\u2026) MPS color definitions: MPSColors.java JBColor. brighter () + JBColor. darker () e.g. new JBColor(JBColor.PINK, JBColor.PINK.darker().darker()) IntelliJ IDEA color definitions: JBColor IntelliJ IDEA platform colors + explanation: JBUI + Platform theme colors","title":"Dark theme"},{"location":"reference/actions/","text":"CommonDataKeys \u00b6 name description Available in MPS CARET Returns a caret instance (in host or injected editor, depending on context). EDITOR Returns the currently focused editor instance. EDITOR_EVEN_IF_INACTIVE Returns an editor even if focus currently is in find bar. EDITOR_VIRTUAL_SPACE Returns whether the current location relates to a virtual space in an editor. HOST_EDITOR Returns a reference to host an editor instance, in case EDITOR key is referring to an injected editor. NAVIGATABLE Returns a Navigatable instance. NAVIGATABLE_ARRAY Returns several navigatables, e.g. PROJECT Returns a project if a project node is selected (in project view) PSI_ELEMENT Returns a PsiElement instance. PSI_FILE Returns the currently selected PsiFile instance. VIRTUAL_FILE Returns a VirtualFile instance. VIRTUAL_FILE_ARRAY Returns several VirtualFile instances PlatformDataKeys \u00b6 name description Available in MPS ACTIONS_SORTER Deprecated. use ActionPromoter CONTENT_MANAGER Returns the managing class that\u2019s responsible for the current component\u2019s content CONTEXT_COMPONENT Returns the component that\u2019s currently in focus. CONTEXT_MENU_POINT Returns a point to guess where to show context menu invoked by key. COPY_PROVIDER Returns the copy provider responsible for copying data. CUT_PROVIDER Returns the cut provider responsible for cutting data. DELETE_ELEMENT_PROVIDER DOMINANT_HINT_AREA_RECTANGLE Returns the position and dimension of a hint. EXPORTER_TO_TEXT_FILE FILE_EDITOR Returns the file FILE_TEXT Returns the text of currently selected file/file revision HELP_ID Returns help id. IS_MODAL_CONTEXT Returns Boolean. TRUE if action is executed in modal context and Boolean. FALSE if action is executed not in modal context. MODALITY_STATE See: Modality and invokeLater() - IntelliJ Platform Plugin SDK NONEMPTY_CONTENT_MANAGER Returns a non empty managing class that\u2019s responsible for the current component\u2019s content PASTE_PROVIDER Returns the paste provider responsible for pasting data. PREDEFINED_TEXT Returns a predefined text value. PROJECT_CONTEXT Returns a project if a project node is selected (in theproject view). PROJECT_FILE_DIRECTORY SEARCH_INPUT_TEXT SELECTED_ITEM Returns a single selection item. SELECTED_ITEMS Returns multi selection items. SOURCE_NAVIGATION_LOCKED SPEED_SEARCH_COMPONENT Returns the speed search component STATUS_BAR Returns the status bar class TOOL_WINDOW Returns the current tool window TREE_EXPANDER UI_DISPOSABLE Returns the class responsible for disposing an UI component","title":"Actions"},{"location":"reference/actions/#commondatakeys","text":"name description Available in MPS CARET Returns a caret instance (in host or injected editor, depending on context). EDITOR Returns the currently focused editor instance. EDITOR_EVEN_IF_INACTIVE Returns an editor even if focus currently is in find bar. EDITOR_VIRTUAL_SPACE Returns whether the current location relates to a virtual space in an editor. HOST_EDITOR Returns a reference to host an editor instance, in case EDITOR key is referring to an injected editor. NAVIGATABLE Returns a Navigatable instance. NAVIGATABLE_ARRAY Returns several navigatables, e.g. PROJECT Returns a project if a project node is selected (in project view) PSI_ELEMENT Returns a PsiElement instance. PSI_FILE Returns the currently selected PsiFile instance. VIRTUAL_FILE Returns a VirtualFile instance. VIRTUAL_FILE_ARRAY Returns several VirtualFile instances","title":"CommonDataKeys"},{"location":"reference/actions/#platformdatakeys","text":"name description Available in MPS ACTIONS_SORTER Deprecated. use ActionPromoter CONTENT_MANAGER Returns the managing class that\u2019s responsible for the current component\u2019s content CONTEXT_COMPONENT Returns the component that\u2019s currently in focus. CONTEXT_MENU_POINT Returns a point to guess where to show context menu invoked by key. COPY_PROVIDER Returns the copy provider responsible for copying data. CUT_PROVIDER Returns the cut provider responsible for cutting data. DELETE_ELEMENT_PROVIDER DOMINANT_HINT_AREA_RECTANGLE Returns the position and dimension of a hint. EXPORTER_TO_TEXT_FILE FILE_EDITOR Returns the file FILE_TEXT Returns the text of currently selected file/file revision HELP_ID Returns help id. IS_MODAL_CONTEXT Returns Boolean. TRUE if action is executed in modal context and Boolean. FALSE if action is executed not in modal context. MODALITY_STATE See: Modality and invokeLater() - IntelliJ Platform Plugin SDK NONEMPTY_CONTENT_MANAGER Returns a non empty managing class that\u2019s responsible for the current component\u2019s content PASTE_PROVIDER Returns the paste provider responsible for pasting data. PREDEFINED_TEXT Returns a predefined text value. PROJECT_CONTEXT Returns a project if a project node is selected (in theproject view). PROJECT_FILE_DIRECTORY SEARCH_INPUT_TEXT SELECTED_ITEM Returns a single selection item. SELECTED_ITEMS Returns multi selection items. SOURCE_NAVIGATION_LOCKED SPEED_SEARCH_COMPONENT Returns the speed search component STATUS_BAR Returns the status bar class TOOL_WINDOW Returns the current tool window TREE_EXPANDER UI_DISPOSABLE Returns the class responsible for disposing an UI component","title":"PlatformDataKeys"},{"location":"reference/exceptions/","text":"What does the dollar sign in error messages mean? This indicates an anomyous class ( more information ). For a list of common Java exceptions have a look at The Exception Hierarchy and Types of Exception in Java with Examples . This list includes documentation for all kinds of exceptions. Here is some more information for exceptions that often occur in MPS : java.util.ConcurrentModificationException java.lang.NullPointerException MPS \u00b6 name example description ModuleLoaderException none Deprecated exception that is not thrown anymore since 2017. ModelReadException *.mps file is corrupt Indicates failure to read model. Is not specific to \u2018default\u2019 persistence. IllegalModelAccessException Accessing a model from a swing button handler (e.g. you can read model only inside read actions). Indicates forbidden operations over a SModel/ SNode ( official documentation ). AssertionError: Taking target node of dynamic reference whose source node is not in a model a node is in detached state The source of a dynamic reference doesn\u2019t belong to a model. Position n is not allowed for X The caret is the first position but the first position was disabled in the style. The caret is at a position that is not allowed. ModuleClassLoaderIsDisposedException A module couldn\u2019t be disposed and it is loaded again. The classloader of a module is disposed. ClassLoader of module could not be found A module can\u2019t be loaded because the classloader can\u2019t be found. Intellij Platform \u00b6 name example description PluginException Usage of deprecated Intellij SDK methods Represents an internal error caused by a plugin. It may happen if the plugin\u2019s code fails with an exception, or if the plugin violates some contract of IntelliJ Platform. AlreadyDisposedException An already disposed objects gets disposed again (e.g. a Project) Exception from class SlowOperations MPS -34029 If you get an exception from this method, then you need to move the computation to the background while also trying to avoid blocking the UI thread as well. Argument for @NotNull parameter must not be null method with @NotNull Annotation is called with null A null check failed ( official documentation ). Action dispatch failed. The execution of an action failed. ExtensionInstantiationException This exception is thrown if some extension (service, extension point) failed to initialize.","title":"Exceptions"},{"location":"reference/exceptions/#mps","text":"name example description ModuleLoaderException none Deprecated exception that is not thrown anymore since 2017. ModelReadException *.mps file is corrupt Indicates failure to read model. Is not specific to \u2018default\u2019 persistence. IllegalModelAccessException Accessing a model from a swing button handler (e.g. you can read model only inside read actions). Indicates forbidden operations over a SModel/ SNode ( official documentation ). AssertionError: Taking target node of dynamic reference whose source node is not in a model a node is in detached state The source of a dynamic reference doesn\u2019t belong to a model. Position n is not allowed for X The caret is the first position but the first position was disabled in the style. The caret is at a position that is not allowed. ModuleClassLoaderIsDisposedException A module couldn\u2019t be disposed and it is loaded again. The classloader of a module is disposed. ClassLoader of module could not be found A module can\u2019t be loaded because the classloader can\u2019t be found.","title":"MPS"},{"location":"reference/exceptions/#intellij-platform","text":"name example description PluginException Usage of deprecated Intellij SDK methods Represents an internal error caused by a plugin. It may happen if the plugin\u2019s code fails with an exception, or if the plugin violates some contract of IntelliJ Platform. AlreadyDisposedException An already disposed objects gets disposed again (e.g. a Project) Exception from class SlowOperations MPS -34029 If you get an exception from this method, then you need to move the computation to the background while also trying to avoid blocking the UI thread as well. Argument for @NotNull parameter must not be null method with @NotNull Annotation is called with null A null check failed ( official documentation ). Action dispatch failed. The execution of an action failed. ExtensionInstantiationException This exception is thrown if some extension (service, extension point) failed to initialize.","title":"Intellij Platform"},{"location":"reference/icons/","text":"Actions \u00b6 The icons can be used in this repository by inserting the corresponding code in a markdown file. Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-actions-addToVcs: :mps-actions-groupByCategory: :mps-actions-groupByModel: :mps-actions-groupByModule: :mps-actions-groupByRoot: :mps-actions-groupSearched: :mps-actions-importModulesFromFolder: :mps-actions-migrationBulb: :mps-actions-searchedNodes: :mps-actions-showCellInExplorer: :mps-actions-showOnlyStrongSubtypes: Ant \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-ant-build: Cell explorer \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-cellExplorer-cellActionKey: :mps-cellExplorer-cellComponent: :mps-cellExplorer-cellConst: :mps-cellExplorer-cellDefault: :mps-cellExplorer-cellError: :mps-cellExplorer-cellExplorer: :mps-cellExplorer-cellKeyMap: :mps-cellExplorer-cellProperty: :mps-cellExplorer-cells: Ant \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-debugger-addBreakpoint: :mps-debugger-deleteBreakpoint: :mps-debugger-goToSource: General \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-general-dependencies: :mps-general-generatorsPriorities: :mps-general-java: :mps-general-modelChecker: :mps-general-runtime: :mps-general-usedLanguages: Generator \u00b6 Code Icon :mps-generator-copy-operation: :mps-generator-input: :mps-generator-macro: :mps-generator-mapping-script: :mps-generator-output: :mps-generator-rule: :mps-generator-rule-consequence: :mps-generator-switch: :mps-generator-template: Idea Integration \u00b6 Code Icon :mps-ideaIntegration-connected: :mps-ideaIntegration-connected_with_errors: :mps-ideaIntegration-disconnected: :mps-ideaIntegration-trying: Nodes/Models \u00b6 Models \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-models-accessoryModel: :mps-nodes-models-aspect: :mps-nodes-models-templatesModel: :mps-nodes-models-tests: Nodes \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-action: :mps-nodes-behavior: :mps-nodes-constraint: :mps-nodes-dataFlow: :mps-nodes-default: :mps-nodes-devkit: :mps-nodes-editor: :mps-nodes-generator: :mps-nodes-language: :mps-nodes-mappingConf: :mps-nodes-model: :mps-nodes-node: :mps-nodes-projectModels: :mps-nodes-reduction: :mps-nodes-refactoring: :mps-nodes-rootNode: :mps-nodes-rule: :mps-nodes-solution: :mps-nodes-structure: :mps-nodes-textGen: :mps-nodes-transient: :mps-nodes-transientDisable: :mps-nodes-action: :mps-nodes-action: :mps-nodes-action: Project Pane \u00b6 Code Icon Icon_2x :mps-projectPane-logicalView: Public \u00b6 Code Icon Icon_2x :mps-public-about: :mps-public-error: :mps-public-mps: MPS2 :mps-public-mps_16: :mps-public-MPS_welcomeScreen: :mps-public-splash: Tool Windows \u00b6 Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-toolWindows-cellExplorer: :mps-toolWindows-default: :mps-toolWindows-modelChecker: :mps-toolWindows-OpenTerminal_13x13: :mps-toolWindows-typeTraceView:","title":"Icons"},{"location":"reference/icons/#actions","text":"The icons can be used in this repository by inserting the corresponding code in a markdown file. Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-actions-addToVcs: :mps-actions-groupByCategory: :mps-actions-groupByModel: :mps-actions-groupByModule: :mps-actions-groupByRoot: :mps-actions-groupSearched: :mps-actions-importModulesFromFolder: :mps-actions-migrationBulb: :mps-actions-searchedNodes: :mps-actions-showCellInExplorer: :mps-actions-showOnlyStrongSubtypes:","title":"Actions"},{"location":"reference/icons/#ant","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-ant-build:","title":"Ant"},{"location":"reference/icons/#cell-explorer","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-cellExplorer-cellActionKey: :mps-cellExplorer-cellComponent: :mps-cellExplorer-cellConst: :mps-cellExplorer-cellDefault: :mps-cellExplorer-cellError: :mps-cellExplorer-cellExplorer: :mps-cellExplorer-cellKeyMap: :mps-cellExplorer-cellProperty: :mps-cellExplorer-cells:","title":"Cell explorer"},{"location":"reference/icons/#ant_1","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-debugger-addBreakpoint: :mps-debugger-deleteBreakpoint: :mps-debugger-goToSource:","title":"Ant"},{"location":"reference/icons/#general","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-general-dependencies: :mps-general-generatorsPriorities: :mps-general-java: :mps-general-modelChecker: :mps-general-runtime: :mps-general-usedLanguages:","title":"General"},{"location":"reference/icons/#generator","text":"Code Icon :mps-generator-copy-operation: :mps-generator-input: :mps-generator-macro: :mps-generator-mapping-script: :mps-generator-output: :mps-generator-rule: :mps-generator-rule-consequence: :mps-generator-switch: :mps-generator-template:","title":"Generator"},{"location":"reference/icons/#idea-integration","text":"Code Icon :mps-ideaIntegration-connected: :mps-ideaIntegration-connected_with_errors: :mps-ideaIntegration-disconnected: :mps-ideaIntegration-trying:","title":"Idea Integration"},{"location":"reference/icons/#nodesmodels","text":"","title":"Nodes/Models"},{"location":"reference/icons/#models","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-models-accessoryModel: :mps-nodes-models-aspect: :mps-nodes-models-templatesModel: :mps-nodes-models-tests:","title":"Models"},{"location":"reference/icons/#nodes","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-nodes-action: :mps-nodes-behavior: :mps-nodes-constraint: :mps-nodes-dataFlow: :mps-nodes-default: :mps-nodes-devkit: :mps-nodes-editor: :mps-nodes-generator: :mps-nodes-language: :mps-nodes-mappingConf: :mps-nodes-model: :mps-nodes-node: :mps-nodes-projectModels: :mps-nodes-reduction: :mps-nodes-refactoring: :mps-nodes-rootNode: :mps-nodes-rule: :mps-nodes-solution: :mps-nodes-structure: :mps-nodes-textGen: :mps-nodes-transient: :mps-nodes-transientDisable: :mps-nodes-action: :mps-nodes-action: :mps-nodes-action:","title":"Nodes"},{"location":"reference/icons/#project-pane","text":"Code Icon Icon_2x :mps-projectPane-logicalView:","title":"Project Pane"},{"location":"reference/icons/#public","text":"Code Icon Icon_2x :mps-public-about: :mps-public-error: :mps-public-mps: MPS2 :mps-public-mps_16: :mps-public-MPS_welcomeScreen: :mps-public-splash:","title":"Public"},{"location":"reference/icons/#tool-windows","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark :mps-toolWindows-cellExplorer: :mps-toolWindows-default: :mps-toolWindows-modelChecker: :mps-toolWindows-OpenTerminal_13x13: :mps-toolWindows-typeTraceView:","title":"Tool Windows"},{"location":"reference/reading_list/","text":"Reading list \u00b6 This page includes some more resources for working with MPS . This article is a bit dated but maybe still useful. It may be better to start to look for resourced at mps.rocks first. Language engineering with MPS \u00b6 If you want to become proficient with language engineering based on MPS , the best approach is to build stuff, work with people and ask questions. The MPS team at itemis is a good environment for doing this. However, we have written a lof of stuff over time. And to increase overall efficiency and to be respectful of the time of the team members, it is recommended to read a few things in advance/in parallel. In this document we describe a list of recommended readings. I suggest you start with the book on DSL Engineering. It\u2019s available as a free PDF from voelter.de/books . In the first part, it discusses some general characterizations of DSLs. Part two is on language design; you should become proficient in the design concerns discussed there. Part three is about language implementation with different tools; you can skip the non- MPS parts, if you want to. The MPS -specific explanations are not quite up to date, but the concepts and approaches explained there are still relevant. One recent extension to MPS we use all the time now is grammar cells, a way to more easily build usable editors for textual notation. We strongly suggest reading this paper: GrammarCells . Next, you may want to take a look at the MPS books by Fabien Campagne . They are essentially a beginner\u2019s guide to language development with MPS . Whenever you want to do something specific, then looking at how to do it in those books is a good starting point for deeper discussions with the colleagues (note: the official documentation might be a better starting point because these book might be outdated in some aspects.) The documentation page also contains videos and tutorials on a variety of specific MPS -related topics. Over the years we have built a lot of useful extensions and utilities to MPS . They are described on the mbeddr platform page. Most of those are not really documented, but you can find examples for all (relevant and stable) utilities in mbeddr itself. Finally, to understand the experiences we have made with MPS over the years, you may want to read this draft paper: Lessons Learned from Developing mbeddr . Working on (extending) mbeddr \u00b6 If, in addition to working with MPS in general, you plan to work on the mbeddr languages, there is more reading we suggest. We suggest reading parts of Markus\u2019 thesis, because it is the most comprehensive and up-to-date description of mbeddr: Generic Tools, Specific Languages . To get a general overview over mbeddr, please read chapter 3. An overview, from a user\u2019s perspective, of the most important features, you can find in chapter 4. Chapters 8 and 9 illustrate how we have implemented mbeddr in MPS . Implicitly, this also gives you a good starting point to understand the structure of mbeddr, as well as how and where to \u201chook in\u201d for building extensions. To learn about specific other topics of mbeddr, such as the integrated verifications, please check out the publications on the mbeddr learn page .","title":"Reading list"},{"location":"reference/reading_list/#reading-list","text":"This page includes some more resources for working with MPS . This article is a bit dated but maybe still useful. It may be better to start to look for resourced at mps.rocks first.","title":"Reading list"},{"location":"reference/reading_list/#language-engineering-with-mps","text":"If you want to become proficient with language engineering based on MPS , the best approach is to build stuff, work with people and ask questions. The MPS team at itemis is a good environment for doing this. However, we have written a lof of stuff over time. And to increase overall efficiency and to be respectful of the time of the team members, it is recommended to read a few things in advance/in parallel. In this document we describe a list of recommended readings. I suggest you start with the book on DSL Engineering. It\u2019s available as a free PDF from voelter.de/books . In the first part, it discusses some general characterizations of DSLs. Part two is on language design; you should become proficient in the design concerns discussed there. Part three is about language implementation with different tools; you can skip the non- MPS parts, if you want to. The MPS -specific explanations are not quite up to date, but the concepts and approaches explained there are still relevant. One recent extension to MPS we use all the time now is grammar cells, a way to more easily build usable editors for textual notation. We strongly suggest reading this paper: GrammarCells . Next, you may want to take a look at the MPS books by Fabien Campagne . They are essentially a beginner\u2019s guide to language development with MPS . Whenever you want to do something specific, then looking at how to do it in those books is a good starting point for deeper discussions with the colleagues (note: the official documentation might be a better starting point because these book might be outdated in some aspects.) The documentation page also contains videos and tutorials on a variety of specific MPS -related topics. Over the years we have built a lot of useful extensions and utilities to MPS . They are described on the mbeddr platform page. Most of those are not really documented, but you can find examples for all (relevant and stable) utilities in mbeddr itself. Finally, to understand the experiences we have made with MPS over the years, you may want to read this draft paper: Lessons Learned from Developing mbeddr .","title":"Language engineering with MPS"},{"location":"reference/reading_list/#working-on-extending-mbeddr","text":"If, in addition to working with MPS in general, you plan to work on the mbeddr languages, there is more reading we suggest. We suggest reading parts of Markus\u2019 thesis, because it is the most comprehensive and up-to-date description of mbeddr: Generic Tools, Specific Languages . To get a general overview over mbeddr, please read chapter 3. An overview, from a user\u2019s perspective, of the most important features, you can find in chapter 4. Chapters 8 and 9 illustrate how we have implemented mbeddr in MPS . Implicitly, this also gives you a good starting point to understand the structure of mbeddr, as well as how and where to \u201chook in\u201d for building extensions. To learn about specific other topics of mbeddr, such as the integrated verifications, please check out the publications on the mbeddr learn page .","title":"Working on (extending) mbeddr"}]}