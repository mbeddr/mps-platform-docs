{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This website collects practical knowledge about MPS and popular MPS platforms. It\u2019s written mainly in the form of a Q&amp;A. It contains questions and answers for  MPS2 MPS and the following platforms:</p> <ul> <li> MPS-extensions </li> <li> mbeddr </li> <li> IETS3 </li> </ul> <p>Click on one of the  buttons to go directly to the corresponding documentation.</p> <p>You can open links starting with http://127.0.0.1 with the built-in HTTP support plugin. Platform-specific instructions are indicated with an icon when possible. Long answers are collapsed by default. Questions marked with  have answers that are educated guesses that are not confirmed.</p> <p>If you have any suggestions, please write a comment at the bottom of the page or open an issue on GitHub.</p> <ul> <li>Latest version: MPS 2021.2 Minimum version in doc: MPS 2021.1.4</li> </ul> <p>If you aren\u2019t already a member, consider joining MPS on Slack.</p> <p>A Twitter user</p> <p>\u201c6 hours of debugging can save you 5 minutes of reading documentation.\u201d</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#aspect","title":"aspect","text":"<ul> <li>Accessory models</li> <li>Action aspect</li> <li>Behavior aspect</li> <li>Constraints aspect</li> <li>Dataflow aspect</li> <li>Documentation aspect</li> <li>Editor aspect</li> <li>Feedback aspect</li> <li>FindUsages aspect</li> <li>Generator aspect</li> <li>Intentions aspect</li> <li>Listener aspect</li> <li>Migration aspect</li> <li>Plugin aspect</li> <li>polymorphic functions aspect</li> <li>Refactorings aspect</li> <li>Scripts aspect</li> <li>Structure aspect</li> <li>Test aspect</li> <li>TextGen aspect</li> <li>Transformations aspect</li> <li>Typ system aspect</li> <li>VCS aspect</li> <li>Virtual Interfaces aspect</li> </ul>"},{"location":"tags/#baselanguage","title":"baselanguage","text":"<ul> <li>Index</li> <li>Deprecation</li> <li>Readability/maintainability</li> <li>Baselanguage and extensions</li> <li>Double dispatch</li> </ul>"},{"location":"tags/#baselanguage-extension","title":"baselanguage-extension","text":"<ul> <li>Baselanguage and extensions</li> <li>Double dispatch</li> </ul>"},{"location":"tags/#beginner","title":"beginner","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#best_practise","title":"best_practise","text":"<ul> <li>Java (Base language)</li> <li>Java style guide</li> <li>Programming principles</li> <li>Index</li> <li>Deprecation</li> <li>Readability/maintainability</li> <li>Language design</li> <li>UI patterns</li> <li>User experience</li> </ul>"},{"location":"tags/#bugs","title":"bugs","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#build","title":"build","text":"<ul> <li>Build</li> </ul>"},{"location":"tags/#classpath","title":"classpath","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#customization","title":"customization","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#dependencies","title":"dependencies","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#dsl","title":"dsl","text":"<ul> <li>Language design</li> </ul>"},{"location":"tags/#examples","title":"examples","text":"<ul> <li>Example actions using locks</li> </ul>"},{"location":"tags/#files","title":"files","text":"<ul> <li>External files and tools</li> </ul>"},{"location":"tags/#general","title":"general","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#generator","title":"generator","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#guide","title":"guide","text":"<ul> <li>Editing this guide</li> <li>Creating a command line tool</li> <li>Development guide</li> </ul>"},{"location":"tags/#iets3","title":"iets3","text":"<ul> <li>KernelF</li> <li>Platform essentials</li> <li>Common concepts and interfaces</li> <li>Contributing</li> <li>Interpreter, coverage and tracing</li> <li>Platform build scripts</li> </ul>"},{"location":"tags/#infrastructure","title":"infrastructure","text":"<ul> <li>CI</li> <li>Git</li> <li>Gradle</li> <li>Building Mbeddr locally</li> <li>Build folder</li> <li>Platform build scripts</li> <li>Gitignore file</li> </ul>"},{"location":"tags/#intellij","title":"intellij","text":"<ul> <li>IntelliJ UI</li> <li>IntelliJ integration</li> <li>IntelliJ SDK</li> <li>Writing an MPS plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Index</li> <li>Actions</li> </ul>"},{"location":"tags/#interactive","title":"interactive","text":"<ul> <li>Console</li> </ul>"},{"location":"tags/#internals","title":"internals","text":"<ul> <li>Index</li> <li>Classloading</li> <li>Editor development</li> <li>IntelliJ UI</li> <li>IntelliJ integration</li> <li>IntelliJ SDK</li> <li>Navigating the MPS sources</li> <li>Utility classes</li> <li>Writing an MPS plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Index</li> <li>Named threads</li> <li>Example actions using locks</li> </ul>"},{"location":"tags/#java","title":"java","text":"<ul> <li>Java (Base language)</li> <li>Java style guide</li> <li>Java Chromium Embedded Framework</li> </ul>"},{"location":"tags/#java_integration","title":"java_integration","text":"<ul> <li>Creating a command line tool</li> <li>Classloading</li> <li>Writing an MPS plugin with Kotlin</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#mac","title":"mac","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#mbeddr","title":"mbeddr","text":"<ul> <li>General</li> <li>BigProject</li> <li>Building Mbeddr locally</li> <li>Development guide</li> <li>Miscellaneous topics</li> <li>Platform essentials</li> <li>Common concepts and interfaces</li> <li>Interpreter, coverage and tracing</li> <li>Platform build scripts</li> <li>Mbeddr MPS utilities</li> </ul>"},{"location":"tags/#mps-extensions","title":"mps-extensions","text":"<ul> <li>Cell Layout</li> <li>General</li> </ul>"},{"location":"tags/#mps_extensions","title":"mps_extensions","text":"<ul> <li>Platform essentials</li> <li>Common concepts and interfaces</li> <li>Platform build scripts</li> </ul>"},{"location":"tags/#mps_language","title":"mps_language","text":"<ul> <li>Build</li> <li>Core languages</li> </ul>"},{"location":"tags/#native","title":"native","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#openapi","title":"openapi","text":"<ul> <li>Open API</li> </ul>"},{"location":"tags/#plugins","title":"plugins","text":"<ul> <li>Plugins</li> <li>Classloading</li> <li>Writing an MPS plugin with Kotlin</li> <li>General</li> </ul>"},{"location":"tags/#reference","title":"reference","text":"<ul> <li>New pages</li> <li>Original authors</li> <li>Utility classes</li> <li>Named threads</li> <li>Tools</li> <li>Actions</li> <li>Core languages</li> <li>Exceptions</li> <li>Extension points</li> <li>Gitignore file</li> <li>Icons</li> <li>Issue trackers</li> <li>Tips for open source maintainers</li> </ul>"},{"location":"tags/#safety","title":"safety","text":"<ul> <li>Language design</li> </ul>"},{"location":"tags/#settings","title":"settings","text":"<ul> <li>Trouble shooting guide</li> </ul>"},{"location":"tags/#solution","title":"solution","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#sources","title":"sources","text":"<ul> <li>Navigating the MPS sources</li> </ul>"},{"location":"tags/#standalone","title":"standalone","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#theory","title":"theory","text":"<ul> <li>Language design</li> </ul>"},{"location":"tags/#tools","title":"tools","text":"<ul> <li>External files and tools</li> </ul>"},{"location":"tags/#troubleshooting","title":"troubleshooting","text":"<ul> <li>Console</li> <li>Debugging</li> <li>General</li> <li>Trouble shooting guide</li> <li>Issue trackers</li> </ul>"},{"location":"tags/#ui","title":"ui","text":"<ul> <li>Index</li> <li>Visual guide</li> <li>Editor development</li> <li>IntelliJ UI</li> <li>Index</li> <li>UI patterns</li> <li>User experience</li> <li>Icons</li> </ul>"},{"location":"tags/#utility","title":"utility","text":"<ul> <li>BigProject</li> <li>Utility classes</li> </ul>"},{"location":"tags/#windows","title":"windows","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#z3","title":"z3","text":"<ul> <li>Language design</li> </ul>"},{"location":"about/editing_this_guide/","title":"Editing this guide","text":"<p>This guide uses MkDocs + Material for MkDocs. The markdown version is Python-Markdown. This page contains the reference for the material theme. Install extra MkDocs plugins in build.gradle + mkdocs.yml.</p> <p>If you are using IntelliJ for editing, it is recommended to install the plugin Grazie Professional for spell checking. </p>","tags":["guide"]},{"location":"about/editing_this_guide/#editing","title":"Editing","text":"<ul> <li>The first header should be <code>#</code>.</li> <li>Inserted images with Markdown, not HTML: <code>![description](url){width=\"600px\"}</code>. Set the with to 600px or 300px, depending on how big or small the image is</li> <li>footnotes syntax</li> <li>The <code>target=_blank</code> attribute and an icon for external links get automatically added to links.</li> </ul> <p>The following symbols must be escaped:</p> <ul> <li>$ is <code>&amp;#36;</code> because it collides with inline Latex blocks.</li> </ul> <p>Trees can be created with the terminal command <code>tree</code>. It supports the <code>-I</code> parameter for excluding folders.</p>","tags":["guide"]},{"location":"about/editing_this_guide/#extensions","title":"Extensions","text":"<p>Besides the Material extensions, the project used the following Pymdown extensions:</p> <ul> <li>pymdownx.betterem: different emphasis handling</li> <li>pymdownx.inlinehilite: inline code highlighting; example: #!js var test = 0;</li> <li>pymdownx.magiclink: linkafies URLs</li> <li>pymdownx.smartsymbols: inserts commonly used Unicode characters via ASCII representations.</li> <li>pymdownx.superfences: extension to Markdown fences</li> <li>pymdownx.details: collapsible elements</li> <li>pymdownx.highlight</li> <li>pymdownx.snippets: include other Markdown or HTML snippets into the current Markdown file</li> <li>pymdownx.keys: simplifies inserting key inputs; example: Ctrl+Alt+Del</li> <li>pymdownx.caret: superscript text via caret</li> <li>pymdownx.mark: enables marking words</li> <li>pymdownx.tilde: subscript text via tilde</li> <li>pymdownx.emoji: support for custom Emojis. Some example icons are in MPS Icons.</li> <li>pymdownx.tasklist: support for lists with checkboxes</li> <li>mk_in_html: support for markdown in HTML</li> <li>pymdownx.magiclink: additional link related features </li> <li>mdx-spanner: enables row and column spanning in Markdown tables</li> </ul>","tags":["guide"]},{"location":"about/editing_this_guide/#macros","title":"Macros","text":"<p>The plugin mkdocs-macros-plugin is activated. You can add variables to the extra section of mkdocs.yml (example: <code>mps_latest</code>) and use the available macros:</p> <ul> <li>contribution_by(GitHub_username)</li> <li>question_by(GitHub_username)</li> <li>answer_by(GitHub_username)</li> <li>mps_url(identifier)</li> <li>image_popup()</li> <li>iets3()</li> <li>mbeddr()</li> <li>mbeddr_platform()</li> <li>mps_extensions()</li> <li>mps</li> </ul> <p>Look through main.py to see how they are implemented.</p> <p>The identifier can start with one of the following special identifiers:</p> <ul> <li>@openapi</li> <li>@mps</li> <li>@baselang</li> <li>@mpsutil</li> <li>@itemis</li> <li>@mbeddr</li> <li>@iets3</li> </ul> <p>The special identifiers get translated to the corresponding package names. Only the last part of the identifier has to be the correct name. The identifier can reference classes, interfaces, concepts, and interface declarations in Base Language, MPS-extensions, mbeddr, and iets3. The rest of the identifier only helps to find the correct node and doesn\u2019t have to be exact.</p> <p>Example: <code>@mps.ClassConcept</code> will find <code>jetbrains.mps.baseLanguage.structure.ClassConcept</code>. When the wrong node is selected, enter more parts of the full qualified name of the node.</p>","tags":["guide"]},{"location":"about/editing_this_guide/#diagrams","title":"Diagrams","text":"<p>Kroki enables support for diagrams (examples). It supports the following diagrams:</p> <ul> <li>BlockDiag</li> <li>BlockDiag (simple block diagrams)</li> <li>SeqDiag (simple sequence diagrams)</li> <li>ActDiag (simple activity diagrams)</li> <li>NwDiag (simple network diagrams)</li> <li>PacketDiag (packet header diagrams)</li> <li>RackDiag (rack diagrams)</li> <li>BPMN</li> <li>Bytefield</li> <li>C4 (with PlantUML)</li> <li>Ditaa</li> <li>Erd</li> <li>Excalidraw</li> <li>GraphViz</li> <li>Mermaid</li> <li>Nomnoml</li> <li>Pikchr</li> <li>PlantUML</li> <li>Structurizr</li> <li>SvgBob</li> <li>UMLet</li> <li>Vega</li> <li>Vega-Lite</li> <li>WaveDrom</li> </ul> <p>They can be embedded by creating a code block and the text <code>kroki-[diagramtype]</code>.</p> <p>The following sections contain ideas for diagrams.</p>","tags":["guide"]},{"location":"about/editing_this_guide/#blockdiag","title":"blockdiag","text":"","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-1","title":"Diagram 1","text":"DiagramCode <pre><code>blockdiag {\norientation = portrait\n\n    R -&gt; A\n    R -&gt; B\n       B -&gt; C\n            C -&gt; E\n       B -&gt; D\n            D -&gt; F\n                 F -&gt; E\n            D -&gt; G\n       A &lt;- C    \n       B -&gt; D\n\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-2","title":"Diagram 2","text":"DiagramCode <pre><code>blockdiag {   \n    default_node_color = 'yellow' \n\n    if [shape=\"roundedbox\", color='white']\n    condition [numbered = 1, shape=\"roundedbox\", description=\"the condition\"]\n    true_block [numbered = 1, shape=\"roundedbox\"]\n    false_block [numbered = 0-1, shape=\"roundedbox\"]\n\n    if -&gt; condition\n    if -&gt; true_block\n    if -&gt; false_block\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#seqdiag","title":"SeqDiag","text":"DiagramCode <pre><code>seqdiag {\n    MPS -&gt; Clipboard [label = \"Copy Node Reference as URL\"]\n    Clipboard -&gt; Browser [label = \"Paste URL\"]\n    http_server [label=\"MPS HTTP Server\"]\n    Browser -&gt; http_server [label = \"Send request\"]\n    http_server -&gt; MPS [label = \"Open Node\"]\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#actdiag","title":"ActDiag","text":"DiagramCode <pre><code>actdiag {\n  createConcept -&gt; createEditor -&gt; createNodes\n\n  lane language {\n    label = \"Language\"\n    createConcept [label = \"Create concept\"]\n    createEditor [label = \"Create editor\"]\n  }\n\n  lane solution {\n    label =\"Solution\"\n    createNodes [label = \"Create nodes\"]\n  }\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#graphviz","title":"Graphviz","text":"DiagramCode <pre><code>digraph finite_state_machine {\n    rankdir=LR;\n        planning -&gt; analysis\n        analysis -&gt; design\n        design -&gt; implementation\n    ti [label=\"testing &amp; integration\"]\n        implementation -&gt; ti\n        ti -&gt; maintenance\n        maintenance -&gt; planning\n}\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#ditaa","title":"Ditaa","text":"DiagramCode <pre><code>      +--------+\n      |        |\n      |  User  |\n      |        |\n      +--------+\n          ^\n  request |\n          v\n  +-------------+\n  |             |\n  |    Kroki    |\n  |             |---+\n  +-------------+   |\n       ^  ^         | inflate\n       |  |         |\n       v  +---------+\n  +-------------+\n  |             |\n  |    Ditaa    |\n  |             |----+\n  +-------------+    |\n             ^       | process\n             |       |\n             +-------+\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#mermaidjs","title":"mermaid.js","text":"DiagramCode <pre><code>graph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#nomnoml","title":"nomnoml","text":"DiagramCode <pre><code>[Pirate|eyeCount: Int|raid();pillage()|\n  [beard]--[parrot]\n  [beard]-:&gt;[foul mouth]\n]\n\n[&lt;table&gt;mischief | bawl | sing || yell | drink]\n\n[&lt;abstract&gt;Marauder]&lt;:--[Pirate]\n[Pirate]- 0..7[mischief]\n[jollyness]-&gt;[Pirate]\n[jollyness]-&gt;[rum]\n[jollyness]-&gt;[singing]\n[Pirate]-&gt; *[rum|tastiness: Int|swig()]\n[Pirate]-&gt;[singing]\n[singing]&lt;-&gt;[rum]\n\n[&lt;start&gt;st]-&gt;[&lt;state&gt;plunder]\n[plunder]-&gt;[&lt;choice&gt;more loot]\n[more loot]-&gt;[st]\n[more loot] no -&gt;[&lt;end&gt;e]\n\n[&lt;actor&gt;Sailor] - [&lt;usecase&gt;shiver me;timbers]\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#plantuml","title":"plantUML","text":"","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-1_1","title":"Diagram 1","text":"DiagramCode <pre><code>@startuml\nleft to right direction\nskinparam packageStyle rectangle\nskinparam monochrome true\nactor customer\nactor clerk\nrectangle checkout {\n  customer -- (checkout)\n  (checkout) .&gt; (payment) : include\n  (help) .&gt; (checkout) : extends\n  (checkout) -- clerk\n}\n@enduml\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-2_1","title":"Diagram 2","text":"DiagramCode <pre><code>@startwbs\nskinparam monochrome true\n* Business Process Modelling WBS\n** Launch the project\n*** Complete Stakeholder Research\n*** Initial Implementation Plan\n** Design phase\n*** Model of AsIs Processes Completed\n**** Model of AsIs Processes Completed1\n**** Model of AsIs Processes Completed2\n*** Measure AsIs performance metrics\n*** Identify Quick Wins\n** Complete innovate phase\n@endwbs\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#bpmn","title":"BPMN","text":"DiagramCode <p>``` &lt;?xml version=\u201d1.0\u201d encoding=\u201dUTF-8\u201d?&gt;  OrderReceivedEvent _6-652 _6-674 CalmCustomerTask _6-463 _6-514 _6-565 _6-616 _6-630 _6-630 _6-691 _6-693 _6-691 _6-746 _6-748 _6-748 _6-746 _6-693 _6-632 _6-632 _6-634 _6-634 _6-636 _6-636 _6-125 _6-125 _6-178 _6-178 _6-420 _6-420 _6-430 _6-422 _6-424 _6-422 _6-428 _6-424 _6-426 _6-426 _6-430 _6-428 _6-434 _6-434 _6-436 _6-436          &lt;di:waypoint x=\u201d834\u201d y=\u201d111\u201d### plantUML","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-1_2","title":"Diagram 1","text":"DiagramCode <pre><code>@startuml\nleft to right direction\nskinparam packageStyle rectangle\nskinparam monochrome true\nactor customer\nactor clerk\nrectangle checkout {\n  customer -- (checkout)\n  (checkout) .&gt; (payment) : include\n  (help) .&gt; (checkout) : extends\n  (checkout) -- clerk\n}\n@enduml\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#diagram-2_2","title":"Diagram 2","text":"DiagramCode <pre><code>@startwbs\nskinparam monochrome true\n* Business Process Modelling WBS\n** Launch the project\n*** Complete Stakeholder Research\n*** Initial Implementation Plan\n** Design phase\n*** Model of AsIs Processes Completed\n**** Model of AsIs Processes Completed1\n**** Model of AsIs Processes Completed2\n*** Measure AsIs performance metrics\n*** Identify Quick Wins\n** Complete innovate phase\n@endwbs\n</code></pre>","tags":["guide"]},{"location":"about/editing_this_guide/#bpmn_1","title":"BPMN","text":"DiagramCode <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;semantic:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:semantic=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" id=\"_1275940932088\" targetNamespace=\"http://www.trisotech.com/definitions/_1275940932088\" exporter=\"Camunda Modeler\" exporterVersion=\"1.16.0\"&gt;\n  &lt;semantic:message id=\"_1275940932310\" /&gt;\n  &lt;semantic:message id=\"_1275940932433\" /&gt;\n  &lt;semantic:process id=\"_6-1\" isExecutable=\"false\"&gt;\n    &lt;semantic:laneSet id=\"ls_6-438\"&gt;\n      &lt;semantic:lane id=\"_6-650\" name=\"clerk\"&gt;\n        &lt;semantic:flowNodeRef&gt;OrderReceivedEvent&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-652&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-674&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;CalmCustomerTask&lt;/semantic:flowNodeRef&gt;\n      &lt;/semantic:lane&gt;\n      &lt;semantic:lane id=\"_6-446\" name=\"pizza chef\"&gt;\n        &lt;semantic:flowNodeRef&gt;_6-463&lt;/semantic:flowNodeRef&gt;\n      &lt;/semantic:lane&gt;\n      &lt;semantic:lane id=\"_6-448\" name=\"delivery boy\"&gt;\n        &lt;semantic:flowNodeRef&gt;_6-514&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-565&lt;/semantic:flowNodeRef&gt;\n        &lt;semantic:flowNodeRef&gt;_6-616&lt;/semantic:flowNodeRef&gt;\n      &lt;/semantic:lane&gt;\n    &lt;/semantic:laneSet&gt;\n    &lt;semantic:startEvent id=\"OrderReceivedEvent\" name=\"Order received\"&gt;\n      &lt;semantic:outgoing&gt;_6-630&lt;/semantic:outgoing&gt;\n      &lt;semantic:messageEventDefinition messageRef=\"_1275940932310\" /&gt;\n    &lt;/semantic:startEvent&gt;\n    &lt;semantic:parallelGateway id=\"_6-652\" name=\"\"&gt;\n      &lt;semantic:incoming&gt;_6-630&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-691&lt;/semantic:outgoing&gt;\n      &lt;semantic:outgoing&gt;_6-693&lt;/semantic:outgoing&gt;\n    &lt;/semantic:parallelGateway&gt;\n    &lt;semantic:intermediateCatchEvent id=\"_6-674\" name=\"\u201ewhere is my pizza?\u201c\"&gt;\n      &lt;semantic:incoming&gt;_6-691&lt;/semantic:incoming&gt;\n      &lt;semantic:incoming&gt;_6-746&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-748&lt;/semantic:outgoing&gt;\n      &lt;semantic:messageEventDefinition messageRef=\"_1275940932433\" /&gt;\n    &lt;/semantic:intermediateCatchEvent&gt;\n    &lt;semantic:task id=\"CalmCustomerTask\" name=\"Calm customer\"&gt;\n      &lt;semantic:incoming&gt;_6-748&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-746&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-463\" name=\"Bake the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-693&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-632&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-514\" name=\"Deliver the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-632&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-634&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-565\" name=\"Receive payment\"&gt;\n      &lt;semantic:incoming&gt;_6-634&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-636&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:endEvent id=\"_6-616\" name=\"\"&gt;\n      &lt;semantic:incoming&gt;_6-636&lt;/semantic:incoming&gt;\n      &lt;semantic:terminateEventDefinition /&gt;\n    &lt;/semantic:endEvent&gt;\n    &lt;semantic:sequenceFlow id=\"_6-630\" name=\"\" sourceRef=\"OrderReceivedEvent\" targetRef=\"_6-652\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-632\" name=\"\" sourceRef=\"_6-463\" targetRef=\"_6-514\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-634\" name=\"\" sourceRef=\"_6-514\" targetRef=\"_6-565\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-636\" name=\"\" sourceRef=\"_6-565\" targetRef=\"_6-616\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-691\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-674\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-693\" name=\"\" sourceRef=\"_6-652\" targetRef=\"_6-463\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-746\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-674\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-748\" name=\"\" sourceRef=\"_6-674\" targetRef=\"CalmCustomerTask\" /&gt;\n  &lt;/semantic:process&gt;\n  &lt;semantic:message id=\"_1275940932198\" /&gt;\n  &lt;semantic:process id=\"_6-2\" isExecutable=\"false\"&gt;\n    &lt;semantic:startEvent id=\"_6-61\" name=\"Hungry for pizza\"&gt;\n      &lt;semantic:outgoing&gt;_6-125&lt;/semantic:outgoing&gt;\n    &lt;/semantic:startEvent&gt;\n    &lt;semantic:task id=\"SelectAPizzaTask\" name=\"Select a pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-125&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-178&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-127\" name=\"Order a pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-178&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-420&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:eventBasedGateway id=\"_6-180\" name=\"\"&gt;\n      &lt;semantic:incoming&gt;_6-420&lt;/semantic:incoming&gt;\n      &lt;semantic:incoming&gt;_6-430&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-422&lt;/semantic:outgoing&gt;\n      &lt;semantic:outgoing&gt;_6-424&lt;/semantic:outgoing&gt;\n    &lt;/semantic:eventBasedGateway&gt;\n    &lt;semantic:intermediateCatchEvent id=\"_6-202\" name=\"pizza received\"&gt;\n      &lt;semantic:incoming&gt;_6-422&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-428&lt;/semantic:outgoing&gt;\n      &lt;semantic:messageEventDefinition messageRef=\"_1275940932198\" /&gt;\n    &lt;/semantic:intermediateCatchEvent&gt;\n    &lt;semantic:intermediateCatchEvent id=\"_6-219\" name=\"60 minutes\"&gt;\n      &lt;semantic:incoming&gt;_6-424&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-426&lt;/semantic:outgoing&gt;\n      &lt;semantic:timerEventDefinition&gt;\n        &lt;semantic:timeDate /&gt;\n      &lt;/semantic:timerEventDefinition&gt;\n    &lt;/semantic:intermediateCatchEvent&gt;\n    &lt;semantic:task id=\"_6-236\" name=\"Ask for the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-426&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-430&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-304\" name=\"Pay the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-428&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-434&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:task id=\"_6-355\" name=\"Eat the pizza\"&gt;\n      &lt;semantic:incoming&gt;_6-434&lt;/semantic:incoming&gt;\n      &lt;semantic:outgoing&gt;_6-436&lt;/semantic:outgoing&gt;\n    &lt;/semantic:task&gt;\n    &lt;semantic:endEvent id=\"_6-406\" name=\"Hunger satisfied\"&gt;\n      &lt;semantic:incoming&gt;_6-436&lt;/semantic:incoming&gt;\n    &lt;/semantic:endEvent&gt;\n    &lt;semantic:sequenceFlow id=\"_6-125\" name=\"\" sourceRef=\"_6-61\" targetRef=\"SelectAPizzaTask\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-178\" name=\"\" sourceRef=\"SelectAPizzaTask\" targetRef=\"_6-127\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-420\" name=\"\" sourceRef=\"_6-127\" targetRef=\"_6-180\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-422\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-202\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-424\" name=\"\" sourceRef=\"_6-180\" targetRef=\"_6-219\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-426\" name=\"\" sourceRef=\"_6-219\" targetRef=\"_6-236\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-428\" name=\"\" sourceRef=\"_6-202\" targetRef=\"_6-304\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-430\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-180\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-434\" name=\"\" sourceRef=\"_6-304\" targetRef=\"_6-355\" /&gt;\n    &lt;semantic:sequenceFlow id=\"_6-436\" name=\"\" sourceRef=\"_6-355\" targetRef=\"_6-406\" /&gt;\n  &lt;/semantic:process&gt;\n  &lt;semantic:collaboration id=\"C1275940932557\"&gt;\n    &lt;semantic:participant id=\"_6-53\" name=\"Pizza Customer\" processRef=\"_6-2\" /&gt;\n    &lt;semantic:participant id=\"_6-438\" name=\"Pizza vendor\" processRef=\"_6-1\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-638\" name=\"pizza order\" sourceRef=\"_6-127\" targetRef=\"OrderReceivedEvent\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-642\" name=\"\" sourceRef=\"_6-236\" targetRef=\"_6-674\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-646\" name=\"receipt\" sourceRef=\"_6-565\" targetRef=\"_6-304\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-648\" name=\"money\" sourceRef=\"_6-304\" targetRef=\"_6-565\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-640\" name=\"pizza\" sourceRef=\"_6-514\" targetRef=\"_6-202\" /&gt;\n    &lt;semantic:messageFlow id=\"_6-750\" name=\"\" sourceRef=\"CalmCustomerTask\" targetRef=\"_6-236\" /&gt;\n  &lt;/semantic:collaboration&gt;\n  &lt;bpmndi:BPMNDiagram id=\"Trisotech.Visio-_6\" name=\"Untitled Diagram\" documentation=\"\" resolution=\"96.00000267028808\"&gt;\n    &lt;bpmndi:BPMNPlane bpmnElement=\"C1275940932557\"&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6-53\" bpmnElement=\"_6-53\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"12\" y=\"12\" width=\"1044\" height=\"294\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6-438\" bpmnElement=\"_6-438\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"12\" y=\"372\" width=\"905\" height=\"337\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-650\" bpmnElement=\"_6-650\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"42\" y=\"372\" width=\"875\" height=\"114\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-446\" bpmnElement=\"_6-446\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"42\" y=\"486\" width=\"875\" height=\"114\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-448\" bpmnElement=\"_6-448\" isHorizontal=\"true\"&gt;\n        &lt;dc:Bounds x=\"42\" y=\"600\" width=\"875\" height=\"109\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6_OrderReceivedEvent\" bpmnElement=\"OrderReceivedEvent\"&gt;\n        &lt;dc:Bounds x=\"79\" y=\"405\" width=\"30\" height=\"30\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-652\" bpmnElement=\"_6-652\"&gt;\n        &lt;dc:Bounds x=\"140\" y=\"399\" width=\"42\" height=\"42\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-674\" bpmnElement=\"_6-674\"&gt;\n        &lt;dc:Bounds x=\"218\" y=\"404\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6_CalmCustomerTask\" bpmnElement=\"CalmCustomerTask\"&gt;\n        &lt;dc:Bounds x=\"286\" y=\"386\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-463\" bpmnElement=\"_6-463\"&gt;\n        &lt;dc:Bounds x=\"252\" y=\"521\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-514\" bpmnElement=\"_6-514\"&gt;\n        &lt;dc:Bounds x=\"464\" y=\"629\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-565\" bpmnElement=\"_6-565\"&gt;\n        &lt;dc:Bounds x=\"603\" y=\"629\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-616\" bpmnElement=\"_6-616\"&gt;\n        &lt;dc:Bounds x=\"722\" y=\"647\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-61\" bpmnElement=\"_6-61\"&gt;\n        &lt;dc:Bounds x=\"66\" y=\"96\" width=\"30\" height=\"30\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-74\" bpmnElement=\"SelectAPizzaTask\"&gt;\n        &lt;dc:Bounds x=\"145\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-127\" bpmnElement=\"_6-127\"&gt;\n        &lt;dc:Bounds x=\"265\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-180\" bpmnElement=\"_6-180\"&gt;\n        &lt;dc:Bounds x=\"378\" y=\"90\" width=\"42\" height=\"42\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-202\" bpmnElement=\"_6-202\"&gt;\n        &lt;dc:Bounds x=\"647\" y=\"95\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-219\" bpmnElement=\"_6-219\"&gt;\n        &lt;dc:Bounds x=\"448\" y=\"184\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-236\" bpmnElement=\"_6-236\"&gt;\n        &lt;dc:Bounds x=\"517\" y=\"166\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-304\" bpmnElement=\"_6-304\"&gt;\n        &lt;dc:Bounds x=\"726\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-355\" bpmnElement=\"_6-355\"&gt;\n        &lt;dc:Bounds x=\"834\" y=\"77\" width=\"83\" height=\"68\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNShape id=\"Trisotech.Visio__6__6-406\" bpmnElement=\"_6-406\"&gt;\n        &lt;dc:Bounds x=\"956\" y=\"95\" width=\"32\" height=\"32\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNShape&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-640\" bpmnElement=\"_6-640\"&gt;\n        &lt;di:waypoint x=\"506\" y=\"629\" /&gt;\n        &lt;di:waypoint x=\"506\" y=\"384\" /&gt;\n        &lt;di:waypoint x=\"663\" y=\"384\" /&gt;\n        &lt;di:waypoint x=\"663\" y=\"127\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-630\" bpmnElement=\"_6-630\"&gt;\n        &lt;di:waypoint x=\"109\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"140\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-691\" bpmnElement=\"_6-691\"&gt;\n        &lt;di:waypoint x=\"182\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"200\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"218\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-648\" bpmnElement=\"_6-648\"&gt;\n        &lt;di:waypoint x=\"754\" y=\"145\" /&gt;\n        &lt;di:waypoint x=\"754\" y=\"408\" /&gt;\n        &lt;di:waypoint x=\"630\" y=\"408\" /&gt;\n        &lt;di:waypoint x=\"631\" y=\"629\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-422\" bpmnElement=\"_6-422\"&gt;\n        &lt;di:waypoint x=\"420\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"438\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"647\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-646\" bpmnElement=\"_6-646\" messageVisibleKind=\"non_initiating\"&gt;\n        &lt;di:waypoint x=\"658\" y=\"629\" /&gt;\n        &lt;di:waypoint x=\"658\" y=\"432\" /&gt;\n        &lt;di:waypoint x=\"782\" y=\"432\" /&gt;\n        &lt;di:waypoint x=\"782\" y=\"145\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-428\" bpmnElement=\"_6-428\"&gt;\n        &lt;di:waypoint x=\"679\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"726\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-748\" bpmnElement=\"_6-748\"&gt;\n        &lt;di:waypoint x=\"250\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"268\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"286\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-420\" bpmnElement=\"_6-420\"&gt;\n        &lt;di:waypoint x=\"348\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"366\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"378\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-636\" bpmnElement=\"_6-636\"&gt;\n        &lt;di:waypoint x=\"686\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"704\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"722\" y=\"663\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-750\" bpmnElement=\"_6-750\"&gt;\n        &lt;di:waypoint x=\"328\" y=\"386\" /&gt;\n        &lt;di:waypoint x=\"328\" y=\"348\" /&gt;\n        &lt;di:waypoint x=\"572\" y=\"348\" /&gt;\n        &lt;di:waypoint x=\"572\" y=\"234\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-436\" bpmnElement=\"_6-436\"&gt;\n        &lt;di:waypoint x=\"918\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"936\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"956\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-632\" bpmnElement=\"_6-632\"&gt;\n        &lt;di:waypoint x=\"335\" y=\"555\" /&gt;\n        &lt;di:waypoint x=\"353\" y=\"555\" /&gt;\n        &lt;di:waypoint x=\"353\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"464\" y=\"663\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-634\" bpmnElement=\"_6-634\"&gt;\n        &lt;di:waypoint x=\"548\" y=\"663\" /&gt;\n        &lt;di:waypoint x=\"603\" y=\"663\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-125\" bpmnElement=\"_6-125\"&gt;\n        &lt;di:waypoint x=\"96\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"114\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"145\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-430\" bpmnElement=\"_6-430\"&gt;\n        &lt;di:waypoint x=\"600\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"618\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"618\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"576\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"549\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"360\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"360\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"378\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-642\" bpmnElement=\"_6-642\"&gt;\n        &lt;di:waypoint x=\"545\" y=\"234\" /&gt;\n        &lt;di:waypoint x=\"545\" y=\"324\" /&gt;\n        &lt;di:waypoint x=\"234\" y=\"324\" /&gt;\n        &lt;di:waypoint x=\"234\" y=\"404\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-424\" bpmnElement=\"_6-424\"&gt;\n        &lt;di:waypoint x=\"399\" y=\"132\" /&gt;\n        &lt;di:waypoint x=\"399\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"448\" y=\"200\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-638\" bpmnElement=\"_6-638\"&gt;\n        &lt;di:waypoint x=\"306\" y=\"145\" /&gt;\n        &lt;di:waypoint x=\"306\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"94\" y=\"252\" /&gt;\n        &lt;di:waypoint x=\"94\" y=\"405\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-426\" bpmnElement=\"_6-426\"&gt;\n        &lt;di:waypoint x=\"480\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"498\" y=\"200\" /&gt;\n        &lt;di:waypoint x=\"517\" y=\"200\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-693\" bpmnElement=\"_6-693\"&gt;\n        &lt;di:waypoint x=\"161\" y=\"441\" /&gt;\n        &lt;di:waypoint x=\"161\" y=\"556\" /&gt;\n        &lt;di:waypoint x=\"252\" y=\"555\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-178\" bpmnElement=\"_6-178\"&gt;\n        &lt;di:waypoint x=\"228\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"265\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-746\" bpmnElement=\"_6-746\"&gt;\n        &lt;di:waypoint x=\"370\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"386\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"386\" y=\"474\" /&gt;\n        &lt;di:waypoint x=\"191\" y=\"474\" /&gt;\n        &lt;di:waypoint x=\"191\" y=\"420\" /&gt;\n        &lt;di:waypoint x=\"218\" y=\"420\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n      &lt;bpmndi:BPMNEdge id=\"Trisotech.Visio__6__6-434\" bpmnElement=\"_6-434\"&gt;\n        &lt;di:waypoint x=\"810\" y=\"111\" /&gt;\n        &lt;di:waypoint x=\"834\" y=\"111\" /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n    &lt;/bpmndi:BPMNPlane&gt;\n  &lt;/bpmndi:BPMNDiagram&gt;\n&lt;/semantic:definitions&gt;\n``` /&gt;\n        &lt;bpmndi:BPMNLabel /&gt;\n      &lt;/bpmndi:BPMNEdge&gt;\n    &lt;/bpmndi:BPMNPlane&gt;\n  &lt;/bpmndi:BPMNDiagram&gt;\n&lt;/semantic:definitions&gt;\n</code></pre>","tags":["guide"]},{"location":"about/new_pages/","title":"New pages","text":"<p>This page lists all new pages since August 2022.</p>","tags":["reference"]},{"location":"about/new_pages/#july-2023","title":"July 2023","text":"<ul> <li>Home: Overcoming obstacle</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#june-2023","title":"June 2023","text":"<ul> <li>Reference: Being a good developer</li> <li>Build: Advanced GitHub workflow</li> <li>MPS internals: Platform UI inspector</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#may-2023","title":"May 2023","text":"<ul> <li>Languages: Cell Layout</li> <li>Home: Performance</li> <li>Platform essentials: Testing</li> <li>Platform essentials: Accessing the project</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#march-2023","title":"March 2023","text":"<ul> <li>Reference: included libraries</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#february-2023","title":"February 2023","text":"<ul> <li>Reference: standard plugins</li> <li>MPS internals: File format</li> <li>Build: TeamCity</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#january-2023","title":"January 2023","text":"<ul> <li>Java design patterns in MPS sources</li> <li>Platform essentials: How everything is connected</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#december-2022","title":"December 2022","text":"<ul> <li>Languages: KernelF</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#november-2022","title":"November 2022","text":"<ul> <li>MPS internals: Editor development</li> <li>Platform essentials: Build folder</li> <li>Platform essentials: Mbeddr MPS utilities</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#october-2022","title":"October 2022","text":"<ul> <li>Reference: Issue trackers</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#september-2022","title":"September 2022","text":"<ul> <li>What happens on MPS startup (2021.1.4)</li> </ul>","tags":["reference"]},{"location":"about/new_pages/#august-2022","title":"August 2022","text":"<ul> <li>platform essentials: platform build scripts</li> <li>Reference: Gitignore file</li> <li>Reference: Core languages</li> <li>Home: Visual guide</li> <li>Reference: MPS extension points</li> <li>Platform essentials: Common concepts and interfaces</li> <li>Platform essentials: Contributing</li> <li>Platform essentials: Building mbeddr locally</li> <li>Platform essentials: Interpreters</li> <li>MPS internal: Writing MPS plugins with Kotlin</li> <li>Reference: Tips for OS maintainers</li> <li>MPS internal: IntelliJ integration</li> <li>MPS internal: JCEF</li> <li>MPS internal: Navigating the MPS sources</li> </ul>","tags":["reference"]},{"location":"about/original_authors/","title":"Original authors","text":"<p>This site includes documents and contributions from different sites. If you have contributed content and aren\u2019t listed on this page, please add yourself. This repository includes knowledge of the following people (and probably more) in alphabetical order:</p> <ul> <li>@abstraktor (internal knowledge base)</li> <li>@AlexeiQ (mbeddr wiki, internal knowledge base)</li> <li>@arimer (internal knowledge base)</li> <li>@coolya (mbeddr wiki,internal knowledge base)</li> <li>@dbinkele (internal knowledge base)</li> <li>@DomenikP (mbeddr wiki)</li> <li>@enikao (mbeddr wiki)</li> <li>@hbaechmann (internal knowledge base)</li> <li>@itnef (internal project)</li> <li>@JanMosigItemis (mbeddr wiki)</li> <li>@joao-silveira (answered questions)</li> <li>@jonaskraemer (internal knowledge base)</li> <li>@joswarmer (mbeddr wiki)</li> <li>@kbirken (mbeddr wiki)</li> <li>@krinara86 (mbeddr wiki)</li> <li>@markusvoelter (mbeddr wiki)</li> <li>@sergej-koscejev (mbeddr wiki,answered questions)</li> <li>@slisson (answers to many questions, internal knowledge base)</li> <li>@szabta89 (mbeddr wiki)</li> <li>@till-f (mbeddr wiki)</li> <li>@wsafonov (internal knowledge base, answered questions)</li> </ul>","tags":["reference"]},{"location":"aspects/accessory_models/","title":"Accessory models","text":"<ul> <li>official documentation</li> <li>Adding builtins for an existing language(Specific Languages\u2019 blog)</li> </ul> <p>How do accessory models and utility models differ in terms of dependencies?</p> <p>Utility models are models of a language that don\u2019t have one of the names reserved for the aspects. There is nothing special about them regarding dependencies. Accessory models are automatically part of the \u201cimported models\u201d if you add the language to the \u201cused languages\u201d.</p>","tags":["aspect"]},{"location":"aspects/actions/","title":"Action aspect","text":"<p>The action aspect defines node factories and copy/paste related handlers.</p> <p>Are node factories used when calling new node? <p>No. More information can be found in Editor Actions | MPS.</p> <p>Where can you find all key mappings for the editor?</p> <p>Windows and Mac shortcuts for editor actions can be found in MPSEditorActions.xml.</p> Why is a custom action map not executed on a CellModel_Collection? <p>In MPS I have the possibility to reference an action map from an editor collection cell.</p> <p></p> <p>However it seems like my defined actions are never executed when the editor is used. Why is this so and how to fix it?</p> <p>Reason for the Problem</p> <p>In general, the applied actions should be invoked and executed. However, depending on the content of the collection cells, MPS might generate some default actions which will override your custom actions.</p> <p>Example</p> <p>You have a read-only model access cell inside the collection cell:</p> <p></p> <p>In this case, the internal MPS generator for <code>CellModel_ReadOnlyModelAccessor</code> will automatically generate and register some default actions like delete/backspace   which in the end will prohibit your custom action to be applied.</p> <p>Solution</p> <p>You can use the cell explorer (Language Debug \u2192 Show Cell in Explorer) to see which actions are defined for a cell. Deactivate the automatically applied action with the help of custom editor cells(CellModel_CustomFactory). You can use <code>CellModel_CustomFactory</code> to wrap the cells in your collection which generate unwanted actions and deactivate them.</p> <p></p> <p><sub>contributed by: @arimer<sub> <p>Can you create a copy-paste handler/paste wrapper for arbitrary concepts?</p> <p>Yes, the handlers can be created for any concept, e.g. ClassConcept. The language containing the handler doesn\u2019t even have to be used in the model.</p> <p>How can I call the copy and paste handler programmatically?</p> <ul> <li>Copy: <code>DataTransferManager.getInstance().preProcessNode()</code></li> <li>Paste: <code>DataTransferManager.getInstance().postProcessNode()</code></li> </ul> <p>CopyPasteUtil can help you with those two actions.</p> <p>I have an interface <code>IStatement</code>and two concepts <code>StatementA</code> and <code>StatementB</code> that implement the interface. I paste a node of concept <code>StatementA</code> into a node of concept<code>StatementB</code> into a role that accepts <code>IStatement</code>. Why is the paste wrapper not called?</p> <p>A paste wrapper only modifies the pasted node if it can change the source concept to the target concept and if the pasted node is not already an instance of the target concept. In the described case, the node of concept <code>StatementA</code> is already an instance of <code>IStatement</code>, that\u2019s why the paste wrapper is not called.</p>","tags":["aspect"]},{"location":"aspects/behavior/","title":"Behavior aspect","text":"<p>The behavior aspect can be used for defining methods for the concepts of the language.</p> <ul> <li>official documentation</li> </ul>","tags":["aspect"]},{"location":"aspects/behavior/#general","title":"General","text":"<p>Can you use asynchronous code in behavior methods such as calling external tools?</p> <p>Be careful when doing so. Make sure to not mix concurrent locking aspects such as write and read actions with behavior code.  It should always be assumed that you have the correct lock in these methods. Move the code concerning the concurrent access for example into a background task. More information can be found in Progress indicators | MPS.</p> <p>Where can you save temporary information about nodes?</p> <p>Consider saving temporary data about nodes in annotations and user objects (node/.putUserObject, node/.getUserObject) instead of introducing properties.  You can store and access Java objects in <code>SNode::putUserObject()</code> as key-value pairs) where you normally could not access them in the MPS context, e.g. storing them as node members and access them in an editor, a checking rule or anything else. This approach is difficult to trace and maintain and should only be used in exceptional cases. For the generator, consult the section Transferring User Data of the generator documentation.</p> How to mark a constructor-created child optional? (created by a light quotation) <p>Example:</p> <p></p> <p>Solutions:</p> <ul> <li>Initialize it with <code>null</code> in the light quotation.</li> <li>Create it without a light quotation.</li> <li>Allow the child to be optional (<code>[0..1]</code>).</li> </ul> <p>How can you delete a child node from a node where the child\u2019s concept no longer exists and the parent node\u2019s child link is no longer defined?</p> <pre><code>node.getChildren().where(\u2026).foreach {it=&gt; it.delete\n}\n</code></pre> Why does the virtual method have isVirtual=false? <p>Given there is a virtual behavior method <code>getPresentation</code>. When I override <code>getPresentation</code> in a subconcept then I see it displays the overriding method to be virtual.</p> <p></p> <p>Yet, I see that <code>methodDeclNode.isVirtual</code> is null.</p> <p></p> <p>Why is that?</p> <p>Note that <code>isVirtual</code> and <code>isVirtual()</code> on a method have different semantics.</p> <pre><code>public boolean isVirtual() { return this.isVirtual || this.overridenMethod != null; }\n</code></pre> <p>The editor shows that a method is virtual when <code>isVirtual()</code> is true. As a result, overriding methods of virtual methods are not necessarily having <code>isVirtual=true</code>, but will still display virtual.</p> <p>The rationale behind this may be that if a method is overriding another one, both of them must be virtual. This is needed so that the runtime will find out which of the two implementations to call. So we may read the <code>isVirtual</code> more precisely as \u201eis explicitly virtual\u201d, and <code>isVirtual()</code> as \u201cis effectively virtual\u201d.</p> <p><sub>contributed by: @abstraktor<sub>","tags":["aspect"]},{"location":"aspects/behavior/#initialization","title":"Initialization","text":"How do you initialize a node? <p>How can I ensure that all created nodes will have a non-null <code>HTMLDescription</code>?</p> <p>Using a node factory</p> <p>The node factory will be called when</p> <ul> <li>The code completion menu is invoked to create such a node or to replace another one.</li> <li><code>add new initialized</code>, <code>set new initialized</code>, or <code>replace new initialized</code> is called.</li> <li>Such a node is created as a root from the context menu in the project view.</li> </ul> <p>The node factory is not called when</p> <ul> <li>using quotations <code>&lt;Car()&gt;</code>.</li> <li>viewing the node in the editor.</li> <li>adding it as a root with <code>model.add root(&lt;Car()&gt;)</code>.</li> <li>adding it as a root with <code>model.add new root(Car)</code>.</li> </ul> <p></p> <p>Using a behavior constructor</p> <p>Using a behavior constructor will only partially achieve this. Note that it will only be called when</p> <ul> <li>creating nodes with <code>add new initialized()</code>, <code>set new initialized()</code> and similar methods from <code>j.m.lang.actions</code> and <code>j.m.lang.smodel</code>.</li> <li>creating a node with <code>new node&lt;Car&gt;()</code>.</li> </ul> <p>Using a quotation will not call this constructor.</p> <p></p> <p>Using a property getter</p> <p>You could use an <code>initialized</code> variable and use a combination of property getters and setters.</p> <p>This would work only for properties though, not for children or references, and requires quotations to also set the <code>initialized</code> value if trying to override the default. Furthermore, your quotations will still be marked. </p> <p></p> <p> Usage </p> <p>Can you access the parent in the constructor?</p> <p>No, it doesn\u2019t work because the node is not attached yet (Concept constructors | MPS). Use a node factory to access the parent instead.</p> <p>How can you query the context in a node constructor?</p> <p>Does anyone know a way to find the contextExpression from the node constructor?</p> <p>Use node factories instead of constructors and make use of the <code>enclosingNode</code> parameter.  Constructors are invoked always when creating a node. Node factories are invoked only by the editor and by the <code>new initialized ...</code> expression.</p> <p>Note: Node factories are invoked in the inverse order of constructors. MPS will first invoke the specific node factory and the more generic ones if they exist.</p> <p>Is there a way to call the constructor of a super concept inside the constructor of a sub-concept?</p> <p>Something like: <code>java constructor { superConcept() }</code></p> <p><code>concept/MyConcept/.new initialized instance()</code> provides this behavior.</p>","tags":["aspect"]},{"location":"aspects/behavior/#bugsmissing-features","title":"Bugs/missing features","text":"<p>How can you use generic return types where the returned expressions is cast to concept which is a parameter of the function?<sup>1</sup> <p>This is not possible (MPS-22502). The as cast expects a reference to a concept, the type variable can\u2019t be used in this place. There are ways to circumvent this by using lower level code but it won\u2019t help. I think you also can\u2019t really use the information from the type variable because this information is not available at runtime because of Java type erasure.</p> <p>Can you use a more specific return type while overriding a behavior method?</p> <p>No, it is not possible (MPS-27720).</p> <p>Can you use variable arguments (varArgs) in behavior methods?</p> <p>No, it is not possible (MPS-31056).</p> <p>Can you enter a throws clause in behavior methods?</p> <p>No, it is not possible (MPS-22306).</p> <ol> <li> <p>MPS forum - Generics for return type of behavior method \u21a9</p> </li> </ol>","tags":["aspect"]},{"location":"aspects/constraints/","title":"Constraints aspect","text":"<p>The constraints aspect defines constraints for the concepts of the language.</p> <ul> <li>official documentation</li> </ul>","tags":["aspect"]},{"location":"aspects/constraints/#general","title":"General","text":"<p>How do you hide inapplicable operands in dot expressions?</p> <p>Dot expressions: hiding inapplicable operands(Specific Languages\u2019 blog)</p> <p>Are there any useful helper classes?</p> <ul> <li>ModelConstraints: This class can be used to calculate the constraint/scope of a specific concept/node programmatically.</li> </ul>","tags":["aspect"]},{"location":"aspects/constraints/#properties","title":"Properties","text":"<p>How can you set default values for properties?</p> <p>Use the language com.mbeddr.mpsutil.propertydefault from  mbeddr platform.</p> <p>The property value isn\u2019t valid.</p> <p>Specific Languages Blog: Invalid property values</p>","tags":["aspect"]},{"location":"aspects/constraints/#references","title":"References","text":"<p>How can you emulate references?</p> <p>Pseudo-references: emulating references(Specific Languages\u2019 blog)</p>","tags":["aspect"]},{"location":"aspects/constraints/#scopes","title":"Scopes","text":"<p>How do you filter scopes? Which scopes are available?</p> <p>FilteringScope takes an existing scope and can therefore be used for filtering. Some other scope implementations are also listed in Using reference scope | MPS documentation.</p> What\u2019s the best way to wrap a list of nodes into a Scope? <p>I have a list of nodes and want to wrap them into a scope How do you do that?</p> <p>You\u2019re probably looking for <code>ListScope.forResolvableElements(sequence&lt;node&lt;&gt;&gt; elements)</code>.</p> <p>forResolvableElements creates list scopes and also implements getName(child) like forNamedElements, yet returning the resolveInfo if the node is an IResolveInfo, the name if it is an INamedConcept or else calls <code>getPresentation()</code>.</p> <p>forNamedElements</p> <p>I\u2019m unsure about the use-case of <code>ListScope.forNamedElements(sequence&lt;node&lt;&gt;&gt; elements)</code>, but it behaves unexpected in some cases:</p> <p>Note that elements with a blank name are not part of the scope created by <code>ListScope.forNamedElements(sequence&lt;node&lt;&gt;&gt; elements)</code>. They\u2019ll get silently omitted.</p> <p>Note that elements that are not an instance of INamedConcept, will make <code>forNamedElements</code> throw an exception.</p> <p><sub>contributed by: @abstraktor<sub> <p>How can you combine scopes?</p> <p>Use the class CompositeScope.</p> <p>What\u2019s the difference between parent scope and super.getScope?</p> <p><code>parent scope</code> asks your node or up in the hierarchy for the scope until it finds a scope provider. <code>super.getScope</code> will use the implementation from the super concept.</p>","tags":["aspect"]},{"location":"aspects/dataflow/","title":"Dataflow aspect","text":"<p>A language\u2019s data flow aspect allows you to find unreachable statements, detect unused assignments, or check whether a variable might not be initialized before it\u2019s read.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> </ul> <p>Where can you find good examples to understand how dataflow works?</p> <p>Have a look at the data flow builders of jetbrains.mps.baselanguage. You can also search for usages of DataFlowBuilderDeclaration in general.</p> <p>What other MPS-related data-flow projects exist?</p> <ul> <li>MPS-DF is a data-flow extension for MPS (<code>com.mbeddr.mpsutil.dataflow</code>): An Extensible Framework for Variable-precision Data-flow Analyses in MPS | Tam\u00e1s Szab\u00f3</li> <li>IncA is a program analysis framework.</li> </ul>","tags":["aspect"]},{"location":"aspects/documentation/","title":"Documentation aspect","text":"<ul> <li>documentation</li> </ul> <p>This aspect is contributed by the language com.mbeddr.doc in  mbeddr. It allows defining a documentation node that can be exported to XHTML, Latex , and MarkDown. New targets can be implemented easily. When you invoke the intention Add Reference to Documented Concept while defining a new section as part of a chapter, the documentation for this concept will be shown in the Documentation tool at the bottom part of the screen.</p> <p>How do you export the documentation?</p> <p>Click make or rebuild in the menu of the model that contains the documentation. A new folder doc_gen will get generated.</p> <p>Should you write documentation? Is this aspect necessary?</p> <p>Yes, code is not always self-documenting. You have the following possibilities for writing documentation: </p> <ul> <li>JavaDoc<sup>1</sup> </li> <li>the intention Document</li> <li>com.mbeddr.documentation</li> <li>com.mbeddr.doc</li> <li>the short description property of concepts</li> <li>DocumentedNodeAnnotation</li> </ul> <p>How can you show the documentation of a concept in the documentation tool?</p> <p>Take a look at the doc.aspect project in  mbeddr. There is a node attribute that can be attached to pieces of a document to bind the document to some concept or node. There is also an example project which demonstrates the usage.</p> <p><sub>answered by: @szabta89<sub> <p>Is there a way to resolve references to embedded images (screenshots) across different documents?</p> <p>This is enabled by adding the document to the depends on section.</p> <ol> <li> <p>Use javadoc liberally \u21a9</p> </li> </ol>","tags":["aspect"]},{"location":"aspects/editor/","title":"Editor aspect","text":"<p>The editor aspect defines the projectional editor of a concept.</p> <ul> <li>official documentation</li> <li>old cheatsheet</li> </ul>","tags":["aspect"]},{"location":"aspects/editor/#general","title":"General","text":"<p>What happens when you press F5 in the editor?</p> <p>F5 in editor(Specific Languages\u2019 blog)</p> <p>How can you delete non-existing children, references, or properties from a node?</p> <p>Switch to the reflective editor and remove the offending parts. There is also an enhancement script that can remove properties.</p> <p>Is there a way to prevent users from adding and removing elements in a list in the MPS editor? The elements in the list should still be editable, but adding/removing shouldn\u2019t be allowed?</p> <p>There are 2 solutions:</p> <ol> <li>Use a query list with empty insert/delete handlers.</li> <li>Create an action map/inline action cell with empty blocks for the actions <code>INSERT</code> and <code>INSERT_BEFORE</code>.</li> </ol> <p>I\u2019ve set a color of type java.awt.Color in a style property query but the color is different when using the Darcula theme.</p> <p>The return type of those functions indicates that the return type is <code>java.awt.Color</code> but the generator maps these colors to theme-dependent colors. The only avoid to avoid this mappings is to use custom factories. More info about theme-dependent colors can be found  here.</p> <p>What is the difference between an empty cell and a simple constant cell without any content?</p> <p>Both cell work with an internal text line, but the <code>constant cell</code> supports more styling for the text line. This also results in different-looking cursors, I believe.</p> <p><code>constant cell</code> supports the cell actions <code>LEFT, RIGHT, LOCAL</code><code>HOME/END,SELECT</code><code>RIGHT/LEFT, SELECT</code><code>LOCAL</code><code>HOME/END, COPY, PASTE, CUT</code> and <code>CLEAR_SELECTION</code> which it inherits from the internal label cell class. It has methods to validate the text (well, the only correct text is the specified text in the editor) and to synchronize the cell with the model (that means going back to the original text after editing the text).</p> <p><code>empty cell</code> inherits from the internal basic cell which supports only left and right transformations (<code>LEFT_TRANSFORM</code>, <code>RIGHT_TRANSFORM</code>). It also doesn\u2019t support the <code>editable</code> style sheet item which means no support for editing the text.</p> <p>In a nutshell, <code>empty cell</code> is a very stripped-down version of a <code>constant cell</code> and also has a somewhat different implementation because of the different base class.</p> <p>I have click actions in my language, and they seem to also trigger for right mouse clicks. Any way to prevent that generally or manually/programmatically detecting which mouse button was clicked?</p> <p>No, the click action is executed for the selected cell. Without the original MouseEvent that is not forwarded to the editor cell you won\u2019t get this information. The event can\u2019t be restored. It would be possible to register a new mouse listener for the editor component through an editor extension that not only creates the click action for the selected cell but also saved the mouse button somewhere. The original implementation in the editor component can be found here.</p> <p>I want to create a DSL using diagrams or a visual programming language. Are there any inspirations?</p> <p>Have a look at Visual Programming Languages - Snapshots | interfacevision.com. This page has a lot of examples for visual programming languages dating back to 1963 up to recent languages like Scratch. Diagrams are supported by  MPS-extensions(documentation) and can be used as the base building block of a new language.</p>","tags":["aspect"]},{"location":"aspects/editor/#menus","title":"Menus","text":"<p>Explain the different menu-related terms.</p> <ul> <li>Menu definitions have two flavours named and default and can be defined in transformation or substitute menus.</li> <li> <ul> <li> <p>Default substitutions will replace the default menu that MPS shows.</p> <p>Shortcut: Ctrl+Space or Cmd+Space</p> </li> </ul> <p>Default menu</p> <ul> <li>Transformation menus     define UI actions that will be shown in various locations. The menu is defined as a list of sections.     Each section contains a list of menu parts for a set of locations.      At runtime, the menu parts and locations are used to generate the content of the completion menu.     The contents of the completion menu are called menu items.</li> <li>Parameterized actions     allow to calculate a list of elements of a specific type to be shown in the completion menu.     They calculate all elements for the substitution menu and influence the node creation.     Moreover, they define the selection where the cursor should be placed.</li> </ul> </li> </ul> <p>How do you find out where a substitute menu entry is coming from?</p> <p>Use the Menu Trace Tool window. More information can be found in Menu Trace Tool Window | MPS.</p> <p>How can you add smart references using the transformation menus?</p> <p>Adding smart references using transformation menus(F1RE\u2019s blog)</p> What\u2019s the best way to improve the autocomplete description of concepts? <p>As you can see in the screenshot, the concepts of both opening braces are indistinguishable.</p> <p></p> <p>By changing the short description in the concept structure, I can change the description.</p> <ol> <li>What\u2019s the best format to improve these descriptions?</li> <li>Is this way the correct/best one to change the autocomplete concept description?</li> </ol> <p></p> <p></p> <p><sub>asked by: @AlexeiQ<sub> <p>In general, it\u2019s up to the users and specific context to decide what makes sense to put into the description text. Usually it should provide additional semantic information to those not familiar with the language to help them to pick up the right concept from the code completion menu.</p> <p>The short description in the concept is the original, simple way to provide a static description in the code completion menu. You can also add your substitute action in the substitute menu of the concept (editor aspect) to get full control over the code completion menu and to be able to generate the text dynamically based on the context.</p> <p></p> <p></p> <p><sub>answered by: @wsafonov<sub>","tags":["aspect"]},{"location":"aspects/editor/#languages","title":"Languages","text":"<p>I need a specific graphical notation/feature for the editor.</p> <p>Have a look at the full extension list from  MPS-extensions.</p> <p>I need hyperlinks.</p> <p>Use the language com.mbeddr.mpsutil.hyperlink from  mbeddr platform.</p> <p>How do you create clickable links?</p> <ul> <li>Creating clickable URL links in the editor(Specific Languages\u2019 blog)</li> <li>More clickable URL links(Specific Languages\u2019 blog)</li> </ul> <p>How can you include non-child relations in the editor?.</p> <p>Use the language com.mbeddr.mpsutil.editor.querylist from  MPS-extensions.</p>","tags":["aspect"]},{"location":"aspects/editor/#editor-declaration","title":"Editor declaration","text":"<p>Is there a disadvantage to use the indent layout instead of the indent cell mode?</p> <p>No. There used to be performance issues with bigger models that were fixed in MPS 2021.1.</p> <p>How do you use an empty text for empty cells?</p> <p>Use empty text for empty cells(Specific Languages\u2019 blog)</p> <p>How can you set editor hints?</p> <ul> <li>you can set hints via <code>editorContext.getEditorComponent().getUpdater()</code><ul> <li>explicit hints for nodes</li> <li>initial hints globally; they behave similarly to pushed hints.</li> </ul> </li> <li> <p>via right-click: push editor hints and select a specific one.</p> </li> <li> <p>via an EditorHintToggleAction (e.g. in action declarations)</p> <ul> <li>They are not visible in the push Editor hints menu.</li> <li>If you need the same behavior e.g. in intentions, you can use code from there (via ConceptEditorHintSettingsComponent.HintsState)</li> </ul> </li> <li>Explicit hints for nodes and hints via EditorHintToggleAction.   The usage of ConceptEditorHintSettingsComponent.HintsState is not so obvious.</li> </ul> How do you set the cursor to the first editable cell? <p></p> <ul> <li>(A) What it looks like after creation</li> <li>(B) Initial situation with cursor at (1): pressing Enter leads to (C)</li> </ul> <p>The problem is, that in (C) the cursor is at (2), right before a read-only cell, and thus editing or moving to the next cell is not possible. I would like the cursor to jump to the first editable cell, which is at position (3).</p> <p>Structure of the new node in (C):</p> <p></p> <p>Editor of the new node in (C):</p> <p></p> <p>Usually, you would set the attracts focus property of the cell, where the cursor should be positioned, to <code>attractsFocus</code> or <code>FirstEditableCell</code>. But, since (C.2 and C.3) are error cells, the default behavior is to set the cursor in front of the first error cell, which is (C.2).</p> <p>Therefore, change the first part of your editor to a query list cell (A), which references the \u201cmember\u201d in the cell properties (B), and set the read-only property on the query list.</p> <p></p> <p><sub>contributed by: @AlexeiQ<sub> <p>Is it possible to access the selected value of one Java Swing component from inside another Java Swing component?</p> <p>Yes: Is it possible to access the selected value of one Java Swing component from inside another Java Swing component? | MPS forum</p> <p>How can you access an icon stored in a concept?</p> <p>Create a new custom cell: </p> <pre><code>new AbstractCellProvider() {\n@Override\npublic EditorCell createEditorCell(EditorContext p1) {\nEditorCell_Image.createImageCell(context, node, {\nEditorContext context, SNode node =&gt; GlobalIconManager.getInstance().getIconFor(concept); });\n}\n};\n</code></pre> <p>How can you paint the background of certain editor cells with a different color based on analysis of the model?</p> <ul> <li>with the help of a conditional editor</li> <li>by using the class <code>NodeHighlightManager</code>:</li> </ul> <pre><code>NodeHighlightManager highlightManager = this.editorComponent.getHighlightManager(); EditorMessageOwner messageOwner = this.editorComponent.getHighlightMessagesOwner();\n(...)\nhighlightManager.mark(((SNode) ref), HighlightConstants.INSTANCES_COLOR, \"usage\", messageOwner);\n</code></pre> <p>The second approach has a better performance because the highlighter runs asynchronously and not during the editor rebuild.</p> <p>How can you hide a custom cell in the editor? (show if property)</p> <p>Custom cells expect only a cell provider in the inspector, but don\u2019t offer the possibility to specify other attributes to set e.g. \u201cshow if\u201d. How can I hide a custom cell under a specific condition? (MPS-33195)</p> <p>The meta-model allows specifying the show if property and other attributes on a custom cell and the generator will generate the correct code for it. It is just not included in the editor for the inspector. You can use the reflective editor to specify the condition.</p> <p>Since these attributes are hidden and you need this knowledge to find them, the alternative for better visibility is to surround the custom cell with a collection and set the show if property on the collection.</p> <p><sub>contributed by: @AlexeiQ<sub> <p>How do you split child collections?</p> <p>Advanced editors: splitting child collection in editor(Specific Languages\u2019 blog)</p> <p>How can I show an editor element only if the edited node/sub-nodes are currently being edited/actively selected?</p> <p>You can impliment a cell that is similar to the cell EditorCell_MathEnd in  MPS-extensions.</p>","tags":["aspect"]},{"location":"aspects/editor/#inspector","title":"Inspector","text":"<ul> <li>Move rarely needed information to the Inspector(Specific Languages\u2019 blog)</li> </ul> <p>How can you open the inspector programmatically?</p> <pre><code>editorContext.openInspector()\n</code></pre> <ul> <li>Opening Inspector automatically(Specific Languages\u2019 blog)</li> <li>Opening Inspector automatically: Selection listeners(Specific Languages\u2019 blog)</li> <li>Opening Inspector automatically: Editor extensions(Specific Languages\u2019 blog)</li> </ul> <p>How can you focus on a node in the inspector?</p> <ul> <li>Focusing on a node in the inspector(Specific Languages\u2019 blog)</li> </ul> <p>Highlighting of constraint errors in inspector doesn\u2019t work.</p> <p>Known bug (MPS-32350). Pressing F5 helps.</p>","tags":["aspect"]},{"location":"aspects/editor/#other-ui-components","title":"Other UI components","text":"<p>I am using <code>NodeHighlightManager.mark()</code> to highlight AST nodes. MPS then uses the provided color for the background of the cell, and a slightly darker color for an additional border. Is it possible to change this, i.e., only paint the background, but not the border?</p> <p>Yes, but you have to create a class that extends DefaultEditorMessage and overwrites the paintWithColor method. The color of the border is defined on line 203. Instead of calling this method:</p> <pre><code>public void mark(SNode node, Color color, String messageText, EditorMessageOwner owner) {\nif (node == null) return;\nmark(new DefaultEditorMessage(node, color, messageText, owner));\n}\n</code></pre> <p>You have to initialize your message object and supply it to the mark method.</p>","tags":["aspect"]},{"location":"aspects/editor/#open-api","title":"Open API","text":"<p>How can you open the editor for a node programmatically?</p> <pre><code>NavigationSupport.getInstance().openNode()\n</code></pre> <p>How can you override an arbitrary editor?</p> <p>Use the language de.slisson.mps.conditionalEditor from  MPS-extensions.</p> <p>How can you get the font of an editor?</p> <pre><code>jetbrains.mps.nodeEditor.EditorSettings#getDefaultEditorFont()\n</code></pre> <p>How can you subscribe to editor changes?</p> <ul> <li>Add a tool that subscribes to editor changes | MPS forum.</li> </ul> <p>How do you get the text of an EditorCell programmatically?</p> <pre><code>EditorCell.renderText().getText()\n</code></pre> <p>How can you find out if an editor cell is read-only?</p> <pre><code>ReadOnlyUtil.isCellsReadOnlyInEditor(this.editorComponent, new singleton&lt;EditorCell&gt;(editorCell))\n</code></pre> <p>How do you get an editor for a node as a Java Swing component?</p> <pre><code>HeadlessEditorComponent component = new HeadlessEditorComponent(#project.getRepository()); component.editNode(node);\nreturn component;\n</code></pre> <p>How do you get a Project instance for an ActionEvent?</p> <pre><code>button.addActionListener(new ActionListener() {\npublic void actionPerformed(ActionEvent e) {\nProject mpsProject = UiUtils.getMpsProjectFromActionEvent(e);\n}\n}\n</code></pre> <p>How do you get the selection/selected node in the editor?</p> <pre><code>editorComponent.getSelectionManager().getSelection() / editorContext.getSelectedNode()\n</code></pre> <p>How can you select a node in the editor?</p> <pre><code>editorContext.getSelectionManager().setSelection/pushSelection\n// or\neditorContext.getNodeEditorComponent().selectNode()\n</code></pre> <p>How do you find all open editors?</p> <p>Finding all open editors(Specific Languages\u2019 blog)</p> <p>How do you programmatically collapse editor cells?</p> <pre><code> EditorCell_Collection.fold()/unfold()\n// You can check if is foldable by calling:\nEditorCell_Collection.isFoldable()\n</code></pre> <p>Is there a callback/hook when an editor tab closes?</p> <p>When closing an editor tab, MPS removes the highlighting from all nodes in the editor. I.e., when an editor is opened again for the same root node all highlighting is gone.</p> <p>In my code, I want to react to this editor-close event. Is there a way to implement a callback or hook which is called when an editor tab is closed?</p> <p>You can register an EditorComponentCreateListener, that also receives an editorComponentDisposed event (example).</p> <p>How can I customise the behaviour when pressing the Tab key in the editor?</p> <p>You can specify the action <code>NEXT</code> in an action map to override this behavior (MPS source reference). The default action is declared here with its default implementation in NodeEditorActions(it jumps to the next editable leaf of the editor cell tree).</p> <p>Is there a utility class related to editor hints?</p> <p>Yes, there is in  mbeddr: EditorHintHelper.</p> <ol> <li> <p>MPS forum - hierarchical tree structure and editing \u21a9</p> </li> </ol>","tags":["aspect"]},{"location":"aspects/feedback/","title":"Feedback aspect","text":"<p>The feedback aspect defines custom messages to show to the user when an error or a warning is detected in the model.</p> <ul> <li>official documentation</li> </ul> <p>Can I override error messages? Can I customize any messages that way?</p> <p>Yes, in this aspect: Feedback - MPS. No, only the messages that  support overriding.</p> <p>Can I use parameters such as the node or concept in the custom message? Can I add new parameters?</p> <p>Use the code completion in the show message part of the editor e.g. <code>%concept</code>. New parameters can\u2019t be added because they are hard coded.</p> <p>Where can I find these messages in the MPS source code?</p> <p>Some of those checks come from the structure checker. There is also the reference scope checker and the  ConstraintsChildAndPropFacade which applies checks.</p>","tags":["aspect"]},{"location":"aspects/findusages/","title":"FindUsages aspect","text":"<ul> <li>official documentation</li> </ul> <p>Custom finders for discovering related nodes can be implemented in this aspect.</p> <p>I click Find usages in the context menu of a node, and it doesn\u2019t find anything.</p> <p>The standard search scope is the project. Try to expand it to global in the find usages settings. Check also that you are using the correcting finders in the Finders section of the settings. </p> <p>I want to execute Find usages more than once, but the result tab gets overridden.</p> <p>Select the option Open in new tab in the section View of the Find usages preferences or pin the result tabs by right-clicking and selecting Pin Tab.</p> <p>How to restrict the scope of a Finder execution?</p> <p>I am using this finder and would like to restrict the scope from global, to lets say project. </p> <p>How do I do this?</p> <p>You can pass any FindUsages Scope implementation to the expression, for instance the ProjectScope:</p> <pre><code>SearchResults results = execute finders(NodeUsages, node, new ProjectScope(project), &lt;default&gt;);\n</code></pre> <p>How can I invoke the find usages manager programmatically without UI?</p> <p>Use one of the methods in <code>#project.getComponent(FindUsagesmanager.class)</code>. If no project is available, you can use the deprecated method <code>FindUsagesManager.getInstance()</code>. If the method needs a Consumer, just use the class CollectConsumer which adds the results to the provided collection. There is also the method <code>getResults()</code> to get back the collection.</p> <p>Fast usages search is not supported for a model.</p> <p>When specifying the scope, make sure to exclude models that don\u2019t support fast usages search (e.g. temporary models such as the console model). Models are only loaded when they are accessed, so make sure to keep the scope of the find usages call at a minimum. If you are filtering a global or similar scope, the following methods might be useful: </p> <ul> <li><code>module.isPackaged()</code> to check for installed languages/solutions/devkits</li> <li><code>model.isReadOnly()</code> to check if a model allows updates</li> <li><code>SModelStereotype.isX()</code> to check if the model has a specific stereotype e.g. the model is a test model</li> </ul>","tags":["aspect"]},{"location":"aspects/generator/","title":"Generator aspect","text":"<p>Generator is a part of language specification that defines the denotational semantics for the concepts in the language.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> <li>Getting started with generation in MPS: extracting a generator(Specific Languages\u2019 blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/generator/#general","title":"General","text":"<p>Are there any best practices for generators?</p> <ul> <li>coolya: Maintainable MPS Generators</li> </ul> <p>Can you invoke the generator from an external tool?<sup>2</sup></p> <p>Yes, it can be run from Ant.</p> <p>How can you copy the output to another location?</p> <p>Use the @CopyOutcome annotation.</p> <p>How do I obtain a temporary model?</p> <p>Use the class TemporaryModels.</p> Which variable names aren\u2019t available because they are used in the generator? <p>Underlined variables are specific variables that are available.</p> <ul> <li>Console: ConsoleContext context, ConsoleStream console</li> <li>Constraint:<ul> <li>Scope: ReferenceConstraintsContext _context</li> </ul> </li> <li>Type-system:<ul> <li>all rules: IsApplicable2Status status, TypeCheckingContext typeCheckingContext</li> <li>comparison rule: SNode node1, SNode node2, </li> <li>inequation replacement rule<ul> <li>custom condition: SNode subtype, SNode supertype,</li> <li>rule: SNode subtype, SNode supertype, EquationInfo equationInfo, TypeCheckingContext typeCheckingContext, boolean inequalityIsWeak, boolean inequalityIsLessThan</li> </ul> </li> <li>substitute type rule: SNode originalType</li> </ul> </li> <li>Generator:<ul> <li>mapping configuration: CreateRootRuleContext _context</li> </ul> </li> <li>Editor:<ul> <li>General: SNode myNode</li> </ul> </li> </ul> <p>How does the IDE collect generators to engage on a model?</p> <p>How MPS collects generators to engage on a model(Specific Languages\u2019 blog)</p> <p>generation plan (in devkit) vs. generator priorities?</p> <p>The generation plan is applied instead of the generator priorities. If your generator should be applied in a model using a generation plan, your generator has to be part of the generation plan. When developing a language, which is used within an aspect, e.g. type-system, the MPS aspect\u2019s generation plan can block the generator.</p> How can you use generated classes which implement an extension point? <p>Let \\(L_A\\) be a language that offers an extension point over class \\(E\\). Then it is quite simple to provide a static implementation for extension point for \\(E\\) for example in another language. What if we want to map a concept \\(Q\\) of \\(B\\) to that extension point? We want to be able to generate code \\(C\\) from a concept instance of \\(Q\\) which is a subclass of \\(E\\), such that we can use it for the extension point over class \\(E\\).</p> <ul> <li>Create the extension point in the plugin aspect of a language \\(L_A\\).</li> </ul> <p></p> <ul> <li>In generator main you need to create two root mapping rules for \\(Q\\) (which is ModelMerge in our case).</li> </ul> <p></p> <ul> <li>map_ModelMerge maps \\(Q\\) to a class which extends \\(E\\) (here <code>ConceptMergeSpec</code>).</li> <li>map_ModelMerge_extension will generate an extension for \\(Q\\). It is an extension RootMapping which can be selected from the intention. </li> </ul> <p></p> <p>The code for the Reference-Macro in the figure above should look like this. </p> <p>Make sure you have jetbrains.mps.lang.extension included as language in the plugin.</p> <ul> <li> <p>Now create a solution, not a sandbox. Set Solution Kind in the properties to Other. Afterwards, create a model named plugin (not optional). Add an instance of \\(Q\\) to your model plugin and build it. Looking now at your last transient model, there must be 3 artifacts related to \\(Q\\):</p> </li> <li> <p>the generated class </p> </li> <li>the generated extension </li> <li> <p>an <code>ExtensionDescriptor</code> which provides all found extensions</p> </li> <li> <p>Now you should be able to locate your extension with a code fragment like this:</p> </li> </ul> <pre><code>foreach obj in extensionPoint/ModelMergeExt/.objects { System.out.println(\"---&gt; extension \" + obj); }\n</code></pre> <p><sub>contributed by: @dbinkele<sub> <p>Where should you put classes that you need on the user side and in the generator?</p> <p>Move the classes to a solution and add that solution as a runtime solution to the language (in the module properties).</p> <p>Can you access the output model in a property macro?</p> <p>In reference macros in generators, I can use the provided outputNode parameter as an entry point into the output model of the current transformation and e.g. use this to find the root node my generated reference will be contained in. Can I do something similar in property macros? For those, there is no outputNode. I\u2019d still like to find, for example, the Node in my output model that my generated property belongs to. Is there a way to do that?</p> <p><sub>asked by: @jonaskraemer<sub> <p>You can try to use the post-processing function of a <code>$MAP_SRC$</code> macro.   </p> <p>Which generation plan is used: the one of the custom generation facet or from any of the used devkits?</p> <ul> <li>Custom generation facet: if there is a GP defined, this plan is used.</li> <li>Devkits: first, MPS looks if any devkit specifies a GP. The first devKit with an associated plan is consulted, if any, and no further lookup is done.   If there are no devkits with associated plans, MPS checks the facets of the devkit modules if any is a GP provider.   The first found facet serves as a provider.</li> </ul> <p>What is cross-model generation?</p> <ul> <li>What is cross-model generation and why do you care?(Specific Languages\u2019 blog)</li> </ul> <p>How to get rid of errors for missing generator dependencies?</p> <p>If you use a generation plan, you can add those languages to the end of the generation plan or create a new plan ignoredLanguages that you add to your existing plan. When languages don\u2019t generate anything, their generators should also be deleted. Two tickets with some more information: MPS-32687, MPS-33874</p> <p>How do you keep some context when using the <code>$LOOP$</code> macro in the generator?</p> <p>There are a few solutions when you want to save additional information: you can use the <code>VAR</code> macro which introduces one or more named values into the generator context, which can then be obtained from the <code>genContext</code>. You can save information in the session/step/transient object which can also be accessed through <code>genContext</code> (this is, for example, a parameter in the <code>$COPY_SRC$</code> macro). When you use the <code>$CALL</code> macro to call a template, you can call the template with parameters. You can also use <code>node/.putUserObject</code> and <code>node/.getUserObject</code> to store additional Java objects directly in nodes.</p> <p>What is the best way to preserve SModelAttributes when weaving in a new node during generation? The newly weaved-in node does not contain the <code>SModelAttributes</code> from the input and I am looking for a way to add these to the output node.</p> <p>Weaving isn\u2019t reduction so MPS doesn\u2019t know if the new node should have the attributes or not. MPS_SRC is the best way as you have input and output available.</p> <p>What is an alias for a generator?</p> <p>It is just an additional qualifier to distinguish the generator from other generators for the same language.</p> <p>Is there something similar to the <code>outputNode</code> in reference macros in property macros?</p> <p>No but you can try to use the post-processing function of a <code>$MAP_SRC$</code> macro.</p>","tags":["aspect"]},{"location":"aspects/generator/#how-to-generate-xy","title":"How to generate XY","text":"<p>What can be generated?</p> <p>Have a look at the language repository. You might also find other languages on GitHub. In general, there doesn\u2019t have to be an existing language. Any text can be generated with TextGen or Plaintextgen from  MPS-extensions. It\u2019s also possible to generate code from an action or pre/post-processing script in the generator by using an existing Java library such as Apache POI. A tutorial for example  for Excel can be found here.</p> <p>I want to create multiple outputs for a language.<sup>1</sup></p> <ul> <li>You can use a non-root concept in your root mapping rule e.g. use the concept of the children in the root mapping rule. It will create multiple roots as long as the generated files have different names.</li> <li>Use a preprocessing script to create new root nodes (maybe a new concept if necessary) for the children and create a root mapping rule for the newly introduced concept.</li> <li>Use a dummy concept or a generation plan with a fork.</li> </ul> <p>This question is also answered in the generator cookbook.</p> <p>How can you generate latex files?</p> <p>The mbeddr documentation language can do this. Have a look at the documentation.</p> <p>How can you generate some text?</p> <p>Use the textgen aspect or use mps-plaintextgen from  MPS-extensions.</p> <p>Can you use an alternative approach to generating code?</p> <p>You can interpret your models instead. Use mbeddr.mpsutil.interpreter from  mbeddr platform.</p> <p>Should you use generation plans or generator priorities?</p> <p>Have a look at the motivation for generation plans in the official documentation. Generation plans should be used when the generation order is simple.</p> <p>How do you generate language X from MPS?</p> <p>Specific Languages blog: How do I generate language XY from MPS?</p> How can you make sure that a generator B can use the output of a generator A? <ol> <li>Define priorities or a fixed generation plan for \\(B\\) (and maybe \\(A\\))</li> <li>If you can\u2019t run/don\u2019t want to run both generators in the same \u201cphase\u201d, configure them to run one after the other.</li> </ol> <p>Solution 1:</p> <ul> <li>Define a \\(MM\\) (structure) (INFO-NODE) in \\(A\\) where you accumulate all required information and pass for all other generators.</li> <li>Configure \\(A\\) to remove INFO-NODE if not required (separate mapping configuration).</li> </ul> <p>Solution 2:</p> <ul> <li>Define an annotation and store all req. infos there</li> <li>Configure \\(A\\) to drop annotation if not required (separate mapping configuration),</li> </ul> <p>Solution 3:</p> <ul> <li>Use user objects to store required information as part of the real AST nodes.</li> <li>User objects are volatile children/properties which are not persisted but survive several generation phases. Use com.mbeddr.mpsutil.genutil to achieve this.</li> </ul> <p>Solution 4:</p> <ul> <li>Define a fixed generation plan with checkpoints.</li> <li>Organize the whole generation process manually.</li> </ul> How to generate large strings? <p>Given I am writing a generator and it generates a java string for a string property. That property holds a string of more than 64000 characters and the java compiler gives me a constant string too long error. What can I do?</p> <p>This is what it looks like so far:</p> <p></p> <p>Option 1: Extract into a separate file</p> <p>Of course, it would be better to not fill the java file too much and instead generate the string into a file that gets loaded at this place.</p> <p>Option 2: Split and join again</p> <p>The restriction only applies to the size of string literals. However, at runtime, it is allowed to have larger strings. So that we can split it into a concatenation that gets assembled at runtime then:</p> <ul> <li>Here we use the Guiva classes Joiner and Splitter from <code>MPS.Core/google.common.base</code> and <code>java.util.Arrays</code>.</li> <li>We use the splitter at generation time to split it into parts of maximum 50000 characters.</li> <li>Then we map it onto an arbitrary node that has a string property, as <code>$LOOP$</code> requires a node.</li> <li>In the property macro inside the loop, we simply pull that property out of the node again (the inspector of this is not visible in the screenshot).</li> <li>It is just a coincidence that we create nodes of the same concept and use the same property for the loop content, than for the outside context node. You may light-quote anything of type string here.</li> </ul> <p></p> <p><sub>contributed by: @abstraktor<sub> <p>How do I generate a unique numeric id?</p> <p><code>genContext.name from (\"\")0 in context (node)</code> works well for this.</p> <p>Note that the one-based version (<code>genContext.name from (\"\") in context (node)</code>) will yield an empty string in the first iteration. This is because it is designed to generate things like \u201cmyVar\u201d, \u201cmyVar1\u201d, \u201cmyVar2\u201d.</p> <p><sub>contributed by: @abstraktor<sub> <p>How do you report errors in the generator?</p> <p>Use the statement <code>genContext.show error</code> and attach the node as the second parameter. Don\u2019t just throw exceptions as people don\u2019t need so see fatal errors in the lower right corner when something in the generator goes wrong. The generator might not stop immediately and finish the current step when using this statement.</p>","tags":["aspect"]},{"location":"aspects/generator/#open-api","title":"Open API","text":"<p>How can you preview the generated text programmatically?</p> <p>Use the MPS action TextPreviewModel or call the methods in TextGeneratorEngine if you want to use the text generator, e.g. <code>TextGeneratorEngine.generateText(node)</code></p> <p>How do you get the output path for a solution?</p> <ul> <li>To get an IFile, call <code>SModelOperations.getOutputLocation(model)</code>.</li> <li>To get a string, call <code>ProjectPathUtil.getGeneratorOutputPath(module.getModuleDescriptor())</code>. You have to first cast the module to an <code>AbstractModule.</code></li> </ul> How can I check if a model requires generation programmatically? <p>The project view shows <code>generation required</code> if a model has been changed. What is the source of this information, and how reliable is it?</p> <p>(regarding the 2<sup>nd</sup> part of the question: sometimes the text in the project view is not up to date, but pressing F5 fixes it. Is it just the UI that is not updated when the underlying state changes, or is the state itself not updated properly until F5 is pressed?)</p> <p>ModelGenerationStatusManager provides a corresponding API. This is how to use it:</p> <pre><code>MPSProject project = /* ... */;\nSModel model = /* ... */;\nModelGenerationStatusManager statusManager = project.getComponent(ModelGenerationStatusManager.class); if (statusManager.generationRequired(model)) { /* ... */ } </code></pre> <p>Unfortunately, it doesn\u2019t seem to be reliable, e.g. when changing something in the model, the API behaves correctly in the first place. But after executing the Synchronize action, MPS for some reason believes that generation is not required anymore (even though the change would have an effect on the output and Synchronize doesn\u2019t execute the generation). This odd behavior can also be seen in the project view (note: this might be outdated information).</p> <p><sub>contributed by: @till-f<sub> <p>How can you react to changed generated files?</p> <pre><code>new GenStatusUpdater(#project).getStatusManager().addGenerationStatusListener(new ModelGenerationStatusListener() {\nvoid generatedFilesChanged(Collection&lt;SModel&gt; models) {\n// do something\n}\n);\n</code></pre>","tags":["aspect"]},{"location":"aspects/generator/#troubleshooting","title":"Troubleshooting","text":"<p>MPS can\u2019t resolve the import XY.<sup>3</sup></p> <p>The solution that contains the class has to be added as a runtime solution (see here).</p> <p>Why are root nodes generated more than once?</p> <p>Have you used one of your root nodes as a child of another node? It will still act as a root node in this case.</p> <p>No output location for XY.</p> <p>Make sure that the Java facet is enabled in the properties of the language or solution. This error can often be seen when opening an old MPS project.</p> <p>java.lang.NoSuchMethodError</p> <ul> <li>NoSuchMethodError(Specific Languages\u2019 blog)</li> </ul> <p>How do I debug generators?</p> <p>Debugging generators(Specific Languages\u2019 blog)</p> <p>The generated code has no debug symbols.</p> <p>Locate the build solution in MPS that is building your languages and adjust the Java settings:</p> <pre><code>java options &lt;project default&gt; \n  generate debug info false \n  generate no warnings false \n  fork false \n  compiler &lt;default compiler&gt; \n  java compliance level 1.8 \n  java compiler options &lt;no additional options&gt; \n  copy resources false\n</code></pre> <p>Then set generate debug info to true.</p> <p>If no Java options exist in your build solution, simply add one to the project structure.</p> How can you debug the differences of generation between command line and MPS? <p>Given I have an MPS project and it compiles well in my MPS. When I run the same in a command line then I see a compile error. How can I debug this?</p> <p>The cause behind this kind of issues usually lies in one of these three things:</p> <p>Issue Area 1: Settings (in place, threading)</p> <p>Try turning off Apply transformations in place in your MPS settings under Build, Execution, Deployment \u2192 Generator \u2192 General, as this is unset in the command line (note, that this setting doesn\u2019t appear in the search):</p> <p></p> <p>Also, disabling the build in parallel threads may help.</p> <p>Issue Area 2: Dependencies</p> <p>A second issue may originate from the separate type of class loading and dependency loading in the command line.</p> <p>Issue Area 3: Generation plans</p> <p>The command line build runs the generator plans that are included in the devkits of a model, or that are explicitly added to the generator facet+tab of a module. If your code starts the build for an explicit generation plan other than that, consider if a different plan could be the culprit. (Remember, right-click a model and Show Generation Plan to see if all looks as expected).</p> <p>Remark 1: Inplace transformations are on or off depending on your build script, the same applies to parallel generation. On the command line if nothing specified it defaults to 4 threads. The biggest difference is that in the command line build no project is opened, which means anything that tried to access the project including virtual files will fail.</p> <p>Remark 2: One potential source of problems could be the packaging of languages and generators. Because in the command line build generators might need to be loaded from packaged jars, any issues with that packaging could affect the generation. For example, as it currently may happen due to MPS-32026 that whole generator models with templates are not loaded and therefore not applied during the generation in the command line.</p> <p><sub>contributed by: @abstraktor<sub> <p>When getting a warning/log message when building an MPS model, I would like to jump to the source of the message.</p> <p>For model generation errors you can enable Build \u2192 Check models before generation to catch errors early. If you enable save transient models, you can, for example, click on textgeneration error messages and it will open the node in the transient model. There, you can `right-click the node -&gt; Language debug -&gt; Reveal original node to go to the original node where the error occurred. For other messages in the messages tool, sometimes there is a stack trace attached that can be found in the right-click menu of the message. Advanced: additional information for other internal exceptions:</p> <p>For other exceptions, such as IDE fatal errors (lower right corner of the window) you can copy the error message from the dialog and go to main menu \u2192 Analyze \u2192 Analyze stack trace. It will provide links to the places in your project where the error happened. For internal exceptions of MPS or the IntelliJ platform, you can do remote debugging (stop on exceptions) with MPS and IntelliJ Community sources locally cloned, so that you can jump to the exception directly.</p> <p>Regarding full-text search, you can try edit \u2192 find \u2192 find text in project (Ctrl+Alt+Shift+F). All the node properties in the project are indexed, so it just searches those properties.</p> <p>If there are errors/warnings in the editor, you can do Language Debug \u2192 Go to Rule Which Caused Error from the context menu to find the code which produced the error. A similar feature is Show Node Messages, which allows copying/pasting the message.</p>","tags":["aspect"]},{"location":"aspects/generator/#blog-posts","title":"Blog posts","text":"<ul> <li>Introduction MPS Generators(F1RE\u2019s blog)</li> </ul> <ol> <li> <p>MPS forum - I want to export multiple languages from MPS \u21a9</p> </li> <li> <p>MPS forum - Is it possible to export a DSL compiler created with MPS and use it independently \u21a9</p> </li> <li> <p>MPS forum - Generator error: uncaught exception ?no classifier? \u21a9</p> </li> </ol>","tags":["aspect"]},{"location":"aspects/intentions/","title":"Intentions aspect","text":"<p>Intentions provide fast access to the most used operations with syntactical constructions of a language.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> </ul> <p>How can you go to the declaration of an intention when you open the intention menu?</p> <p>Select the intention and click the arrow/press the right arrow key \u2192 Go to intention declaration.</p> <p>How do you execute an action as an intention?</p> <p>Add the action to the action group ActionsAsIntentions.</p> How can you group intentions and give them names? <p>Use com.mbeddr.mpsutil.intentions from  MPS-extensions.  Alternatively, you can split the description into multiple literals. The first literal will then be used to group intentions.</p> <p></p> <p></p> <p>I need to get all available intentions for a node.</p> <pre><code>IntentionsManager.getInstance().getAvailableIntentions();\n</code></pre> <p>How can you make intentions visible?</p> <p>Making intentions visible(Specific Languages\u2019 blog)</p> <p>How can you show a submenu in the intention menu?</p> <p>Showing a submenu in the intentions menu(Specific Languages\u2019 blog)</p> <p>An Intention isn\u2019t visible, although it should be. What can you do?</p> <p>Intention X should be visible on Concept Y. However, when I select an instance of Y, it is not listed in the intention menu. What can I do?</p> <p>Make sure the language that declares the intention is in the Used Languages section of the model:</p> <pre><code>- Check if the intention applies to the concept you want it to apply to. (Maybe *visible on child nodes* is not set).\n- Check if the *isApplicable* condition evaluated to true (try to avoid adding `System.err.our` prints to the model).\n</code></pre> <p><sub>contributed by: @coolya<sub> <p>Failed to evaluate isApplicable for XY.</p> <p>Starting from 2021.1.4 JetBrains made a change to the isApplicable method of intentions (commits). After the changes they regenerated all the intentions in the project. This change also affects 2020.3.6. The exception  happens, for example, when languages compiled with 2021.1.3 and 2021.1.4 are used together.</p>","tags":["aspect"]},{"location":"aspects/listener/","title":"Listener aspect","text":"<ul> <li>documentation</li> </ul> <p>This aspect allows creating listeners that can react to changes in the model. It can react to different events such as adding and removing children or value changes of properties.</p> <p>How do you react to change in the model?</p> <p>Use com.mbeddr.mpsutil.modellisteners from  mbeddr platform.</p> <p>Is there a way to listen to changes in any descendant?</p> <p>Add a single change listener to BaseConcept. You still need to define your logic for every kind of a change (property, reference, child\u2026) separately there.</p> <p>Are they executed synchronously or asynchronously?</p> <p>They are executed synchronously.</p>","tags":["aspect"]},{"location":"aspects/migration/","title":"Migration aspect","text":"<p>To nicely support language evolution, migrations automatically upgrade client code to use the latest version of a language or multiple languages.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> <li>MPS, Feature Branches and Language Migrations: DOs and DON\u2019Ts(languageengineering.io)</li> <li>Preparing migrations with Git rebase(Specific Languages\u2019 blog)</li> <li>Checking for pending migrations(Specific Languages\u2019 blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/migration/#general","title":"General","text":"<p>How do I search for instances of a deprecated concept?</p> <ul> <li>Migrations: Searching for instances(Specific Languages\u2019 blog)</li> </ul> <p>How do I remove migrations?</p> <ul> <li>Removing migrations(Specific Languages\u2019 blog)</li> </ul> <p>I want to migrate an MPS project that\u2019s many years old. How do you do that?</p> <p>First of all, make sure that you don\u2019t skip too many MPS versions, otherwise the migration won\u2019t succeed. For old projects, you have to edit the module files manually because the structure slightly changed. Open the .mpl files in a text editor and change all occurrences of <code>&lt;language id=\"%ID\" fqName=\"%FQNAME\" version=\"%VERSION\" /&gt;</code> into  <code>&lt;language slang=\"l:%ID:%FQNAME\" version=\"%VERSION\" /&gt;</code>. </p> <p>The next step is to start the migration assistant. It will fail because it can\u2019t find migrations for some language versions. For example jetbrains.mps.lang.editor only has a migration starting with version 7. You have to find all occurrences of this language in your project with a text editor and change the attribute version to 7. Then run the migration assistant again and hope that everything works. Some concepts cannot be migrated automatically such as the substitute and transformation menus. There will also be other issues that have to be fixed manually.</p> <p>I want to replace node A with another node B where A and B share the same super concept.</p> <p>Use the class RefactoringRuntime. This class can be used to set/unset property or replace nodes with other ones. Example: <code>RefactoringRuntime.replaceWithNewConcept(old, concept/ComponentConfigRef/)</code></p> <p>Are there any best practices about feature branches and language migrations?</p> <ul> <li>languageengineering.io: MPS, Feature Branches and Language Migrations: DOs and DON\u2019Ts</li> </ul> <p>How can you detect that migrations are running?</p> <p>I have code that needs to know if migrations are currently executed e.g. model listeners that update the model when a change by the user appears.</p> <p>I would like to detect when migrations are executed to prevent this code from executing in the middle of a migration to prevent manipulating the model in an incomplete state during the migration.</p> <p><code>PersistenceRegistry.getInstance().isFastSearch()</code> returns <code>false</code> while migrations are running. You can check it in the model lister:</p> <p><pre><code>model listener for MyNode { child added in role values (instance, child)-&gt;void {\n// don't run as part of migrations.\nif(!PersistenceRegistry.getInstance().isFastSearch()) { return; }\n}\n}\n</code></pre> <sub>contributed by: @abstraktor<sub> <p>How can you find all references to a specified root node and change these references, so they point to another root node?</p> <p>Search through the methods in RefactoringRuntime.</p> <p>Example with finders:</p> <pre><code>SearchResults&lt;node&lt;&gt;&gt; results = execute finders(NodeUsages, node, unspecified scope, &lt;default&gt;); foreach result in results.getSearchResults() {\nnode&lt;&gt; resultObject = result.getObject();\nsequence&lt;reference&gt; references = resultObject.references.where({~it =&gt; it.target :eq: node; });\nreferences.forEach({~it =&gt; resultObject/.setReferenceTarget(it.link, reuseact); });\n}\n</code></pre> <p>What are module versions and how/why can other modules depend on modules with different version then the current module version?</p> <p>You start with language and module version 0. Reasons why the language version of a language updates:</p> <ul> <li>a new migration was added manually -you\u2019ve executed the action \u201cCorrect Language Version\u201d</li> <li>you\u2019ve set it manually in the module properties</li> <li>a concept was moved to a different language through the refactoring menu and a migration script was written</li> </ul> <p>Reasons why the module version of a language updates:</p> <ul> <li>you\u2019ve set it manually in the module properties</li> <li>a concept/property/link was moved to a different language through the refactoring menu and a refactoring log was written</li> </ul> <p>Reason why both versions don\u2019t update:</p> <ul> <li>the language was renamed</li> <li>nodes/models are moved to a different solution</li> </ul> <p>The module version of a solution can\u2019t change automatically. I also don\u2019t know why you would change it manually. Devkits don\u2019t even have the option to change the module version. A good example for a language with different language and module versions is jetbrains.mps.lang.feedback.problem.scopes (language: 0, module: 1) because it only has a refactoring step but no other migrations.</p>","tags":["aspect"]},{"location":"aspects/migration/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>The migration frustration(Specific Languages\u2019 blog)</li> </ul> <p>When creating root nodes as part of language migration via java model.add root(someRoot), it throws the exception UnsupportedOperationException.</p> <p>Make sure that the affected model is not non-editable.</p> <ol> <li> <p>MPS forum - Migration scripts: the best practice \u21a9</p> </li> </ol>","tags":["aspect"]},{"location":"aspects/plugin/","title":"Plugin aspect","text":"<p>Plugins are a way to integrate your code with the MPS IDE functionality.</p> <p>\u2014 MPS documentation</p>","tags":["aspect"]},{"location":"aspects/plugin/#general","title":"General","text":"<p>Should you use this aspect?</p> <p>No. You should use plugin solutions instead.</p> How do facets work? <p></p> <p>Red rectangles: marker facets</p> <ul> <li>Do not define dependencies on other facets.</li> <li>They are known to the MPS make process and are available for users.</li> <li>You can define where your own facet should fit in and decide if you require some facet.</li> </ul> <p>Usage:</p> <ul> <li>Targets act as filters working on a stream of data delivered to them.</li> <li>The data flowing along targets is called resources.</li> <li>Resources are represented as Java interfaces and tuples.</li> </ul> How do I move a solution? <p>Given I have a project with a test solution open and the solution is stored in <code>code/com.my/solutions/com.my.solution.to.move</code>, which is the wrong place. It should be <code>code/com.my/test/com.my.solution.to.move</code> instead.</p> <p>I want to move the solution in the filesystem to its correct place. How can I move the solution without breaking the project?</p> <ol> <li>Move <code>code/com.my/solutions/com.my.solution.to.move</code> to <code>code/com.my.project/test/com.my.project.solution.to.move</code>.</li> <li>Close the MPS project and reopen it (no need to restart MPS).</li> <li>Add back the .msd files as follows:</li> <li>On the workspace root node, right-click and open Project Paths (Alt+Enter).</li> <li>Click on the red, old solution file and on -.</li> <li>Click on + and select the new location of this .msd file.</li> <li>Open your build script for CI tests and update the solution path in the project structure.</li> </ol> <p><sub>contributed by: @abstraktor<sub> How do you guide the user through cleaning up after deleting a referenced node? <p>Given I have a concept <code>Ball</code> and I have a reference <code>BallRef</code>. When I have a <code>Ball</code> node and I have <code>BallRef</code>s to it all over my model. When I delete the ball then I have a lot of dangling references. How may I get guidance in cleaning up these dangling references?</p> <p>You can show a balloon that says for example:</p> <pre><code>Deleting the ball has left some dangling references\n_Show_, _Ignore_\n</code></pre> <p>When clicking show, it will open a usage search for the deleted node using <code>ConsoleUtil.show</code>. This is implemented with a model listener in a quite generic fashion.</p> <p>Here are a few insights:</p> <ul> <li>Make sure to not show the node in the searched for part of the window. VCS will try to highlight it and run into an NPE (MPS 2019.3)</li> <li>Consider cut and paste, or moving elements: these operations yield a removal event as well. Hide the balloon again, once the node gets added again.</li> </ul> <p></p> <p><sub>contributed by: @abstraktor<sub> How can you make sure that the IDE loads a jar exactly once and then never again? <p>I have a .jar that depends on a native library (.dll/.so/\u2026). To use it in an MPS plugin I have a stubs solution for it. Unfortunately, without further ado, MPS tries to reload the jar in some cases (e.g. after a rebuild). This will fail because the JVM does not allow reloading of native libraries.</p> <p>How can I avoid this problem?</p> <p>To prevent that MPS will ever (re-)load .jars / stubs of a solution, you can check the facet \u201cIDEA Plugin\u201d in the \u201cFacets\u201d tab of the solution properties. This will show another tab where you have to set the Plugin ID `com.intellij.</p> <p>Now we just have to ensure that the .jars can be found at runtime (i.e. they must be on the classpath). The simplest approach would be to put them into the lib directory of the application (e.g. MPS installation / your product RCP).</p> <p><sub>contributed by: @till-f<sub> How can you use an IntelliJ icon for an action? <p>I want to use one of the icons shipped with IntelliJ for my action (<code>jetbrains.mps.lang.plugin.structure.ActionDeclaration</code>). How can I reference the icon? (note: this question might be deprecated for newer MPS versions)</p> <p>You can use <code>IconLoader.getIcon(...)</code> in the reflective editor. Right-click the editor for the icon, use <code>show reflective editor</code> and enter the expression as shown in the screenshot:</p> <p></p> <p><sub>contributed by: @till-f<sub> How to use a projection mode switcher to alter an editor component? <p>I have a concept editor in which I use an EditorComponent \\(A\\). Using the projection menu entry, I would like to switch to another editor component \\(B\\) upon activation.</p> <p>First \\(B\\) must override \\(A\\) and the <code>applicable concept</code> also must not differ.  Then for \\(B\\) in <code>applicable in context</code> we must provide a concept editor context hint.</p> <p></p> <p>This hint must also be referenced from a Projection Mode Switcher.</p> <p></p> <p>Afterwards, you will find a new entry in the Projection menu.</p> <p>Hint when used with Grammar Cells: you have to disable component inlining which can be activated by an intention at the position where the include of \\(A\\) happens. Also in any editor component that inherits from \\(A\\) and \\(A\\) itself, we cannot use Grammar Cells.</p> <p><sub>contributed by: @dbinkele<sub>","tags":["aspect"]},{"location":"aspects/plugin/#languagesfeatures","title":"Languages/features","text":"<p>I want to merge models.</p> <p>Use the language de.itemis.mps.modelmerger from  MPS-extensions.</p> <p>I want to verify the structure of a node.</p> <p>Use the language de.slisson.mps.structurecheck from  MPS-extensions.</p> <p>I want to store different states/versions of a node inside the model.</p> <p>Use the language de.itemis.mps.nodeversioning from  MPS-extensions.</p>","tags":["aspect"]},{"location":"aspects/plugin/#open-api","title":"Open API","text":"<p>How do you create a new SContainmentLink for a non-existent role?<sup>1</sup>.</p> <p>Create it through MetaAdapterFactory.</p> <p>How do you check if a model is a generator model or a test model?</p> <p>Call the corresponding method in SModelStereotype.</p> <p>How do you add imports to a model?</p> <p>Use the class ModelImportHelper and call <code>addImport</code>.</p> <p>How can you open an MPS Editor Tab programmatically?</p> <pre><code>EditorContext.getEditorPanelManager().openEditor(node);\n</code></pre> <p>Is it possible to associate an MPS-Aspect with more than one node?</p> <pre><code>IConceptAspect.getBaseConceptCollection();\n</code></pre>","tags":["aspect"]},{"location":"aspects/plugin/#troubleshooting","title":"Troubleshooting","text":"<p>A reference to a key in an action context parameter is out of search scope.</p> <p>You need to add a dependency to MPSCommonDataKeys. This class extends PlatformDataKeys and this class extends CommonDataKeys.</p> <p>An action isn\u2019t visible.</p> <p>You have to add it to an <code>ActionGroup</code> that can be attached to different places such as the context menu or the build menu.  All of the action context parameters that are marked as required have to be available and the <code>isApplicable</code> block must return true for an action to be visible. For debugging purposes, you can set always visible to true to check if your action is registered at all. </p> <p>You also need to have a standalone descriptor in your model for it to work. Additionally, the solution kind should be set to Other in the Java tab of the solution properties (Plugin | MPS).</p> <ol> <li> <p>How to create new SContainmentLink for a non-existent role? \u21a9</p> </li> </ol>","tags":["aspect"]},{"location":"aspects/polyfun/","title":"Polymorphic functions aspect","text":"<p>This aspect allows declaring polymorphic functions and is part of Shadow Models in  MPS-extensions. You can declare a function that can have different implementations per language. To get a better understanding, have a look at the corresponding sandbox.</p> <p>Is there a handler that the IDE calls when it loads a language?</p> <p>I have a language \\(K\\) with some languages extending \\(K\\) named \\(A\\), \\(B\\) and \\(C\\). \\(K\\) needs to access some behavior implemented by \\(A\\), \\(B\\) or \\(C\\), depending on which of these are deployed. To do that, I implemented a registry where \\(A\\), \\(B\\), and \\(C\\) can register and which \\(K\\) uses to retrieve a common interface with a specific implementation by \\(A\\), \\(B\\), or \\(C\\).</p> <p>The question remains: How can \\(A\\), \\(B\\) and \\(C\\) register their implementation at the registry? Is there maybe a better mechanism I should use here?</p> <p>The language de.q60.mps.polymorphicfunctions allows you to do that. It provides a new language aspect where you can declare a function in one language and multiple implementations in other languages. It supports polymorphic dispatch and even priority rules in case there are multiple applicable implementations.</p> <p><sub>answered by: @slisson<sub> <p>Alternative</p> <p>Typically you would implement this by using the extension point mechanism:</p> <ul> <li> <p>language \\(K\\) defines an extension point \\(EP\\) (inside of its plugin aspect) with an interface \\(EPI\\) for the extension implementors.</p> </li> <li> <p>language \\(A\\), \\(B\\) and \\(C\\) contribute extensions for the <code>EP</code> with specific implementations of the \\(EPI\\) interface (also inside of the plugin aspect).</p> </li> <li> <p>language \\(K\\) provides a facade for querying current extensions registered for the \\(EP\\) and implements an approriate strategy for handling multiple implementors of \\(EPI\\) contributed by different extensions from languages \\(A\\), \\(B\\) and \\(C\\):</p> <ul> <li> <p>by returning the implementor from the first extension, if your scenario expects only one deployed language with a specific implementation.</p> </li> <li> <p>by picking up one of the implementors from multiple extensions using some criteria, like a priority.</p> </li> <li> <p>by combining/chaining multiple implementors according to your specific logic.</p> </li> </ul> </li> </ul> <p>Because the facade would typically implement some simple caching of the resulting \\(EPI\\) implementation (to not query the \\(EP\\) every time the functionality is required), this would mean that you might need to implement some additional mechanism to allow for dynamical reload/reset of the current \\(EPI\\) implementation during the development, when a new extension is created and tested.</p> <p><sub>answered by: @wsafonov<sub>","tags":["aspect"]},{"location":"aspects/refactorings/","title":"Refactorings aspect","text":"<p>Simple refactorings can be written using the jetbrains.mps.lang.refactoring language.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> </ul> <p>Is this aspect widely used?</p> <p>No, even in MPS languages there are just a few use cases.</p> <p>Can you link to an example that demonstrates this aspect?</p> <p>Rename implements the refactoring. RenameNode implements the action. The action is part of the group CoreNodeRefactorings which belongs to the NodeRefactoring group. Base Language has its own group called RefactoringAdditions.</p> <p>Can you change the concept of a node while keeping all properties, references, and children?</p> <p>Yes, call RefactoringRuntime.replaceWithNewConcept with your node and new concept as parameters.  In this class, there are also some other useful methods such as changePropertyInstance(node, oldProp, newProp) and changeReferenceLinkInstances(node, oldLink, newLink).</p> <p>Changing the concept of a node(Specific Languages\u2019 blog)</p> <p>What should I put in the applicable block of the refactoring and its action?</p> <p>For the action you can use <code>is applicable refactoring&lt;YourRefactoring&gt;()</code>. By default, refactorings are not disabled for read-only editors. Consult the update block of the MoveNodes action for more information.</p>","tags":["aspect"]},{"location":"aspects/scripts/","title":"Scripts aspect","text":"<p>The scripts aspect lets you perform changes to your models in batches.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> </ul> <p>Are enhancement scripts executed as part of the migration process?</p> <p>No, they are not.</p> <p>Where can I find all available enhancement scripts?</p> <p>Go to Tools \u2192 Scripts \u2192 Enhancements and select a script or go to the All scripts page and select a few of them to run.</p>","tags":["aspect"]},{"location":"aspects/structure/","title":"Structure aspect","text":"<p>The structure aspect contains all the concept and interface declarations of a language.</p> <ul> <li>official documentation</li> <li>old cheatsheet</li> <li>Finding examples of MPS features: Link instances(Specific Languages\u2019 blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/structure/#concepts","title":"Concepts","text":"<p>How can you create an MPS concept declaration programmatically?</p> <p>Create an MPS concept declaration programmatically(Specific Languages\u2019 blog)</p> <p>Concept XY wasn\u2019t found in the language.</p> <p>Concept not found(Specific Languages\u2019 blog)</p> <p>How do you find examples of MPS concepts?</p> <p>Finding examples of MPS concepts(Specific Languages\u2019 blog)</p> <p>When a concept extends another concept/implements some interfaces, which method is called when they are defined in more than one concepts/interfaces?</p> <p>The used algorithm is a variant of C3 linearization(source). When the concept doesn\u2019t implement the method itself, first the implemented interfaces are recursively considered in declaration order, then the extended concept. You can try it yourself, for example for the concept ClassConcept: <pre><code>BehaviorRegistryImpl r = (BehaviorRegistryImpl) ConceptRegistry.getInstance().getBehaviorRegistry();\nBHDescriptor d = r.getBHDescriptor(concept/ClassConcept/);\n#print r.getMRO().calcLinearization(_SAbstractConcept.wrap(concept/ClassConcept/));\n</code></pre> If you want to call a specific <code>type()</code> implementation, you have to just cast the node to the corresponding concept and then call the method e.g. <code>myNode as MyITypeable.type()</code></p> <p>How can you get the short node ID from the node ID and vice versa?</p> <ul> <li>Short one: <code>new IdEncoder().toText(node.getNodeId())</code></li> <li>Long one: <code>new IdEncoder().parseNodeId(nodeId)</code></li> </ul> <p>How can I assign node IDs manually?</p> <p>Assigning node IDs explicitly(Specific Languages\u2019 blog)</p> <p>Can I find a node by its ID?</p> <p>You can write a script on the console to find it. For example:</p> <p></p> <p>There is also the action Go to node by ID that can be found in the Navigate main menu.</p> <p>Can I cast concept objects to super concept objects?</p> <p>I have the following successful boolean check: <code>someConcept.isSubConceptOf(MySuperConcept)</code> But if I put this code below, it fails with an exception that the cast cannot be performed: <code>((concept&lt;MySuperConcept&gt;) someConcept)</code> The type of the expression someConcept is <code>concept&lt;&gt;.</code></p> <p>There is a special cast for that. For example: <pre><code>concept&lt;&gt; cls = node/AbstractMethodError/.concept;\n#print cls:BaseConcept.getLanguage().getQualifiedName();\n</code></pre></p>","tags":["aspect"]},{"location":"aspects/structure/#interfaces","title":"Interfaces","text":"<p>The concept implements ISuppressErrors but errors are still shown for the node.</p> <p>You have to implement IDontApplyTypesystemRules and ISkipConstraintsChecking. More information can be found in Suppressing Errors | MPS.</p> <p>What\u2019s IMainClass used for?</p> <p>It allows to execute Base Language code. An example can be found in Shapes tutorial - Running the code.</p>","tags":["aspect"]},{"location":"aspects/structure/#properties","title":"Properties","text":"<p>How do you use a list of string properties?</p> <p>Wrap your property into a new concept and use a child collection:</p> <p></p> <p>Can properties be overridden?</p> <p>No, more info can be found in MPS-17143.</p> <p>How to get the name of a concept property?</p> <p>The easiest way to do this is via PropertyIdRefExpression. Then you can directly reference the property in question like this: <code>property/MyConcept : myProperty/.getName()</code> Whith this implementation, every change in the property names are always calculated properly.</p> <p><sub>contributed by: @abstraktor<sub>","tags":["aspect"]},{"location":"aspects/structure/#references","title":"References","text":"<p>How do you get the previous label of a reference?</p> <pre><code>((SReference)node.getReference(link)).getResolveInfo()` // or\nnode.reference&lt;ref&gt;.resolveInfo\n</code></pre> <p>Can you use the resolve info to fix a broken reference?</p> <pre><code>ResolverComponent.getInstance().resolve(...)\n</code></pre> <p>How can you find broken references on the console?</p> <pre><code>#instances&lt;scope = global&gt;(BaseConcept).where({~it =&gt; it.references.any({~it =&gt; it.target == null; });\n})\n</code></pre> <p>Deleting references doesn\u2019t work when using the editor cell ref. presentation</p> <p>Example: <code>[&gt; thingref [&gt; ( % thing % -&gt; ref. presentation ) &lt;] &lt;]</code></p> <p>Ref presentation automatically uses the name of the interface INamedConcept. If you add <code>auto-deletable: true</code> to the cell and the cardinality is <code>[1]</code>, the name is deleted but the reference is not removed. When the cardinality is <code>[0..1]</code> the reference is deleted. This behavior is expected because in the first case, the reference is mandatory, in the second case it is optional.</p>","tags":["aspect"]},{"location":"aspects/test/","title":"Test aspect","text":"<p>Testing is an essential part of a language designer\u2019s work.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> <li>Testing in MPS: What and Why(languageengineering.io\u2019s blog)</li> <li>The Language Testing Triangle(Markus Voelter\u2019s blog)</li> </ul>","tags":["aspect"]},{"location":"aspects/test/#general","title":"General","text":"<p>Can you add an annotation to skip tests the way it normally works with JUnit?</p> <p>No, it isn\u2019t supported. You have to comment out the test case. The only statement that supports this behavior is the  assert statement of KernelF (AssertTestItem).</p> <p>What\u2019s the TestInfo node used for?</p> <p>How to create a TestInfo node for your tests(Specific Languages\u2019 blog)</p> <p>How do node tests work?</p> <p>How do node tests work?(Specific Languages\u2019 blog)</p> <p>Can you invoke an action by ID?</p> <p>Yes, use the statement invoke action by id.</p> <p>When using the type statement in an editor test, how do you enter multiple words?</p> <p>Enter them as one long word without spaces in between, e.g. publictransientclass.</p> <p>How to know if some MPS code is inside a test?</p> <p>Given I am writing some code in MPS that is supposed to run only if we\u2019re not running tests. How can I detect if I\u2019m running a test?</p> <ol> <li> <p>Don\u2019t do it. Consider mocking something out instead or ensuring that you are testing on a low-enough level.</p> </li> <li> <p>Here are two options, if you need to do this:</p> </li> </ol> <pre><code>// true if running tests from inside the MPS process or from command line\njetbrains.mps.RuntimeFlags.getTestMode().isInsideTestEnvironment()\n// true if running tests from the command line only\njetbrains.mps.RuntimeFlags.isTestMode()\n</code></pre> <p><sub>contributed by: @abstraktor<sub> <p>How do I access the current project inside a node test case?</p> <p>There is a project expression that should be used.</p> Why does the node ID change during a node test? <p>Given I have a node test case. My test case has a check node called data and my test case has a test test1 which prints the node ID of data My test case has a a test test2 which prints the node id of data. When I run the test test1 and test2 print different node IDs.</p> <p>Why is that?</p> <p></p> <p>Terms used:</p> <ul> <li>check-node for these fixture nodes that you enter into the test case under nodes</li> <li>test case for the root node, the chunk that contains the tests</li> <li>tests for the test methods of which we have test1 and test2</li> </ul> <ul> <li>Each test case runs on its copy of its model. </li> </ul> <p>MPS tries to keep tests reproducible and isolated even when being run in-process. For that, MPS copies the whole model into a temporary model. Modifications of one test case will then be invisible to the next test case since it will work on a new temporary model. This prevents test cases from interacting.</p> <p>Running tests in a separate model ensures that they will never modify the original model (as long as you don\u2019t explicitly start acting on other models).</p> <ul> <li>Check nodes per test</li> </ul> <p>A test-case may have multiple tests though. MPS also isolates single tests within the same test case. For that, the check-nodes are copied once for each test. Each test may then act on their own copy.</p> <pre><code>// there is one data node in the model for each test\nassert 2 equals data.model.nodes(Data).size\n</code></pre> <ul> <li>All tests of a test case share their referenced nodes</li> </ul> <p>To save memory though, these check nodes all lie in the same model for each test case. References to other nodes outside the test case will only need to be copied once and shared by all tests of that test case. As a result, the IDs of check nodes change, and the IDs of non-check-nodes are the same as in the original model.</p> <pre><code>// nodes in this model that are not check-nodes of this test case will only be there once\nassert 1 equals dataRef.model.nodes(Chunk).size;\n</code></pre> <p>Consequently, multiple tests of the same test case are not fully isolated. In the following example, both tests assert and do the same, yet test3 passes while test4 fails. The data element is now located in a separate chunk outside the test case and the check-node is a reference to it. As a result, test4 is running red because test3 already modified the referenced node.</p> <p></p> <ul> <li> <p>Kinds of tests</p> </li> <li> <p>I checked this behavior in-depth for node tests.</p> </li> <li>I think it is similar for editor tests.</li> <li>I am sure that this does not apply to baseLang-tests since they don\u2019t prepare a temporary model for you.</li> </ul> <p>Practical effects of this</p> <p>These are some rules of thumb that result from that:</p> <ul> <li>The tests of a test case may interact, so you should inline all modified nodes into the test case to be check nodes.</li> <li>Whenever you modify many nodes in the model, consider writing a migration and migration test instead.</li> <li>Remember that the console and each test will output separate IDs for the conceptually same node. And they will change from run to run.</li> <li>Especially when stepping through tests, it is easy to be confused by that and draw false conclusions</li> <li>Whenever your code queries for the nodes of a model, be ready to see duplicates for each test (as in the dataRef example). You may test this by asserting that something is included or excluded instead of asserting true equality of the expected and actual lists.</li> <li>Another source for duplicates is if the test model imports itself.</li> <li>If you need full power on the temporary model, consider writing a Base Language test and creating your repository and model by hand. jetbrains.mps.smodel.TestModelFactory allows to do that, e.g. the ModelListenerTest uses that TestModelFactory. It is unfortunately not available as stubs so you\u2019ll need to copy it to your project</li> </ul> <p><sub>contributed by: @abstraktor<sub>","tags":["aspect"]},{"location":"aspects/test/#how-to-test","title":"How to test","text":"<p>How do you implement custom tests?</p> <p>Implementing custom tests(Specific Languages\u2019 blog)</p> How to set up a generator smoke test? <p>I would like to write a generator smoke test.  Therefore, I have some solutions with models (regular ones, not @test models) which are built from the command line and the generators invoked are generating some .c files.</p> <p>In addition, I also have a @test model in the same solution with some unit tests which checks if the output directories of these models contain any generated files. I don\u2019t invoke the generation of the models programmatically but rely on the ant task which is generating the solution.</p> <p>Unfortunately this setup always leads to broken tests. It seems like the unit tests are executed before the models (which are built during the CI run) and though the test fails.</p> <p><sub>asked by: @arimer<sub> <p>When the tests work fine when run from within the IDE, then the problem is most probably that when your tests are executed, they are running from the jars and not the sources. The generator output location points into the jar file that the tests are executed from and not to the real source location.</p> <p>You could change the packaging to include the source_gen folder for your specific test solution.</p> <p>This can be done the following way in the default layout of your build model:</p> <p></p> <p>In this case, you would need to detect if you are running from sources or from a JAR in CI and change the location where you look for the generated files.</p> <p>This can be done by calculating a solution relative path for the test solution containing the packed sources.</p> <pre><code>//case running from .jar\nif (module instanceof AbstractModule &amp;&amp; ((AbstractModule) module).getModuleSourceDir() != null) { AbstractModule s = ((AbstractModule) module); if (s.isPackaged() &amp;&amp; s.getModuleSourceDir().getBundleHome() != null) { IFile bundleHome = s.getModuleSourceDir().getBundleHome(); return bundleHome.getFileSystem().getFile(bundleHome.getPath() + \"!\" + path); } // case: running from sources \nIFile relativePath = s.getModuleSourceDir().getDescendant(path); return relativePath; }\n</code></pre> <p>The easier solution is to place the tests in a separate solution and then invoke the make process for the solution that contains your input programmatically, so you can assert over the output. An example implementation of how the make process is invoked can be found in the mbeddr-c part.</p> <p><sub>answered by: @coolya<sub> How to write editor tests for context assistants? <p>I need to unit tests context assistants, ideally with an EditorTestCase, but it is not supported out of the box, any idea?</p> <p>This snippet allows to automatically test the context assistant in the code section of the <code>EditorTestCase</code>:</p> <pre><code>// Context assistants take some time to popup, otherwise getActiveAssistant returns null  \nThread.sleep(3000); ContextAssistantManager contextAssistantManager = editor component.getEditorContext().getContextAssistantManager(); final ContextAssistantController controller = ((ContextAssistantController) contextAssistantManager.getActiveAssistant()); foreach menuItem in contextAssistantManager.getActiveMenuItems() { if (\"Item Name\" :eq: ((ActionItemBase) menuItem).getLabelText(\"\")) { // Execute it in a BaseEditorTestBody context  \nfinal Project project = _this.[Project] &lt;no instance&gt;.getProject(); _this.[void] &lt;no instance&gt;.runUndoableInEDTAndWait(new Runnable() { @Override public void run() { project.getModelAccess().executeCommand({ =&gt; controller.executeActionItem((ActionItemBase) menuItem); }); } }); } }\n</code></pre> <p>Note: - \u201cItem Name\u201d must be replaced with the name of the item as shown in the editor - \u201c_this\u201d is a concept from internalBaseLanguage DSL.</p> <p><sub>contributed by: @cmoine<sub> How do you name check errors with dynamic messages? <p>When I make the error text dynamic:</p> <p></p> <p>Then my error is named <code>UnnamedError</code> and I have a hard time selecting the right one:</p> <p></p> <p>How do I name errors with dynamic messages?</p> <ol> <li>Go to your error statement in your checking rule.</li> <li>Import the language jetbrains.mps.lang.test.</li> <li>Run the intention Add Message Annotation.</li> <li>Type a nice name.</li> </ol> <p></p> <p></p> <p>Note that this does not work for errors that result from constraints.</p> <p><sub>contributed by: @abstraktor<sub> <p>What\u2019s the best way to test the contents of the code completion/substitution menu for a given cursor position using a NodesTestCase or an EditorTestCase?</p> <p>Example for an <code>EditorTestCase</code>:</p> <pre><code>SubstituteInfo si = (editor component.getSelectedCell()).getSubstituteInfo();\nlist&lt;SubstituteAction&gt; actions = si.getMatchingActions(\"\", false);\nassert actions.size == 4;\nassert actions.any({ it =&gt; it.getMatchingText().equals(\"something\"); });\n</code></pre> <p>How do you test with two-step deletion enabled?</p> <p>Example:</p> <pre><code>EditorTestUtil.runWithTwoStepDeletion({ =&gt; invoke action -&gt; Backspace editor component.getEditorContext().getRepository().getModelAccess().runReadAction({ =&gt; assert true DeletionApproverUtil.isApprovedForDeletion(editor component.getEditorContext(), node) ; }); invoke action -&gt; Delete assert true DeletionApproverUtil.isApprovedForDeletion(editor component.getEditorContext(), editor component.getSelectedNode()) ; }, true)\n</code></pre> <p>How do you test with typing over existing text enabled?</p> <p>Example:</p> <pre><code>EditorTestUtil.runWithTypeOverExistingText({ =&gt; type \" final\" }, false)\n</code></pre> <p>How do you test that a language is used?</p> <p>Example:</p> <pre><code>UsedLanguagesUtils.assertLanguageUsed(editor component, language/jetbrains.mps.lang.editor.menus.extras.testLanguage/)\n</code></pre> <p>How do you access the error cells in the inspector?</p> <pre><code>EditorComponent inspector = project.getComponent(InspectorTool.class).getInspector();\nSet&lt;EditorCell&gt; errorCells = inspector.getCellTracker().getErrorCells();\n</code></pre> <p>How do you click on anything in a test?</p> <p>You can execute intentions and actions programmatically, for UI elements like buttons you can use the press mouse(x,y) and release mouse statements.</p> <p>How can you test that code completion works?</p> <p>You can use a scope test, to check if all items are visible in the menu. To check the number of actions in the menu call: </p> <pre><code>assert true editor component.getNodeSubstituteChooser().isVisible() &amp;&amp; editor component.getNodeSubstituteChooser().getNumberOfActions() == n;\n</code></pre> <p>How do I run some checks of the model checker?</p> <p>Example code:</p> <pre><code>IChecker&lt;SNode, NodeReportItem&gt; structureChecker = new  StructureChecker();\nIAbstractChecker&lt;ModelCheckerBuilder.ItemsToCheck, IssueKindReportItem&gt; checker = new  ModelCheckerBuilder(false).createChecker(new arraylist&lt;IChecker&lt;?, ? extends IssueKindReportItem&gt;&gt;{structureChecker, new SuppressErrorsChecker()});\nchecker.check(ModelCheckerBuilder.ItemsToCheck.forSingleModel(modelToCheck), modelToCheck/.getRepository(), new  CollectConsumer&lt;IssueKindReportItem&gt;(), new  EmptyProgressMonitor());\n</code></pre> <p>How do I run unit tests through a run configuration?</p> <p>Example code:</p> <pre><code>command process&lt;jUnit&gt; process = jUnit(project = project,tests = allTests, virtualMachineParameter = vmParams\nworkingDirectory = workingDir);\nint exitcode = process.startAndWait(TimeUnit.MINUTES.toMillis(1));\n</code></pre> <p>Can I test the actions menu?</p> <p>For internal tests in MPS, there is the following code:</p> <pre><code>list&lt;TransformationMenuItem&gt; items = MenuLoadingUtils.loadNamedMenu(editor component, node-ptr/WithExecutableAction/, \"test location\");\nActionItem item = (ActionItem) items.get(0);\nitem.execute(\"\");\n</code></pre> <p>MenuLoadingUtils.java and WithExecutableAction are not public, so they have to be created manually.</p> <p>How can I run a Base Language test (BTestCase) in an MPS environment?</p> <p>Add the MPSLaunch annotation to the test case and extend the class EnvironmentAwareTestCase.</p> <p>Example:</p> <pre><code>@MPSLaunch test case Test extends EnvironmentAwareTestCase {\n&lt;&lt;members&gt;&gt;\n&lt;&lt;before test&gt;&gt;\n&lt;&lt;after test&gt;&gt;\ntest test {\nread action with MPSModuleRepository.getInstance() {\nforeach module in MPSModuleRepository.getInstance().getModules() {\nSystem.out.println(module.getModuleName());\n}\n}\n}\n}\n</code></pre>","tags":["aspect"]},{"location":"aspects/test/#troubleshooting","title":"Troubleshooting","text":"<p>Tests aren\u2019t running at all.</p> <p>A test info node has to be added to the model of the tests so that the tests can find the path of the project. The project path also has to be set in this node. Make sure that variables that are used in this path are set in Preferences \u2192 Appearance &amp; Behavior \u2192 Path Variables (TestInfo | MPS).</p> <p>Tests have a long warm-up time and run slowly.</p> <p>When running the tests from a run configuration, enable <code>Execute in the same process</code> in the configuration settings. Check also the box Allow parallel run (Running the tests | MPS).</p> <p>The tests only work in MPS and not on the command line</p> <p>Why does my test fail when run from Ant but not when run from MPS?(Specific Languages\u2019 blog)</p> <p>Why does the test execution fail with \u201cTest project \u2018$\u2026\u2019 is not opened. Aborted\u201d?</p> <p>This is happening because the variable in the <code>TestInfo</code> is not set. Go to File \u2192 Settings \u2192 Path Variables and create an entry for your variable, with a path to the project location on your hard drive.</p> <p>java.lang.IllegalStateException: The showAndGet() method is for modal dialogs only.</p> <p>One of the reasons why this message pops up is that a dialog should be displayed in a headless environment like a build server. There is no way to avoid this exception than not showing the dialog. According to the IntelliJ documentation it can also happen when the dialog is not shown on the EDT thread or the dialog is not modal.</p>","tags":["aspect"]},{"location":"aspects/textgen/","title":"TextGen aspect","text":"<p>The TextGen language aspect defines a model to text transformation.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> </ul> <p>How do you get the TextGen for a node?</p> <p>Use the classTextGeneratorEngine. It only works for root nodes such as ClassConcept and returns null when there is no text output.</p> <p>Can you also generate the text from the generator aspect?</p> <p>Use the language com.dslfoundry.plaintextgen from  MPS-extensions.</p> Can I implement text generation for another language? <p>I would like to implement text generation for language A in a separate language B. Concretely, I need different text generation for some of the KernelF concepts. When I try to do this, I get a compile error, because it looks like the generated descriptor does not include \u201cinherited\u201d concepts:</p> <pre><code>public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {\nswitch (myIndex.index(concept)) {\ncase LanguageConceptSwitch.Component:\nreturn new Component_TextGen();\ncase LanguageConceptSwitch.Contract:\nreturn new Contract_TextGen();\ncase LanguageConceptSwitch.EmptyContent:\nreturn new EmptyContent_TextGen();\ncase LanguageConceptSwitch.Library:\nreturn new Library_TextGen();\ncase LanguageConceptSwitch.Port:\nreturn new Port_TextGen();\n</code></pre> <p>Is it not possible to \u201coverride the textgen\u201d this way?</p> <p><sub>asked by: @markusvoelter<sub> <p>It\u2019s not possible this way. So far the two ways I found to make this happen are:</p> <ol> <li> <p>Extend the original language (A.ex) and create subconcepts of all the concepts you need to specialize the textgen. You will then need to do M2M transformation to replace the extended concepts. You can do this generically by using a script the generator that searches for all nodes of concepts that are extended in A.ex and replaces them by using the <code>RefactoringRuntime.replaceWithNewConcept</code> method.</p> </li> <li> <p>Create annotations that override the text generation of the concepts and attach them in a generator. Then MPS will first call the text gen of the annotation and you can override it there. </p> </li> </ol> <p>There is MPS-22092 which describes this request.</p> <p><sub>answered by: @coolya<sub>","tags":["aspect"]},{"location":"aspects/transformations/","title":"Transformations aspect","text":"<p>This language is part of Shadow Models in  MPS-extensions. Consult the documentation for more information.</p> <p>What\u2019s a fork?</p> <p></p> <p>It can group a list of rules which can be applied. If there are nodes in the output where one of the transformations would again be applicable, nothing will happen unless you enable the fixpoint mode. When you use the transform keyword it will just copy the input and all its descendants. If any input concept matches a transformation rule parameter in the auto-apply part, it will transform the input according to the matched transformation.</p> <p>What does the transform statement do?</p> <p>It has the same meaning as a COPY_SRC macro in MPS and it will just copy the input node and apply a rule.</p>","tags":["aspect"]},{"location":"aspects/typesystem/","title":"Type system aspect","text":"<p>A type system is part of a language definition assigning types to the nodes in the models written using the language. The type system language is also used to check certain constraints on nodes and their types.</p> <p>\u2014 MPS documentation</p> <ul> <li>official documentation</li> <li>old cheatsheet</li> </ul> <p>Type system rules aren\u2019t executing.</p> <p>Turn off the power save mode. Make also sure that the language that contains the rules is used. Make sure that under Tool \u2192 Model Checker the type-system checks are enabled. Some rules are only checked when Check model is invoked. In this case, the option do not apply on the fly is set to true in a checking rule.</p> <p>Are comparison rules often used?</p> <p>No, they are rarely used (not many results across various code bases).</p> <p>How do you learn more about MPS CodeRules?</p> <p>This is kind of a new type-system is based on constraints. Visit JetBrains/mps-coderules for more information. There is also a blog post about this project. The new MPS implementation of the Kotlin language uses CodeRules. More information can be found in JetBrains/mps-kotlin-typesystem. There is also a free course about it on stepik.</p> <p>Type system vs constraints?</p> <p>Type system vs constraints(Specific Languages\u2019 blog)</p> <p>Subtyping vs inheritance?</p> <p>Subtyping vs inheritance(Specific Languages\u2019 blog)</p> <p>How can you speed up model checks?</p> <p>Speeding up model checks with Scope Cache(Specific Languages\u2019 blog)</p> How do you build a language extension for checking rules? <p>I built a Base Language extension which can be used in a checking rule (i.e., in the type-system aspect of another language) but the new language\u2019s generator isn\u2019t engaged during the generation of some checking rule using the extension (the generation plan says: \u201cNOT IN THE PLAN\u201d).</p> <p>The generator of the new language must have a dependency to the Base Language generator with the scope set to <code>Extends</code>.</p> <p></p> <p><sub>contributed by: @kbirken<sub> <p>When and why should you copy a type in an inference rule?</p> <p>I\u2019ve seen the same code, where one time the type is copied, and another time it\u2019s just used (without the copy). When should we copy the type and why?</p> <pre><code>inference rule typeof_Member {\napplicable for concept = Member as member\napplicable always\noverrides false\ndo {\ntypeof(member) :==: member.type.copy;\n}\n}\n</code></pre> <p>The type should only be copied if you want to use it in another type as a child.</p> <p>In the example, it should be fine to simply use <code>member.type</code>. But let\u2019s say you have a <code>SetType</code> concept in your language that contains an <code>innerType</code> as a child. If you want to construct an instance of that concept, you would write code like this:</p> <pre><code>node&lt;SetType&gt; result = new node&lt;SetType&gt;;\nresult.innerType = member.type.copy;\ntypeof(member) :==: result\n</code></pre> <p>If you omit the <code>.copy</code> in the code, you would attempt to \u201chijack\u201d the <code>member.type</code> node from the <code>member</code> and break the model. MPS will complain.</p> <p><sub>contributed by: @sergej-koscejev<sub> <p>How do you suppress errors?</p> <p>Given I have a piece of embedded demonstration code and don\u2019t want it to show warnings (e.g. on unused variables). How can I do that?</p> <p>Make your node implement ISuppressErrors. If you don\u2019t override any methods of it, it will suppress all constraint, type-system, and cardinality errors and warnings.</p> <ul> <li>You may override <code>#suppress(node&lt;&gt;)</code> to only suppress the errors of certain subnodes.</li> <li> <p>You may override <code>#suppress(NodeReportItem)</code> to only suppress certain errors. Overriding this will take precedence of overriding <code>#suppress(node&lt;&gt;)</code>. Xou should implement only one of them or manually call <code>#suppress(node&lt;&gt;)</code> from <code>#suppress(NodeReportItem)</code>.</p> </li> <li> <p>If there are nested nodes that implement <code>ISuppressErrors</code>, the error will be suppressed if any of them returns true. You may debug such by copying the error node to the console (e.g. <code>nodeRef@50283</code>) and running this line:</p> </li> </ul> <pre><code>&gt; nodeRef@50283.ancestors&lt;concept = ISuppressErrors&gt;.select({~it =&gt; [it, it.suppress(nodeRef@50283)]; });\n[[dummy, false], [&lt;no name&gt;[LiteralProgramFragment]: dummy():void, false], [Demo1, true]]\n</code></pre> <p>The result is the path from that node to the top and will tell you which node is suppressing that error. The concept IAntisuppressErrors also plays a role there, although it is deprecated (implement the <code>suppress</code> method instead).</p> <p><sub>contributed by: @abstraktor<sub> Is there an elegant way to express inference rules on lists? <p>If you want to calculate the common type of more than one node you can use a type system variable for that. Example:</p> <pre><code>var x;\nforeach it in self.items {\ninfer x :&gt;=: typeof(it)\n}\ntypeof(self) :==: operation type(self, x, null);\n</code></pre> <p>Given that you need the operation type in the end. You most probably need to change the implementation of the rules contributing to the <code>operation type</code> to only use \u201cone side\u201d. If the type of the expression is simply the type of the variable <code>x</code> you can omit it.</p> <p><sub>answered by: @coolya<sub> <p>What\u2019s Helgins?</p> <p>It\u2019s the old name of the type-system. The name is nowadays not used anymore.</p> <p>How is the relation between null and other types?</p> <p>Null is a subtype of every reference type in Base Language/Java but not of primitive types.</p> <p>What is variance?</p> <p>Detailed explanation:</p> <ul> <li>StackOverflow answer</li> <li>Covariance and Contravariance in Java</li> </ul> <p>It is about the relationship between types and subtypes,  about type conversion and to decide whether a method is overwritten or overloaded.</p> <p>Simple explanation:</p> <ul> <li>covariance<ul> <li>subtypes are allowed instead of a type</li> <li>examples: method return type, parameter type, variable assignment</li> </ul> </li> <li>contravariance:<ul> <li>supertypes are allowed instead of a type</li> <li>parameter of function types</li> </ul> </li> <li>invariance: neither covariance nor contravariance<ul> <li>examples: generics (e.g <code>List&lt;String&gt;</code>is not a subtype of <code>List&lt;Object&gt;</code>)</li> </ul> </li> </ul> <p>For overridden methods, the signature has to be the same (name + parameters), and the return type can be a subtype of the original return type:</p> <pre><code>class MyCollection {\nIterator iterator() {\nnull;\n}\n}\nclass MyList extends MyCollection {\n@Override\n*package* ListIterator iterator() {\nnull;\n}\n}\n</code></pre> <p>The class MyList is allowed to specify a different return type (ListIterator).</p> <p>What\u2019s autoboxing in Base Language/Java?<p>In some cases, there is an automatic conversion between primitive types and reference types called autoboxing/unboxing.</p> </p> <pre><code>Integer z1 = 1;\nint z2 = new Integer(1);\n</code></pre> <p>Autoboxing doesn\u2019t apply to array types and the type checker behaves differently in Java (J) and Base Language (B):</p> <pre><code>Integer[] a = new int[]{1, 2}; // disallowed in both\nInteger z = 1; // allowed in both\nInteger[] b = {1}; // allowed in J, disallowed in B\nint[] c = {new Integer(1)}; // allowed in J, disallowed in B\nint[] d = new Integer[]{new Integer(1)}; // disallowed in both\nObject d = new int[]{1}; // allowed in both\n</code></pre>","tags":["aspect"]},{"location":"aspects/vcs/","title":"VCS aspect","text":"<ul> <li>official documentation</li> </ul> <p>The VCS merge aspect language aspect defines strategies to automatically resolve merge conflicts for nodes, their children, references, and properties.</p> <p>\u2014 MPS documentation</p> <p>I pulled some changes or did some other VCS-related stuff and strange errors appear or changes aren\u2019t visible.</p> <p>There might be a bug related to caching or VCS in general. Invalidating the cache or restarting the project might help. There are quite some bugs in VCS.</p> <p>How do you avoid merge conflicts?</p> <p>Avoiding merge conflicts(Specific Languages\u2019 blog)</p>","tags":["aspect"]},{"location":"aspects/virtualinterfaces/","title":"Virtual Interfaces aspect","text":"<p>This aspect allows declaring virtual interfaces and is part of Shadow Models in  MPS-extensions. To get a better understanding, have a look at the corresponding sandbox.</p>","tags":["aspect"]},{"location":"build/","title":"Build language","text":"<ul> <li>official documentation</li> <li>Escaping to Ant from the build language(Specific Languages\u2019 blog)</li> </ul> <p>How can you override the build directory name build to something different?</p> <p>You can do it when you invoke Ant by passing <code>-Dbuild.dir=otherDir</code>.</p> <p>Dependencies on a module not visible from the current build project.</p> <p>Build script error: \u201cDependency on a module not visible from current build project\u201d(Specific Languages\u2019 blog)</p> <p>Build script error: unsatisfied dependency.</p> <p>Build script error: \u201cUnsatisfied dependency\u201d(Specific Languages\u2019 blog)</p> <p>Build script error: can\u2019t find used language in dependencies.</p> <p>Build script error: \u201cCannot find used language in dependencies\u201d(Specific Languages\u2019 blog)</p> <p>Can\u2019t find extended language in dependencies.</p> <p>Check this answer.</p> <p>How do you build an MPS project with maven?</p> <p>Specific Languages blog: Building MPS projects using Maven - a sample</p> <p>How can you find out the supported MPS version of a project?</p> <p>Search the readme for this information. If the project uses a Gradle script, you can most likely find this information in the file build.gradle (for example in this line in MPS-extensions). For older MPS projects there is no way of finding out the version.</p> <p>What do you need to put into the .gitignore file?</p> <p>Have a look at this .gitignore file.</p> <p>Why is it possible to successfully build models with missing imports?</p> <p>Why can I successfully build models with missing imports?(Specific Languages\u2019 blog)</p> <p>X errors before generation.</p> <p>3358 errors before generation(Specific Languages\u2019 blog)</p> <p>How do you clean the generated files in MPS?</p> <p>Possible solutions:</p> <ul> <li>Specific Languages Blog: mpsclean</li> <li>When using a build script, have a dedicated clean task (gradle example).</li> </ul> <p>The files from operation from the MPS build model, changes the access permissions of the copied over files.</p> <p>As a workaround, you can use Buildlayout_Filemode or unzip the files using Gradle.</p> <p>How can you unpack JAR files?</p> <ul> <li>Build language tricks: Unpacking JAR files(Specific Languages\u2019 blog)</li> </ul> <p>How can you measure code coverage?</p> <ul> <li>Measuring code coverage with the MPS build language(Specific Languages\u2019 blog)</li> </ul>","tags":["mps_language","build"]},{"location":"build/#mps-build-script","title":"MPS build script","text":"<p>The build language is one of the oldest parts of MPS, designed to generate the Apache Ant files more easily, but it isn\u2019t refactored until today. The generator of the build language has to find out what, for example, \u201csolution needs baselanguage\u201d means at the runtime-level. To execute code from the solution, the JVM needs the baselanguage.jar on the classpath. The more dependencies the solution has, the more complex becomes the generated Ant file, because the generator has to consider all these transitive dependencies. The generator needs to know what artifact a module generates and how the generated artifact/module is used at runtime. Therefore, the jars must be on the classpath.</p> <p>The modules in the mps-groups in the MPS build script contain information from the serialized descriptors (.msd files, .mpl files, \u2026). The Reload all modules from disk intention loads them explicitly. The descriptor files aren\u2019t read before generation so you should always verify before you push if your MPS build scripts are up-to-date. For every dependency added to a module or a changed reexport flag, this intention has to be triggered by hand.</p> <p>Problem: the current implementation of the build language isn\u2019t extensible, because it always looks into the original model. The main part of the Ant file generation is the dependency analysis (for the modules), and for this, it needs to access the original model for some technical reasons. This limits you to languages that are provided by MPS. You can\u2019t use your patterns, for example, you can\u2019t write an extension which picks all modules from a folder, generates an IntelliJ-plugin out of them and stores the result in a zip file, and generates all the code required for the command-line build. But this isn\u2019t possible because of the build-language-inherent dependency analysis mechanism.</p> <p>The code generator of the build language has to verify for dependencies like jars in stub models andjars at runtime but the error messages aren\u2019t well-designed. For example, you have a jar file xyz.jar entered as Java runtime dependency of the language abc. Instead of something like \u201cyou have to enter xyz.jar to your build layout plugin-123, cause language abc specifies it as java runtime dependency\u201d you get for example \u201cjar stub library should be extracted into build-script: <code>${my.project}/very/long/path/lib/xyz.jar</code>\u201c\u201a which isn\u2019t helpful.</p> <p>Many problems that the generator finds, could also be found by the model checker, but the checks are done at generation time and implemented as \u201cgencontext.show error\u201d in the generator.</p>","tags":["mps_language","build"]},{"location":"build/#generated-ant-scripts-buildxml","title":"Generated Ant scripts (build.xml)","text":"<p>The mps build scripts are generated into Ant scripts, which then generate the modules. The Ant script starts a headless MPS instance with all required dependencies, puts JARs on the classpath, and does some further magic. Tasks can be passed to the Ant script like the \u201cgenerate\u201d task.</p> <p>Modules have several models with dependencies. For example, for a language, the behavior uses the structure aspect; the type-system uses the behavior aspect etc. which can result in complex dependencies between these models. These have to be considered when the models are generated and compiled. The order is derived by the code generator of the build language and results in an execution plan where the \u201ccompile units\u201d are grouped in \u201cchunks\u201d. Chunks with bootstrap dependencies are explicitly marked, which means all modules in the chunk have to be compiled at the same time.</p> <p>MPS consists of hundreds of JAR files that must be on the classpath for the code generation and compilation, which leads to giant Ant scripts (with some thousand lines). Even simple MPS build scripts, which only use BaseLanguage result in big Ant scripts.</p> <p>The build layout in the MPS build script defines how your modules are packaged e.g. as Zip files containing multiple plugins, as a simple plugin folder, as a lib folder with a flat list of JARs, etc.</p> <p>The Ant script needs to know where the local MPS is installed and where your modules and dependencies are located. This is usually done using folder macros in the MPS build script which are generated as \u201cproperties\u201d in the Ant script. This makes the build independent of your local machine and the Ant script can be executed on the CI or any other machine.</p> <p>The headless MPS, which is started by the Ant script, behaves sometimes differently compared to an IDE-MPS. For example, circular dependencies can be resolved in the IDE by just applying Make Project multiple times, which doesn\u2019t work on the command line and thus also fails on the CI. Dependencies which are visible in the IDE aren\u2019t always visible in the MPS build script/Ant script and can result in failing builds. MPS holds one big global repository, where all modules are loaded into the modules pool (project libraries, global libraries, \u2026). In the IDE everything\u2019s always visible and wrong dependencies can be resolved but on the command line the build can fail, because the referenced model isn\u2019t loaded. The build language generator doesn\u2019t check the nodes, for example, that references out of scope (like the model-checker does), it only looks into meta-data/model-properties and relies on that information.</p>","tags":["mps_language","build"]},{"location":"build/#shell-scripts","title":"Shell scripts","text":"<p>Some scripts like the start script of MPS are developed using Windows Batch Scripting on Windows and Bash Shell Scripting on Mac/Linux. To learn more about those two scripting languages, consult the following list:</p> <ul> <li>Windows Batch Scripting | wikibooks.org</li> <li>Using batch files | learn.microsoft.com</li> <li>Bash Shell Scripting | wikibooks.org</li> <li>Bash Reference Manual | gnu.org</li> </ul>","tags":["mps_language","build"]},{"location":"build/advanced_github_workflow/","title":"Advanced GitHub workflow","text":"<p>The following workflow is suitable for small projects as well as projects with hundreds of developers. This guide assumes that the project is hosted on GitHub and that the CI pipeline also runs on GitHub. Additionally, one or more teams work on the project and a form of agile software development is implemented. New feature/bugfixes are developed based on a ticket system.</p>"},{"location":"build/advanced_github_workflow/#codeowners-file","title":"CODEOWNERS file","text":"<p>GitHub supports CODEOWNERS files which should be placed in the .github subfolder. In can be generated by an MPS language. For solutions, a root node can be added to describe the owners. For example:</p> <p>Solution Code Owners</p> <p>The following maintainers should be added to pull requests changing this solution</p> <pre><code>- team1\n- team2\n</code></pre> <p>For languages, this information could be added to the documentation aspect if the language com.mbeddr.doc is used. For example:</p> <p>Maintainer </p> <p>The following maintainers should be added to pull requests changing this language.</p> <pre><code>ownerslist {\n- team1\n- team2\n}\n</code></pre> <p>In the branch protection rules on GitHub, it can then be specified that the corresponding team has to review pull requests before they can be merged.</p>"},{"location":"build/advanced_github_workflow/#merge-queue","title":"Merge queue","text":"<p>When all branches are merged into a main branch and there are a lot of pull requests at the same time, it can make sense to enable the merge queue feature on GitHub. Pull requests that have reviews and no failing checks can be added to the merge queue. The position in the merge queue is shown in the PR as well as the expected time for the PR to be merged.</p> <p>When the previous PRs in the merge queue are in conflict with the current PR, the current PR will be taken out of the merge queue. This can also be done manually when a PR is added to the merge queue by accident. There is also the option \u201cMerge when ready\u201d at the bottom of the PR to automatically add it to the merge queue when all other checks succeed.</p>"},{"location":"build/advanced_github_workflow/#issue-and-pull-request-templates","title":"Issue and pull request templates","text":"<p>To make it easier for developers and users to submit issues, issue templates can be added to a repository. A few templates can be found at stevemao/github-issue-templates. If you are using a help desk or some other tool like Jira, YouTrack or a platform like GitLab you might want to disable issues instead.</p> <p>For developers, a pull request template helps them create better pull requests. The template is instantiated when a new PR is opened. It can explain naming conventions that the developer has to follow or provide a checklist of things to pay attention to before open a new PR e.g. adding the change to the changelog, updating the documentation or, checking that tests exist for a new feature.</p>"},{"location":"build/advanced_github_workflow/#github-actions-and-workflows","title":"GitHub Actions and workflows","text":"<p>GitHub supports automating the workflow through GitHub Actions.</p>"},{"location":"build/advanced_github_workflow/#release-notes","title":"Release notes","text":"<p>GitHub supports automatically generating release notes as well as many actions on the GitHub marketplace support this feature. While a common approach is to just extract the information from the commit messages, it might be better to manually write a release notes file or extract the information from the PR description if it has a pre-defined format.</p> <p>It\u2019s important to differentiate between a changelog and release notes (amoeboids.com): the changelog communicates technical changes, the release notes  inform the users about new features, improvements and bug fixes in a non-technical way.</p>"},{"location":"build/advanced_github_workflow/#workflows","title":"Workflows","text":"<p>Workflows are located in the .github/workflows directory and can be triggered by events, scheduled automatically or manually triggered. For many workflows, at least the default environment variables GITHUB_ACTOR and GITHUB_TOKEN are necessary. nektos/act can be used to run GitHub Actions locally. Depending on the project, the following workflows might be useful:</p> <ul> <li>building the project using the gradle-build-action in combination with the mps-gradle-plugin</li> <li>checking that issues or PRs are not stale (e.g. as a cronjob)</li> <li>checking that PR conventions are followed when a PR changes or the PR is added to the merge queue. Some possible checks:<ul> <li>valid PR title</li> <li>valid PR description</li> <li>valid branch name</li> </ul> </li> <li>publishing the MPS languages and RCP as snapshots when a snapshot Git tag is used</li> <li>building and testing the languages when a PR is created or the PR is added to the merge queue</li> <li>building the RCP when a change is pushed to main</li> <li>creating a release (e.g. manually triggered)<ul> <li>building the RCP</li> <li>generating the release notes</li> <li>deploying the RCP to a repository e.g. JFrog artifactory, sonatype nexus repository or GitHub Packages</li> </ul> </li> <li>collecting repository metrics</li> <li>scanning the code for vulnerabilities and errors automatically on GitHub or using a proprietary solution like Black Duck Software Composition Analysis (e.g. as a cronjob)</li> <li>uploading coverage reports (e.g. JaCoCo) and test results generated by MPS (JUnit) to a server (e.g. as a cronjob)</li> </ul>"},{"location":"build/advanced_github_workflow/#metrics","title":"Metrics","text":"<p>To get an overview of project statistics, a GitHub action like floric/repo-monitor-action can be used to generate custom metrics reports including the last releases using GitHub Pages. Some interesting statistics for MPS projects can be extracted. In the snippets, it is assumed that the languages and solutions are located in the code folder:</p> number of languages<pre><code>$(find code/languages/*/languages/* -maxdepth 0 -type d | wc -l)\n</code></pre> number of solutions<pre><code>$(find code/languages/*/solutions/* -maxdepth 0 -type d | wc -l)\n</code></pre> number of models<pre><code>$(find code/languages/*/*/*/models/*.mps -maxdepth 0 -type f | wc -l)\n</code></pre> number of concepts<pre><code>$(grep -ro \"&lt;node concept=\\\"1TIwiD\\\"\" code/languages/*/languages/*/models --include *structure.mps | wc -l)\n</code></pre> number of interfaces<pre><code>$(grep -ro \"&lt;node concept=\\\"PlHQZ\\\"\" code/languages/*/languages/*/models --include *structure.mps | wc -l)\n</code></pre> number of deprecated nodes (DeprecatedNodeAnnotation)<pre><code>$(grep -ro \"&lt;node concept=\\\"asaX9\\\"\" code/languages/*/languages/*/models --include *structure.mps | wc -l)\n</code></pre> <p>Other interesting statistics that can be collected:</p> <ul> <li>code coverage</li> <li>duration of workflow</li> <li>build duration</li> <li>model check duration</li> <li>number of added files in the latest commit</li> <li>number of modified files in the latest commit</li> <li>number of removed files in the latest commit</li> </ul>"},{"location":"build/advanced_github_workflow/#from-the-ticket-to-the-merged-pr","title":"From the ticket to the merged PR","text":"<p>The developer starts by creating a new branch from the default branch which is usually called main or master. It is the stable branch that contains all the latest changes. To make the connection between code changes and ticket numbers, the ticket numbers can be used in the branch name. There are many different branch naming conventions (example). One possible convention is to start the branch with a category such as feature, bugfix or refactor, then include the ticket number and a description of the branch. For example: <code>feature/TASK-123_implement_awesome_feature</code>.</p> <p>For the commits themselves, sometimes also naming conventions are used. A simple approach is to start the commit message with the ticket number and then a description of the change e.g. <code>TASK-123: implement feature</code>. When the branch is ready and pushed to GitHub, some of the described workflows should be automatically executed. The PR should be reviewed from a white box and black box perspective (see: testing) and when all checks succeed, the PR can be added to the merge queue. When the PR is at the top of the merge queue, it will be built and tested again, and all the checks will be executed once again. If everything succeeds, the PR will be finally merged into one of the stable branches like the default branch.</p> <p>In the meantime, depending on the used agile workflow, the state of the ticket might change from \u201cTodo\u201d, to \u201cin progress\u201d to \u201cCode Review\u201d and then to \u201cDone\u201d when the PR is finally merged. Depending on the release cycle, A new version might be released for the users every 4 weeks or at a different interval.</p>"},{"location":"build/advanced_github_workflow/#an-example-of-a-different-workflow","title":"An example of a different workflow","text":"<p>While the described workflow has been proven to be successful for big projects, many other workflows can be used. For example the MPS platforms don\u2019t use ticket numbers in commit messages, and tickets are also not planned. Linking existing tickets can also be difficult because the platforms are Open Source, and the tickets sometimes are not. New versions are also released whenever a change is pushed to the master or maintenance branches (rolling release) instead of using a fixed release cycle. The project is also not built on GitHub but on a TeamCity server.</p>"},{"location":"build/ci/","title":"Continuous integration","text":"<ul> <li>Setting up CI with MPS: self-contained projects(Specific Languages\u2019 blog)</li> <li>Maturity levels of MPS deployment(Specific Languages\u2019 blog)</li> <li>The Business-DSL DevOps Process(Markus Voelter\u2019s blog)</li> </ul> How to attach the debugger to a CI build on GitHub actions? <p>Note: GitHub actions can be run locally with act.</p> <p>The plan is to first teach the build to open up a reachable SSH connection, and then tunnel a local port onto it so that we can connect IntelliJ to it.</p> <ul> <li>Sign up with ngrok and get your auth token</li> </ul> <p>Since build agents usually are not reachable from the web, we\u2019ll need someone to bridge the build agents\u2019 firewalls. A common solution for that seems to be https://ngrok.com/ which requires free signup. I tried tmate as well, but that doesn\u2019t support port forwarding.</p> <ul> <li>Open ssh from your <code>.github/workflows/build.yml</code></li> </ul> <p>There are prepared GitHub actions that start sshd with ngrok. I used debug-via-ssh. All we need to give it is our <code>ngrok authtoken</code> from above, and our public ssh key of the key that we want to use to get into the machine.</p> <p>Given we already have <code>.github/workflows/build.yml</code>, I added a step right before the failing step:</p> <pre><code># \u2026\n- name: Start SSH session\nuses: luchihoratiu/debug-via-ssh@main\nwith:\n    NGROK_AUTH_TOKEN: 2343953890afgaegaewgi\u00f6oio2332\u00e4\u00e4\u00e4\n    SSH_PASS: ssh-rsa AAAJOAKJFLJWKLJLEKJLEFKJLFEKJLK\u2026JAOIFJOFA bkruck@itemis.com\n# \u2026\n</code></pre> <p>Since this is a private repository, I was fine with pasting my authtoken and public SSH key into it (I didn\u2019t have permission to add secrets to the repo). After the whole session, I reset my ngrok auth token.</p> <p>Another note worth mentioning is, that we trust the author of the action and ngrok to not man-in-the-middle us.</p> <ul> <li>Tell MPS to wait for us</li> </ul> <p>Now we can run the GitHub build and see that ngrok is stopping the build at the desired location, being ready for us to connect. In the endpoints list, our agent should be listed with a domain name and port. Taking the two, we can now ssh into it:</p> <pre><code># SSH through ngrok onto the build machine, already forwarding local 5020 to the remote machine\nssh -L 5020:localhost:5020 -p11720 runner@4.tcp.ngrok.io\n</code></pre> <p>If you are asked for a password, fix the casing of -p. If still asked for a password, check which user is running the build. On GitHub, that user seems to be called runner right now. Even though he has sudo rights.</p> <p>We now want to teach MPS to open the debug ports and wait for us to connect before running any tests. On CLI, this doesn\u2019t work with .vmoptions files, but instead, we\u2019re running the tests from an ant-file in this project.</p> <p>Since the allScripts generation was already performed, we only need to open the ant-file and add a JVM argument. I like to open <code>build/myProject/build-tests.xml</code> with Vim and then execute the following search expression: <code>%s/&lt;\\/jvmargs&gt;/  &lt;arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/&gt;\\r      &lt;\\/jvmargs&gt;/g</code>. In other terms: Look for <code>&lt;/jvmargs&gt;</code> and add <code>&lt;arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5020\" \\/&gt;</code> right in front of it. The <code>suspend=y</code> will tell Java to not start doing anything before we are connected, while the <code>address=5020</code> tells it to be welcoming us on port 5020.</p> <pre><code>--- build/myProject/build-tests.xml 2021-09-17 21:15:50.000000000 +0200\n+++ build/myProject/build-tests.xml.before  2021-09-17 21:32:09.000000000 +0200\n@@ -342,7 +342,6 @@\n    &lt;jvmargs&gt;\n        &lt;arg value=\"-ea\" /&gt;\n        &lt;arg value=\"-Xmx3072m\" /&gt;\n-        &lt;arg value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5020\" /&gt;\n    &lt;/jvmargs&gt;\n    &lt;macro name=\"mps_home\" path=\"${mps_home}\" /&gt;\n    &lt;macro name=\"myProject.home\" path=\"${myProject.home}\" /&gt;\n</code></pre> <ul> <li>Run the tests from within SSH</li> </ul> <p>Since I don\u2019t know how to move ngrok into the background while proceeding with the build, I just ran the next gitHub action by hand:</p> <pre><code>$ cd worker/myProject\n$ ./gradlew testLanguages\n\u2026\n\u2026\nListening for transport dt_socket at the address: 5020\n</code></pre> <p>We should now see the command line MPS start-up and say that it is waiting for us on 5020.</p> <ul> <li>Connect with your local IntelliJ</li> </ul> <p>Assuming, that you have the MPS sources checked out, opened it in IntelliJ, and added the sources of your project as a module, we should be ready to connect now:</p> <p>Just start a remote debugging session on port 5020. It will forward the requests over SSH to the agent machine. Once connected, you\u2019ll be able to set breakpoints (for example, I set an Exception breakpoint for <code>StackOverflowError</code>), and then proceed the build to run into the breakpoint.</p> <ul> <li>Cleanup</li> </ul> <p>After you found your issue and everything is shiny, remember to remove the step from your GitHub workflow again and reset your ngrok auth token.</p> <p>The build fails with exit code 137</p> <p>Specific Languages blog: Exit code 137</p>","tags":["infrastructure"]},{"location":"build/ci/#docker","title":"Docker","text":"<p> mbeddr,  MPS-extensions,  IETS3</p> <p>Docker is a Linux container technology that the platform projects use a lot. You can think of it as a lightweight virtual machine. Besides the container runtime, Docker also includes the tools required to build preconfigured images that are then executed in the container. These images are built from a Dockerfile.</p> <p>Essentially, everything in the infrastructure is provisioning using docker from the TeamCity frontend over the database to the build agent. For the building agent, this approach allows us to keep the building agents consistent with their installed software and their versions. The Dockerfile for our general-purpose agents can be found on GitHub. The docker image build from the docker file is published to Docker Hub, a hosting service for images, and then used in our build server.</p> <p>The complete docker configuration for our build server is hosted on GitLab. It also included the scripts that download/update the docker image and run the agent. Since our TeamCity setup uses multiple containers, a separate container for the database, or the web server that handles the encrypted connection, we are using docker-compose as an orchestration tool. </p>","tags":["infrastructure"]},{"location":"build/command_line_tool/","title":"Creating a command line tool","text":"<p>Basic code:</p> <pre><code>public class CommandLineTool { public static void main(string[] args) throws Exception {\nfinal string projectPath = YOUR_PATH /* (1) Get project path, for example, from args or system properties */;\nfinal EnvironmentConfig config = EnvironmentConfig\n.emptyConfig()\n.withDefaultPlugins()\n.withBootstrapLibraries();\nconfig.addPlugin(\"http-support\", \"jetbrains.mps.ide.httpsupport\");\nfinal IdeaEnvironment env = new IdeaEnvironment(config);\nenv.init();\nfinal Project project = env.openProject(new File(projectPath));\nThrowable thrown = null;\ntry {\ndoSomething(); // 2\n} catch (Exception e) {\nthrown = e;\n} finally {\nenv.dispose();\n}\nif (thrown != null) {\nSystem.err.println(\"ERROR:\");\nthrown.printStackTrace();\nSystem.exit(1);\n} else {\n// You need `System.exit` even in a successful case to stop threads that MPS plugins may be leaving behind.\nSystem.exit(0);\n}\n}\n}\n</code></pre> <p>What can you do with the project (at point 2)? Here is how you invoke a static method <code>foo()</code> on class <code>Bar</code> in module <code>Baz</code>:</p> <pre><code>class InvokeMethod {\nvoid execute() {\nModuleRepositoryFacade facade = new ModuleRepositoryFacade(project);\nReloadableModule module = (ReloadableModule) (facade.getModule(module-reference/Baz/));\nClass&lt;?&gt; classToInvoke = module.getClass(\"some-package.Bar\");\nMethod methodToInvoke = classToInvoke.getMethod(\"foo\");\nmethodToInvoke.invoke(null);       }\n}\n</code></pre> <p>Why all the reflection tricks and why not call the class directly instead? The answer is that when MPS is initialized and a project is opened, it sets up classloaders, puts on the classpath any dependencies that module <code>Baz</code> might have so that you don\u2019t have to specify them ourselves.</p> <p>We still need to have on the classpath the initial set of JARs to run our class and start MPS. Here is how you would run our tool from Gradle:</p> <pre><code>task runCommandLineTool(type: JavaExec) { main = 'CommandLineTool' classpath file('solutions/commandline/classes_gen') // Location of CommandLineTool.class\nclasspath fileTree(\"$mps_home/lib\") // $mps_home points to the MPS installation\n}\n</code></pre> <p>You can also add MPS to the Gradle dependencies block:</p> <pre><code>dependencies {\ntestImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'\ntestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'\nimplementation fileTree(\"$mps_home/lib\")\n}\n</code></pre>","tags":["guide","java_integration"]},{"location":"build/git/","title":"Git","text":"<p>How do you compare Git branches?</p> <p>Have a look at this guide.</p> <p>How should you configure Git?</p> <p>Generated files should not be checked into Git (classes_gen, source_gen) unless the output of generators should be checked.</p> <p>Example from MPS-extensions:</p> <ul> <li>.gitignore</li> <li>.gitattributes.</li> </ul> <p>Is there a hook in MPS that will be called when switching branches?</p> <p>Register a BranchChangeListener in an application or project plugin. Example:  <pre><code>ProjectHelper.toIdeaProject(#project).getMessageBus().connect().subscribe(BranchChangeListener.VCS_BRANCH_CHANGED, new MyListener()).\n</code></pre></p> <p>How can you find the Git commit that deleted a concept?</p> <p>Assuming the concept is called <code>Foo</code>, search with Git Log in the corresponding structure model: <code>git log -SFoo -- path/to/structure.mps</code></p> <p>How can I go to the first commit in a project on GitHub?</p> <p>Use the book on the following page: http://farhadg.github.io/init/landing/</p> <p>During conflict resolution, what does Resolve automatically and exit do exactly?</p> <p>This button merges non conflicting changes in roots and in the meta data.</p> <p>A) A change in roots is not conflicting if:</p> <ul> <li>there are merge hints</li> <li>the node ID changed</li> <li>the resolve info changed</li> </ul> <p>B) Meta data changes are:</p> <ul> <li>a dependency was deleted/added</li> <li>do not generate flag was set</li> <li>an engaged language on generated was added/removed</li> <li>an imported model was added/deleted</li> <li>a model attribute was changed (e.g. model user objects)</li> <li>a module dependency was added/deleted</li> <li>a used languages was added/deleted/changed</li> </ul> <p>Those are two different merge sessions. TODO: How does the automatic resolving works with the meta data changes? (It seems like A and B are applied to the meta models).</p> <p>When I shut down + change files on disk (e.g. git pull) + restart MPS, it asks me if I want to reload the files from disks or use the cached models. Why?</p> <p>Excerpt from MPS documentation:</p> <p>MPS automatically saves changes that you make in your files. Saving is triggered by various events, such as compiling, running, debugging, performing version control operations, closing a file or a project, or quitting the IDE. Saving files can be also triggered by third-party plugins.</p> <p>Maybe an external change is done by accident e.g. the project is on a shared drive and someone else changes some files but not on purpose. You might also edit some MPS files with a different editor to fix some issues, so there must be the option to decide which version to use. The feature itself comes from the IntelliJ platform, this is not MPS specific:</p> <p>If an external process changes a file that was opened and unsaved in IntelliJ IDEA, it results in two conflicting versions of the file.</p>","tags":["infrastructure"]},{"location":"build/git/#general","title":"General","text":"<ul> <li>Git cheat sheet</li> <li>git-tips</li> <li>Flight rules for Git (troubleshooting)</li> <li>On undoing, fixing, or removing commits in git</li> <li>git-extras(extra git commands)</li> <li>Commit Often, Perfect Later, Publish Once: Git Best Practices</li> </ul>","tags":["infrastructure"]},{"location":"build/git/#github-publishing-checklist","title":"GitHub publishing checklist","text":"<ul> <li>Ready to use templates<ul> <li>Template #1</li> <li>Template #2</li> </ul> </li> <li>Necessary files/text<ul> <li>README.md</li> <li>LICENSE</li> <li>description in the about section of the GitHub repository</li> </ul> </li> <li>More extensive checklists<ul> <li>Open Source Check List</li> <li>Am I ready to Open Source This?</li> </ul> </li> </ul>","tags":["infrastructure"]},{"location":"build/gradle/","title":"Gradle","text":"<p>Documentation for Gradle can be found on gradle.org. The used features of the Groovy languages are explained in A Groovy Build Script Primer. If you want to use Kotlin instead, start with the Gradle Kotlin DSL Primer. Migrating build logic from Groovy to Kotlin might also be helpful. To automatically convert between Groovy and Kotlin syntax, you can try using Gradle Kotlinize. Many manual corrections are still necessary.</p>","tags":["infrastructure"]},{"location":"build/gradle/#useful-gradle-plugins-for-mps-projects","title":"Useful Gradle plugins for MPS projects","text":"<ul> <li>mps-gradle-plugin: Miscellaneous tasks that were found useful when building MPS-based projects with Gradle.</li> <li>Maven publish plugin: a Gradle plugin for publishing build artifacts to Apache Maven repositories (such as nexus repositories)</li> <li>nu.studer.credentials: a Gradle plugin for storing and accessing encrypted credentials for use in Gradle builds.</li> <li>github-release-gradle-plugin: a Gradle Plugin to send releases to GitHub</li> </ul>","tags":["infrastructure"]},{"location":"build/gradle/#questions","title":"Questions","text":"<p>How do you set up a Gradle build for an MPS project?</p> <p>There is a gist for a minimal build. There is a mps-gradle-plugin. For more complex projects look at build scripts of big projects such as MPS-extensions.</p> <p>I don\u2019t understand the dependencies between Gradle tasks.</p> <p>Read the Gradle documentation about authoring tasks. For visualizing task graphs to understand a task\u2019s dependencies, use the Gradle plugin gradle-taskinfo.</p> <p>Is there a Gradle plugin for downloading things?</p> <p>Yes, gradle-download-task.</p> <p>Is there a Gradle plugin for making HTTP requests?</p> <p>Yes, gradle-http-plugin.</p> <p>The Gradle build fails with exception: incremental build fails during generation on no changed models</p> <p>Run <code>git clean -xdf</code> and rebuild everything (MPS-33541.)</p> <p>How can you fetch dependencies using Gradle?</p> <p>Fetching dependencies with Gradle(Specific Languages\u2019 blog)</p> How to get dependencies from private GitHub repositories within a GitHub action? <p>Follow the default way for GitHub Packages access, as described in GitHub Actions. It might simply work if the other private repository is part of the same organization.</p> <p>If not, ensure the GITHUB_TOKEN permissions are correct: Permissions for the GITHUB_TOKEN</p> <p>Depending on the organizational settings, it might be impossible to obtain the artifact via the generic GITHUB_TOKEN. In this case, you need to create a new personal access token (PAT).</p> <p>Next, add this token as a secret to the project (e.g. as PRIVATE_REPO_ACCESS_ACTOR and PRIVATE_REPO_ACCESS_TOKEN): Granting additional permissions</p> <ul> <li> <p>Make sure that this secret is not in an environment but is generally available.</p> <ul> <li> <p>Also add the username. Even though no username is required for token access, an error will occur if you leave it empty.</p> </li> <li> <p>Make sure you authorize the PAT for the SSO org (warning: this resets when changing permissions!)</p> </li> </ul> </li> </ul> <p>Next, you need to access this special token in your workflow yaml file, e.g:</p> <pre><code>    name: Build and Test Languages\n[...]\n# Obtain tokens and secrets from GitHub repository secrets\nenv:\nGITHUB_ACTOR: ${{ github.actor }}\nGITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\nPRIVATE_ACTOR: ${{ secrets.PRIVATE_REPO_ACCESS_ACTOR }}\nPRIVATE_TOKEN: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}\n[...]\njobs:\nbuildAndTest:\n[...]\n- name: Build with Gradle\nuses: gradle/gradle-build-action@v1.3.3\nwith:\narguments: buildLanguages\n</code></pre> <p>Within your Gradle file, you can then access these variables via:</p> build.gradle.kts<pre><code>    [...]\nrepositories {\nval gpr_user: String? by extra\nval gpr_token: String? by extra\nval githubUsername = System.getenv(\"GITHUB_ACTOR\") ?: gpr_user\nval githubToken = System.getenv(\"GITHUB_TOKEN\") ?: gpr_token\nif(githubUsername == null || githubUsername == \"\" ) {\nthrow GradleException(\"No credentials found via envrionment variable (\\$GITHUB_ACTOR) or via Gradle properties (gpr_user) for auth towards Github packages\")\n}\nif(githubToken == null || githubToken == \"\") {\nthrow GradleException(\"No credentials found via envrionment variable (\\$GITHUB_TOKEN) or via Gradle properties (gpr_token) for auth towards Github packages\")\n}\nmaven {\nurl = uri(\"https://maven.pkg.github.com//mbeddr/mbeddr.core\")\ncredentials {\nusername = githubUsername\npassword = githubToken\n}\n}\nval private_user: String? by extra\nval private_token: String? by extra\nval privateUsername = System.getenv(\"PRIVATE_ACTOR\") ?: private_user\nval privateToken = System.getenv(\"PRIVATE_TOKEN\") ?: private_token\nif(privateUsername == null || privateUsername == \"\") {\nthrow GradleException(\"No private credentials found via envrionment variable (\\$PRIVATE_ACTOR) or via Gradle properties (private_user) for auth towards Github packages\")\n}\nif(privateToken == null || privateToken == \"\") {\nthrow GradleException(\"No credentials found via environment variable (\\$PRIVATE_TOKEN) or via Gradle properties (private_token) for auth towards Github packages\")\n}\nmaven {\nurl = uri(\"https://maven.pkg.github.com/ORGANIZATION/PRIVATE-PROJECT/\")\ncredentials {\nusername = privateUsername\npassword = privateToken\n}\n}\n[...]\n</code></pre> <p>You can locally set the token by adding the following entries to your gradle.properties file (assuming your token has the correct access rights for the repositories):</p> <pre><code>gpr_user=XXX\ngpr_token=YYY\nprivate_user=XXX\nprivate_token=YYY\n</code></pre> <p><sub>contributed by: @nkoester<sub> <p>How to run a Gradle task from Java code?</p> <p>Using the Gradle wrapper or the Gradle tooling API as described in this StackOverflow answer.</p>","tags":["infrastructure"]},{"location":"build/gradle/#gradle-tips","title":"Gradle Tips","text":"Item Description closures The closure does <code>it (delay)  {}</code> which will delay the value propagation to execution instead of configuration time. buildAll scripts This is the meta-build script (platforms only). This build model is generated and its artifact (ant-xml task) is committed to the Gradle repo. project properties <ul><li>can be defined as ext.myPropName</li><li>passed through: -PmyPop_name from CL</li><li> can be access like variables in the build project</li><li>can be checked if they are set or not </li></ul> System properties <ul><li>passed through -D from CL</li><li>are available in the Gradle build file though norma java mechanism: System.getProperty();</li><li>Project properties can be specified as system properties. They need to be prefixed with org.gradle.project.NAME</li></ul> gradle.properties <ul><li>are by default project properties</li><li>if they are prefixed with systemProp. they are system properties</li></ul> configurations are also separated in the same way as dependencies","tags":["infrastructure"]},{"location":"build/gradle/#gradle-wrapper-gradlewgradlewbat","title":"Gradle Wrapper (gradlew/gradlew.bat)","text":"<p>The Gradle wrapper script downloads Gradle in the specified version, independent of your locally installed Gradle, and then starts the downloaded Gradle. It consists of a small java program (located under <code>./gradle/wrapper/gradle-wrapper.jar</code>), an init-file that contains the Gradle version (<code>./gradle/wrapper/gradle-wrapper.properties</code>) and start scripts for Windows, Mac, and Linux (<code>./gradlew</code> and <code>./gradlew.bat</code>).</p> <p>Why do we use Gradle? Gradle build scripts have the advantage that you write code instead of XML like it\u2019s the case using Maven or Ant. We use Gradle to download MPS and the dependencies in the correct version and put them in the right place, generate the Ant scripts from the MPS build scripts using a <code>build-allScripts.xml</code> Ant scripts and then start Ant with correct parameters (where is MPS on disc, where are the dependencies on disc, \u2026). This is easier than doing it with and directly. For defining the Gradle scripts you can use groove (<code>build.gradle</code>) or Kotlin (<code>build.gradle.kts</code>), both can do the same. Groovy is enough for smaller building scripts, but it\u2019s dynamically typed and thus fails late when the Gradle task is executed. Kotlin provides type-checking and the auto-completion works better compared to Groovy (with Intellij); this makes it easier to use with complex scripts.</p>","tags":["infrastructure"]},{"location":"build/gradle/#dependencies","title":"Dependencies","text":"","tags":["infrastructure"]},{"location":"build/gradle/#dependencies-inside-the-buildscript-block","title":"Dependencies inside the buildScript{\u2026} block","text":"<ul> <li>are placed on the classpath of the build script itself (for the current Gradle file which will also be compiled (like java))</li> <li>To be able to compile the build script into bytecode, its dependencies need to be resolved</li> </ul>","tags":["infrastructure"]},{"location":"build/gradle/#dependencies-outside-the-buildscript-block","title":"Dependencies outside the buildScript{\u2026} block","text":"<ul> <li>are project dependencies</li> <li>these dependencies are added to the project code\u2019s classpath</li> <li>For example: Gson is used inside a Gradle project and needs to be on the classpath of the project to be able to compile the project.</li> </ul> <p>If the dependency is only used in the build script (i.e. only from the <code>build.gradle</code> file) then it should be in a <code>buildscript { }</code> block. Dependencies used in both project code and build scripts will effectively need to be listed twice.</p> <p>A good explanation of Gradle configurations can be found in Gradle Configurations Explained: What is the difference between API and Implementation? | medium.com.</p>","tags":["infrastructure"]},{"location":"build/gradle/#creating-a-gradle-plugin","title":"Creating a Gradle plugin","text":"<p>You have to decide between three choices:</p> <ul> <li>build script</li> <li>buildSrc project</li> <li>standalone project</li> </ul>","tags":["infrastructure"]},{"location":"build/gradle/#standalone-project","title":"Standalone project","text":"<ul> <li>define all dependencies in Gradle file</li> <li>create a properties file in the resource folder with the same name as the plugin id<ul> <li>example:  <code>org.samples.greeting.properties</code> in <code>src/main/resources/META-INF/gradle-plugins/</code></li> </ul> </li> <li>plugin IDs<ul> <li>full qualified identifiers, similar to Java packages</li> <li>Use pattern component/company/plugin-name</li> <li>examples<ul> <li><code>com.github.[name].[plugin-name]</code></li> <li><code>com.github.[arimer].[migration-checker]</code></li> </ul> </li> </ul> </li> </ul>","tags":["infrastructure"]},{"location":"build/teamcity/","title":"TeamCity","text":"<p>All platforms use TeamCity for continuous integration. Extensive official documentation is available for TeamCity on the web. The TeamCity server can be reached at build.mbeddr.com. When a new commit is pushed to a branch in one of the Git repositories, the platforms are built on the server, tested, and published to the itemis Nexus repository. This is configured through VCS triggers.</p> <p>The test results are collected from Ant JUnit reports and make the builds fail if not all tests pass. Tests can be muted. This might be necessary when tests return both passes and failures despite no changes (flake tests). This can happen, for example, if the test is timing-dependent, an algorithm is not deterministic or a timeout happens.</p> <p>All GitHub repositories are connected directly to TeamCity and show the build status at the bottom of pull requests and next to pushed commits with the help of the Commit Status Publisher. The main repositories require the build to succeed before a pull request can be merged:</p> <p></p> <p>One or multiple build configurations exist per platform. They are described here only superficially because they might change in the future. Each sub-item is a separate build configuration. Some configurations depend on other configurations (snapshot dependencies).</p> <ul> <li> <p>MPS-Extensions</p> <ul> <li>build the project: <code>gradle build</code><ul> <li>it is not triggered by changes in the documentation</li> </ul> </li> <li>build the documentation</li> <li>build and publish to Nexus/GitHub: <code>gradle build publish</code><ul> <li>only executed once a day</li> </ul> </li> </ul> </li> <li> <p>mbeddr platform</p> <ul> <li>build and publish: <code>gradle publishMbeddrPlatformPublicationToMavenRepository publishMbeddrAllScriptsPublicationToMavenRepository</code><ul> <li>depends on MPS-Extensions</li> </ul> </li> </ul> </li> <li>mbeddr<ul> <li>build and publish: <code>gradle build:com.mbeddr:languages:publish</code><ul> <li>depends on the mbeddr platform</li> </ul> </li> <li>analyses test: <code>gradle test_mbeddr_analysis</code></li> </ul> </li> <li>iets3<ul> <li>build and publish: <code>gradle build publish</code><ul> <li>depends on the mbeddr platform</li> <li>builds are only triggered for specific naming conventions and some special branches: master, feature/*, bugfix/*, refactor/*, maintenance/*</li> </ul> </li> <li>publish to GitHub</li> </ul> </li> <li>Publish JDK (build.publish.jdk)<ul> <li>publish to Nexus</li> </ul> </li> <li>Update MPS (build.publish.mps)<ul> <li>publish to Nexus and GitHub</li> </ul> </li> <li>MPS Gradle plugin (mps-gradle-plugin)<ul> <li>publish</li> </ul> </li> </ul> <p>The following diagram shows a simplified version of the build chain that shows the dependencies between the projects/configurations:</p> <p></p> <p>Although all these repositories use Gradle for build management, TeamCity has a lot of bundled plugins. Many are described in Configuring Build steps | TeamCity On-Premises. The builds are executed by build agents. The Docker image of the agents can be found in the mbeddr.build.docker repository.</p> <p>9 agents are available for running builds simultaneously. They are hosted at multiple different locations (in server rooms and the cloud). The agents are running Linux, except one agent which is running Windows 10 and one agent that is running Mac OS X, version 10.15.7.</p>"},{"location":"clean_code/java/","title":"Java (Base language)","text":"<p>To learn more information about advanced Java topics such as the Java virtual machine, collections language, and many more topics, visit baeldung.com.</p> <p>Refactoring.guru has information about general code smells.</p> <ul> <li>Be aware of common Java gotchas.</li> <li>Avoid acronyms and abbreviations that may not be clear to others.</li> <li>Name methods and variables after what they mean. Before giving a name, consider the responsibility of that piece of code.<sup>1</sup></li> <li>Return empty collections instead of returning null elements (reference). It saves the efforts needed for testing on null elements.</li> <li>Efficiency: use StringBuilder or StringBuffer for String concatenation</li> <li>Refactor your code regularly, especially when your classes or methods become too big.<sup>2</sup>^, ^<sup>3</sup>.</li> <li>Remember to test parameters of public methods for illegal values. These methods shouldn\u2019t crash because of a NullPointer.</li> <li>Order class members by scope from private to public<sup>4</sup>^, ^<sup>5</sup> (the reverse order is also fine)</li> <li>Minimize the accessibility of class members. It enforces information hiding or encapsulation.</li> <li>Avoid hardcoded values.</li> <li>Use lazy initialization if performance is critical or use caching if necessary.</li> </ul>","tags":["java","best_practise"]},{"location":"clean_code/java/#utility-and-helper-classes","title":"Utility and helper classes","text":"<ul> <li>Utility class: they include only static methods and are stateless. Don\u2019t create an instance of such a class.</li> <li>Helper class: they can be utility classes, or they can be stateful or require an instance. It can be any class whose design is to aid another class.</li> <li>Try to make the name of the utility or helper class more specific (for example: AdministrationHelper, LoginHelper instead of Helper).</li> </ul>","tags":["java","best_practise"]},{"location":"clean_code/java/#more-tips","title":"More tips","text":"<ul> <li>If you use functional interfaces, use the standard java ones. If you want to understand the functional style, consult the page: Understand the functional style.</li> <li>If you want to use newer Java features, have a look at Modernize old code.</li> <li>Have a look at common sources of complexity.</li> </ul>","tags":["java","best_practise"]},{"location":"clean_code/java/#stackexchange-software-engineering","title":"Stackexchange: Software Engineering","text":"<ul> <li>When do you use float and when do you use double</li> <li>What\u2019s wrong with circular references?</li> <li>Are null references really a bad thing?</li> <li>Exceptions: Why throw early? Why catch late?</li> <li>How do quick &amp; dirty programmers know they got it right?</li> <li>Why is Global State so Evil?</li> <li>How would you know if you\u2019ve written readable and easily maintainable code?</li> <li>How do you know you\u2019re writing good code?</li> </ul> <ol> <li> <p>Naming 101: A Programmer\u2019s Guide on How to Name Things \u21a9</p> </li> <li> <p>Rule of 30 \u2013 When is a Method, Class or Subsystem Too Big? \u21a9</p> </li> <li> <p>Avoid basic style errors \u21a9</p> </li> <li> <p>Ordering Class Members by Scopes \u21a9</p> </li> <li> <p>Separate public and private members \u21a9</p> </li> </ol>","tags":["java","best_practise"]},{"location":"clean_code/java/java_style_guide/","title":"Java style guide","text":"<p>These are some points taken from the Google Java Style Guide that make sense in MPS.</p> <ul> <li>Fall-through: commented: write a comment why a fall-through is necessary in a switch statement.</li> <li>Default case is present: always write a default case for switch statements.</li> <li>Rules common to all identifiers: identifiers use only ASCII letters and digits, and, in a few cases noted below, underscores. Don\u2019t use prefixes or suffixes with particular meanings. For example, these names don\u2019t adhere to the style: name_, mName, s_name, and kName.</li> <li>Package names: package names are all lowercase, with consecutive words concatenated together (no underscores). For example, com.example.deepspace, not com.example.deepSpace or com.example.deep_space.</li> <li>Class names: should be in UpperCamelCase. Class names are typically nouns or noun phrases. For example, Character or ImmutableList. Interface names may also be nouns or noun phrases (for example, List), but may sometimes be adjectives or adjective phrases instead (for example, Readable). Test classes should start with the name of the class they\u2019re testing, and end with Test. For example, HashTest or HashIntegrationTest.</li> <li>Method names: should be in lowerCamelCase. Method names are typically verbs or verb phrases. For example: <code>sendMessage or stop</code>. Underscores may appear in JUnit test method names to separate logical components of the name, with each component written in lowerCamelCase. One typical pattern is _, for example pop_emptyStack. No correct way exists for naming test methods. <li>Constant names: use all uppercase letters, with each word separated from the next by a single underscore</li> <li>Non-constant field names: non-constant field names (static or otherwise) should be lowerCamelCase. These names are typically nouns or noun phrases. For example, computedValues or index.</li> <li>Parameter names should be lowerCamelCase. One-character parameter names in public methods should be avoided.</li> <li>Local variable names should be in lowerCamelCase. Even when final and immutable, local variables are not considered to be constants, and should not be styled as constants.</li> <li>Type variable names: each type variable should adhere to one of two styles: a single capital letter, optionally followed by a single numeral (such as E, T, X, T2) or a name in the form used for classes, followed by the capital letter T (examples: RequestT, FooBarT).</li> <li>Camel case: defined: tutorial on how to write camelcase</li> <li>Don\u2019t ignore caught exceptions   (see also: Avoid empty catch blocks)</li> <p>Additional Hava practices can be found at javapractices.com.</p>","tags":["java","best_practise"]},{"location":"clean_code/java/programming_principles/","title":"Programming principles","text":"<p>These are some general programming principles taken from this article which can also be applied to MPS:</p> <ul> <li>KISS (Keep It Simple, Stupid): You may notice that developers at the beginning of their journey try to implement complicated, ambiguous designs.</li> <li>DRY (Don\u2019t Repeat Yourself): Try to avoid any duplicates, instead, you put them into a single part of the system or a method.</li> <li>YAGNI (You Ain\u2019t Gonna Need It): If you run into a situation where you are asking yourself, \u201cWhat about adding extra (feature, code, \u2026etc.) ?\u201d, you probably need to rethink it.</li> <li>Clean code over clever code: Speaking of clean code, leave your ego at the door, and forget about writing clever code.</li> <li>Avoid premature optimization: The problem with premature optimization is that you can never know where a program\u2019s bottlenecks will be until after the fact.</li> <li>Single responsibility: Every class or module in a program should only concern itself with providing one bit of specific functionality.</li> <li>Fail fast, fail hard: The fail-fast principle stands for stopping the current operation as soon as any unexpected error occurs. Adhering to this principle generally results in a more stable solution</li> </ul> <p>refactoring.guru describes general Java design patterns and also includes very nice illustrations.</p>","tags":["best_practise"]},{"location":"clean_code/mps/","title":"Index","text":"<p>This document lists some recommendations for code written it MPS. For a general introduction to code smells, go to Code Smells | Coding Horror and How To Write Unmaintainable Code. Clean code has many benefits that are described in Clean Code: Writing maintainable, readable and testable code | https://blogs.sap.com/.</p>","tags":["baselanguage","best_practise","ui"]},{"location":"clean_code/mps/#implementation","title":"Implementation","text":"<ul> <li>Prefer composition over inheritance(Specific Languages\u2019 blog)</li> <li>Implement INamedConcept in concepts that should have a name. The name property will be returned when <code>node.getName()</code> is called e.g. the name is used in editor tabs, the logical view, as the default presentation for references and other places.</li> <li>Use isInstanceOf to check if a node is an instance of a concept instead of using the Java instanceof operator e.g. <code>node.isInstanceOf(IfStatement)</code>. Alternatively, use the <code>ifInstanceOf</code> statement to directly save the converted expression in a variable. For example:  <pre><code> ifInstanceOf (node is IfStatement ifStatement) {\n}\n</code></pre></li> <li>Use the built-in collection classes such as collections, set, list, and map (documentation). Those classes are supported by languages that are null-safe.   For example:   <pre><code>list&lt;string&gt; listOfStrings = new linkedlist&lt;string&gt;(copy: new string[]{\"ab\", \"ba\", \"aaaa\"}); #print listOfStrings.where({it =&gt; it.startsWith(\"a\"); }).join(\",\");\n</code></pre>   For lists of nodes there is the special list type <code>nlist</code> e.g. <code>nlist&lt;ClassConcept&gt; classes = new nlist&lt;ClassConcept&gt;;</code> Choose the right collection for your task.</li> <li>Use the access language instead of directly calling ModelAccess methods.   For example:   <pre><code>node&lt;ClassConcept&gt; classNode = new node&lt;ClassConcept&gt;(); command with #project.getRepository() {\nclassNode.member.add(&lt;argument&gt;);\n}\n</code></pre></li> <li>Write tests for new features that you have developed and bugs that you have fixed. The generator   should always be tested, sometimes also the type system. You can even start with writing the tests first (test-driven-development).</li> <li>Don\u2019t try to use features in MPS at places that don\u2019t officially support them. Not supported means that the use case is not mentioned in the official documentation and the feature can only be accessed through hacks and workarounds. Examples:<ul> <li>invoking the generator in type system rules</li> <li>UI code in the behavior aspect</li> <li>accessing the project instance in unsupported places e.g. the generator</li> </ul> </li> <li>Avoid strict node casts(Specific Languages\u2019 blog)</li> <li>Use Java Streams to Write Clean Java Code. Warning: while streams   can be helpful, consider using the MPS collections language for most cases. It   is better understood by MPS developers and easier to use. Switch to Java streams only when the collections language is   not powerful enough.</li> <li>Use logging for troubleshooting purposes. Remove logging statements from production code or at least reduce the log level   to debug. Do not output log messages when they are not necessary.</li> </ul>","tags":["baselanguage","best_practise","ui"]},{"location":"clean_code/mps/#null-safety","title":"Null safety","text":"<ul> <li>Use the language checkedDots for saver access of possible null values. You can check nodes for null: node.isNull</li> <li>Use the annotation<code>@NotNull</code>and<code>@Nullable</code>for baselanguage code. A specific type system rule in MPS checks these annotations. The annotations are also enforced at runtime by the compiler.</li> <li>Use :eq:(NPE safe equals operation) and :ne:(NPE safe not equals operation) instead of == and <code>equals</code>.</li> <li>You can still return optional values instead of null in<code>baselanguage</code>code if you want (Java explanation).</li> </ul> <p>Some languages such as the smodel and collections languages are also null safe. The following code will correctly return false: <pre><code>node&lt;ClassConcept&gt; n = null;\n#print n.member.first as IfStatement.forceOneLine;\n</code></pre></p> <p>MPS also has a null analyzer for Java that is part of the data flow analysis (nullable analyzer, short explanation how it works). It is checked by the type system, and you get a warning when, for example, a method call might throw a <code>NullPointerException</code>.</p>","tags":["baselanguage","best_practise","ui"]},{"location":"clean_code/mps/#exceptions-and-warnings","title":"Exceptions and warnings","text":"<ul> <li>Use checked exceptions (e.g. IOException) for recoverable conditions and run-time exceptions (e.g. NullPointerException) for programming errors (Checked versus unchecked exceptions).</li> <li>Consider alternative ways of showing errors than throwing exceptions such as showing notifications. Examples for such notifications are balloons and dialogs.</li> <li>Attach exceptions to log statements. If it is a low-level log statement (e.g. log error) the stack trace will be printed in the log file.   For normal log statements (e.g. message log error), the stack trace can be opened through the right-click menu in the messages view. Example:   <pre><code>log error \"This is an error\",myException\n</code></pre></li> <li>Clean up in the finally-block of a try statement. The try-with-resources statement is also supported. An example for cleaning up could be a   temporary model that is only needed in a test. When the test fails the model, still needs to be disposed of. To tie an object to the lifecycle of a parent,   use the classes Disposer and Disposable from the IntelliJ platform.</li> <li>Treat Warnings As Errors and also don\u2019t ignore warnings/errors. Warnings might become errors or even make the compilation fail in the future. For example, the repository parameter in the access language (e.g. read action with global repository {}), was optional in the past but later became mandatory because using the global repository is discouraged.   Ignoring too many messages can also hide real errors that you have to address. For example, a warning that a NullPointerException can happen might reveal that   not tested situations exist where an object is indeed null and will crash something. That can happen, for example, when code is executed on the command line   instead of inside MPS where it can never fail.</li> <li>Warnings should not replace documentation(Specific Languages\u2019 blog)</li> </ul>","tags":["baselanguage","best_practise","ui"]},{"location":"clean_code/mps/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Be careful when using Unicode characters inside MPS. It might break something (MPS-33687, MPS-31835).</li> <li> <p>Use Gradle for build scripts (minimal example). They are better supported (e.g. mps-gradle-plugin) and can express the build logic more cleanly through Groovy or Kotlin than other solutions such as Maven or Ant (article comparing all three solutions). While the MPS build language generates Ant scripts, you can abstract away this layer with Gradle + the MPS Gradle Plugin nicely. For example:   <pre><code>  task buildLanguages(type: BuildLanguages, dependsOn: prebuild) {\nscript \"$buildDir/scripts/build-languages.xml\"\n}\n</code></pre>   Most MPS projects that used Maven in the past, were migrated to Gradle.</p> </li> <li> <p>Do not leave debug statements in production code. This includes MPS log statements but also System.out statements.   Especially in tests, outputs can not only be annoying but can also fail the test with an UncleanTestExecutionException   The only acceptable debug statements are those that have the log level set to debug or lower because they are not visible   by default.</p> </li> </ul>","tags":["baselanguage","best_practise","ui"]},{"location":"clean_code/mps/deprecation/","title":"Deprecation","text":"<ul> <li>Don\u2019t use commands from the access language without a repository (see: access language).</li> <li>Don\u2019t use node/myNode. Use node-ptr(myNode).resolve(repository) instead.</li> <li>Don\u2019t use model/myModel. Use model-ptr(myModel).resolve(repository) instead.</li> <li>Don\u2019t use module/myModule or language-module. Use module-reference/myModule instead.</li> <li>Don\u2019t use linkNode/concept:link/. Use link:concept:link/ instead.</li> <li>Don\u2019t use conceptNode/concept/. Use concept/concept/ instead.</li> <li>Don\u2019t use node.delete. Use node.detach instead.</li> <li>Don\u2019t use node.containingRole. Use node.getContainmentLink instead.</li> <li>Don\u2019t use interface the IDon\u2019tSubstituteByDefault. Create an empty default substitute menu for the concept instead.</li> <li>Don\u2019t use print, <code>System.out</code> or <code>System.err</code> for logging. Use log for low-level logging or message for high-level logging instead.</li> <li>Use the explicit presentation of a node when used in a string. For example: <code>\"my node: \" + node.getPresentation()</code> instead of <code>\"my node: \" + node</code>.</li> <li>Don\u2019t use counter variables in LoopMacro. Use <code>LOOP index</code> in the code instead.</li> <li>Don\u2019t use IOperationContext. You can find more info in the attached comment of the interface.</li> <li>Avoid getting the repository from the opened project or using the global repository. The code might break in the future.</li> </ul>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/","title":"Readability/maintainability","text":"<p>This page focuses on creating MPS code that is easy to read but also deals with the topic of maintainability. Too often code is written by one person but has to be maintained by someone else. Understanding the mindset of other people can be difficult, especially if they don\u2019t follow any patterns and the code is (visually) hard to read.</p> <p>Part of maintaining code means also dealing with technical debt and reducing it, as well as cleaning up the codebase periodically. That also means that sometimes code must be deprecated and removed after some time. Or it must be rewritten when it uses deprecated code e.g. after upgrading to a new MPS version. Neglecting those tasks makes maintaining the code more difficult in the future.</p>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/#readability","title":"Readability","text":"<p>Establishing a coding style is important for Base Language code but also other parts of your code such as the language aspects. When the code is consistent it is also easier for other people to understand because they can see patterns in the code. For writing names, read: Write short code with good names | Sandi Metz\u2019s Rules for OOP. Read the MPS Java style guide for more ideas. In addition to consistency, short code helps readability.</p> <p>Learning to write readable code takes time and must be practiced. Coding standards can help enforce certain patterns but sometimes code reviews are necessary so that other people can help improve your code.</p> <ul> <li>Simplicity: You should strive to make your code as simple as possible. Unnecessary complexity will only make the code hard to understand and prone to errors. The code can be clever, as long as it focuses on readability and maintainability. If the code is kept short it is easier to go through, but if it\u2019s too smart, it will take too much time to understand and edit it.</li> <li>Use the same naming scheme for concepts (e.g. start interfaces with the letter \u201cI\u201d), intentions, or actions. Always place code in behavior methods   or utility classes with similar naming patterns. Follow standard naming conventions such as camelCase for variables.</li> <li>Name temporary variables such as counter variables consistently. Read this StackOverflow answer   for some ideas on how to name variables.</li> <li> <p>Create methods if the code becomes too long and avoid boilerplate code. For example: Use setters and getters for classes: <pre><code>  public int a {get; private set;} \n  public int b {get;\n    set(value) {\n      System.out.println(\"\" + a + b + this.a);\n    }\n  }\n</code></pre> A property can be created by typing <code>property</code> at the same place where fields are declared.</p> </li> <li> <p>Extract long boolean expressions that are used as conditions into variables. For example:   <pre><code>if ((object.size &gt; 20 &amp;&amp; object.shape.equals(\"rectangle\")) &amp;&amp; (object.color.equals(\"black\") || object.color.equals(\"gray\")) &amp;&amp; (object.buttons.contains(\"power\") &amp;&amp; object.buttons.contains(\"volume\") &amp;&amp; object.buttons.contains(\"channel\")) &amp;&amp; (object.hasPowerCord())) {\n// The object is a TV\n} </code></pre>   Long boolean expressions can be split up into variables:   <pre><code>boolean hasScreen = object.size &gt; 20 &amp;&amp; object.shape.equals(\"rectangle\");\nboolean hasRemote = object.color.equals(\"black\") || object.color.equals(\"gray\");\nboolean hasSpeakers = object.buttons.contains(\"power\") &amp;&amp; object.buttons.contains(\"volume\") &amp;&amp; object.buttons.contains(\"channel\");\nboolean hasPowerCord = object.hasPowerCord();\nif (hasScreen &amp;&amp; hasRemote &amp;&amp; hasSpeakers &amp;&amp; hasPowerCord) {\n// The object is a TV\n}\n</code></pre>   Conditions can be reduced by saving them in closures or functions. For example:   <pre><code>{int =&gt; boolean} isEven = {int number =&gt; number % 2 == 0; };\n#print isEven(1); </code></pre>   If statements can also improve readability when they are used as guard clauses, also known as assert or precondition. Compare the following snippets:   the first one doesn\u2019t use guard clauses.   <pre><code>public void updateData(Data data) {\nif (data == null) {\nreturn;\n} else if (data.isPresent()) {\n// do stuff here\n} else {\nthrow new Exception(msg);\n}\n}\n</code></pre>   The second snippet uses them and is more readable.   <pre><code>public void updateData(Data data) {\nif (data == null) return;\nif (!data.isPresent()) trow new Exception(msg);\n// do stuff here\n}\n</code></pre></p> </li> <li> <p>Functional interfaces accept lambdas as parameters. For example, a thread that accepts a Runnable object can also be called like this: <pre><code>new Thread({ =&gt; System.out.println(\"Thread\"); }).start()\n</code></pre></p> </li> <li> <p>Use enhanced for loops instead of for loops with counters. For example:   <pre><code>for(type variable:iterable) {}\nforeach(variable in iterable) {}\n</code></pre>   The second statement doesn\u2019t even need a type for the variable. For lists, other ways exist: <code>list.forEach({it =&gt; })</code> for iterating the list and <code>list.select({it =&gt; &lt;no statements&gt; })</code> or <code>list.selectMany({it =&gt; &lt;no statements&gt; })</code> for transforming the list. For adding many elements to a list, <code>list.addAll(elements)</code> can be used.</p> </li> <li> <p>Use empty lines between statements for readability(StackOverflow discussion). When a line becomes too long, a few BaseLanguage refactorings can be used such as introducing variables or extracting code into a method.   You might also want to experiment with the default text width of the editor (preferences \u2192 Editor \u2192 MPS Editor) which is set to 120 by default.   This value is quite low and can be increased depending on your monitor size.</p> </li> <li>Use virtual packages to organize your code. How you organize the modules is up to you. Some suggestions:<ul> <li>by type of module: lang, test, build\u2026</li> <li>by a group of languages: tables, tooltips, widgets\u2026 or core, expr, trace\u2026</li> <li>by language maturity: stable, staging, rest\u2026</li> <li>by a numbering system + other criteria: _10_build, _50_active, _60_demo, _70_attic</li> </ul> </li> <li>Avoid double negation as they are hard to understand. Also, use a positive tone to help with understanding statements more intuitively. Example:   <pre><code>boolean isDisabled = true; \nif (!isDisabled) { // bad\n}\nx.setDisabled(true) // bad\nx.setEnabled(true) // good\n</code></pre></li> <li>Avoid deep nesting. This can be, for example, a chain of calls (<code>nodea.nodeb.nodec.property</code>). Consider providing a method to access deeper nested nodes or jump   to the nested node directly. For example:   <pre><code>#print classNode.getAllIfStatements()\n#print classifier.ancestor&lt;concept = ClassConcept&gt;\n#print classNode.descendants&lt;concept = Classifier&gt;\n</code></pre>   This is also relevant for if conditions, loops, and nested methods calls. Keep them flat or use only a few levels of nesting.</li> <li>4 parameter rule: a method accepting a large number of parameters is hard to follow. A good maximal number of parameters is 4.   Methods can be refactored into smaller methods, MPS builders can also be used to avoid many parameters.</li> <li>Group your code. Base Language code: group the fields and methods of the class by their visibility and purpose. For example, group the private fields and methods together, and group the public fields and methods together. Also, group the fields and methods that are related to each other by their functionality or logic. Also, break down big tasks into smaller chunks. Long (behavior) methods can be split up into multiple methods. Helper methods   can be placed as static methods into separate classes. To call them more easily, extension methods can be used. For example:   <pre><code>extension methods String {\npublic void customMethod() for String {\n}  }\npublic class S {\npublic static void main(string[] args) {\n\"test\".customMethodx();\n}\n}\n</code></pre>   Code can also be grouped into multiple root nodes, models, or even modules. If the generation spans across multiple models,    cross-model generation applies.</li> <li>Prefer Readable Code to Comments | ncrcoe.gitbooks.io</li> </ul>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/#maintainability","title":"Maintainability","text":"<ul> <li>Mark classes/concepts etc. as deprecated when they shouldn\u2019t be used and will be removed in the future. When a deprecation date is added   it can be used as a reminder to remove deprecated code in regular intervals or even enforce it through a linter.</li> </ul> <p>DeprecatedNodeAnnotation</p> <p> </p> <p>DeprecatedBlockDocTag and Java Deprecated annotation</p> <ul> <li>Use the text TODO, FIX or FIXME in comments. The TODO tool can find those strings as well as the commit dialog when the option Check TODO (all) is activated.   Other texts that are not supported by the tool but are common are NOTE, XXX, HACK, and BUG</li> <li>Don\u2019t repeat code. You can write the same code twice but consider creating a method when the code is duplicated again.   Repeated code breaks the reading flow and makes updating the code more difficult.</li> <li>Delete unnecessary code. There is no point in keeping code and commenting out if it is not used. If you use version control and need to go back to   the old code, you can still find it in the history.</li> <li>Comments can be used to document complex code. Don\u2019t use them if the method signature already contains all the necessary information.   Not every piece of information should be placed next to the code. Documentation, such as this website, or documentation created with   com.mbeddr.doc (+ optional com.mbeddr.aspect) can be used not only for user documentation but also for technical guides for   developers.</li> <li>Avoid using magic numbers which are direct usages of numbers in the code. Example:   <pre><code>double x = 0.2; // What does this variable represent?\ndouble y = 100; // And this one?\ndouble z = 0.1; // And this one?\ndouble w = y * (1 - z) * (1 + x); // What is the meaning of this expression?\nSystem.out.println(\"The result is \" + w); // What is the result \n</code></pre></li> </ul>","tags":["baselanguage","best_practise"]},{"location":"clean_code/mps/readability_maintainability/#stackexchange-software-engineering","title":"Stackexchange: Software Engineering","text":"<ul> <li>What\u2019s wrong with comments that explain complex code?</li> <li>When is a BIG Rewrite the answer?</li> <li>How can I convince management to deal with technical debt?</li> <li>How do I know how reusable my methods should be?</li> </ul>","tags":["baselanguage","best_practise"]},{"location":"home/console/","title":"Console","text":"<p>I can\u2019t enter the print statement.</p> <p>It can\u2019t be used in nested structures (MPS-34656). Use it at the top level instead. If you need to output multiple objects, save them to a list first and output the list at the top level.</p> <p>How can you enter more than one statement into the console?</p> <p>Enter an opening curly brace (this starts a new statement list in Base Language) and enter your statements.</p> <p>How can you find all System.out.println statements?</p> <p>Code snippet:</p> <p>]</p> <p>#nodes, #models, #usages etc. don\u2019t show any result.</p> <p>Make sure that your query is correct. You also have to set a scope for these statements in square brackets such as <code>#nodes&lt;scope = global&gt;</code> to find all the nodes in the global scope.</p> <p>Is the console a regular root node?</p> <p>Yes, it is an instance of ConsoleRoot and is located in a temporary model. It is possible to open it in a normal tab. Right-click in the console (for example at the top) and click  Show Node in Explorer. Click the ConsoleRoot and it will open in a new tab (keyboard shortcuts such as run line won\u2019t work here).</p> <p>After executing the current line, an error says that the console class wasn\u2019t found.</p> <p>This can happen when the compilation of the model of the console was not successful. It can happen if you import a custom generation plan into the console that disables some generators. It can also happen if you import a solution that doesn\u2019t have the Java facet enabled or has a different solution kind such as other.</p> <p>What does the expression #internalMode do?</p> <p>It tells you if the internal mode is activated. It can be achieved by calling RuntimeFlags.setInternalMode(true) or by setting a system variable. Start MPS with argument <code>-Dmps.internal=true</code> or add <code>mps.internal=true</code> to the mps.vmoptions file: use Main menu -&gt; Help -&gt; Edit Custom VM Options. The exact functionality of this flag can be found by looking at the MPS source code. One of the new action groups that it adds, is called Internal. There is also an Internal Actions Menu in IntelliJ IDE\u2018s. Consolute the documentation for more info.</p> <p>How do you open the selected node in the console?</p> <p>Given I have a node selected in the editor. How can I select it to manipulate it in the MPS console?</p> <p><sub>asked by: @AlexeiQ<sub> <p>You can simply copy the node and paste it into the console:</p> <ol> <li>Copy a node in the editor (Cmd+C or Ctrl+C)</li> <li>Go to the console.</li> <li>Paste the content   (Cmd+V or Ctrl+V)</li> <li>MPS pastes a node reference that you can use to directly manipulate the node:</li> </ol> <p></p> <p><sub>answered by: @coolya<sub>","tags":["interactive","troubleshooting"]},{"location":"home/debugging/","title":"Debugging","text":"<p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.</p> <p>(Brian Kernighan)</p> <p>If you are unsure how do debug in general, read: How do I Debug my Program?. For more in-depth explanations regarding debugging in MPS, visit:</p> <ul> <li>Debugging in MPS(Specific Languages\u2019 blog)</li> <li>White paper on Debugging in MPS(DSLFoundry\u2019s blog)</li> <li>Debugging MPS with IntelliJ setup</li> </ul> <p>The following list shows some debugging tips:</p> <ul> <li>The menu entry Tools \u2192 Internal Actions provides many useful debugging features, for example, the UI Inspector (Swing debugging).</li> <li>Right-click \u2192 Preview Generated Text: show the result of the M2T transformation (for example generated code) for the current node</li> <li>Inspect Node: right-click \u2192 Show Node in Explorer</li> <li>Inspector: right-click \u2192 Inspect Node</li> <li>Right-click \u2192 Language Debug<ul> <li>Show Type: show type system type of the current node.</li> <li>Rule which caused Error: find checking rule/constraint, which caused the error.</li> <li>Cell in Explorer: debug editor cells and collections.</li> <li>Generation Traceback: debug the generator. In transient models, you can find the source node for the generated (intermediate) node.</li> </ul> </li> <li>Find Action: Help \u2192 Find Action or Ctrl+Shift+A if you forgot the name of your action.</li> <li>Changing IDE settings<ul> <li>2 locations: bin folder (MPS/IDE folder) and preferences folder (overwrites bin folder)</li> <li>JVM: bin/mps.vmoptions (RAM/Xmx, debugger port, \u2026)</li> <li>Log-level (Log4J): bin/log.xml </li> <li>IDEA properties: bin/idea.properties: change default paths, advanced IDE settings</li> </ul> </li> <li>Log file: is stored in the logs folder, e.g. <code>Logs/&lt;My-MPS-/My-RCP-Identifier&gt;/idea.log</code></li> </ul> <p>How do I debug action maps?</p> <p>Set a breakpoint in CellActionExecutorFinder.</p>","tags":["troubleshooting"]},{"location":"home/debugging/#free-java-debugging-tools","title":"Free Java debugging tools","text":"<p>Especially VisualVM tends to freeze MPS. A better profiler is YourKit which is a commercial product.</p> <ul> <li> <p>VisualVM</p> <ul> <li>display process configuration and environment (e.g. Java/MPS version, JVM arguments, system properties)</li> <li>monitor process performance and memory (e.g. CPU/heap usage, loaded classes, threads)</li> <li>visualize process threads (e.g. dispatch thread)</li> <li>profile performance and memory usage (e.g. CPU usage)</li> <li>take and display thread dumps (e.g. find deadlocks)</li> <li>take and browse heap dumps (e.g. find memory leaks)</li> <li>analyze core dumps (e.g. crashed Java processes)</li> </ul> <p></p> </li> <li> <p>Memory Analyzer (MAT)</p> <ul> <li>find memory related issues such as memory leaks</li> </ul> <p></p> </li> <li> <p>JDK Mission Control</p> <ul> <li>troubleshoot memory leaks</li> <li>troubleshoot performance issues using flight recorder</li> </ul> <p></p> </li> <li> <p>jstack.review - Java Thread Dump Analyzer</p> </li> </ul>","tags":["troubleshooting"]},{"location":"home/debugging/#decompiler","title":"Decompiler","text":"<p>Decompiling jar files usually shouldn\u2019t be necessary because the source code of MPS, IntelliJ Community, JetBrainsRuntime, and the MPS platforms is open source and available on GitHub. For all other cases, use the JD Java Decompiler. The IntelliJ plugin can also be used for this task.</p>","tags":["troubleshooting"]},{"location":"home/debugging/#general-blog-posts","title":"General Blog posts","text":"<ul> <li>24 debugging tips and tricks</li> <li>The Debugger Checklist \u2013 Part I</li> <li>The Debugger Checklist \u2013 Part II</li> <li>Debugging tips</li> <li>10 Debugging Tips for Beginners</li> </ul>","tags":["troubleshooting"]},{"location":"home/external_files_and_tools/","title":"External files and tools","text":"","tags":["files","tools"]},{"location":"home/external_files_and_tools/#importexport","title":"Import/export","text":"<p>How do you write an importer?</p> <ul> <li>Writing an importer: Introduction(Specific Languages\u2019 blog)</li> <li>Writing an importer: Adding the action to a menu(Specific Languages\u2019 blog)</li> <li>Writing an importer: Invoking from the editor(Specific Languages\u2019 blog)</li> <li>Writing an importer: Error handling considerations(Specific Languages\u2019 blog)</li> <li>Writing an importer: Updating existing nodes(Specific Languages\u2019 blog)</li> </ul> <p>Alternatively, custom persistence can be employed (rarely used).</p> <p>How do you deal with errors when writing an importer?</p> <ul> <li>Create a new tab in the messages view and show the errors.</li> <li>Create error concepts in the language. If the import fails for a particular node, it can be replaced with one of these error nodes in the output model and some error message can be appended. This way you can also implement checking rules for the error nodes so that the errors are also displayed as part of model checking. You can also use finders to find all occurrences of errors in the model.</li> </ul> <p>Is there a wizard available to set up an MPS language based on an XML schema (defined in .xsd files)?</p> <p>No, not possible at the moment but you can create new projects from local or GitHub-hosted templates with Lochkarte(experimental).</p> <p>Where do I put my Java JARs that I want to use as dependencies?</p> <p>Where do I put my JARs?(Specific Languages\u2019 blog)</p>","tags":["files","tools"]},{"location":"home/external_files_and_tools/#tools","title":"Tools","text":"<p>How can you run an LSP server for MPS grammars?</p> <p>There is no support for this in IntelliJ products (see IDEABKL-7409) and also no implementation exists in MPS.</p> <p>How can you use databases in MPS?</p> <ul> <li>MPS doesn\u2019t have any special support for databases or for frameworks such as Spring Boot (unlike IntelliJ IDEA).</li> <li>MPS is not a (relational) database(Specific Languages\u2019 blog)</li> </ul> <p>How can you create a standalone utility (not a complete IDE) for language generation with MPS?<sup>2</sup></p> <p>This is not possible at the moment but you can interact with MPS models from Java when you set up the necessary dependencies:</p> <pre><code>import jetbrains.mps.smodel.ModelAccess;\nimport jetbrains.mps.tool.environment.EnvironmentConfig;\nimport jetbrains.mps.project.Project;\nimport jetbrains.mps.tool.environment.MpsEnvironment;\nimport org.jetbrains.mps.openapi.model.SModel;\nimport org.jetbrains.mps.openapi.module.SModule;\nimport java.io.File;\npublic class Test {\nstatic String projectDir = \"your MPS project path\";\npublic static void main(String[] args) {\nEnvironmentConfig config = EnvironmentConfig.emptyConfig();\nMpsEnvironment ourEnv = new MpsEnvironment(config);\nourEnv.init();\nProject myProject = ourEnv.openProject(new File(projectDir));\nmyProject.getModelAccess().runReadAction(() -&gt; {\nfor(SModule module:myProject.getProjectModules()) {\nfor(SModel model:module.getModels()) {\nSystem.out.println(model.getName());\n}\n}\n});\n}\n}\n</code></pre> <p>How can you share MPS snippets?</p> <p>You can use Skadi Cloud Gists.</p> <p>How can you run MPS in the browser?</p> <p>You can try Skadi Cloud. There is also Modelix, JetBrains Projector. [</p> <p>LIonWeb](https://github.com/LIonWeb-org) is the newest project that also has some information about other projects.</p> <p>How can you embed a web browser in MPS?</p> <p>Since Intellij 2020.1 it is possible to use the Java Chromium Embedded Framework. Create a new Java Swing component in the editor: <pre><code>JBCefBrowser myBrowser = new JBCefBrowser(myUrl);\nreturn myBrowser.getComponent();\n</code></pre></p> <p>For more information, read the page about JCEF.</p> <p>What is the future of MPS especially regarding the cloud?</p> <ul> <li>What is the future of MPS?(Specific Languages\u2019 blog)</li> </ul> <ol> <li> <p>MPS forum - How to migrate existing data into MPS? \u21a9</p> </li> <li> <p>MPS forum - Standalone language generator \u21a9</p> </li> </ol>","tags":["files","tools"]},{"location":"home/general/","title":"General","text":"<p>Who is MPS for?</p> <p>Who is MPS for?(Specific Languages\u2019 blog)</p> <p>I am an MPS beginner. Where do I start?</p> <p>If you are new to MPS and want to learn more about MPS, start with the following links:</p> <ul> <li>Learn MPS | official JetBrains landing page</li> <li>Get started with MPS | mps.rocks</li> <li>Learning MPS | mps.rocks</li> <li>Getting Started: Part I(F1RE\u2019s blog), Part II(F1RE\u2019s blog)</li> </ul> Is there a high-level presentation that I can have a look at? <p>Yes, there is a presentation from 2020 by V\u00e1clav Pech.</p> <p></p> <p>Are there any video tutorials besides the official videos?</p> <p>Yes, there is Heavy Meta TV which hosts in-depth tutorials about MPS with a total length of 20 hours. The tutorials were filmed as part of a series of live streams in 2018/2019.</p> <p>I want to learn more about domain-specific languages. Where do I start?</p> <p>Start with the slides: Introduction to Domain-Specific Languages by Markus V\u00f6lter. On the books page, there are also a few relevant books like DSL Engineering (2013) and How to Understand Almost Anything - A Practitioner\u2019s Guide to Domain Analysis (2013).</p> <p>What are the most important shortcuts?</p> <p>JetBrains MPS Shortcuts(F1RE\u2019s blog)</p> <p>Which directory contains the MPS project?</p> <p>Which directory contains the MPS project?(Specific Languages\u2019 blog)</p> <p>What can you do if a problem occurs that isn\u2019t on this list?</p> <p>Try invalidating the cache and restarting MPS (same menu). Search the forum and issue tracker.  Ask a question on Slack.</p> <p>I changed something in a settings page and nothing changed.</p> <p>There might be a bug related to caching. Reopening the dialog, invalidating the cache, or restarting the project might help.</p> <p>Which standard IDE settings should you change?</p> <p>The maximum heap size setting should be changed to a higher value such as 8 GB when using many languages or plugins. Another reason for high memory usage can be many (poorly) implemented checking rules. </p> <p>I am running low on memory or the IDE is running slow. What can you do without restarting MPS?</p> <p>When you have enabled the loaded models indicator in the lower right corner of the screen, you can click on the text to unload not needed models. The memory indicator at the same location can be used to free memory. As a last resort, the power saving mode can be enabled. It disables background tasks such as the model checker (not recommended).</p> <p>What are modules, models, nodes and concepts?</p> <ul> <li>What goes where: the basic architecture of MPS projects(Specific Languages\u2019 blog)</li> <li>Ambiguous terms: Modules and models(Specific Languages\u2019 blog)</li> <li>How MPS Identifies Things(log verbose\u2019s blog)</li> </ul> <p>Can you explain the MPS technology stack, project concepts, and OpenAPI relations?</p> <p>MPS technology stack, project concepts, and OpenAPI relations explained visually(DSLFoundry\u2019s blog)</p> <p>What\u2019s an SRepository and how\u2019s it structured?</p> <p>The answer can be found in the MPS source code. Multiple repositories could be available in the future. Given a repository, references to modules/models/nodes can be resolved. There\u2019s no need in making IDs globally unique as each subsystem knows, which exact repository it needs to use at any moment (e.g. the type-system knows where it stores its type nodes, so it will not try to resolve references to them).</p> <p>A repository contains modules, modules have model roots, and each model root can load models. A module can also be a model container itself (without a model root). A model is then a set of root nodes. Each root node is a root of a tree of nodes, Overall, a repository is a tree structure.</p> <p></p> <p>Is there an existing expression/scripting language?</p> <p>There is the expressions sample project that is shipped with MPS. For a full language that can also be evaluated, have a look at KernelF which is available at  IETS3.</p> <p>How do you organize large projects?</p> <p>Read the two answers in this thread.</p> <p>How do you debug MPS projects?</p> <p>Have a look at this blog post or this guide.</p> <p>Where are the log messages?</p> <p><code>log info</code> logs to the MPS log file idea.log,  <code>message info</code> logs to the messages view.</p> <p>Which log level should you use?</p> <p>Have a look at this Stack Overflow answer.</p> <p>How do you export data from MPS?</p> <ul> <li>The simplest way to export your data from MPS(Specific Languages\u2019 blog)</li> <li>Good and bad ways of exporting DSL models(Specific Languages\u2019 blog)</li> <li>Translation vs export(Specific Languages\u2019 blog)</li> </ul> <p>Why is a project read-only?</p> <p>Why is my project suddenly read-only?(Specific Languages\u2019 blog)</p> How do you work with more than one project in MPS? <p>Given I want to work on an MPS project that uses other projects and I want to switch between tasks that sometimes need changes on both, the dependent project and the root project. I would like to switch back and forth between using the default prepackaged project dependencies and my own repository of them where I build them myself. How could I do that?</p> <p>Option 0: Open multiple projects in MPS at the same time</p> <ul> <li>Works when doing small changes</li> <li>fast</li> <li>unreliable: when changing dependencies in my source models, this leads to a reload operation on the repository, which sometimes messes up the loaded repository and caches</li> </ul> <p>Option 1: Publish and pull from local maven ( IETS3)</p> <ul> <li>reliable</li> <li>example</li> <li>gradle script needs to be told to pull from a local repository \u2013 e.g. by providing <code>-PforceLocalDependencies</code> to IETS3 \u2013 or use dependency overrides</li> </ul> <p>Option 3: Changing project libraries</p> <ul> <li>does not affect command-line builds</li> </ul> <p>Option 3a: Command line setup Task ( IETS3) We usually have a <code>./gradlew setup</code> task in our projects that replaces your <code>.mps/libraries.xml</code>. When you want to change the project, you\u2019ll need to change the configuration of that command line setup task and rerun it.</p> <p>Option 3b: MPS Path variables in settings (deprecated)</p> <p>In the MPS settings, you can configure path variables that can be used in <code>.mps/libraries.xml</code> to pinpoint the location of a target project.</p> <p>They will only configure the MPS behavior and not affect the command line builds. So in most cases, you don\u2019t want to use them and instead let your build script set up these files.</p> <p><sub>contributed by: @abstraktor<sub> <p>Can I configure MPS path variables per project?</p> <p>No, this is not possible. Most of the time, this problem arises, when multiple instances (e.g. different branches) of the same project should be opened with MPS. It is possible to create localized MPS configurations that enable running multiple independent instances of various MPS versions. For Linux you can use nkoester/mps-zookeeper.</p> <p>As a general solution, you can download multiple instances of MPS and edit the following paths in bin/idea.properties: idea.config.path, idea.system.path, idea.plugins.path and idea.log.path. When you have a repository \u201crepo\u201d, you can, for example, replace the name of the MPS version with repo1, repo2, repo3, or a different naming scheme. When you are using remote debugging, make sure to use different ports for the MPS instances (e.g.5005, 5006\u2026500n) or MPS won\u2019t start at all.</p> <p>Why is MPS shipped with JBR instead of using an installed JDK/JRE?</p> <p>JBR is a fork of OpenJDK with specific bug fixes and improvements for JetBrains IDEs. More info can be found in JetBrains/JetBrainsRuntime. In some of the platform build scripts the environment variable <code>JB_JAVA11_HOME</code> can be used to set the JDK home. For older MPS versions that used Java 8, there was the environment variable <code>JB_JAVA8_HOME</code>.</p> <p>Are there any resources/communities about domain-specific languages and MPS?</p> <ul> <li>DSL &amp; MPS books by Markus Voelter. Note: some of these books might be outdated and do not cover the latest features of MPS.</li> <li>The complete guide to (external) Domain Specific Languages(Strumenta\u2019s blog)</li> <li>68 Resources To Help You To Create Programming Languages(Strumenta\u2019s blog)</li> <li>Strumenta Virtual Meetups</li> </ul>","tags":["general","beginner","troubleshooting"]},{"location":"home/performance/","title":"Performance","text":"<p>This is a page about advanced topics. Please skip it if you are a beginner.</p> <p>This page explains common bottlenecks regarding memory consumption and performance in MPS in general and how to solve those problems. If you want to know about slow software in general (e.g. hardware-related slowness), read: Slow Software | Ink &amp; Switch.</p> <p>How are expensive model traversals handled in MPS?</p> <p>There is no API for indexing model traversal results (e.g. getParent(), getAncestors()) the way it is implemented in frameworks like Xtext.</p> <p>Find Usages of concepts is efficiently implemented though. There is a classFastNodeFinderManager that is used internally which can efficiently return the list of instances of a concept for a model. The descendants of a concept are also cached in the ConceptDescendantsCache.</p> <p>The indexing at startup collects some information about MPS models such as instances of concepts, imports and property values (used for the Find Text in Node Properties action). The virtual files that represent root nodes in the filesystem are probably also indexed.</p> <p>The initial indexing also integrates Base Language into the IntelliJ search functionality (implementation in MPS). When using MPS as an IntelliJ plugin this should allow the normal search for usages and maybe structural search to work with Base Language classes and interfaces.</p>"},{"location":"home/performance/#general","title":"General","text":"<ul> <li>Read the page Advanced Configuration in the official documentation. You are especially interested in setting <code>-Xmx</code> and <code>-Xms</code>.</li> <li>Do not invalidate the cache when restarting the project, if it isn\u2019t necessary. The reindexing can take a while for large projects.</li> <li>Speeding up model checks with Scope Cache (&lt; MPS 2021.2)</li> <li>Often accessed data should be cached (How to implement caching in Java)</li> <li>Don\u2019t recalculate expensive calculations but rather save the results in variables.</li> <li>Different data structures have different time and space complexities. For example, selecting a different list implementation can have big improvements on performance (Big-O Cheat Sheet)</li> <li>Make sure to iterate nodes or editor cell trees efficiently. Narrow down the nodes that you want to iterate over e.g. <code>model.roots(ClassConcept)</code> instead of  <code>model.nodes(&lt;all&gt;)</code>. <code>nodesIncludingImported()</code> can also create huge scopes. The same is true for searching in the console: snippets such as <code>#nodes&lt;scope = global&gt;</code> should be avoided. For deep structures, <code>node.descendants</code>can also be expensive.</li> <li>When using scopes, avoid using a GlobalScope. Try to also use the following snippets for filtering models that often shouldn\u2019t be searched because they are not indexed:<ul> <li><code>#modules.where({~it =&gt; it.isPackaged() })</code>to filter out modules that are installed</li> <li><code>#models.where({~it =&gt; TemporaryModels.isTemporary(it) })</code> to filter temporary models</li> </ul> </li> <li>Throwing exceptions and especially fatal errors that are shown in the lower right corner of the window are slow. Short   freezes before the errors are thrown are sometimes the result of that.</li> </ul>"},{"location":"home/performance/#generator","title":"Generator","text":"<ul> <li> <p>Disabling transient models through the button in the bottom right corner of the MPS frame will increase generation performance significantly especially   in combination with the generator option Apply transformations in place.</p> </li> <li> <p>TODO: add generator performance slides from the MPS Meetup</p> </li> </ul>"},{"location":"home/performance/#model-pruning","title":"Model pruning","text":"<p>Often, not all nodes have to be processed in the generator. We might have different build configurations where we are interested in only a subset of nodes, or we don\u2019t use cross-model generation and need to copy nodes from different models to the current model. Sometimes additional information is attached to nodes. Such attributes or nodes don\u2019t have to be generated at all. Having too many nodes to be processed can have memory impacts as well as make the generator a lot slower.</p> <p>Model pruning can be achieved by using an allowlist or blocklist approach: either specify which nodes should be processed or which nodes shouldn\u2019t be processed. Both approaches can also be combined. The following simplified approach is one possible solution to achieve this:</p> <ol> <li>Collect all original root nodes: <code>model.roots(&lt;all&gt;).select({~it =&gt; genContext.get original copied input for (it); })</code></li> <li>Create a pruning condition that decides which nodes can be pruned and collect the other nodes (relevant nodes). You might also want to keep a list of relevant root concepts that shouldn\u2019t be pruned.</li> <li>Start from a specific node and iterate through its descendants and follow only the references that are allowed by the pruning condition. You might want to include also other nodes that are not reachable by reference that are still needed for the generation.</li> <li>Make copies of the roots of nodes that are relevant and shouldn\u2019t be pruned.</li> <li>Iterate through the children of the copies. If a child is not a relevant node, detach it from its parent node.</li> <li>Clear the original content from the input model and add the relevant roots to the input model.</li> </ol>"},{"location":"home/performance/#editor","title":"Editor","text":""},{"location":"home/performance/#big-roots-render-slowly","title":"Big roots render slowly","text":"<p>The initial rendering time increases with the size of the AST. MPS tries to cache parts of the editor once built and after the initial render it will only update the parts that require changes, but collecting the necessary dependency information to achieve this incrementality takes time. How big is too big? Thousands of descendants are going to take several seconds to render. Re-layouting the editor should therefore also not be invoked too often (manually or programmatically).</p> <p><sub>contributed by: @sergej-koscejev<sub>"},{"location":"home/performance/#long-running-checking-rules-on-big-roots","title":"Long-running checking rules on big roots","text":"<p>When a root is displayed in the editor, checking rules are run in the background. The background checker can be interrupted between rules but not during the execution of a rule. When checking rules are too expensive for live checking set the flag do not apply on the fly to true. Type system calculations are cached by default but can also impact performance when they have to be recalculated too often. </p> <p><sub>contributed by: @sergej-koscejev<sub>"},{"location":"home/performance/#mps-extensions","title":"MPS-Extensions","text":"<ul> <li>The diagram language saves layout information in node attributes. That means  that auto re-layouting the diagram creates a lot of changes in the diff view for this root node. The auto-layouting can be influenced through  an option in the editor\u2019s definition of the diagram.</li> <li>Tables and diagrams disable incremental rendering. That means that the editor will not be updated incrementally causing a full update on each typed character.   This might also affect the type-system calculations (MPS_EXTENSIONS-579)</li> <li>Using horizontal or vertical lines or any styles from  de.itemis.mps.editor.celllayout.styles language (such as _grow-x or _grid-layout-flatten) will cause a top-down layout algorithm to be activated for the editor. This algorithm is slower than the usual MPS re-layout and is also called more often for some reason, slowing down the incremental editor update.</li> </ul>"},{"location":"home/performance/#kernelf","title":"KernelF","text":"<ul> <li>The code coverage collection is global. That means that you either have to empty it after some time with <code>DefaultCoverageAnalyzer.reset()</code> or start the interpreter without coverage. The class IETS3ExprEvalHelper has methods for evaluating nodes with and without coverage.</li> <li>The interpreter framework can be slow when the interpreter is invoked often.   There might be faster alternatives that are currently not  implemented though.</li> </ul>"},{"location":"home/performance/#startup","title":"Startup","text":"<p>The startup of MPS can be analyzed with a standard Java profiler such as YourKit. For IntelliJ components, services and extensions, it is also possible to use the IntelliJ Report Analyzer. Click on the button Get from running instance to fetch the data from the opened MPS instance. Make sure that the productCode in the left textarea says MPS because other IntelliJ IDEs such as IntelliJ IDEA uses the same port.</p> <p></p>"},{"location":"home/performance/#java","title":"Java","text":"<p>If you are interested in internal performance-related topics about Java and its compiler, you might find the following articles helpful:</p> <ul> <li>How the JIT compiler optimizes code | ibm.com</li> <li>The Java HotSpot Performance Engine Architecture | oracle.com</li> <li>Optimizing compiler | wikipedia.com</li> <li>How the JIT compiler boosts Java performance in OpenJDK | developers.redhat.com</li> <li>Microbenchmarking with Java | baeldung.com</li> </ul>"},{"location":"home/platform_specific_bugs/","title":"OS-specific bugs","text":"","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#native-crashes","title":"Native crashes","text":"<p>Native crashes are crashes where MPS crashes internally (C/C++ code) and an error dialog is shown. First search the following Youtrack projects:</p> <ul> <li>MPS: MPS related crashes</li> <li>IntelliJ IDEA: IntelliJ (platform) related crashes</li> <li>JetBrains Runtime: mostly UI and JCEF related issues</li> </ul> <p>For crashes on macOS, have a look at Identifying the Cause of Common Crashes | developer.apple.com.</p>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#windows","title":"Windows","text":"<p>Compilation from the command line might fail due to none ASCII chars.</p> <p>The error message looks something like this:</p> <p><pre><code>[generate] NewLanguage\\behavior\\rtzj__BehaviorDescriptor.java : Invalid character constant (line: 27) \n</code></pre> If this happens, set the environment variable JAVA_TOOL_OPTIONS to <code>-Dfile.encoding=UTF8</code> (MPS-23526).</p> <p>Tests are failing with a message, that a filename or extension is too long (Windows).</p> <p>The error message looks like this: <code>Caused by: java.io.IOException: CreateProcess error=206, The filename or extension is too long</code>. It can also look like this: <code>Process fork failed.</code> There is a path that is too long for Windows in the build script.  Choose the option compressArgs in test modules node to fix the issue (MPS-24137).</p> <p>Cannot run MPS.bat on Windows 10/11.</p> <p>Create a link that runs the MPS.bat script and started this one instead. The Link target should look like this: <code>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -command \"&amp; 'C:\\Program Files\\JetBrains\\MPS_YOUR_VERSION\\bin\\mps.bat'\"</code></p> <p><sub>contributed by: @HeikoBecker<sub>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#mac","title":"Mac","text":"<p>You might run into issues with newer macOS versions. One of the is notarizing macOS software before distribution which is not supported by the mps-gradle-plugin. There were also changes introduced with the M1 chips (new architecture: arm64). MPS already provides extra downloads for the new Macs (.dmg Apple Silicon). The commit can be found here. If you want to provide your own RCP you might want to look at this commit. A separate version of JBR called jbr-osx-aarch64 might also be needed.</p> <p>How do I get my defined environment variables?</p> <p>Execute <code>printenv</code> on a shell.</p> <p>Using com.mbeddr.mpsutil.datepicker doesn\u2019t work when look and feel is set to macOS Light.</p> <p>Use the default light theme. There is no other workaround at the moment (MPS-3388,MBEDDR-2203).</p> <p>Can\u2019t find TBItem with uid \u2018XY\u2019.</p> <p>This is a MacBook Pro with touchbar related issue. No workaround at the moment (MPS-31728).</p> <p>What other active bugs are there?</p> <ul> <li>Standalone application: impossible to define application icon (MPS-32971)</li> </ul>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/platform_specific_bugs/#linux","title":"Linux","text":"<p>Autocompleting doesn\u2019t work with MPS + i3 (linux window manager).</p> <p>No solution at the moment (MPS-30499).</p> <p>Completion menu on wrong screen in multi monitor setup (linux+i3).</p> <p>No solution at the moment (MPS-33689).</p>","tags":["windows","mac","linux","bugs","native"]},{"location":"home/plugins/","title":"Plugins","text":"<p>Where can you use a created language?<sup>2</sup></p> <p>They can be used in MPS itself, or in a custom IDE based on MPS (a so-called RCP).</p> <p>Are MPS language often used as plugins in IntelliJ IDEs instead of MPS itself? (an IntelliJ IDEA plugin, not custom RCP)</p> <p>No, this functionality is not used often. Most of the time a custom RCP is created.</p> <p>How can you find plugins on the JetBrains marketplace that are usable in MPS?</p> <p>Searching for the word MPS in all categories should do the trick.</p> <p>Why do many IntelliJ plugins don\u2019t work with MPS?</p> <p>Many of these plugins operate on the lines in text files. MPS uses a projectional editor which is incompatible with normal text editors. It doesn\u2019t use a document model or PSI because MPS models are not text based. Using plugins that are not developed for MPS can interfere with certain features of MPS (e.g. find usages might not work while using a plugin).</p> <p>Are there any general-purpose plugins for MPS from the community?</p> <p>Have a look at the plugin section of mps.rocks.</p> <p>Which kinds of plugins are there?</p> <ul> <li>Two kinds of MPS plugins(Specific Languages\u2019 blog)</li> <li>MPS plugins vs IDEA plugins(Specific Languages\u2019 blog)</li> </ul> <p>How do I disable notifications for fatal errors?</p> <p>Add <code>idea.fatal.error.notification=disabled</code> to idea.properties.</p> <p>Are there existing projects regarding MPS on the web?</p> <p>Have a look at deployment options for MPS, this list and WebMPS by JetBrains.</p> <ul> <li>Web-based projectional editing is moving forward(Specific Languages\u2019 blog)</li> <li>MPSServer and WebEditKit(Specific Languages\u2019 blog)</li> </ul> <p>How do you translate every part of MPS?<sup>1</sup></p> <p>You can install a language pack for IntelliJ-based projects. MPS can\u2019t be fully translated because some parts are hard coded. There are also known bugs with extended characters (MPS-31835) and unicode in case you want to use special characters. Further information can be found in this article: Localizing an IntelliJ Plugin.</p> <p>Can you get information about an MPS installation via an HTTP request?</p> <p>Yes, this is possible through the IntelliJ Platform REST API: Send a GET request (or enter it into the browser address bar): http://localhost:63342/api/about?more=true. Make sure that you don\u2019t have IntelliJ opened at the same time as it has the same API. Example output:</p> <pre><code>{\n\"name\": \"MPS 2021.2.5\",\n\"productName\": \"MPS\",\n\"baselineVersion\": 212,\n\"buildNumber\": \"212.5284.1355\",\n\"vendor\": \"JetBrains s.r.o.\",\n\"isEAP\": false,\n\"productCode\": \"MPS\",\n\"buildDate\": 1647561654804,\n\"isSnapshot\": false,\n\"configPath\": \"/Users/user/Library/Application Support/JetBrains/MPS2021.2\",\n\"systemPath\": \"/Users/user/Library/Caches/JetBrains/MPS2021.2\",\n\"binPath\": \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents/bin\",\n\"logPath\": \"/Users/user/Library/Logs/JetBrains/MPS2021.2\",\n\"homePath\": \"/Applications/mps/mac/[MPS-2021](https://youtrack.jetbrains.com/issue/MPS-2021).2.app/Contents\"\n}\n</code></pre> <p>How can you compare two nodes?</p> <ul> <li>Select them in the logical view, right-click \u2192 Compare two nodes.</li> <li>Use the language com.mbeddr.mpsutil.nodediff:<ul> <li>Select first node: Set as First Node in Diff.</li> <li>Select second node: Show Diff with First Node.</li> </ul> </li> </ul> <p>How do I access the current project from anywhere?</p> <ul> <li>How to get the current project from anywhere(Specific Languages\u2019 blog)</li> </ul> <p>jetbrains.mps.module.ModuleClassLoaderIsNullException: ClassLoader of module XY could not be found.</p> <p>Make sure that the solution kind is not set to none.</p> <ol> <li> <p>Any way to translate all of MPS? \u21a9</p> </li> <li> <p>MPS forum - Plugin \u21a9</p> </li> </ol>","tags":["plugins"]},{"location":"home/rcp/","title":"RCP","text":"<p>RCP stands for Rich Client Platform. The topic is explained in Building standalone IDEs for your languages | MPS.</p> <p>A plugin is incompatible with the current RCP version.</p> <p>Fixing the \u2018Plugin incompatible with the current [CUSTOM RCP] version\u2019 error(Specific Languages\u2019 blog)</p> <p>How can you customize the welcome screen in an RCP?</p> <ul> <li>Customizing your RCP welcome screen: removing unwanted tabs(Specific Languages\u2019 blog)</li> </ul> <p>The used library xml-patch uses XPath path selectors. A cheat sheet for the syntax can be found here. </p> <ul> <li>Customizing your RCP welcome screen: stripping down even further(Specific Languages\u2019 blog)</li> <li>A fully custom welcome screen(Specific Languages\u2019 blog)</li> </ul> <p>How can you reduce the size of an RCP?</p> <ul> <li>Remove all packaged plugins that you don\u2019t need.</li> <li>Use a JBR version without JCEF if you don\u2019t need an embedded browser (jbr_nomod).</li> </ul> <p>How can I deactivate a preference page?</p> <ul> <li>Remove the plugin that contains the preference page.</li> <li>For <code>SPreference</code> pages: they are project plugins, so you can find them through <code>ProjectPluginManager.getPlugins</code> and then call <code>dispose</code> or you could unregister the preference pages themselves. For example: <pre><code>Project ideaProject = ProjectPluginManager.getInstance(ProjectHelper.toIdeaProject(#project);\nlist&lt;BaseProjectPlugin&gt; plugins = new arraylist&lt;BaseProjectPlugin&gt;(copy: ideaProject.getPlugins());\nBaseProjectPrefsComponent component = plugins.findFirst({~it =&gt; it.toString().startsWith(\"path_to_your._ProjectPlugin\"); }).getPrefsComponents()  get(0);\ncomponent.getPages().get(0).unregister();\n</code></pre></li> </ul> <p>For preference forms: they can be found through <code>Configurable.APPLICATION_CONFIGURABLE.getPoint().getExtensionList</code> and removed by calling <code>unregisterExtension</code>.</p> <p>How can you replace the logical view on the left side with a custom one?</p> <p>Use the language com.mbeddr.mpsutil.projectview from  MPS-extensions. You can find an example that replicates the logical view in mbeddr.</p> How can you tell which IntelliJ version MPS runs with? <p>Given I want to know, which version of IntelliJ Community my MPS is built from. How can I know?</p> <p> mbeddr: The easiest way to get the correct platform for an MPS version is by running ant in the root of your MPS sources:</p> <p><code>ant -f build/getDependencies.xml download-platform</code></p> <p>It will place the platform in the folder mps-platform of the repository and is automatically imported into the IntelliJ project where you can read the sources and also step into them when debugging.</p> <p>In case you\u2019re looking at an RCP: <code>build.number</code> and <code>build.txt</code> provide this information and more, eg <code>idea.platform.build.number=MPS\u2014203.7717.56</code>.</p> <p>The platform version is part of the build information e.g. MPS\u2014211.7442.1291</p> <p>To get the baseline version e.g. 211, programmatically: <code>ApplicationInfo.getInstance().getBuild().getBaselineVersion()</code></p> <p>To get the full version e.g. 211.7442.1291, programmatically: <code>ApplicationInfo.getInstance().getBuild().currentVersion().asString()</code></p> How can you show a custom-implemented project view instead of the MPS logical view? <p>Assume that the view was built with com.mbeddr.mpsutil.projectview:    </p> <pre><code>ApplicationManager.getInstance().invokeLater(new Runnable() { public void run() {\nlist&lt;AbstractProjectViewPane&gt; viewsToRemove = new linkedlist&lt;AbstractProjectViewPane&gt;;\nProjectView projectView = ProjectView.getInstance(project.getProject());\nforeach paneID in projectView.getPaneIds() {\nif (paneID.endsWith(ProjectViewHelper.YOUR_PROJCET_VIEW_ID)) {\nif (!projectView.getCurrentViewId().equals(paneID)) {\nprojectView.changeView(paneID);\n}\n} else if (this.viewsToKeep.asSequence.any({~it =&gt; paneID.endsWith(it); })) {\ncontinue;\n} else {\nviewsToRemove.add(projectView.getProjectViewPaneById(paneID));\n}\n}\nviewsToRemove.forEach({~it =&gt;\nprojectView.removeProjectPane(it);\nit.dispose();\n});\nProjectPane.getInstance(project).activate();\n}\n})\n</code></pre> <p>How can you customize the New Roots (mbeddr.platform) or New dialog of MPS/mbeddr?</p> <pre><code>CreateRootFilterEP.getInstance().addFilter\n</code></pre> <p>How can you change or turn off the exception submission dialog?</p> <ul> <li>Remove all error handlers like this.</li> <li>Remove <code>&lt;appender name=\"DIALOG\" class=\"com.intellij.diagnostic.DialogAppender\"&gt;</code> from the log.xml file. This will also disable the error pop-ups in the IDE where you can see the exception. Note: There were some changes related to the logging configuration in MPS 2022.2 where this answer is not valid anymore.</li> </ul> <p>Where can you find the latest MPS and IntelliJ icons?</p> <ul> <li>MPS: mps-icons</li> <li>IntelliJ: Icons list</li> </ul> <p>How can you restart MPS programmatically?</p> <pre><code>ApplicationEx app = ApplicationManagerEx.getApplicationEx(); app.restart(true,true);\n</code></pre> <p>How can I install a custom editor color scheme?</p> <p>Follow the guideline Export IntelliJ editor themes as plugins | JetBrains blog to export a jar file. You can copy this JAR file to the plugins folder of the RCP. You can enable the color scheme by default with the following code in an application plugin:</p> <pre><code>EditorColorsScheme colorScheme = EditorColorsManager.getInstance().getAllSchemes().asSequence.findFirst({~it =&gt; it.getDisplayName() :eq: \"[NAME_OF_YOUR_SCHEME]\"; }); \nEditorColorsManager.getInstance().setGlobalScheme(colorScheme);\n</code></pre> <p>How do you disable an MPS/IntelliJ tool window?</p> <pre><code>Project ideaProject = ProjectHelper.toIdeaProject(project);\n// MPS tool \nBaseTool mpsTool = ideaProject.tool&lt;YourTool&gt;; if (mpsTool != null &amp;&amp; mpsTool.isAvailable()) {\nmpsTool.makeUnavailable();\n}\n// IntelliJ Tool\n/* The toolID can be found through ToolWindowManager.getInstance(ProjectHelper.toIdeaProject(#project)).getToolWindowIds().asSequence on the console*/\nToolWindow toolWindow = ToolWindowManager.getInstance(ideaProject).getToolWindow(toolID)\nif(toolWindow.isAvailable()) {\ntoolWindow.remove();\n}\n</code></pre> <p>How do you add an action to the menu bar of an IntelliJ tool window?</p> <p>The Example is based on the project view:</p> <pre><code>ToolWindow window = ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.PROJECT_VIEW);\nif (window != null) {\nwindow.setTitleActions(titleActions);\n}\n</code></pre> <p>How can you set the position of a tool window?</p> <p>Example based on the MPS inspector:</p> <pre><code>InspectorTool inspectorTool = ideaProject.getComponent(InspectorTool.class); if (inspectorTool != null) {\nToolWindow inspectorToolWindow = inspectorTool.getToolWindow();\ninspectorToolWindow.setAnchor(ToolWindowAnchor.RIGHT, null);\n}\n</code></pre>","tags":["standalone","customization"]},{"location":"home/trouble_shooting_guide/","title":"Troubleshooting guide","text":"<p>This is a non-exhaustive list of common problems with MPS and platform projects. It is assumed that Gradle is used for building the project. For general MPS problems, read Finding your way out first. If you are still stuck with your problem, read overcoming obstacles next.</p>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#mps-and-platforms","title":"MPS and platforms","text":"<p>The IDE is sluggish and doesn\u2019t work the way it should.</p> <p>Edit the file mps(64).vmoptions and give it sufficient heap space: <code>-Xmx8g</code></p> <p>MPS behaves strangely.</p> <p>For instance: claims that a method is missing, although it exists.</p> <ol> <li>Check if you have mixed dependencies for different MPS versions or are opening the project with the wrong MPS version.</li> <li>Tools \u2192 Reload All Classes.</li> <li>File \u2192 Invalidate Caches, then restart.</li> <li>File \u2192 Invalidate Caches, shutdown MPS; in the repository in question: run <code>git clean -fxd -e build.properties -e gradle.properties</code>, rebuild with Gradle (<code>./gradlew</code>), restart MPS.</li> </ol> <p>Try invalidating the cache and check what other non-MPS plugins you have installed. Some IntelliJ plugins that can be found on the marketplace, can interfere with MPS plugins e.g. make the indexing break or throw errors because they expect a text editor and not the projectional editor from MPS. Firewalls and proxies could also affect MPS negatively.</p> <p>MPS cannot find languages/solutions.</p> <p>For instance: \u201clanguage X is not deployed\u201d errors.</p> <ol> <li>File \u2192 Invalidate Caches, shutdown MPS.</li> <li>Run <code>./gradlew setup --refresh-dependencies</code>.</li> <li>Start MPS again.</li> </ol> <p>There could also be some other reasons:</p> <ul> <li>A wrong version of the platform is used e.g. MPS-Extensions 2021.1 with MPS 2021.2. The major and minor versions have to be the same. Bug fix versions (e.g. 2021.1.4) should be compatible with the major/minor version of the platform. In rare cases, there can be an incompatibility because a bugfix/feature was backported from a newer MPS version and the change is a breaking change.</li> <li>Make sure that MPS is started with the correct Java version (execute the Choose Boot Runtime for the IDE action) and check that the bundled JBR or an external JBR/JRE is used. Another runtime could be selected by accident (e.g. a GraalVM runtime)</li> <li>If you want to use JCEF it must be a JBR runtime which includes JCEF.</li> <li>An MPS plugin was disabled (e.g. Java Debugger for MPS) that a language depends on.</li> <li>For mbeddr, three plugins need to be installed, otherwise some languages can\u2019t be loaded.</li> </ul> <p>The IDE doesn\u2019t let you enter some text / an intention isn\u2019t visible that should be there.</p> <ol> <li>Check: was the intention disabled by the user by accident?</li> </ol> <p></p> <p>In this case, the intention can be enabled through preferences \u2192 MPS intentions and manually searching for the disabled intention:</p> <p></p> <ol> <li>Check: is the concept/intention visible in the model? (open a context menu where Base Language code is allowed and search for classes/concepts from the same language)<ul> <li> \u2192 Use Edit \u2192 Add Language Import to import the language containing the concept / the intention.</li> </ul> </li> <li>Check the concept: is the type of the concept suitable for the place where you want to create an instance? Does it implement the right interface?</li> <li>Check the intention: is the <code>isApplicable()</code>-method called? (add a <code>System.err.println()</code> to the method and check what MPS outputs)<ul> <li> \u2192 The intention is most probably not visible in the model \u2192 see above</li> <li> \u2192 Make sure the method returns true</li> </ul> </li> <li>Concept: does a constraint on one of the ancestor nodes prohibit you from creating it?</li> </ol> <p>MPS build fails.</p> <ol> <li>Does the MPS Model-Checker report problems?  \u2192 Fix identified problems.</li> <li>Does the build log report intelligible problems?  \u2192 Fix identified problems.</li> <li>Does it build in Gradle?  \u2192 See: Gradle-Build fails.</li> </ol> <p>MPS can\u2019t be started at all.</p> <p>There could be multiple reasons:</p> <ul> <li>One reason could be a wrong Java version. That could be a different Java runtime like the GraalVM or an incorrect Java version. MPS 2022.2 and newer need JDK 17, older ones need JDK 11 and ancient versions of MPS need JDK 8.</li> <li>Through external changes, files of an MPS project could get deleted or corrupted by accident (such as deleting model files). There should be an exception that should give a hint why the startup fails. The log file should also contain an error message.</li> </ul> <p>Basic MPS functionality stops working (e.g. typing doesn\u2019t work, the editor has an incorrect layout, the window turns blank).</p> <p>If you are not using one of the platforms, you probably should report the issue to the MPS issue tracker. Most of the bugs are caused by languages or plugins in  MPS-extensions/ mbeddr platform.</p> <p>For editor-related issues, first try pressing F5 and check if the re-layout of the editor fixes the editor. If it does, report an issue in  MPS-extensions. The most likely culprit is the celllayout language. If another basic editor functionality like typing doesn\u2019t work anymore, the same language or another language in the same repository can cause such issues. For all other issues, check if a fatal error was thrown in the lower right corner.</p> <p>Visit the issue tracker reference page to find the right issue tracker when you can\u2019t identify the repository based on the package name in the error message. Please don\u2019t just report the issue to the JetBrains MPS issue tracker because the issue will likely be marked as invalid and doesn\u2019t land in the right issue tracker.</p>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#gradle","title":"Gradle","text":"<p>Gradle build fails.</p> <ol> <li>Did you call <code>git clean -fxd -e build.properties</code> before <code>./gradlew</code>?  \u2192 Do it, retry.</li> <li>Did you call <code>./gradlew</code> with <code>--refresh-dependencies</code>?  \u2192 Retry with <code>--refresh-dependencies</code>.</li> <li>Does the error message start with dependencies should be extracted into build script?<ul> <li>In MPS, apply the model-checker to the \u201cbuild\u201d-package. Many problems can be fixed by applying the intention \u201cReload modules from disk\u201d.</li> <li>Rebuild the \u201cbuild\u201d-package.</li> <li>Retry the gradle build.</li> </ul> </li> <li>Do you have local changes?<ul> <li> \u2192 Use <code>git stash</code> to stash them away, retry.</li> <li>When the build works without your changes, then your changes are the problem. Redo them one-by-one to find the one that causes the problem.</li> </ul> </li> <li>Does it work on CI?<ul> <li> \u2192 Is the CI build recent?<ul> <li> \u2192 Retrigger via a whitespace-only commit.</li> <li> \u2192 Search for differences between your local Gradle build and the CI build (versions).</li> </ul> </li> <li> \u2192 Is it the same error message?<ul> <li> \u2192 Search for differences between your local Gradle build and the CI build (versions).</li> </ul> </li> <li>is the master build green on CI?<ul> <li> \u2192 Find out who broke it and make him fix it. After it is fixed, continue.</li> </ul> </li> <li>is the master build recent?<ul> <li> \u2192 Retrigger it via a whitespace-only commit.</li> <li> \u2192 Merge master into your branch, retry.</li> </ul> </li> </ul> </li> <li>If nothing helped: try cloning your repo again.</li> <li>Out of options. Ask somebody for help.</li> </ol>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#ci","title":"CI","text":"<p>Tests are failing on CI, but are green in the local MPS installation.</p> <p>What about the local Gradle build? The tests can be executed locally with: <code>./gradlew ant-build-tests -Dmps.home=PATH_TO_YOU_MPS_INSTALLTION</code>. Afterwards the test results can be found in <code>build/iets3-allScripts</code> ( IETS3).</p> <ul> <li>It runs (green) -&gt; there is a discrepancy between the CI and your local Gradle build.<ul> <li>Make sure you are on the same branch/commit as the CI,</li> </ul> </li> <li>It shows the same test failures as the CI \u2192 there is a discrepancy between the MPS Build and the Gradle Build<ul> <li>Rebuild the build scripts in MPS.</li> <li>Try running the tests in a seperate process (edit the run configuration in MPS).</li> <li>Make sure your MPS uses the same (versions of the) dependencies as the gradle build.<ul> <li>This can be achieved in 2 different ways:<ul> <li>Run <code>./gradlew dependencies</code> to see which versions of which dependency gradle uses and   make sure the OS and Mbeddr repos are checked out on the right branches/commits ( IETS3).</li> <li>Remove the file projectlibraries.overrides.properties from your repo and execute   <code>./gradlew setup</code> in both. This configures MPS to directy use the Java class files from the Gradle artifacts instead of the checked out repos.</li> </ul> </li> </ul> </li> </ul> </li> </ul>","tags":["troubleshooting","settings"]},{"location":"home/trouble_shooting_guide/#explanations","title":"Explanations","text":"<ul> <li>git clean -xdf<ul> <li>removes untracked files from the working tree (= also files generated by MPS)</li> <li>x: remove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files.</li> <li>d: remove untracked directories and untracked files.</li> <li>f: If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to delete files or directories unless given -f, -n or</li> <li>e: Use the given exclude pattern besides the standard ignore rules.</li> </ul> </li> </ul>","tags":["troubleshooting","settings"]},{"location":"home/visual_guide/","title":"Visual guide","text":"<p>Hover over a green rectangle to show a short description. Reload the page if they don\u2019t appear. When you click the shape, you are redirected to the corresponding documentation when it\u2019s available.</p> <p></p>","tags":["ui"]},{"location":"home/overcoming_obstacles/debugging_problems/","title":"Debugging problems","text":"<p>Different kinds of problems can occur in MPS. Some of them are bugs that you have to fix, other problems might be unfixable or caused by an unusual approach to tackling a problem (e.g. accessing a project instance from unsupported places). For debugging purposes, you can add log statements to the code, execute tests, analyze stack traces,  run code on the MSP console, or use remote debugging.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#deal-with-errors","title":"Deal with errors","text":"<p>Error messages can appear in different places:</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#errors-in-the-editor","title":"Errors in the editor","text":"<p>Those errors (red squiggly line) are caused by checking rules or type system rules. Right-click the offending cell in the editor \u2192 Language Debug \u2192 Go to Rule Which Caused Error to navigate to the statement that causes the error. When there is an error calculating a type, the type system trace can be helpful. The same debug menu also contains an entry Show Type that shows the calculated type. Most of the time, it is easier using this action + understanding the type system check than using the tracing tool.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#ide-fatal-errors","title":"IDE fatal errors","text":"<p>Those errors can be found by clicking on the error icon in the bottom right corner of the window.</p> <p></p> <p>This dialog contains exceptions that might be caused by your language, MPS platforms, or MPS itself. In the provided example, the source of the error is deceptive: the plugins in which the exception was raised is MPS core but looking at the package name we see that the exception comes from Shadow Models . If you are unsure where an error comes from, have a look at the page issue trackers. Only report the error to the JetBrains MPS Tracker if the exception is caused by MPS. To analyze the exception itself, open the error dialog and copy the error message. Then click in the main menu on Analyze \u2192 Analyze Stack Trace and press ok. The stack trace will be opened in the run window. For lines where the sources are available, a link to the corresponding source is provided.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#errors-in-the-log-file","title":"Errors in the log file","text":"<p>Errors in this file can be written by log statements, MPS platforms, MPS and the IntelliJ platform. Many of those exceptions can\u2019t be fixed easily if they don\u2019t come from your languages but sometimes can still contain useful hints. Example: When the automatic module maker at startup fails, only the number of errors and warnings is shown in the error tooltip. The exact stack trace can be found in the error log. Messages about models that can\u2019t be loaded are also saved in this file.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#the-editor-cant-be-rendered","title":"The editor can\u2019t be rendered","text":"<p>When an editor cell can\u2019t be created, the stack trace can be analyzed by clicking on Stacktrace. Editor-related exceptions can have more serious consequences than other exceptions like fatal errors: in the worst-case scenario, the editor can\u2019t be opened at all or MPS freezes completely. When this happens, locate the MPS module that causes the freeze in your local file explorer and delete the _gen folders so that the module can\u2019t be loaded, and restart MPS. Now the module is not active anymore, and you can start debugging. The same approach can be done for application and project plugins that crash the MPS instance. If the exception is not caused by your language, please report the issue to the developer of the language.</p>"},{"location":"home/overcoming_obstacles/debugging_problems/#dealing-with-wrong-outputs","title":"Dealing with wrong outputs","text":"<p>Wrong outputs could be seen in many places: a Base Language method that calculates a wrong value, an incorrectly initialized node that is created via an intention, an error message that shows null instead of an error message, a generator that generates the wrong output, and so forth. Most of those cases can be checked automatically with the testing languages. The quick navigation table provides information on how to test certain language aspects.</p> <p>For generators, there are generator tests, but they are often not fine-grained enough because most of the time you just want to partly compare models and ignore certain children, properties, or references. An alternative approach is to invoke the generator yourself and compare the structure of the input and output model with your asserts. If the tests are not run on the command line, it is possible to show differences between nodes graphically through: <pre><code> StructDifferenceDialog.showNodeDifference(ProjectHelper.toIdeaProject(project),\noldNode,newNode,oldTitle, newTitle)\n</code></pre></p> <p>The language com.mbeddr.mpsutil.comparator can help with comparing nodes programmatically while ignoring certain childen, properties, or references.</p>"},{"location":"home/overcoming_obstacles/general_tips/","title":"General tips","text":"<p>No matter what type of challenge you face, some tips always help you to make progress or remove your blocker.</p>"},{"location":"home/overcoming_obstacles/general_tips/#search-the-existing-documentation-and-issue-trackers","title":"Search the existing documentation and issue trackers","text":"<p>There is the MPS User\u2019s Guide and this website that contains a lot of information about MPS. Search the MPS Slack workspace or the MPS forum for similar problems or questions. Older messages of the Slack channels are automatically saved to the forum. For more technical problems, searching the issue tracker might not only reveal existing bug reports, but they also sometimes contain technical explanations. A few MPS questions are also answered on StackOverflow with the tag mps. All the other issue trackers are mentioned on the page Reference: Issue trackers. If you are a developer, you can also locate the code author directly inside MPS if you have the Git history available for a project. Some projects also contain readme files or release notes/a changelog that include important notes about compatibility or bug fixes as well as general information about the project.</p>"},{"location":"home/overcoming_obstacles/general_tips/#remove-all-distractions","title":"Remove all distractions","text":"<p>Make sure to remove everything that distracts you: turn off all notifications such as notifications from mail or other communication channels. If you have the possibility, set your status to offline or busy and turn off your phone (notifications). Sit in a quiet room or use earplugs. For hard problems, it might be beneficial to don\u2019t listen to music and even close all windows to have it as quiet as possible (but don\u2019t forget: you still need enough oxygen to think clearly). Thoughts and feelings can also be distracting: if you are angry or frustrated with the situation or feel the pressure of a situation, take a break or do something else for a while to clear your mind.</p>"},{"location":"home/overcoming_obstacles/general_tips/#step-away-from-the-problem","title":"Step away from the problem","text":"<p>Sometimes focus on a problem for a long time doesn\u2019t yield any results. Switch to a different task, so that you don\u2019t have the mental capacity to think about the first problem. This has the effect of clearing your mind. There is a downside to this approach: context switching. When switching tasks, you lose the context of the problem and also need some time to dive into the topic again. To mitigate this, create an \u201cinvestigation log\u201d for any non-trivial problem you run into and take detailed notes of what you saw and what you tried. With MPS projects you also have the issue of switching between different projects and branches which can take a lot of time especially when you have to run the build again. If it is technically possible, try to just partially build the project or run the build on the command line without clean (e.g. <code>gradle clean</code> or <code>git clean</code>). You can also work with multiple MPS instances at the same time.</p> <p>You might also want to step away from the computer completely: walk the dog, take a shower, or go for a toilet break. A 2014 study by Oppezzo and Schwartz at Stanford showed that walking significantly increased participants\u2019 creative divergent thinking,\u201d which is important for creative problem-solving. For example: taking just a quick walk for 5 minutes might lead to a solution in 2 minutes instead of sitting in front of the computer for an hour without making any progress. You might want to experiment with the type of activity that is the most beneficial to you: some people stay away from cell phones, books, magazines, and other forms of entertainment, others read books, play games or answer questions. The latter group prefers anything that requires active mental engagement so that they can\u2019t think about anything else.</p>"},{"location":"home/overcoming_obstacles/general_tips/#get-enoughsome-sleep","title":"Get enough/some sleep","text":"<p>Sleep in general has a big impact on the ability to solve problems but also make fewer mistakes. A 2009 study by Denise Cai et al. at U.C. San Diego showed that REM sleep enhances the integration of unassociated information for creative problem-solving. Not getting enough quality sleep can affect your job performance. That doesn\u2019t mean that you have to be in bed at 10 pm. Some people prefer to wake up early (early bird), while others stay up late at night(night owls). Is It Better to Be a Night Owl or Early Bird? | healthline.com describes the differences in more detail.</p> <p>After implementing a feature or fixing a bug there comes a time when you open a pull request in your project when you are using version control and depending on the team someone will review your changes. Before opening the PR, consider sleeping over it the night and look at your changes with fresh eyes the next day. You will often find issues that way because you\u2019ve cleared your mind and were able to process all your thoughts in the meantime.</p>"},{"location":"home/overcoming_obstacles/general_tips/#thinking-out-loudasking-for-help","title":"Thinking out loud/asking for help","text":"<p>Grab a colleague, a friend, a pet, or a rubber duck and explain the problem you are having out loud to them. Just explaining the problem to someone else who might not even be familiar with the topic, helps get a deeper understanding of the topic. If this is not possible, you can write a message or ask a question in one of the MPS slack channels or the MPS forum. StackOverflow has a good article about how to ask a good question.</p> <p>If you are a junior developer, don\u2019t hesitate to ask senior developers questions. They happily answer your questions (if they have time) and might even learn something new about your certain problem.</p>"},{"location":"home/overcoming_obstacles/general_tips/#pair-programming","title":"Pair programming","text":"<p>Pair programming is an Agile software development technique originating from Extreme programming (XP) in which two developers team together on one computer. The two people work together to design, code, and test user stories. Ideally, the two people would be equally skilled and would each have equal time on the keyboard.</p> <p>While the technique is perfectly described in the linked article, a special form of pair programming is often done in the MPS community with customers but also colleagues: pair debugging. Before you spend hours on a problem, it is better to describe the problem to someone. Asynchronous communication via Slack, StackOverflow, or a forum might work out in some cases, getting a second pair of eyes to look at your screen or sharing your screen remotely works often a lot better and is faster. When doing so, give the second person enough context to understand the problem or explain it by an example.</p> <p>When the other person is not present in the room, prefer a screen sharing software, that supports drawing on the screen of the presenter. This way, it is a lot easier to explain what UI elements to click. Especially when working in cross-platform environments, install the IntelliJ plugin Presentation Assistant to show the pressed keyboard shortcuts in the IDE. When explaining MPS actions, Windows and Mac\u2019s users are rarely familiar with the keyboard shortcuts of a different OS\u2018s user.</p>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/","title":"Overcoming obstacles","text":"<p>You probably already read troubleshooting guide, Finding your way out | MPS User\u2019s Guide, and Debugging but are still stuck with an issue. The following pages combine the issue of getting stuck while developing in MPS with being stuck with a certain programming problem. It doesn\u2019t matter if you are working on a new feature, fixing a bug, or just playing around with a toy project. It is important to recognize that you are stuck before spending unnecessary time and not making any progress. If you are already annoyed or frustrated, first try to calm down before taking any further steps. Note: The words problem, issue, bug and obstacle are used as synonyms on the following pages.</p> <p>Getting unstuck | Python Principles identifies 4 different causes for getting stuck:</p> <ul> <li>understanding the problem</li> <li>debugging problems</li> <li>syntax problems</li> <li>thinking problems</li> </ul> <p>After reading through the 4 pages and the general tips page, continue with the following sections.</p>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/#reproducibility","title":"Reproducibility","text":"<p>Some problems can\u2019t be reproduced at all or only under certain conditions. Try to create a minimal example or let a colleague open the project containing the issue on his computer. A few other factors that have caused issues in the past that affect the reproducibility of problems are:</p> <ul> <li>the operating system<ul> <li>Windows (special fonts, file system issues such as case-insensitivity or locked files)</li> <li>Mac (special fonts, case-insensitivity with files, special handling of M1 and M2 chips)</li> <li>Linux (rendering issues)</li> </ul> </li> <li>the Java Runtime Environment<ul> <li>Don\u2019t start MPS with a normal JRE or JDK, especially not an OpenJDK. Use the provided JBR. Some of the weirdest errors can be explained this way (maybe this is related to the Java compiler itself).</li> <li>Make sure not to mix Java versions by accident.</li> <li>Use a JBR that supports JCEF when you intend to integrate JCEF into MPS.</li> </ul> </li> <li>external conditions such as race conditions, non-deterministic code, different development environments</li> <li>not fully and cleanly build projects: a common issue when regenerating MPS modules/models is to just make the module instead of rebuilding them which is necessary for certain aspects such as the generator aspect.</li> </ul>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/#implementing-a-non-perfect-solution","title":"Implementing a non-perfect solution","text":"<p>You are now at the stage where the problem can be solved but a perfect or even just a standard solution cannot be achieved. As a developer, you might always strive for perfection but one of the following factors might prevent you from achieving your goal:</p> <ul> <li>a technical limitation (MPS, IntelliJ platform, Java)</li> <li>a technical limitation (existing code)</li> <li>a bug that can\u2019t be fixed at the moment</li> <li>a deadline that must be followed</li> </ul> <p>Implementing a non-perfect solution, a workaround, or even a hack is still better than no solution at all. As a developer, you want to deliver high-quality code all the time, that is performant, follows best practices, and is reusable. Sometimes this non-perfect solution can be the best as long as you make things work and the code doesn\u2019t fail. While this solution might introduce technical debt that has to be dealt with in the future, it doesn\u2019t have to be this way: the solution might be just overengineered, is pre-optimized or deals with uses cases that might not even occur in the future. If it is a rapidly changing project, the code might even get thrown out in the next release. If you decide to ship this solution, document somewhere (e.g. in the code, ticket, a design document) why the solution is implemented the way it is.</p>"},{"location":"home/overcoming_obstacles/overcoming_obstacles/#let-it-go","title":"Let it go","text":"<p>There will be obstacles that you can\u2019t overcome, problems that you can\u2019t fix and features that can\u2019t be developed. Some problems are located in MPS platforms or MPS where no workaround exists or the priority of the issue is so low that it doesn\u2019t impact the user\u2019s experience or compromises business logic. In other cases, the issue is so complex that nobody can solve it, or it isn\u2019t reproducible.</p> <p>Regardless of the reason, is it okay to move forward and not work on the problem in certain cases. When a feature must be dropped it should be explained why it is dropped through a technical explanation or a simple explanation for the user. The problem can be put into a backlog so that it can be implemented in a future release or marked as won\u2019t fix it there is nothing that can be done. Not finding a solution at the moment, doesn\u2019t mean there won\u2019t be a solution or workaround in the future: a new MPS/platform version might be released, new knowledge might allow finding a solution in the future or time will be found to tackle the problem again.</p> <p>As a junior developer, you might also face an issue that you are not (yet) able to solve. In those cases, ask a more senior developer for help or pass the problem along to another developer who can look at it with a fresh mind or back to the more senior developer who assigned the ticket to you in the first place.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/","title":"Syntax problems","text":""},{"location":"home/overcoming_obstacles/syntax_problems/#syntax-problems-in-the-editor","title":"Syntax problems in the editor","text":"<p>Because of the projectional editing approach, syntax problems don\u2019t exist in MPS. Sometimes it can be difficult to enter text though. A general approach that often works is to search for instances of a concept in the current project or globally to figure out how it works if there is no documentation provided for it. Open a concept \u2192 right-click \u2192 Find Usage Settings \u2192 Check Concept Instances and select the scope in which you want to find instances of the concept. The following list contains some common reasons why you might be stuck entering text:</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#a-constraint-prevents-you-from-entering-code","title":"A constraint prevents you from entering code","text":"<p>If you know the name of the concept, you can navigate to the constraints aspect to search for the reasons. In general, it is recommended to allow users to enter text and tell them afterward that their action was incorrect or invalid at the inserted location than restrict them from entering text at all. From a usability perspective, there is nothing more frustrating than not being able to enter information and not knowing why you can\u2019t enter some text. Another solution would be to show text that can be entered in the code completion menu, in the side transformation popup, or some other place but disable the entries. Those entries then should contain descriptions that explain why the entries can\u2019t be selected at the moment.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#a-reference-cant-be-entered-because-of-its-scope","title":"A reference can\u2019t be entered because of its scope","text":"<p>Please read the documentation about scopes first. A common mistake is to not add an import to the model that contains the node that should be referenced. Depending on how the scope works, you might also need to add an extends scope in the dependencies tab of the module (e.g. needed for conditional editors) or the scoping is tied to some import mechanism (e.g. imports declarations in KernelF libraries). References will still work if the target can\u2019t be found but will show an out-of-scope error. The error shouldn\u2019t be ignored though. Example: In a node test, you might try to reference a type system statement in the has error check while you want to use the has type system error check.</p> <p>Partially related to scopes: sometimes it can be helpful to check why a certain item appears in the code completion menu to figure out why another item doesn\u2019t appear. Open the code completion menu and press the mentioned shortcut at the bottom of the list to open the menu trace tool.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#style-sheet-itemsactions-prevent-entering-text","title":"Style sheet items/actions prevent entering text","text":"<p>For side transformations to work, cells must not have the punctuation-left or punctuation-right item set to false on the side where the side transformation should be available because otherwise text can\u2019t be entered because the cursor is not allowed at that position. To figure out the available input options and actions, right-click in the editor \u2192 Go To \u2192 Editor Declaration to open the corresponding editor of the concept. For more detailed information, right-click in the editor -&gt; Language Debug \u2192 Show Cell in Explorer. The cell explorer shows the full tree of editor cells that describe the currently opened editor.</p> <p></p> <p>On the right side, you can see basic properties of the editor cell such as the referenced node or the position and dimension of the cell. The next section Actions shows the available editor actions that can be invoked. For example, the action SELECT_LOCAL_END is implemented as the action SelectLocalEnd and has a keyboard shortcut attached to it. The action is forwarded to the current selection in the editor through <code>editorComponent.getSelectionManager().getSelection().executeAction(CellActionType.SELECT_LOCAL_END)</code> and can be handled in an action map in the editor aspect. For most actions, default implementations exist, that can be found in the MPS sources e.g. LocalHome. The last section deals with style items such as the text color or the focus policy. Some properties that are often important concerning debugging are punctuation-left, punctuation-right, editable and read-only because they affect the ability to enter text.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#the-editing-is-supposed-to-be-done-differently","title":"The editing is supposed to be done differently","text":"<p>Many ways exist to change MPS models. You can enter text directly in the editor or use</p> <ul> <li>side transformations to make changes</li> <li>context assistant buttons</li> <li>the context actions tool</li> <li>intentions</li> <li>entries in the main menu to invoke actions</li> <li>the context menu of the editor to invoke actions</li> <li>buttons in the editor</li> </ul> <p>Make sure to read the documentation or have a look at the implementation of the concepts of the used language to figure out how it works. As a last resort, you can always use the MPS console to modify a model. Click a cell in the editor, use the copy shortcut, and paste it into the console. The node should be an instance of PastedNodeReference and can be manipulated. For entering more complex nodes, the quotation language can be used. Make sure to enter a curly brace in the console to start a Base Language statement block, so that you can enter multiple statements.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#syntax-errors-on-compilation","title":"Syntax errors on compilation","text":"<p>Before the generation fails, make sure to run the model checker to check if the model is in a valid state. Errors can still happen for various reasons:</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#the-generator-of-the-language-has-a-bug-that-must-be-fixed","title":"The generator of the language has a bug that must be fixed","text":"<p>A common source of errors are cross-references to other models that are not handled correctly. Wrong assumptions about which parts of the model are optional and which parts are mandatory often lead to incorrectly generated code. Depending on the target of the generator, the target language can also help with catching errors through the type system. Even if the code is not generated as part of a template fragment, the code in the generator shouldn\u2019t display any errors. For example: when a method is called that needs an argument of type string, don\u2019t call it with a different argument type in the template even if the parameter is replaced by a reference macro anyway. Casting nodes to a different concept should also be done carefully. An as cast will return null if the node can\u2019t be cast to the referenced concept.</p>"},{"location":"home/overcoming_obstacles/syntax_problems/#the-base-language-code-is-not-valid-java-code","title":"The Base Language code is not valid Java code","text":"<p>Despite the similarities between Java and Base Language, they are not fully compatible. Read the page MPS Java compatibility in the MPS documentation. Build scripts can also have a section java options which lets you select the used compiler. Some compilers deal with cyclic dependencies in the generated Java code better than others. That also means that the compilation will fail with some of them when switching the compiler by accident.</p> <p>In rare cases, the generation fails because a variable is generated, that clashes with a variable in the current context e.g. variables named node or _context are good examples (more info).</p>"},{"location":"home/overcoming_obstacles/thinking_problems/","title":"Thinking problems","text":"<p>When you have an easy coding problem, you can do it without much thought. When you have to deal with a new topic that you are not familiar with, or have to dive into a large code base (with little documentation), you start guessing and trying things with the hope that something eventually will work. Especially with not very well-known domains and unclear requirements, there is the risk of getting overwhelmed. You start throwing the dice to make decisions  or you get stuck on a problem for a long time. When your approach fails, and you become frustrated it\u2019s better to step back and think. Ensure that your mental model is clear before proceeding. To learn more about mental models, read: Mental Models: Learn How to Think Better and Gain a Mental Edge | James Clear.</p> <p>When the code base is complex or there is some technical debt, it can be difficult to find and focus on the relevant part of the code. Try to create a minimal, reproducible example or extract the code into a toy project or different class. You can also play around with the code by executing it on the MPS console. If the problem is too big, split it up into a few smaller problems, or just solve one smaller problem. Once you got that working, add the layers of complexity back in one at a time until you solved the problem as the problem statement asked.</p> <p>Finding the root cause of your problem should always be done before implementing a workaround or writing badly designed code. For working in the MPS platforms this can be a challenging task. The problem could be located in the current project but also in one of the MPS platforms or even MPS itself. Don\u2019t focus only on the code that you think contains the bug but also consider all other platforms. Try disabling offending languages and methodically go through all layers of code that might be responsible for the problem. Comment out chunks of code to see if the problem persists. To rule out MPS itself, try a simple example in MPS itself, without any additional languages and plugins installed. Also, check if the issue still arises in the latest MPS version if you are still using an older version.</p>"},{"location":"home/overcoming_obstacles/thinking_problems/#devise-a-strategy","title":"Devise a strategy","text":"<p>Write down in plain English what you want to achieve before writing code. You can even go a step further as described in Stuck on a Coding Problem? Here are 5 Steps to Solve It|Adrian Prieto:</p> <ul> <li>Read the problem several times until you can explain it to someone else</li> <li>Solve the problem manually</li> <li>Make your manual solution better</li> <li>Write pseudocode</li> <li>Replace pseudocode with real code</li> </ul> <p>Ideally, though, you have a ticket that specifies the problem. It should describe the problem/feature in detail including all edge cases. For tickets that deal with bugs, images, GIFs, and videos can be used to showcase the problem. The description of the ticket should contain an explanation of what the real behavior is vs what the expected behavior is. The ticket can also contain concrete ideas for solving the problem and can even contain concrete ideas for how the UI should look and how the user will interact with it.</p> <p>Depending on the nature of the project, the ticket can be created by a customer, a domain expert, or a member of your team who is very familiar with the target domain. Ideally, the domain expert and the developers are different people, so that the developers don\u2019t have to write specifications for the tickets and can focus on developing features and fixing bugs.</p>"},{"location":"home/overcoming_obstacles/understanding_the_problem/","title":"Understanding the problem","text":"<p>Not understanding the problem 100%, is often the problem. Read the problem several times until you can explain it to someone else. If you don\u2019t fully understand a problem, you can\u2019t solve it. Here are some questions that you can ask yourself:</p> <ul> <li>Did you read the full description of the ticket or problem?</li> <li>Was anything unclear?</li> <li>Can you restate it in your own words?</li> </ul>"},{"location":"home/overcoming_obstacles/understanding_the_problem/#tickets","title":"Tickets","text":"<p>Solve for the goal, not what you\u2019re given in the ticket but contact the submitter of the ticket and ask for clarification if something is unclear: you might misinterpret the meaning of it or something is explained poorly. People that specify tickets/problems sometimes miss edge cases, don\u2019t go into detail, or don\u2019t provide enough information. Try to ask them early, it saves you a lot of time.</p> <p>If the ticket contains the specification for a feature, read How to Constructively Read a Spec | hackernoon.com first if you have trouble understanding a big wall of text or reading carefully.</p>"},{"location":"home/overcoming_obstacles/understanding_the_problem/#exceptions","title":"Exceptions","text":"<p>When you are a developer and use an open-source library, read the source code and look at the latest changes in the offending files to figure out what\u2019s going on. Make sure to look at the code of the correct branch. For the MPS platforms, the naming scheme is most often maintenance/mpsX, for MPS itself, it is just mpsX. If you are dealing with an exception, try to google it first, especially if it is a standard Java exception. Some MPS-specific exceptions are explained on the page exceptions.</p> <p>To make the problem more reproducible, write a test for it. When you fix the code and the test is green, the code coverage rises, and you can be more confident when making changes to the code in the future.</p>"},{"location":"language_reference/","title":"IETS3.opensource Language Reference (WIP)","text":"<p>This is a WIP language reference, currently under review on GitHub.</p> <p>Included languages:</p> <ul> <li> <p>org.iets3.core.expr.base</p> </li> <li> <p>org.iets3.core.expr.collections</p> </li> <li> <p>org.iets3.core.expr.toplevel</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/","title":"org.iets3.core.expr.base","text":""},{"location":"language_reference/org.iets3.core.expr.base/#included-languages","title":"Included Languages","text":"<ul> <li>com.mbeddr.mpsutil.blutil</li> <li>com.mbeddr.mpsutil.editor.querylist</li> <li>com.mbeddr.mpsutil.framecell</li> <li>com.mbeddr.mpsutil.grammarcells</li> <li>com.mbeddr.mpsutil.intentions</li> <li>com.mbeddr.mpsutil.modellisteners</li> <li>com.mbeddr.mpsutil.refactoring</li> <li>de.itemis.mps.editor.celllayout</li> <li>de.slisson.mps.conditionalEditor</li> <li>de.slisson.mps.richtext</li> <li>de.slisson.mps.richtext.customcell</li> <li>jetbrains.mps.baseLanguage</li> <li>jetbrains.mps.baseLanguage.closures</li> <li>jetbrains.mps.baseLanguage.collections</li> <li>jetbrains.mps.baseLanguage.javadoc</li> <li>jetbrains.mps.baseLanguage.lightweightdsl</li> <li>jetbrains.mps.baseLanguage.logging</li> <li>jetbrains.mps.baseLanguage.tuples</li> <li>jetbrains.mps.baseLanguageInternal</li> <li>jetbrains.mps.ide.httpsupport</li> <li>jetbrains.mps.lang.access</li> <li>jetbrains.mps.lang.actions</li> <li>jetbrains.mps.lang.behavior</li> <li>jetbrains.mps.lang.constraints</li> <li>jetbrains.mps.lang.constraints.msg.specification</li> <li>jetbrains.mps.lang.constraints.rules</li> <li>jetbrains.mps.lang.constraints.rules.kinds</li> <li>jetbrains.mps.lang.constraints.rules.skeleton</li> <li>jetbrains.mps.lang.context</li> <li>jetbrains.mps.lang.context.defs</li> <li>jetbrains.mps.lang.core</li> <li>jetbrains.mps.lang.dataFlow</li> <li>jetbrains.mps.lang.descriptor</li> <li>jetbrains.mps.lang.editor</li> <li>jetbrains.mps.lang.editor.tooltips</li> <li>jetbrains.mps.lang.extension</li> <li>jetbrains.mps.lang.findUsages</li> <li>jetbrains.mps.lang.generator</li> <li>jetbrains.mps.lang.generator.generationContext</li> <li>jetbrains.mps.lang.intentions</li> <li>jetbrains.mps.lang.migration</li> <li>jetbrains.mps.lang.migration.util</li> <li>jetbrains.mps.lang.pattern</li> <li>jetbrains.mps.lang.plugin</li> <li>jetbrains.mps.lang.plugin.standalone</li> <li>jetbrains.mps.lang.quotation</li> <li>jetbrains.mps.lang.refactoring</li> <li>jetbrains.mps.lang.resources</li> <li>jetbrains.mps.lang.rulesAndMessages</li> <li>jetbrains.mps.lang.scopes</li> <li>jetbrains.mps.lang.script</li> <li>jetbrains.mps.lang.sharedConcepts</li> <li>jetbrains.mps.lang.smodel</li> <li>jetbrains.mps.lang.smodel.query</li> <li>jetbrains.mps.lang.structure</li> <li>jetbrains.mps.lang.text</li> <li>jetbrains.mps.lang.textGen</li> <li>jetbrains.mps.lang.typesystem</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#defined-concepts","title":"Defined Concepts","text":""},{"location":"language_reference/org.iets3.core.expr.base/#abstractminmaxexpression-abstract-node-url","title":"AbstractMinMaxExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children","title":"Children","text":"<ul> <li>values</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#altoption-node-url","title":"AltOption (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_1","title":"Children","text":"<ul> <li> <p>when</p> </li> <li> <p>then</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#alternativesexpression-alt-node-url","title":"AlternativesExpression (alt, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_2","title":"Children","text":"<ul> <li>alternatives</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#alwaysvalue-always-node-url","title":"AlwaysValue (always, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#andtag-node-url","title":"AndTag (&amp;&amp;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#assignmentexpr-node-url","title":"AssignmentExpr (:=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#attempttype-attempt-node-url","title":"AttemptType (attempt, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_3","title":"Children","text":"<ul> <li> <p>successType</p> </li> <li> <p>errorLiterals</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#bangop-node-url","title":"BangOp (!, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_4","title":"Children","text":"<ul> <li>optionValue</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#binaryarithmeticexpression-abstract-node-url","title":"BinaryArithmeticExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#binarycomparisonexpression-abstract-node-url","title":"BinaryComparisonExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#binaryequalityexpression-abstract-node-url","title":"BinaryEqualityExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#binaryexpression-abstract-node-url","title":"BinaryExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_5","title":"Children","text":"<ul> <li> <p>left</p> </li> <li> <p>right</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#binarylogicalexpression-abstract-node-url","title":"BinaryLogicalExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#castexpression-cast-node-url","title":"CastExpression (cast, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_6","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>expectedType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#checktypeconstraintsexpr-check-node-url","title":"CheckTypeConstraintsExpr (check, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties","title":"Properties","text":"<ul> <li>failIfInvalid</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_7","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>tp</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#coloncast-node-url","title":"ColonCast (:, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_8","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>type</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#constraintanderrornode-node-url","title":"ConstraintAndErrorNode (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references","title":"References","text":"<ul> <li> <p>expression</p> </li> <li> <p>source</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#contract-node-url","title":"Contract (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_9","title":"Children","text":"<ul> <li>items</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#contractitem-abstract-node-url","title":"ContractItem (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_1","title":"Properties","text":"<ul> <li>warning</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_10","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>err</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#convenientboolean-node-url","title":"ConvenientBoolean (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_11","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#convenientbooleanvalue-abstract-node-url","title":"ConvenientBooleanValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#convenientvaluecond-if-node-url","title":"ConvenientValueCond (if, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_12","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#dereftarget-deref-node-url","title":"DeRefTarget (deref, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#defaultvalueexpression-default-node-url","title":"DefaultValueExpression (default, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_13","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#divexpression-node-url","title":"DivExpression (/, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#docwordref-node-url","title":"DocWordRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references_1","title":"References","text":"<ul> <li>node</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#dotexpression-node-url","title":"DotExpression (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_14","title":"Children","text":"<ul> <li>target</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#emptyexpression-node-url","title":"EmptyExpression (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#emptytype-emptytype-node-url","title":"EmptyType (emptytype, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#emptyvalue-empty-node-url","title":"EmptyValue (empty, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_15","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#equalsexpression-node-url","title":"EqualsExpression (==, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#errorexpression-error-node-url","title":"ErrorExpression (error, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_16","title":"Children","text":"<ul> <li>error</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#errorliteral-node-url","title":"ErrorLiteral (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#errortarget-err-node-url","title":"ErrorTarget (err, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#exprincontract-abstract-node-url","title":"ExprInContract (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#expression-abstract-node-url","title":"Expression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#failexpr-fail-node-url","title":"FailExpr (fail, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_17","title":"Children","text":"<ul> <li> <p>message</p> </li> <li> <p>contextExpression</p> </li> <li> <p>type</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#genericerrortype-error-node-url","title":"GenericErrorType (error, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#greaterequalsexpression-node-url","title":"GreaterEqualsExpression (&gt;=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#greaterexpression-node-url","title":"GreaterExpression (&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#hasvalueop-hasvalue-node-url","title":"HasValueOp (hasValue, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iallowdeletionofdot-abstract-node-url","title":"IAllowDeletionOfDot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iallowdotonleft-abstract-node-url","title":"IAllowDotOnLeft (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iallowsdocinchildexpressions-abstract-node-url","title":"IAllowsDocInChildExpressions (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iassertconstraints-abstract-node-url","title":"IAssertConstraints (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iattempttype-abstract-node-url","title":"IAttemptType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ibigexpression-abstract-node-url","title":"IBigExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iblocklike-abstract-node-url","title":"IBlockLike (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icanbelvalue-abstract-node-url","title":"ICanBeLValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icollectiontype-abstract-node-url","title":"ICollectionType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icomplextypesupportsequals-abstract-node-url","title":"IComplexTypeSupportsEquals (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontainmentstackmember-abstract-node-url","title":"IContainmentStackMember (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontextassistanttypeprovider-abstract-node-url","title":"IContextAssistantTypeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontexttypeprovider-abstract-node-url","title":"IContextTypeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontexttypedop-abstract-node-url","title":"IContextTypedOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#icontracted-abstract-node-url","title":"IContracted (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_18","title":"Children","text":"<ul> <li>contract</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#icontroladvancedfeatures_old-abstract-node-url","title":"IControlAdvancedFeatures_old (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ideclarativelyinterpretable-abstract-node-url","title":"IDeclarativelyInterpretable (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#idocumentablewordcontainer-abstract-node-url","title":"IDocumentableWordContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#idocumentablewordprovider-abstract-node-url","title":"IDocumentableWordProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#idottarget-abstract-node-url","title":"IDotTarget (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iemptyliteral-abstract-node-url","title":"IEmptyLiteral (abstract, node url)","text":"<p>Marker interface used to mark literals that at runtime evaluate to empty value.</p>"},{"location":"language_reference/org.iets3.core.expr.base/#ihasbasetype-abstract-node-url","title":"IHasBaseType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iignoretrivialerrorscontext-abstract-node-url","title":"IIgnoreTrivialErrorsContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iissinglesymbol-abstract-node-url","title":"IIsSingleSymbol (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ijointypecontext-abstract-node-url","title":"IJoinTypeContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iliteral-abstract-node-url","title":"ILiteral (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imainslot-abstract-node-url","title":"IMainSlot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imayalloweffect-abstract-node-url","title":"IMayAllowEffect (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imayhaveeffect-abstract-node-url","title":"IMayHaveEffect (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imayreadmutablestate-abstract-node-url","title":"IMayReadMutableState (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#imultitraceroot-abstract-node-url","title":"IMultiTraceRoot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#inamequalifier-abstract-node-url","title":"INameQualifier (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ineverallowdot-abstract-node-url","title":"INeverAllowDot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ioptionderefcontext-abstract-node-url","title":"IOptionDerefContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ioptionallytyped-abstract-node-url","title":"IOptionallyTyped (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_19","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#iparameterizedtypesupportsequals-abstract-node-url","title":"IParameterizedTypeSupportsEquals (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iprogramlocationprovider-abstract-node-url","title":"IProgramLocationProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iprovidepathconstraints-abstract-node-url","title":"IProvidePathConstraints (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ireducableexpression-abstract-node-url","title":"IReducableExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iref-abstract-node-url","title":"IRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ireferenceabletype-abstract-node-url","title":"IReferenceableType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#irunninginterpretercontext-abstract-node-url","title":"IRunningInterpreterContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issconstrainedvalue-abstract-node-url","title":"ISSConstrainedValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issconstrainedvalueref-abstract-node-url","title":"ISSConstrainedValueRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issdelegatingtype-abstract-node-url","title":"ISSDelegatingType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issitvalueref-abstract-node-url","title":"ISSItValueRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iscopefilterer-abstract-node-url","title":"IScopeFilterer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#isinglesymbolref-abstract-node-url","title":"ISingleSymbolRef (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#istructuredsyntax-abstract-node-url","title":"IStructuredSyntax (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itargetthatcandealwithnix-abstract-node-url","title":"ITargetThatCanDealWithNix (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itraceroot-abstract-node-url","title":"ITraceRoot (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypefrommultiple-abstract-node-url","title":"ITypeFromMultiple (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypeoverridingcontext-abstract-node-url","title":"ITypeOverridingContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypesupportsdefaultvalue-abstract-node-url","title":"ITypeSupportsDefaultValue (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypesupportsproposals-abstract-node-url","title":"ITypeSupportsProposals (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#itypeable-abstract-node-url","title":"ITypeable (abstract, node url)","text":"<p>Nodes that have a defined type but not necessarily specified explicitly in a child</p>"},{"location":"language_reference/org.iets3.core.expr.base/#ityped-abstract-node-url","title":"ITyped (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_20","title":"Children","text":"<ul> <li>type:</li> </ul> <p>type is actually required, but is 0..1 here to improve editor usability</p>"},{"location":"language_reference/org.iets3.core.expr.base/#ivalidotherwisecontainer-abstract-node-url","title":"IValidOtherwiseContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ivoidcontext-abstract-node-url","title":"IVoidContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#iwantnewline-abstract-node-url","title":"IWantNewLine (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#ifelsesection-else-node-url","title":"IfElseSection (else, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_21","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#ifexpression-if-node-url","title":"IfExpression (if, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_22","title":"Children","text":"<ul> <li> <p>condition</p> </li> <li> <p>thenPart</p> </li> <li> <p>elsePart</p> </li> <li> <p>elseSection</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#implicitvalidityvalexpr-it-node-url","title":"ImplicitValidityValExpr (it, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_23","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#inlinemessage-message-node-url","title":"InlineMessage (message, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_24","title":"Children","text":"<ul> <li>text</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#invariant-inv-node-url","title":"Invariant (inv, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#issomeexpression-issome-node-url","title":"IsSomeExpression (isSome, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_25","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#jointype-join-node-url","title":"JoinType (join, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_26","title":"Children","text":"<ul> <li>types</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#lessequalsexpression-node-url","title":"LessEqualsExpression (&lt;=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#lessexpression-node-url","title":"LessExpression (&lt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalandexpression-node-url","title":"LogicalAndExpression (&amp;&amp;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicaliffexpression-node-url","title":"LogicalIffExpression (&lt;=&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalimpliesexpression-node-url","title":"LogicalImpliesExpression (=&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalnotexpression-node-url","title":"LogicalNotExpression (!, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#logicalorexpression-node-url","title":"LogicalOrExpression (||, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#makereftarget-ref-node-url","title":"MakeRefTarget (ref, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#maxexpression-max-node-url","title":"MaxExpression (max, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#messagevaluetype-message-node-url","title":"MessageValueType (message, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#minexpression-min-node-url","title":"MinExpression (min, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#minusexpression-node-url","title":"MinusExpression (-, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#modexpression-mod-node-url","title":"ModExpression (mod, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#mulexpression-node-url","title":"MulExpression (*, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#multag-node-url","title":"MulTag (*, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#nevervalue-never-node-url","title":"NeverValue (never, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#nonstrictequalsexpression-node-url","title":"NonStrictEqualsExpression (===, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#noneliteral-none-node-url","title":"NoneLiteral (none, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_27","title":"Children","text":"<ul> <li>optionalBaseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#nonetype-none-node-url","title":"NoneType (none, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#notequalsexpression-node-url","title":"NotEqualsExpression (!=, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#oktarget-ok-node-url","title":"OkTarget (ok, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#oneoftarget-oneof-node-url","title":"OneOfTarget (oneOf, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_28","title":"Children","text":"<ul> <li>values</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#operatorgroup-join-node-url","title":"OperatorGroup (join, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_29","title":"Children","text":"<ul> <li> <p>expressions</p> </li> <li> <p>tag</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#operatortag-abstract-node-url","title":"OperatorTag (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#optionorexpression-node-url","title":"OptionOrExpression (?:, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#optiontype-opt-node-url","title":"OptionType (opt, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_30","title":"Children","text":"<ul> <li>baseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#ortag-node-url","title":"OrTag (||, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#parensexpression-node-url","title":"ParensExpression ((, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_31","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#plainconstraint-node-url","title":"PlainConstraint (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#plusexpression-node-url","title":"PlusExpression (+, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#plustag-node-url","title":"PlusTag (+, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#postcondition-post-node-url","title":"Postcondition (post, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#pragmadisablecaching-disable-caching-globally-node-url","title":"PragmaDisableCaching (\u00a7disable-caching-globally, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#pragmaexpression-abstract-node-url","title":"PragmaExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_32","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#precondition-pre-node-url","title":"Precondition (pre, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#primitiveliteral-abstract-node-url","title":"PrimitiveLiteral (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#primitivetype-abstract-node-url","title":"PrimitiveType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#programlocationop-abstract-node-url","title":"ProgramLocationOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#programlocationtype-loc-node-url","title":"ProgramLocationType (loc, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#programlocationurlop-url-node-url","title":"ProgramLocationUrlOp (url, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#rangetarget-inrange-node-url","title":"RangeTarget (inRange, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_2","title":"Properties","text":"<ul> <li> <p>upperExcluding</p> </li> <li> <p>lowerExcluding</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_33","title":"Children","text":"<ul> <li> <p>min</p> </li> <li> <p>max</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#reductioninspector-node-url","title":"ReductionInspector (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_34","title":"Children","text":"<ul> <li>reduced</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#referencetype-ref-node-url","title":"ReferenceType (ref, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_35","title":"Children","text":"<ul> <li>baseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#revealer-node-url","title":"Revealer (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_36","title":"Children","text":"<ul> <li>condition</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#revealerthis-revealed-node-url","title":"RevealerThis (revealed, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#simpleexpressionvalueinspector-node-url","title":"SimpleExpressionValueInspector (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_3","title":"Properties","text":"<ul> <li> <p>onlyLast</p> </li> <li> <p>showOnTop</p> </li> <li> <p>showOnConsole</p> </li> <li> <p>optionalLabel</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#somevalexpr-node-url","title":"SomeValExpr (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references_2","title":"References","text":"<ul> <li>someQuery</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#specificerrortype-error-node-url","title":"SpecificErrorType (error[, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_37","title":"Children","text":"<ul> <li>error</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#successexpression-success-node-url","title":"SuccessExpression (success, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_38","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#successtype-success-node-url","title":"SuccessType (success, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_39","title":"Children","text":"<ul> <li>baseType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#successvalueexpr-node-url","title":"SuccessValueExpr (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#references_3","title":"References","text":"<ul> <li>try</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#thisexpression-this-node-url","title":"ThisExpression (this, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#tracerexpression-node-url","title":"TracerExpression (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_4","title":"Properties","text":"<ul> <li>traceLabel</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_40","title":"Children","text":"<ul> <li>traced</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#references_4","title":"References","text":"<ul> <li>target</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tryerrorclause-error-node-url","title":"TryErrorClause (error, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_41","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>errorLiteral</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tryexpression-try-node-url","title":"TryExpression (try, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_5","title":"Properties","text":"<ul> <li>complete</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_42","title":"Children","text":"<ul> <li> <p>expr</p> </li> <li> <p>successClause</p> </li> <li> <p>errorClauses</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#trysuccessclause-node-url","title":"TrySuccessClause (=&gt;, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_43","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tupleaccessexpr-node-url","title":"TupleAccessExpr (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#properties_6","title":"Properties","text":"<ul> <li>index</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#children_44","title":"Children","text":"<ul> <li>tuple</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tupletype-node-url","title":"TupleType ([, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_45","title":"Children","text":"<ul> <li>elementTypes</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#tuplevalue-node-url","title":"TupleValue ([, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_46","title":"Children","text":"<ul> <li>values</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#type-abstract-node-url","title":"Type (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#unaryexpression-abstract-node-url","title":"UnaryExpression (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#children_47","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.base/#unaryminusexpression-node-url","title":"UnaryMinusExpression (-, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#validitytype-validity-node-url","title":"ValidityType (validity, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.base/#voidtype-void-node-url","title":"VoidType (void, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/","title":"org.iets3.core.expr.collections","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#included-languages","title":"Included Languages","text":"<ul> <li>com.mbeddr.mpsutil.grammarcells</li> <li>jetbrains.mps.baseLanguage</li> <li>jetbrains.mps.baseLanguage.closures</li> <li>jetbrains.mps.baseLanguage.collections</li> <li>jetbrains.mps.baseLanguage.javadoc</li> <li>jetbrains.mps.baseLanguage.logging</li> <li>jetbrains.mps.baseLanguage.tuples</li> <li>jetbrains.mps.baseLanguageInternal</li> <li>jetbrains.mps.lang.actions</li> <li>jetbrains.mps.lang.behavior</li> <li>jetbrains.mps.lang.constraints</li> <li>jetbrains.mps.lang.constraints.msg.specification</li> <li>jetbrains.mps.lang.constraints.rules</li> <li>jetbrains.mps.lang.constraints.rules.kinds</li> <li>jetbrains.mps.lang.constraints.rules.skeleton</li> <li>jetbrains.mps.lang.context</li> <li>jetbrains.mps.lang.context.defs</li> <li>jetbrains.mps.lang.core</li> <li>jetbrains.mps.lang.dataFlow</li> <li>jetbrains.mps.lang.descriptor</li> <li>jetbrains.mps.lang.editor</li> <li>jetbrains.mps.lang.findUsages</li> <li>jetbrains.mps.lang.generator</li> <li>jetbrains.mps.lang.generator.generationContext</li> <li>jetbrains.mps.lang.intentions</li> <li>jetbrains.mps.lang.migration</li> <li>jetbrains.mps.lang.pattern</li> <li>jetbrains.mps.lang.quotation</li> <li>jetbrains.mps.lang.refactoring</li> <li>jetbrains.mps.lang.resources</li> <li>jetbrains.mps.lang.rulesAndMessages</li> <li>jetbrains.mps.lang.scopes</li> <li>jetbrains.mps.lang.script</li> <li>jetbrains.mps.lang.sharedConcepts</li> <li>jetbrains.mps.lang.smodel</li> <li>jetbrains.mps.lang.structure</li> <li>jetbrains.mps.lang.text</li> <li>jetbrains.mps.lang.textGen</li> <li>jetbrains.mps.lang.typesystem</li> <li>org.iets3.core.expr.lambda</li> <li>org.iets3.core.expr.simpleTypes</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#defined-concepts","title":"Defined Concepts","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#abstractstringlistjoiner-abstract-node-url","title":"AbstractStringListJoiner (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#allop-all-node-url","title":"AllOp (all, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#allwithindexop-all_with_index-node-url","title":"AllWithIndexOp (all_with_index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#anyop-any-node-url","title":"AnyOp (any, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#anywithindexop-any_with_index-node-url","title":"AnyWithIndexOp (any_with_index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#asimmutablelistop-tolist-node-url","title":"AsImmutableListOp (toList, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#asimmutablesetop-toset-node-url","title":"AsImmutableSetOp (toSet, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#asmapop-tomap-node-url","title":"AsMapOp (toMap, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#assingletonlist-tolist-node-url","title":"AsSingletonList (toList, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#atop-at-node-url","title":"AtOp (at, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#bracketop-node-url","title":"BracketOp (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children","title":"Children","text":"<ul> <li>index</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#collectionsizespec-node-url","title":"CollectionSizeSpec (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#properties","title":"Properties","text":"<ul> <li> <p>min</p> </li> <li> <p>max</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#collectiontype-collection-node-url","title":"CollectionType (collection, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_1","title":"Children","text":"<ul> <li> <p>sizeConstraint</p> </li> <li> <p>baseType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#containsop-contains-node-url","title":"ContainsOp (contains, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#distinctop-distinct-node-url","title":"DistinctOp (distinct, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#elementtypeconstraintmap-node-url","title":"ElementTypeConstraintMap (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_2","title":"Children","text":"<ul> <li> <p>typeConstraint1</p> </li> <li> <p>typeConstraint2</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#elementtypeconstraintsingle-node-url","title":"ElementTypeConstraintSingle (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_3","title":"Children","text":"<ul> <li>typeConstraint</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#findfirstop-findfirst-node-url","title":"FindFirstOp (findFirst, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#firstnop-firstn-node-url","title":"FirstNOp (firstN, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#firstop-first-node-url","title":"FirstOp (first, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#flattenop-flatten-node-url","title":"FlattenOp (flatten, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#foldleftop-foldleft-node-url","title":"FoldLeftOp (foldLeft, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#foldop-abstract-node-url","title":"FoldOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_4","title":"Children","text":"<ul> <li> <p>seed</p> </li> <li> <p>combiner</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#foreachop-foreach-node-url","title":"ForeachOp (foreach, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#icollectionop-abstract-node-url","title":"ICollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#icontexttypedcollop-abstract-node-url","title":"IContextTypedCollOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#ielementtyped-abstract-node-url","title":"IElementTyped (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#ilistoneargop-abstract-node-url","title":"IListOneArgOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_5","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#imaponeargop-abstract-node-url","title":"IMapOneArgOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_6","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#iorderedcollection-abstract-node-url","title":"IOrderedCollection (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#iorderedcollectionop-abstract-node-url","title":"IOrderedCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#iprovideindex-abstract-node-url","title":"IProvideIndex (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#isetoneargop-abstract-node-url","title":"ISetOneArgOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_7","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#indexexpr-index-node-url","title":"IndexExpr (index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#indexofop-indexof-node-url","title":"IndexOfOp (indexOf, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#isemptyop-isempty-node-url","title":"IsEmptyOp (isEmpty, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#isnotemptyop-isnotempty-node-url","title":"IsNotEmptyOp (isNotEmpty, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#keyvaluepair-node-url","title":"KeyValuePair (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_8","title":"Children","text":"<ul> <li> <p>key</p> </li> <li> <p>val</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#lastnop-lastn-node-url","title":"LastNOp (lastN, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#lastop-last-node-url","title":"LastOp (last, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listinsertop-insert-node-url","title":"ListInsertOp (insert, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_9","title":"Children","text":"<ul> <li> <p>index</p> </li> <li> <p>arg</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#listliteral-list-node-url","title":"ListLiteral (list, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_10","title":"Children","text":"<ul> <li> <p>typeConstraint</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#listpickop-pick-node-url","title":"ListPickOp (pick, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_11","title":"Children","text":"<ul> <li>selectorList</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#listtype-list-node-url","title":"ListType (list, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listwithallop-withall-node-url","title":"ListWithAllOp (withAll, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listwithop-with-node-url","title":"ListWithOp (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#listwithoutop-without-node-url","title":"ListWithoutOp (without, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapcontainskeyop-containskey-node-url","title":"MapContainsKeyOp (containsKey, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapkeysop-keys-node-url","title":"MapKeysOp (keys, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapliketype-maplike-abstract-node-url","title":"MapLikeType (mapLike, abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_12","title":"Children","text":"<ul> <li> <p>keyType_DEPRECATED</p> </li> <li> <p>valueType_DEPRECATED</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#mapliteral-map-node-url","title":"MapLiteral (map, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_13","title":"Children","text":"<ul> <li> <p>typeConstraint</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#mapop-map-node-url","title":"MapOp (map, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapsizeop-size-node-url","title":"MapSizeOp (size, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#maptype-map-node-url","title":"MapType (map, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_14","title":"Children","text":"<ul> <li> <p>keyType</p> </li> <li> <p>valueType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#mapvaluesop-values-node-url","title":"MapValuesOp (values, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapwithop-with-node-url","title":"MapWithOp (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#mapwithoutop-without-node-url","title":"MapWithoutOp (without, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#maxop-max-node-url","title":"MaxOp (max, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#minop-min-node-url","title":"MinOp (min, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#noargcollectionop-abstract-node-url","title":"NoArgCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#oneargcollectionop-abstract-node-url","title":"OneArgCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_15","title":"Children","text":"<ul> <li>arg</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#oneargpredicatecollectionop-abstract-node-url","title":"OneArgPredicateCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#onecollbasetypedargcollectionop-abstract-node-url","title":"OneCollBaseTypedArgCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#reverseop-reverse-node-url","title":"ReverseOp (reverse, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setdiffop-diff-node-url","title":"SetDiffOp (diff, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setliteral-set-node-url","title":"SetLiteral (set, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_16","title":"Children","text":"<ul> <li> <p>typeConstraint</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#settype-set-node-url","title":"SetType (set, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setunionop-union-node-url","title":"SetUnionOp (union, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setwithop-with-node-url","title":"SetWithOp (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#setwithoutop-without-node-url","title":"SetWithoutOp (without, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#simplesortop-sort-node-url","title":"SimpleSortOp (sort, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#properties_1","title":"Properties","text":"<ul> <li>order</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#sizeop-size-node-url","title":"SizeOp (size, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#stringjoinop-join-node-url","title":"StringJoinOp (join, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#stringterminateop-terminate-node-url","title":"StringTerminateOp (terminate, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#sumop-sum-node-url","title":"SumOp (sum, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#tailop-tail-node-url","title":"TailOp (tail, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#twoargpredicatecollectionop-abstract-node-url","title":"TwoArgPredicateCollectionOp (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#unpackoptionsop-unpackoptions-node-url","title":"UnpackOptionsOp (unpackOptions, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#uptotarget-upto-node-url","title":"UpToTarget (upto, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.collections/#children_17","title":"Children","text":"<ul> <li>max</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.collections/#whereop-where-node-url","title":"WhereOp (where, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/","title":"org.iets3.core.expr.toplevel","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#included-languages","title":"Included Languages","text":"<ul> <li>com.mbeddr.mpsutil.contextactions</li> <li>com.mbeddr.mpsutil.editor.querylist</li> <li>com.mbeddr.mpsutil.grammarcells</li> <li>com.mbeddr.mpsutil.intentions</li> <li>com.mbeddr.mpsutil.modellisteners</li> <li>de.itemis.mps.editor.celllayout</li> <li>de.itemis.mps.editor.collapsible</li> <li>jetbrains.mps.baseLanguage</li> <li>jetbrains.mps.baseLanguage.checkedDots</li> <li>jetbrains.mps.baseLanguage.closures</li> <li>jetbrains.mps.baseLanguage.collections</li> <li>jetbrains.mps.baseLanguage.javadoc</li> <li>jetbrains.mps.baseLanguage.lightweightdsl</li> <li>jetbrains.mps.baseLanguage.logging</li> <li>jetbrains.mps.baseLanguage.tuples</li> <li>jetbrains.mps.baseLanguageInternal</li> <li>jetbrains.mps.lang.actions</li> <li>jetbrains.mps.lang.aspect</li> <li>jetbrains.mps.lang.behavior</li> <li>jetbrains.mps.lang.constraints</li> <li>jetbrains.mps.lang.constraints.msg.specification</li> <li>jetbrains.mps.lang.constraints.rules</li> <li>jetbrains.mps.lang.constraints.rules.kinds</li> <li>jetbrains.mps.lang.constraints.rules.skeleton</li> <li>jetbrains.mps.lang.context</li> <li>jetbrains.mps.lang.context.defs</li> <li>jetbrains.mps.lang.core</li> <li>jetbrains.mps.lang.dataFlow</li> <li>jetbrains.mps.lang.descriptor</li> <li>jetbrains.mps.lang.editor</li> <li>jetbrains.mps.lang.extension</li> <li>jetbrains.mps.lang.findUsages</li> <li>jetbrains.mps.lang.generator</li> <li>jetbrains.mps.lang.generator.generationContext</li> <li>jetbrains.mps.lang.intentions</li> <li>jetbrains.mps.lang.migration</li> <li>jetbrains.mps.lang.pattern</li> <li>jetbrains.mps.lang.plugin</li> <li>jetbrains.mps.lang.quotation</li> <li>jetbrains.mps.lang.refactoring</li> <li>jetbrains.mps.lang.resources</li> <li>jetbrains.mps.lang.rulesAndMessages</li> <li>jetbrains.mps.lang.scopes</li> <li>jetbrains.mps.lang.script</li> <li>jetbrains.mps.lang.sharedConcepts</li> <li>jetbrains.mps.lang.smodel</li> <li>jetbrains.mps.lang.structure</li> <li>jetbrains.mps.lang.text</li> <li>jetbrains.mps.lang.textGen</li> <li>jetbrains.mps.lang.typesystem</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#defined-concepts","title":"Defined Concepts","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstractfunctionadapter-abstract-node-url","title":"AbstractFunctionAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children","title":"Children","text":"<ul> <li>fun</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstractfunctionlikeadapter-abstract-node-url","title":"AbstractFunctionLikeAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_1","title":"Children","text":"<ul> <li>functionLike</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstracttoplevelexpradapter-abstract-node-url","title":"AbstractToplevelExprAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_2","title":"Children","text":"<ul> <li>toplevelExprContent</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#abstracttypedeclaration-abstract-node-url","title":"AbstractTypeDeclaration (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#alllitlist-literals-node-url","title":"AllLitList (literals, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_3","title":"Children","text":"<ul> <li>enumType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#builderadapter-abstract-node-url","title":"BuilderAdapter (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#builderelement-abstract-node-url","title":"BuilderElement (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#builderexpression-build-node-url","title":"BuilderExpression (build, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_4","title":"Children","text":"<ul> <li> <p>adapted</p> </li> <li> <p>elements</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#constant-val-node-url","title":"Constant (val, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_5","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#constantref-node-url","title":"ConstantRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references","title":"References","text":"<ul> <li>constant</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#emptymember-node-url","title":"EmptyMember (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#emptytoplevelcontent-node-url","title":"EmptyToplevelContent (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumdeclaration-enum-node-url","title":"EnumDeclaration (enum, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#properties","title":"Properties","text":"<ul> <li>qualified</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_6","title":"Children","text":"<ul> <li> <p>type</p> </li> <li> <p>literals</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumindexop-index-node-url","title":"EnumIndexOp (index, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumisinselector-node-url","title":"EnumIsInSelector (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_1","title":"References","text":"<ul> <li>literal</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumisintarget-isin-node-url","title":"EnumIsInTarget (isIn, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_7","title":"Children","text":"<ul> <li>selectors</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumistarget-is-node-url","title":"EnumIsTarget (is, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_2","title":"References","text":"<ul> <li>literal</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumliteral-node-url","title":"EnumLiteral (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_8","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumliteralref-node-url","title":"EnumLiteralRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_3","title":"References","text":"<ul> <li>literal</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumtype-node-url","title":"EnumType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_4","title":"References","text":"<ul> <li>enum</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#enumvalueaccessor-value-node-url","title":"EnumValueAccessor (value, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#extensionfunctioncall-node-url","title":"ExtensionFunctionCall (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_9","title":"Children","text":"<ul> <li>args</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_5","title":"References","text":"<ul> <li>extFun</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#fieldsetter-node-url","title":"FieldSetter (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_10","title":"Children","text":"<ul> <li>value</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_6","title":"References","text":"<ul> <li>field</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#funref-node-url","title":"FunRef (:, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#function-fun-node-url","title":"Function (fun, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#properties_1","title":"Properties","text":"<ul> <li>ext_old</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#functioncall-node-url","title":"FunctionCall (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#groupbyop-groupby-node-url","title":"GroupByOp (groupBy, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#groupkeytarget-key-node-url","title":"GroupKeyTarget (key, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#groupmemberstarget-members-node-url","title":"GroupMembersTarget (members, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#grouptype-group-node-url","title":"GroupType (group, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_11","title":"Children","text":"<ul> <li> <p>keyType</p> </li> <li> <p>memberType</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#iconstantscopeprovider-abstract-node-url","title":"IConstantScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ideclarationextensioncontext-abstract-node-url","title":"IDeclarationExtensionContext (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ienumscopeprovider-abstract-node-url","title":"IEnumScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ifunctioncontainer-abstract-node-url","title":"IFunctionContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ifunctionlikecontainer-abstract-node-url","title":"IFunctionLikeContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#ifunctionscopeprovider-abstract-node-url","title":"IFunctionScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecorddeclaration-abstract-node-url","title":"IRecordDeclaration (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_12","title":"Children","text":"<ul> <li>members</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordmember-abstract-node-url","title":"IRecordMember (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordmemberscopeprovider-abstract-node-url","title":"IRecordMemberScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordscopeprovider-abstract-node-url","title":"IRecordScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#irecordtype-abstract-node-url","title":"IRecordType (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itoplevelcontainer-abstract-node-url","title":"ITopLevelContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itoplevelexprcontent-abstract-node-url","title":"IToplevelExprContent (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itoplevelexprcontentcontainer-abstract-node-url","title":"IToplevelExprContentContainer (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#itypedefscopeprovider-abstract-node-url","title":"ITypedefScopeProvider (abstract, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#inlinerecordmemberaccess-node-url","title":"InlineRecordMemberAccess (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#inlinerecordtype-node-url","title":"InlineRecordType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_13","title":"Children","text":"<ul> <li>members</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#library-node-url","title":"Library (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_14","title":"Children","text":"<ul> <li> <p>contents</p> </li> <li> <p>imports</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#newvaluesetter-node-url","title":"NewValueSetter (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_15","title":"Children","text":"<ul> <li>newValue</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_7","title":"References","text":"<ul> <li>member</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#oldmemberref-node-url","title":"OldMemberRef (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_8","title":"References","text":"<ul> <li>member</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#oldvalueexpr-old-node-url","title":"OldValueExpr (old, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#projectit-it-node-url","title":"ProjectIt (it, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#projectmember-node-url","title":"ProjectMember (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_16","title":"Children","text":"<ul> <li>expr</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#projectop-project-node-url","title":"ProjectOp (project, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_17","title":"Children","text":"<ul> <li>members</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#qualifierref-node-url","title":"QualifierRef (node url)","text":"<p>Auxiliary concept used only when creating EnumLiteralRefs to qualified enums (replaced by EnumLiteralRef when EnumLiteral is selected)</p>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_9","title":"References","text":"<ul> <li> <p>enum</p> </li> <li> <p>lit</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordchangetarget-with-node-url","title":"RecordChangeTarget (with, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_18","title":"Children","text":"<ul> <li>setters</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recorddeclaration-record-node-url","title":"RecordDeclaration (record, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_19","title":"Children","text":"<ul> <li> <p>members_old</p> </li> <li> <p>refFlag</p> </li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordliteral-node-url","title":"RecordLiteral (#, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_20","title":"Children","text":"<ul> <li>memberValues</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordmember-node-url","title":"RecordMember (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordmemberrefinconstraint-node-url","title":"RecordMemberRefInConstraint (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_10","title":"References","text":"<ul> <li>member</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordtype-node-url","title":"RecordType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_11","title":"References","text":"<ul> <li>record</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#recordtypeadapter-node-url","title":"RecordTypeAdapter (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_21","title":"Children","text":"<ul> <li>type</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#referenceableflag-referenceable-node-url","title":"ReferenceableFlag (referenceable, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_12","title":"References","text":"<ul> <li>idMember</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#sectionmarker-node-url","title":"SectionMarker (-----, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#properties_2","title":"Properties","text":"<ul> <li>label</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#typedef-type-node-url","title":"Typedef (type, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#children_22","title":"Children","text":"<ul> <li>originalType</li> </ul>"},{"location":"language_reference/org.iets3.core.expr.toplevel/#typedefcontractvalexpr-it-node-url","title":"TypedefContractValExpr (it, node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#typedeftype-node-url","title":"TypedefType (node url)","text":""},{"location":"language_reference/org.iets3.core.expr.toplevel/#references_13","title":"References","text":"<ul> <li>typedef</li> </ul>"},{"location":"languages/","title":"Index","text":"<p>What\u2019s the relationship between mbeddr.\\platform, iets3.opensource and mps-extensions?</p> <p>Older versions of  mbeddr platform and  IETS3 contain a dependency to  MPS-extensions and they repack it. The newest version of  mbeddr platform doesn\u2019t repack it.  MPS-extensions contains many extensions that were part of  mbeddr platform.</p> <p>Why are some of these languages not migrated to MPS-extensions?</p> <p>Some languages have dependencies that would also need to be migrated to  MPS-extensions. Other languages are deemed as not stable or important enough to be migrated.</p>"},{"location":"languages/baselanguage/","title":"Baselanguage and extensions","text":"","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#base-language","title":"Base Language","text":"<p>jetbrains.mps.baselanguage</p> <p>For a full list of Base Language bugs and feature requests, have a look at this ticket search.</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#blog-posts","title":"Blog posts","text":"<ul> <li>Get feedback from users with generic comments(Specific Languages\u2019 blog)</li> <li>Empty lines and comments(Specific Languages\u2019 blog)</li> </ul> <p>Paste as Java class doesn\u2019t work.</p> <p>Not all newer Java features can be pasted such as the double colon operator(::) and static imports (fixed in the newest MPS versions). Loops with more than one variable also doesn\u2019t work.</p> <p>Set the Export flag at the moduleX import.</p> <p>You are using a class that extends another class that is situated in another solution. That means that the export flag for the other solutions should be set in the current module so that there is automatically a dependency on this module. More information can be found in dependencies: export flag.</p> <p>What Java language features aren\u2019t supported in Base Language?</p> <p>The following features are not supported (yet):</p> <ul> <li>local classes</li> <li>multiline strings/text blocks</li> <li>records</li> <li>sealed classes</li> <li>pattern matching for switch statements</li> <li>pattern matching for instanceof</li> <li>double brace initialization</li> </ul> <p>A function with Base Language code doesn\u2019t return anything when called.</p> <p>Base Language permits implicit returns. The last statement is automatically returned. In some places, implicit returns aren\u2019t supported, such as when returning a new <code>ListScope</code> class. Make sure to add a return statement in such places.</p> <p>What library does MPS use to parse Java code?</p> <p>It uses the parser of the Eclipse Java Development Tools (JDT). The AST is described on the page Eclipse JDT - Abstract Syntax Tree (AST) and the Java Model.    </p> <p>How do know if a node in MPS is commented out? How can I comment out nodes programmatically?</p> <p>Use the class CommentUtil. It has methods for commenting/uncommenting and checking if the node is commented out (<code>CommentUtil#isCommentedOut</code>).</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#var-variable","title":"Var Variable","text":"<p>jetbrains.mps.baselanguage.varVariable</p> <p>This extension allows declaring local variables with the type automatically inferred from the initializer which must not be empty. Example:</p> <pre><code>var value = (ISimple) {var input =&gt; return 1; }\nvar x=0c710\n</code></pre> <p>TextGen not found for concept of X language.</p> <p>Maybe a wrong generator order of languages is the issue. Example: The generators of language x are executed first and then the generator of the var variable of the same language is called. It should be the other way around. You can specify a custom generation plan to fix this issue.</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#closures","title":"Closures","text":"<p>jetbrains.mps.baselanguage.closures</p> <p>Exception when passing closure literal as a parameter in a behavior method call</p> <p>Closures can\u2019t be used for functional interface types such as <code>java.util.Runnable</code> in behavior methods (see MPS-31866)</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#collections","title":"Collections","text":"<p>How can you create a sequence with one element?</p> <p>Use the singleton constructor: <pre><code>new singleton&lt;string&gt;(\"single\")`\n</code></pre></p> <p>How do you convert from a Java ArrayList to a Base Language list?</p> <p>Use the copy constructor:  <pre><code>new arraylist&lt;string&gt;(copy: yourArrayList)`\n</code></pre></p> <p>How do you convert Base Language collections to Java streams?</p> <p>First, convert your collection to a list that you downcast to a Java list. Then you can convert it into a stream <code>StreamSupport.stream(list/.spliterator(), false)</code></p> <p>Why doesn\u2019t yield work inside a select operation?</p> <p>Given I have this code: <code>myNode.items.select({~it =&gt; yield it.index})</code> When I run it, then I expect the result <code>[0,1,2,3,4]</code> but unexpectedly, I get the same list of nodes, as if I ran <code>myNode.items</code> What\u2019s happening?</p> <p><code>Yield</code> does not work with <code>.select({\u2026})</code>. It will do what you expected if you just call <code>.selectMany({\u2026})</code> instead. That\u2019ll also make it clear what happens if you <code>yield</code> multiple times during an iteration, and that the control flow doesn\u2019t end when you\u2019re yielding.</p> <p><sub>contributed by: @abstraktor<sub> <p>How do you sort a collection of children?</p> <p>Given I have a node <code>myNode</code> with a child collection <code>myNode.children</code>. How do I sort them by their <code>toString()</code>? I tried <code>myNode.children/.sort(Ordering.lexical())</code>, but that doesn\u2019t do anything. Stepping revealed that it seems to create a copy of that list and sort that one.</p> <p>Use the bold sort, call <code>toList</code> to materialize the result, and then <code>.clear</code> and <code>.addAll</code> it:</p> <pre><code>sequence&lt;T&gt; sorted = list.sort({~a,~b =&gt; ORDERING.compare(a, b); }, asc).toList;\nlist.clear;\nlist.addAll(sorted);\n</code></pre> <p><sub>contributed by: @abstraktor<sub>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#checked-dots","title":"Checked dots","text":"<p>jetbrains.mps.baselanguage.checkeddots</p> <ul> <li>voids <code>NullPointerException</code> when Java executes a method call on a null variable. For example, it won\u2019t throw a <code>NullPointerException</code>, if <code>myObject</code> is null.</li> <li>bold methods or dot-expressions are null safe, for example, <code>new arraylist&lt;string&gt;()</code>.where<code>({~it =&gt; })</code></li> </ul>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#access-language","title":"Access language","text":"<p>jetbrains.mps.lang.access</p> <ul> <li>Managing concurrent access | MPS</li> </ul>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#transactional-property-cells","title":"Transactional property cells","text":"<p>jetbrains.mps.lang.editor.structure</p> <ul> <li>An intention can mark a regular property cell such as string, int, and boolean as transactional.</li> <li>MPS updates the editor, when the cursor leaves the cell (= commit).</li> <li>You must define the commit handler in the inspector. The benefit is that the editor isn\u2019t permanently updated on every key typed.</li> <li>Can be useful, for example, if you set your text color dynamically.</li> </ul>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#images","title":"Images","text":"<p>jetbrains.mps.lang.editor.figures</p> <ul> <li>Statically embed images into the editor.</li> </ul> <p> </p> example: image cell","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#base-language-internal","title":"Base Language internal","text":"<p>Specific Languages blog: Poor man\u2019s cross-model generation: baseLanguageInternal</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#sax-parser","title":"Sax parser","text":"<p>jetbrains.mps.core.xml.sax</p> <p>SAX, also known as the Simple API for XML, is used for parsing XML documents. This language allows creating sax parsers. The parser can take parameters and save data into variables. You start by specifying the root element and then at rules for XML tags.</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#rules","title":"Rules","text":"<p>The rule can have an optional creator which creates a Java object from the current element. They support a full and compact view. You can then declare attributes (attr) and children which take can have an optional handler. It has two arguments: the result which has the same type as the type of the rule and the child which is the parsed child object. The attribute can be mandatory, the child can override the tag and supports conditional invocation. The default child block can be used for children with any tags. Next, there can be a text handler which supports an optional handler that can process the text content of an XML element. At last, the element can be validated in the validate method which should return a boolean value depending on if the validation succeeds or fails. Text handling can also be done through the global text handler text.  Example:</p> <pre><code>sax parser ModelReader8 { parameters interfaceOnly : boolean ...\nvariables model : DefaultSModel ...\nroot model rule model for tag model() -&gt; ModelLoadResult { create()-&gt;ModelLoadResult throws SAXException { model = new  DefaultSModel(PersistenceFacade.getInstance().createModelReference(modelUID), header); hasSkippedNodes = false; helper = new  ReadHelper(model.getReference()); return new  ModelLoadResult((SModel) model, ModelLoadingState.NOT_LOADED); } required attr modelUID ...\nchild with tag devkit =&gt; module_reference() (result, child)-&gt;void throws SAXException { model.addDevKit(child); } ...\nvalidate(result)-&gt;boolean throws SAXException { result.setState(hasSkippedNodes ? (interfaceOnly ? ModelLoadingState.INTERFACE_LOADED : ModelLoadingState.NO_IMPLEMENTATION) : ModelLoadingState.FULLY_LOADED); return true; } } ...\ncompact rule ignoredLink for tag link() -&gt; &lt;no type&gt; { &lt;no creator&gt; attr role ...\n} global text handler &lt;no globalText&gt; }\n</code></pre> <p>To use the generated parser, you have to use InternalClassCreator from Base Language Internal. Example:</p> <p><code>new [ XMLSAXHandler ] jetbrains.mps.smodel.persistence.def.v8.LineToContentMapReader8Handler (withPropertyValues, withAssociationTarget)</code></p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#property-references","title":"Property references","text":"<p>jetbrains.mps.lang.checkedName</p> <p>This language can be used to reference properties. <code>property/&lt;node&gt;,&lt;role&gt;/</code>is the main expression that has the type <code>propRef&lt;&gt;</code>. To access the value use <code>.value</code>. Example:  <pre><code>propRef&lt;string&gt; property = property/node/Class/ | name/;\n#print property.value;\n</code></pre> This expression is the node pendant for the <code>property/&lt;concept&gt;:&lt;name&gt;/</code> expression from <code>jetbrains.mps.lang.smodel</code> which takes a concept as an argument and returns an instance of class SProperty.</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#properties-file","title":"Properties file","text":"<p>jetbrains.mps.core.properties</p> <p>This language adds support for Java .properties files. The keys and values are escaped automatically when they contain special characters. The generated properties file has the encoding ISO-8859-1. Example: <pre><code>mps_home=/Applications/MPS.app \ndeploy.dir=./artifacts \n# locale \nencoding=utf-8 \nlocale=en_US\n</code></pre></p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#forms-checkbox","title":"Forms (Checkbox)","text":"<p>jetbrains.mps.lang.editor.forms</p> <p>This language adds support for checkboxes. Text-based checkboxes (text checkbox UI) and image checkboxes (platform checkbox UI) are available. The text-based checkbox can be styled like any other constant text. The checkbox cell has an ui parameter which allows switching between both styles. The state is backed by a boolean property. The visible text is specified by the label. The checkbox can be toggled by clicking and pressing space.</p> <p></p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/baselanguage/#image-generation-for-nodes","title":"Image generation for nodes","text":"<p>jetbrains.mps.lang.editor.imageGen</p> <p>The single concept ImageGenerator can generate an image for a node. It accepts a file name, and a scale (1 is 100%), and needs a reference to a node. If the reference is not set, a node id must be provided. The image is generated through the facet GenerateImages which is executed after the generate facet. Execute the following code on the console to get the list of supported file formats: <pre><code>IIORegistry registry = IIORegistry.getDefaultInstance(); StringBuilder builder = new  StringBuilder(); Iterator&lt;ImageWriterSpi&gt; serviceProviders = registry.getServiceProviders(ImageWriterSpi.class, false); while (serviceProviders.hasNext()) { ImageWriterSpi next = serviceProviders.next(); builder.append(String.format(\"description: %-27s   format names: %s%n\", next.getDescription(Locale.ENGLISH), Arrays.toString(next.getFormatNames()))); } #print builder.toString();\n</code></pre></p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/cell_layout/","title":"Cell Layout","text":"<p>This page is an addition to Cell Layout | MPS-extensions. Some terminology of this page is explained on the page editor development, so please read this page first. Additionally, when the variable\u2019s type or argument is omitted in a diagram, it is assumed to be int. Methods without a return type, have a type of void.</p> <p>In the MPS layout algorithms, the children decide about their width and height, and the parent cell can only arrange the already layouted children. The algorithms from the cell layout language are similar to the ones from the Java Swing layouters where the child is asked for its min/max/preferred size, but the parent decides about the size of the child and the child then has to fit itself into these bounds. The table and diagram language uses this language, but there are also some useful styles defined in the de.itemis.mps.celllayout language. The language is partially inspired by Java MigLayout.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#box-model","title":"Box Model","text":"<p>The box model defines how the editor elements are modeled in the cell layout language. It is like a simplified version of the CSS box model.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layout-box","title":"Layout box","text":"<p>A layout box has a position (x,y) and a dimension (width, height). These properties can be saved together in a Bounds object which also has methods for checking if another bounds or point is contained in it.</p> <p></p> <p>The size can be changed with the growN methods, the position can be changed with the move methods. All of those methods take relative values. A listener can be set to listen to changes in the mentioned properties. The default implementation is DefaultLayoutBox which extends AbstractlayoutBox. Whenever a setter method is called, the corresponding method of the listener is triggered. The ascent is calculated by subtracting the descent from the height.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layoutboxframe","title":"LayoutBoxFrame","text":"<p>A LayoutBoxFrame is a box that has a frame around an inner box:</p> <p></p> <p>Setting the frame size sets it for all sides (left, right, bottom, top).</p> <p></p> <p>AbstractLayoutBoxFrame extends this class. The position is calculated by the inner box\u2019s position minus the frame size and the dimension is the inner box\u2019s dimension plus the frame size. The default implementation is DefaultLayoutBoxFrame. It contains a layout box has the frame size split up into left, right, bottom and top size.</p> <p>CalcOnWriteFrame is a layout box frame which contains an inner and result layout box. The position and dimension are returned from the result box while the same setter methods set the properties of the inner box. When the inner box changes, the listener propagates those changes to the result box. When the left/right/bottom or top size is set, the property of the result box is set by a delta.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#boxmodel","title":"BoxModel","text":"<p>A BoxModel consists of 4 boxes. The innermost box contains the content, the outermost box is the margin.</p> <p></p> <p>The default implementation is DefaultBoxModel which is used by EditorCellBoxModel. </p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#editorcellboxmodel","title":"EditorCellBoxModel","text":"<p>This box model is stored in the user object of the corresponding cell under the key  EditorCellBoxModel. Besides the mentioned boxes, it has a box for additional padding and a bracket box for when the cell has the stylesheet item drawBrackets enabled. The brackets have a width of 7 pixels. </p> <p></p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#synchronization","title":"Synchronization","text":"<p>The read synchronization method initializes the boxes based on the information from the editor cell. The padding is calculated as the gap minus the additional padding. If the padding is negative it is added as additional padding, otherwise, it is set to the padding box. If the dimension is less than the total frame size of the bracket box, the additional padding is set to 0. The dimension is the maximum of the current dimension and the total frame size of the bracket box. The default behavior of MPS is not to reserve any space for the border and let it overlap. That\u2019s why the position is therefore calculated as the border size minus 1. In the write synchronization method, the left and right gaps are set. They are calculated as the padding plus the additional padding. Depending on the useMove flag, the cells are then moved or only the position is set.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layout","title":"Layout","text":"<p>The immutable class Size has special methods for supporting unlimited sizes which are just large numbers that are larger than every practically used size. This approach reduces the potential for overflow errors. limitedX methods can be used for limiting either the width or height. The deriveN methods just change the width or height separately.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#ilayouter","title":"ILayouter","text":"<p>ILayouter has a layout method and a method to move the children of a layoutable container by a delta.</p> <p></p> <p>All the size methods and the ascent calculation method take a container as the first parameter and a size constraint as a second parameter to restrict the returned size. toText() produces a string that is returned when copying the cells to the system clipboard. usesPunctuation() determines if punctuation stylesheet items are used. The class AbstractLayout extends this interface. It has a method for checking and returning the gap in pixels between two ILayoutables. If the left ILayoutable has the stylesheet item punctuation-right or the right item punctuation-left enabled, there is no gap. If one of the two ILayoutables has a border on the conjoined side, there is also no gap.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#ilayoutable","title":"ILayoutable","text":"<p>ILayoutable inherits some methods of LayoutBox, some of ILayouter. The main method <code>relayout</code> calculates the new position and dimension of an editor cell. Additionally, the interface has methods for the special celllayout properties such as growX, column-span etc. and methods for checking and setting the changed flag.  In AbstractLayoutable all those properties are set to false and the column and row spans are by default set to 1.</p> <p>The ILayoutableContainer inherits from ILayoutable and has a layouter and children:</p> <p></p> <p>There are innerX methods for getting the position and dimension as well as a method for setting the inner bounds. There is also support for the flatten-grid and base-line-child properties.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#grid","title":"Grid","text":"<p>A Grid is a 2D structure and consists of GridElements and has a dimension. Internally a 1D array is used to store the elements.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#extending-and-scaling","title":"Extending and scaling","text":"<p>Each row has an ascent and descent, and all columns can have different widths. A column\u2019s width can be extended. It is kept the same if the new with is smaller than the existing width. It can also extend to an unlimited size. The row\u2019s height can also be extended by providing a new ascent and descent. The sum of both values has to be greater than zero. When the old values are greater, nothing changes. The contained cells of the grid can also be extended by providing a size getter that determines a new size for each ILayoutable.</p> <p>The widths can also be scaled by providing a new value and weights for the columns. The widths of the columns are percentages of the new width based on the weights (possible rounding errors are compensated). The same scaling method exists for the height: it works the same way except that the ascents and descents of the rows are recalculated. The provided weights don\u2019t have to add up to 1 as they are automatically normalized. Example calculation<pre><code>float availableWidth=500;\nfloat newColumnWidths=[2,2,1];\n// calculation:\nfloat[] weighths= [0.4,0.4,0.2];\nfloat[] newColumnSizes=[200,200,100];\n</code></pre></p> <p>The method applyLayout(x, y) takes a position as an argument and sets new bounds for the individual valid elements of the grid. An element is valid when it has a ILayoutable. <pre><code>float element.baseLine = y + element.y + ascent(row[y]);\nfloat element.x = x + element.x;\nfloat element.y = element.baseLine - element.ascent;\n</code></pre></p> <p>When the alignment center or alignment right property is set, the x position is changed accordingly based on the remaining space. This is the size of the elements minus the result size which is calculated in the following way: the minimum of size of the elements and the preferred size is calculated, then the minimum of this size and the maximum size. If the overflowN property is set, the corresponding size direction will be set to unlimited.</p> <p>The main method of the grid is growElement which takes a grid element, an offset, and the two directions as arguments. If the elements\u2019 dimension is lower than the maximum size of the ILayoutable, the ILayoutable\u2019s dimension becomes the element\u2019s dimension, otherwise, the additional padding of the layout\u2019s box model is used to grow the element. For horizontal growing, the alignment is taken into account.</p> <p>A GridElement has a ILayoutable and different extendN methods: extendSize works by changing the ascent of the ILayoutable. The descent is calculated by subtracting the ascent from the height. There are further methods for extending the width and extending the columns.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#standard-layouts","title":"Standard layouts","text":"<p>Default implementations for the standard MPS layouts are provided:</p> <ul> <li>HorizontalLayout (grid with 1 row)</li> <li>VerticalLayout (grid with 1 column)</li> <li>IndentLayout (layout based on lines that consist of words)</li> <li>ICellLayoutWrapper</li> </ul> <p>ICellLayoutWrapper can wrap an existing cell layout. It can be unwrapped by calling CellLayout.unwrapAll. IEditorCellBasedLayoutable extends ILayoutable and contains an editor cell, a method to check if an indent is present and a <code>readSyncAll</code> and <code>writeSyncAll</code> method. ISupportsTopDownLayout is an editor cell that has a top-down layoutable (IEditorCellBasedLayoutable).</p> <ul> <li>GridLayout</li> </ul> <p>This class uses the class DynamicGrid to store the grid. DynamidGrid stores the elements in a 1D array and automatically grows the array when the grid size changes. This layout respects the grid and row span properties and automatically adjusts the spans when the value is set to a negative value. The new values become the maximum number of spans that are available. It also has a method to load a sub-grid into a DynamicGrid. The grid elements come from a ILayoutableContainer.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#flattening","title":"Flattening","text":"<p>An ILayoutable is considered an intermediate if</p> <ul> <li>it has a horizontal layout and the parent is a grid layout</li> <li>it has a grid layout, horizontal or vertical layout, and the flatten-grid stylesheet item is set.</li> </ul> <p>This method plays a role in the flattening of the grid. When this item is used, all ancestor elements of the grid that have this property enabled, are placed directly in the main grid and are not sub-grids. In the following example, it is assumed that the property is enabled for all children:</p> <p></p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#runtime","title":"Runtime","text":"","tags":["mps-extensions"]},{"location":"languages/cell_layout/#cells","title":"Cells","text":"<p>The EditorListenerCellProvider class has a reference to a node and creates a new EditorListenerCell. This class can forward two events of the editor to the provider: onEditorloaded and onEditorUnloaded. This cell is not visible in the editor.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#abstractlayoutableadapter","title":"AbstractLayoutableAdapter","text":"<p>AbstractLayoutableAdapter has a parent LayoutableCollectionAdapter and handles reading all cell layout specific stylesheet items (readSyncAll). All items are cached. The writing of the items (writeSyncAll) is forwarded to the box model. It also contains an editor cell box model. All setter and getter work with the margin box of this box model. The only special implementations are the size methods: the preferred size is the size of the box model\u2019s margin box. The maximum and minimum sizes are equivalent to the preferred size.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#borderpainter","title":"BorderPainter","text":"<p>BorderPainter is an AbstractAdditionalPainter that gets the information form the border-box of the editor cell\u2019s box model. There is support for border thickness, and color for each side of the box. The border is only painted when the specified rectangular area intersects with the current clipping area of the graphics object. The position and the dimension of the border get changed because there is one pixel less reserved than required for the border. Paint requests are added to a queue which is then processed in order of thickness and brightness (light gray is the default color and has the  lowest priority). In the following example, the painter was enabled for all editor cells:</p> <p></p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layoutableadapter","title":"LayoutableAdapter","text":"<p>LayoutableAdapter extends AbstractLayoutableAdapter.</p> <p>It forwards writeSync to the box model and calls re-layout on the cell if a re-layout was requested. In the method readSync, re-layout is requested if one of the growN properties is set. Then re-layout is called.</p> <p></p> <p>When the expected bounds are not equal to the actual bounds or a re-layout was requested or the cell is marked as changed, the cell is re-layouted again. The size method takes a width and height and calculates the delta for the old dimension in comparison to the new dimension and assigns it to the additional padding box of the box model. The horizontal alignment is also taken into account.</p> <p>The preferred size and also minimum size is calculated as the dimension of the box model\u2019s padding minus the additional padding. The maximum size is equal to the preferred size unless the cell is an Editor_Label or one of the grow stylesheet items is set: in those cases, the width or the height or both can be unlimited.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layoutableadapters","title":"LayoutableAdapters","text":"<p>The LayoutableAdapters class manages adapters. In createAdapter it returns the TopDownLayoutable for editor cells that support top-down layouting, creates a LayoutableCollectionAdapter for the layouter of the cell and the cell itself, or creates a new LayoutableAdapter for the cell instead. The method getAdapter calls this method if there is no existing adapter or receives it from the user object of the cell with the key LayoutableAdapter.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layoutablecollectionadapter","title":"LayoutableCollectionAdapter","text":"<p>LayoutableCollectionAdapter is a layout adapter for collections which supports the pushN stylesheet items and grid-layout-flatten. It caches the calculated inner sizes and inner ascents and also has a method to return a list of children of type ILayoutable.</p> <p>The <code>relayout</code> method itself calculates the layout bounds based on a size constraint and the current position. If the position or dimension has changed in comparison to the last calculation</p> <ul> <li><code>relayout</code> is called if the size has changed.</li> <li><code>moveChildren</code> is called when the position has changed.</li> </ul> <p>When one of those two events has occurred but no layouter is present, re-layout is called. The getLayouter method returns a suitable ILayouter based on the existing layout e.g. HorizontalLayout for CellLayout_Horizontal. If the cell or any of its superclasses overwrites the method relayoutImpl, null is returned.</p> <p>The inner position and dimension methods are based on the box model\u2019s content box. The total gap is the content\u2019s position minus the margin\u2019s position. To switch between the outer and inner sizes, the methods toInnerSize and toOuterSize can be used. The ascent is calculated as the ascent of the children plus the total gap at the top. When the different sizes like maximum, minimum, and preferred size are calculated, the values are first looked up in the cache. If no value can be found, the sizes are guessed from the cached values: if the size was already smaller for a more strict constraint, that value is used. If there is still no value returned, the value is calculated.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layoutengine","title":"LayoutEngine","text":"<p>LayoutEngine is the main entry point for layouting editor components, the root cell, single cells or a subtree of a cell.  layoutSubtree requires the cell itself and a function that sets the bounds of the ILayoutable. For a normal cell, the size is calculated as the desired dimension constraint by the minimum and maximum size of the ILayoutable. For the root cell, the calculation is different: The preferred width is the x position of the cell minus the text width settings of the editor + the hardcoded 15-pixel left margin or the unlimited width if it is bigger. The preferred size is then calculated as the preferred size of the root layoutable constraint by the preferred width.</p> <p><code>layoutSubtreeUnsafe</code> reads all the necessary information from the processed cell, preprocesses the layoutables (e.g. setting margin and padding), re-layouts the cell, sets all margins, and writes back the calculated result to the editor cell. In the end, the position and dimensions are fixed for editor cell collections based on the overflow stylesheet items, and the request layout flags, that were set in previous steps are cleared. All of those methods are invoked inside a watchdog that stops the layouting after a certain time if no stable layout could be found.</p>","tags":["mps-extensions"]},{"location":"languages/cell_layout/#layoutinterceptor","title":"LayoutInterceptor","text":"<p>LayoutInterceptor replaces the cell layout of cells that use stylesheet items of the cell layout language with a custom layout from this language. The interceptor is installed in the project plugin through different methods: as an editor update listener, an additional painter, and an editor component creation listener.</p>","tags":["mps-extensions"]},{"location":"languages/double_dispatch/","title":"Double dispatch","text":"<p>This article explains the language jetbrains.mps.baselanguage.doubleDispatch. The example comes from this article:</p> <p>Most OOP programming languages support single dispatch, more commonly known as virtual methods. For example, consider the following code:</p> Single dispatch<pre><code>public class SpaceShip {\npublic string GetShipType() {\nreturn \"SpaceShip\";\n}\n}\npublic class ApolloSpacecraft extends SpaceShip {\npublic string GetShipType() {\nreturn \"ApolloSpacecraft\";\n}\n}\nSpaceShip ship = new ApolloSpacecraft();\nSystem.out.println(ship.GetShipType()); // output: (1)\n</code></pre> <ol> <li>ApolloSpacecraft</li> </ol> <p>The actual method implementation which should be called, is chosen at runtime based solely on the actual type of ship. So, only the type of single object is used to select the method, hence the name single dispatch.</p> <p>Note: Single dispatch is one form of dynamic dispatch, for example, the method is chosen at runtime. If the method is chosen at compile time (true for all non-virtual methods), it\u2019s called static dispatch.</p> <p>Now add some asteroids:</p> Double dispatch<pre><code>public class Asteroid {\npublic void collideWith(SpaceShip s) {\nSystem.out.println(\"Asteroid hit a SpaceShip\");\n}\npublic void collideWith(ApolloSpacecraft a) {\nSystem.out.println(\"Asteroid hit an ApolloSpacecraft\");\n}\n}\npublic class ExplodingAsteroid extends Asteroid {\npublic void collideWith(SpaceShip s) {\nSystem.out.println(\"ExplodingAsteroid hit a SpaceShip\");\n}\npublic void collideWith(ApolloSpacecraft a) {\nSystem.out.println(\"ExplodingAsteroid hit an ApolloSpacecraft\");\n}\n}\npublic class DoubleDispatch {\npublic static void main(string[] args) {\nAsteroid theAsteroid = new Asteroid();\nSpaceShip theSpaceShip = new SpaceShip();\nApolloSpacecraft theApolloSpacecraft = new ApolloSpacecraft();\ntheAsteroid.collideWith(theSpaceShip); // output: (1) \ntheAsteroid.collideWith(theApolloSpacecraft); // output: (2)\nSystem.out.println(); ExplodingAsteroid theExplodingAsteroid = new ExplodingAsteroid(); theExplodingAsteroid.collideWith(theSpaceShip); // output: (3)\ntheExplodingAsteroid.collideWith(theApolloSpacecraft); // output: (4)\nSystem.out.println(); Asteroid theAsteroidReference = theExplodingAsteroid; theAsteroidReference.collideWith(theSpaceShip); // output: (5)\ntheAsteroidReference.collideWith(theApolloSpacecraft); // output: (6)\nSystem.out.println(); // Note the different data types  \nSpaceShip theSpaceShipReference = theApolloSpacecraft; theAsteroid.collideWith(theSpaceShipReference); // output: (7)\ntheAsteroidReference.collideWith(theSpaceShipReference); // output: (8)\n}\n}\n</code></pre> <ol> <li>Asteroid hit a SpaceShip</li> <li>Asteroid hit an ApolloSpacecraft</li> <li>Exploding Asteroid hit a SpaceShip</li> <li>Exploding Asteroid hit anApolloSpacecraft</li> <li>Exploding Asteroid hit a SpaceShip</li> <li>Exploding Asteroid hit an ApolloSpacecraft</li> <li>Asteroid hit an ApolloSpacecraft</li> <li>ExplodingAsteroid hit a SpaceShip</li> </ol> <p>The desired result here would be ExplodingAsteroid hit an ApolloSpacecraft, but instead you get ExplodingAsteroid hit a SpaceShip. To support double dispatch, import the dispatch language and include dispatch modifiers in ExplodingAsteroid:</p> <pre><code>public class ExplodingAsteroid extends Asteroid {\npublic dispatch void collideWith(SpaceShip s) {\nSystem.out.println(\"ExplodingAsteroid hit a SpaceShip\");\n}\npublic dispatch void collideWith(ApolloSpacecraft a) {\nSystem.out.println(\"ExplodingAsteroid hit an ApolloSpacecrat\");\n}\n}\n</code></pre> <p>The last method now correctly returns ExplodingAsteroid hit an ApolloSpacecraft.</p>","tags":["baselanguage","baselanguage-extension"]},{"location":"languages/kernelf/","title":"KernelF","text":"<p>Please start with the readme file of the iets3.opensource repository. The main documentation is the book DESIGN, EVOLUTION AND USE of KernelF by Markus Voelter. There\u2019s also a short reference with only 27 pages.</p>","tags":["iets3"]},{"location":"languages/kernelf/#language-implementations","title":"Language implementations","text":"<ul> <li>Unpacking Options Values: A Case Study in Language Design</li> <li>The Evolution of Decision Tables</li> </ul> <p>Multi-Party boolean decision table:</p> <ul> <li>A Smart Contract Development Stack</li> <li>A Smart Contract Development Stack, Part II: Game Theoretical Aspects</li> </ul>","tags":["iets3"]},{"location":"languages/kernelf/#mutable-state","title":"Mutable state","text":"<ul> <li>Dealing with Mutable State in KernelF</li> </ul>","tags":["iets3"]},{"location":"languages/kernelf/#functional-programming","title":"Functional programming","text":"<ul> <li>Some Concepts in Functional Languages(languageengineering.io)</li> <li>Introduction to the functional programming jargon (general)</li> <li>Awesome functional programming (general)</li> <li>Funclerative Programming(Markus Voelter)</li> </ul>","tags":["iets3"]},{"location":"languages/kernelf/#tracing","title":"Tracing","text":"<p>To follow the execution of an interpreter, the execution trace is helpful. Right-click an interpreted node and click Show Trace. The trace explorer now opens in the lower left corner. When you click one of the lines in the trace explorer, the node in the editor gets replaced by the trace. The trace can be manipulated through the trace expression.</p> <p></p>","tags":["iets3"]},{"location":"languages/kernelf/#nix","title":"Nix","text":"<p>KernelF doesn\u2019t allow returning null values (intermediate null values that are caught by the same or other evaluators are fine). Instead, it supports so-called nix handlers (there\u2019s an nixHandler extension point). The default handler for KernelF is DefaultNixHandler. A nix value (interface INixValue) represents an empty (nothing) value. There is, for example, a DefaultNix class, for dates there\u2019s EmptyDateRangeValue. The handler has a method process that can be used to handle values that might be nix. To use this feature. To use this feature call <code>new NixSupport(Object value node&lt;&gt; node {NixSupport =&gt; Object} calculator).run()</code> where the calculator returns the value:</p> <p></p>","tags":["iets3"]},{"location":"languages/mps_extensions/","title":"General","text":"<p>The improved documentation is hosted on GitHub.</p>","tags":["mps-extensions"]},{"location":"languages/mps_extensions/#richtext","title":"Richtext","text":"<p>slisson.richtext</p> <p>A multi-line text block that\u2019s extendable (e.g. for images). The mbeddr doc language uses it for generating XHTML, Latex, and markdown.</p> <p>The ordering of text and IWords can\u2019t be arbitrary,</p> <p>A checking rule enforces that the text is normalized: There has to be at least one child, it must start with a Word and a Word must always be between two embedded nodes and there are no two consecutive Words.</p>","tags":["mps-extensions"]},{"location":"languages/mps_extensions/#diagram","title":"Diagram","text":"<p>de.itemis.mps.editor.diagram</p> <p>What Java libraries are used by the diagram language?</p> <p>For the graphs itself, it uses JGraphX. The layouting is done by the Eclipse Layout Kernel (ELK).</p> <p>I encountered a bug.</p> <p>Check the meta Issue on GitHub.</p> <p>How do you use this language?</p> <p>Have a look at the samples of this language in  MPS-extensions. There is also an external tutorial series.</p> <p>What\u2019s the edge ID in the diagrams used for?</p> <p>It\u2019s used in the map that contains the layout data. It can be any unique string. LayoutMapEntry.key is the property where this string is used (source).</p>","tags":["mps-extensions"]},{"location":"languages/mps_extensions/#tables","title":"Tables","text":"<p>de.slisson.mps.tables</p> <p>Use slisson-tables instead of mps-tables because the language is more flexible (and not deprecated). The language displays content in a tabular format. The table can be hard-coded or can consist of complex queries/dynamic content. You have to add new cells and rows in the editor. They can also be read-only. You need a little experience (trial and error) to create these tables. Features:</p> <ul> <li>table cell queries</li> <li>partial tables</li> <li>grid queries</li> </ul> <p>Tabular projections in Jetbrains MPS: let\u2019s start building an accounting system(Strumenta\u2019s blog)</p> How do you get rid of the small little extra grid lines on the outside of the table rows? (original question) <p>Change these properties to true. </p> <p></p> <p>How can I improve my tables?</p> <ul> <li>even-odd coloring of rows</li> <li>coloring of columns and row headers</li> <li>group columns by color</li> <li>multi-column headers</li> <li>annotations for cells</li> <li>pagination + other UI buttons</li> </ul>","tags":["mps-extensions"]},{"location":"languages/mps_extensions/#grammar-cells","title":"Grammar Cells","text":"<p>de.itemis.mps.grammarcells</p> <p>Grammar cells seem to need a dummy component. Is this necessary?</p> <p>Yes, it is, otherwise the generator doesn\u2019t get used(source).</p> <p>What combinations of cells aren\u2019t supported?</p> <p>The following combinations are not allowed:</p> <ul> <li>optional and constant</li> <li>optional and reference</li> </ul> <p>How can you enter enumerations easier?</p> <p>Entering enumerations easier with grammar cells(Specific Languages\u2019 blog)</p>","tags":["mps-extensions"]},{"location":"languages/mps_extensions/#querylist","title":"Querylist","text":"<p>com.mbeddr.mpsutil.editor.querylist</p> <p>You can use nodes in the editor, which aren\u2019t directly available in the current context. The language is more  powerful than (read-only) model access (displays a string). You can have editor cells, which can have actions and all other normal cell features. queryListNode allows accessing the surrounding context node in the editor definition (which otherwise isn\u2019t available).</p> <p>How do I fold collections returned by a query list?</p> <p>Surround the query list with a vertical collection and set the cell layout of the querylist (not it\u2019s content) to vertical.</p> How do I make cells in query lists navigatable? <p>I\u2019m trying to create a list of navigatable cells via query list from mpsutil.</p> <p>The query lists query collects some nodes from my model, and I\u2019d like to make it so that each cell produced with this query list navigates to its respective node.</p> <p>Using the navigatable-node style attribute (returning <code>node</code>, the node from the query) on these cells doesn\u2019t seem to work though - ctrl+clicking them doesn\u2019t do anything.</p> <p>How can I make the cells in a query list navigatable to that node?</p> <p>The <code>navigatable-node</code> style attribute won\u2019t allow you to point directly to the node from the query list\u2019s query.  Instead, you can use the hyperlink-node style attribute (also from mpsutil) to make the navigation work, and the <code>hyperlink-style</code> attribute to make it look like a regular reference:</p> <p> </p> <p>A common workaround to get similar behavior with navigatable-node is to point it to a child or parent of the desired node instead of that node itself.</p> <p><sub>contributed by: @jonaskraemer<sub>","tags":["mps-extensions"]},{"location":"languages/mps_extensions/#tooltips","title":"Tooltips","text":"<p>de.itemis.mps.tooltips.structure</p> <p>This language is deprecated, use jetbrains.mps.lang.editor.tooltips instead. It provides tooltips on hover. You have to define a regular editor and a hover editor.</p>","tags":["mps-extensions"]},{"location":"mbeddr/","title":"General","text":"<p>Why are there two context action tools?</p> <p>The context actions tool from com.mbeddr.mpsutil.contextactions was developed first. Later, JetBrains developed their tool that works the same as the one from mpsutil. Nowadays both tool windows coexist.</p> <p>I am using some mbeddr languages in my project but some of them aren\u2019t deployed.</p> <p>There might be some additional plugins that need to be installed:</p> <ul> <li>de.itemis.mps.nativelibs.loader</li> <li>com.mbeddr.mpsutil.actionsfilter</li> <li>mbeddr.spawner</li> </ul> <p>They can be installed by calling <code>gradlew.bat install \"-PMPS_Installation=&lt;path to MPS&gt;\"</code> from the root folder of the mbeddr.core repository when building from source. The actions filter plugin is necessary for the actions filter language.</p>","tags":["mbeddr"]},{"location":"mbeddr/big_project/","title":"BigProject","text":"<p>If you have introduced a migration to mbeddr and need to execute it, you need to execute it on all MPS projects contained in mbeddr. Otherwise, migrations pop up for other people who work on other parts of mbeddr. This is an unclean workflow. To avoid this, you could open all the projects in <code>mbeddr.core\\code\\languages</code> individually and run the migration wizard, but this is tedious. A better approach is to use the BigProject contained in the mbeddr repository. This project loads all languages and solutions available in the individual projects, thus you can run a migration once that executes on all these modules.</p>","tags":["mbeddr","utility"]},{"location":"mbeddr/big_project/#new-usage","title":"New usage","text":"<ul> <li>From the command line: run <code>gradlew.bat :BigProject:run</code> or <code>./gradlew :BigProject:run</code> from the Git checkout root.</li> <li>From IntelliJ IDEA: open the Git checkout root as a (Gradle) project in IDEA and run Generate Big Project run configuration.</li> </ul>","tags":["mbeddr","utility"]},{"location":"mbeddr/big_project/#old-usage","title":"Old usage","text":"<ol> <li>Open project <code>mbeddr.core\\tools\\BigProject</code> with IntelliJ IDEA community edition.</li> <li>In Idea click in the menu on Run \u2192 Run BigProjectGenerator.<ol> <li>If an SDK isn\u2019t configured, follow the error message in the bottom right corner or via project settings and select a Java 11 SDK that\u2019s installed on your system.</li> <li>Use default for the project language level.</li> <li>If a project compiler output path isn\u2019t configured, set it to <code>mbeddr.core\\tmp\\BigProject</code>.</li> <li>Close and open the project again to run the project generator.</li> </ol> </li> <li>Check generation feedback. It looks like this:    <pre><code> === TOTAL ===\n Languages: 214\n Solutions: 305\n Devkits: 22\n</code></pre></li> </ol>","tags":["mbeddr","utility"]},{"location":"mbeddr/big_project/#next-steps","title":"Next steps","text":"<ol> <li>Open project <code>mbeddr.core\\tools\\BigProject</code> with MPS.</li> <li>When the migration wizard starts automatically, execute migrations, otherwise<ol> <li>Check for the popup Migration suspended in the right bottom corner. It tells you, which languages aren\u2019t built /deployed.</li> <li>Build or rebuild all languages in that list. Usually, MPS must build all languages and a set of solutions for the wizard to start automatically.</li> </ol> </li> </ol>","tags":["mbeddr","utility"]},{"location":"mbeddr/building_mbeddr_locally/","title":"Building Mbeddr locally","text":"<p>When trying to build mbeddr locally, you have to overcome some stumbling blocks. This article isn\u2019t a full build instruction but rather a rough guideline. It should make mbeddr build so far that you can make changes to the non-C parts of the project. You probably need to install all tools from the page Required Tools and Versions | mbeddr.com, especially the C-related tools, if you want to get everything built.</p>","tags":["infrastructure","mbeddr"]},{"location":"mbeddr/building_mbeddr_locally/#automatic-build","title":"Automatic build","text":"<ol> <li><code>git clone git@github.com:mbeddr/mbeddr.core.git</code></li> <li>Switch to the branch that you need, if it isn\u2019t the master branch e.g. MPS 2021.1.4: <code>git checkout maintenance/mps20211</code></li> <li>If not also set, open MPS, go to preferences \u2192 Appearance&amp;Behavior\u2192Path Variables and set mbeddr.github.core.home to the root directory of the mbeddr.core repository.</li> <li>Run <code>./gradlew build_mbeddr -PdisableMavenLocal=true</code> to fully build mbeddr.</li> <li>Run <code>./gradlew -PdisableMavenLocal=true</code> instead to only build the platform.</li> <li>The tests and sandboxes are not built and have to be built manually.</li> </ol>","tags":["infrastructure","mbeddr"]},{"location":"mbeddr/building_mbeddr_locally/#manual-build","title":"Manual build","text":"<ol> <li>Open the com.mbeddr.debugger project in MPS (multiple projects are located in the code/languages folder) and run <code>./gradlew install</code> on Mac/Linux or <code>gradlew.bat install</code> on Windows in the command line. This command should build the full project and takes probably more than 10 minutes. You don\u2019t have to start this command from inside MPS but when you execute it on the normal command line, you might need to pass <code>-PMPS_PATHS_SELECTOR</code>to gradle to set the path to the MPS home directory. When everything works, the script should install a plugin named spawner into your MPS installation. This plugin contains libraries for the Eclipse C/C++ development tooling and needs to be installed. It also installs the idea plugin for the actions-filter language, which needs to be installed to be able to use the language.</li> <li> <p>You can now build all projects. Start with these projects in this order:</p> <ul> <li>com.mbeddr.debugger</li> <li>com.mbeddr.mpsutil</li> <li>com.mbeddr.core</li> <li>com.mbeddr.ext</li> <li>\u2026</li> </ul> </li> </ol> <p>If you get compilation errors, try a different order. Some projects like com.mbeddr.doc and com.mbeddr.doc.aspect don\u2019t have as many dependencies on other projects as other projects.</p> <p>If a lot of errors occur in the com.mbeddr.debugger project, you probably don\u2019t have the spawner plugin installed.</p> <p>When anything goes wrong, and you want to start over, just clean the generated files: <code>git clean -xdf</code>. After you\u2019ve made a change, just (re)build the parts of the project that you\u2019ve changed and push the branch so that the build server can make a full build + execute the tests.</p> <p>You don\u2019t need to open all dependent projects if you make a change in one project.</p>","tags":["infrastructure","mbeddr"]},{"location":"mbeddr/development_guide/","title":"Development Guide","text":"<p>This document describes how the mbeddr team used Git for contributing changes in the past. The guide was written some years ago, so it might not reflect the workflow and guidelines of newer committers anymore.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#commit-messages","title":"Commit messages","text":"<p>In general, try to follow this guide with some exceptions for minor changes:</p> <p>When you commit a major change that relates to a GitHub issue, start your commit message with a short title (less than 50 char). Ideally, it contains the title of the GitHub issue if it fits. If you can\u2019t fit the issue title, please reference the issue ID with #4711 notation in the title. The title is followed by a short optional paragraph (not longer than 80 chars) describing the change:</p> <pre><code>ClassCastException on FilteringActionManager #1207\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. \n</code></pre> <p>In contrast, if your commit is just a minor fix, then you mention the modified mbeddr subsystem (for example mpsutil:, core: or ext:) and provide a short description, followed by a short optional paragraph (not longer than 80 chars) describing the change:</p> <pre><code>core,ext: Lorem ipsum dolor sit amet.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. \n</code></pre> <p>The optional paragraph at the end of the commit message contains further information about the change. Tests were added or describe why the fix was necessary, maybe there are special conditions when the issue surfaces. This is also the place where you can put GitHub issue commands to close or reference other issues.</p> <p>Further information and ideas on how to write good commit messages can be found here and here</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#branches","title":"Branches","text":"<p>We make heavy use of branches in the development process. If your task requires more than one commit, commit your changes on a branch.</p> <p>Two types of branches exist: feature and refactor: the first is used for new features, and the second for bug fixes or code refactorings. They are distinguished by prefix: a feature branch my-awesome-stuff would be named feature/my-awesome-stuff or refactor/my-awesome-stuff if it\u2019s a refactoring branch. Both kinds of branches should be short living (a couple of days) to reduce the risk of diverting too far from the master branch and causing huge afford to merge. Ideally, no commits happen directly to master, and every commit is first evaluated on a feature/refactoring branch.</p> <p>Nowadays, we mostly do merging instead of rebasing. The following sections might therefore not accurately reflect the current workflow.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#merging","title":"Merging","text":"<p>Once your work is done, it needs to be integrated into the master branch. Because your branch most likely diverted from master, merging it into master would normally end up with a merge commit on the master branch. We have learned the hard way that merging clutters Git history and makes all intermediate commits of the branch end up in master. To prevent this, the suggested workflow is to rebase your branch onto master and thereby squash all your commits into a single one.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#example","title":"Example","text":"<p>This example shows you how to integrate your branch into the master branch by using rebase instead of merge.</p> <p>The list of commands to use is:</p> <p><pre><code>git fetch\ngit rebase -i origin/master\ngit checkout origin/master\ngit pull\ngit merge --ff-only feature/my-awesome-stuff\ngit pull --rebase\ngit push\n</code></pre> They are all explained below.</p> <p>Below you can see the starting point in the repository:</p> <pre><code>* 1ed51e3        (HEAD -&gt; master) added another file\n* 5cee848        initial commit\n</code></pre> <p>Now create the new feature branch named feature/my-awesome-stuff and commit some changes to it. While working on your branch, someone else committed changes to the master branch. Hence, for integrating your changes into master you would end up with a merge:</p> <pre><code>* 3c36424        (HEAD -&gt; master) fixed some super important issue\n| * 66beba4      (feature/my-awesome-stuff) more work on my awesome feature\n| * cca995e      did some stuff\n|/\n* 1ed51e3        added another file\n* 5cee848        initial commit\n</code></pre> <p>To get your commits into master, first make sure that your local history is up-to-date by running <code>git fetch</code>. Next, rebase your commits. This prevents a merge from happening. This is achieved with the following git command on our branch: <code>git rebase -i origin/master</code>. Git will now ask you how to proceed with your commits: <pre><code>pick cca995e did some stuff\npick 66beba4 more work on my awesome feature\n</code></pre></p> <p>Now squash all commits into a single commit while rebasing:</p> <pre><code>pick cca995e did some stuff\nsquash 66beba4 more work on my awesome feature\n</code></pre> <p>Afterward, Git asks you to enter a message for the new commit. The default message it offers is a concatenation of all the commit messages from the commits to squash. However, you want to make the new commit message fit the earlier described pattern.</p> <p>After rebasing your Git history looks like this: <pre><code>* afc0fb5        (HEAD -&gt; feature/my-awesome-stuff)  42: super awesome feature\n* 3c36424        (master) fixed some super important issue\n* 1ed51e3        added another file\n* 5cee848        initial commit\n</code></pre></p> <p>You still have to branch; now it\u2019s time to merge them. Change your git branch to master using <code>git checkout origin/master</code>. Make sure you have pulled from the remote and your branch is up-to-date. Now run <code>git merge --ff-only feature/my-awesome-stuff</code>. The \u2013ff-only is important to force git to not merge if it would produce a merge commit.</p> <p>Now Git history looks like this:</p> <pre><code>* afc0fb5        (HEAD -&gt; master, feature/my-awesome-stuff)  42: super awesome feature\n* 3c36424        fixed some super important issue\n* 1ed51e3        added another file\n* 5cee848        initial commit\n</code></pre> <p>You haven\u2019t created a merge commit, and all commits from your branch appear as a single commit in the Git history. You are good to go to push back to the repo. But wait, what if somebody has changed things in the meantime on the remote, wouldn\u2019t the pull create a new merge? Yes it would! Therefore, don\u2019t use a plain <code>git pull</code> but use <code>git pull --rebase</code> when you are pulling from the repo into your local master branch. This way, Git doesn\u2019t produce a new merge commit but rebase your local changes on top of the remote changes.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#test-organization","title":"Test Organization","text":"","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#naming","title":"Naming","text":"<p>The test solution for language com.mbeddr.x.lang should be named test.com.mbeddr.x.lang. Respectively, the test solution for solution com.mbeddr.y.sol should be named test.com.mbeddr.y.sol. If you need a dedicated language for testing purposes, you should name it test.com.mbeddr.x.[lang|sol].testsupport (or a similar suffix).</p> <p>This way, you can discriminate between the \u201creal\u201d code below namespace com.mbeddr and the test code below namespace test. You should also place any demo or playground modules outside the com.mbeddr namespace for the same reason.</p> <p>By following this scheme, you can build productive code in the UI by building everything below com.mbeddr in the modules pool, and be assured not to be interfered with by test, demo, or playground code.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#project-structure","title":"Project Structure","text":"<p>All languages, solutions, tests, demos, and playgrounds of one feature should be placed below a common virtual folder bearing the name of the feature. An exception might be build models.</p> <p>Generators must be present only when required or deleted if empty.</p> <p>This allows us to access all artifacts constituting one feature.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#file-system","title":"File System","text":"<p>All test code should be placed in a special folder in the file system:</p> <p></p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#build","title":"Build","text":"","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#build-script-setup","title":"Build script setup","text":"<p>In mbeddr, different build scripts exist. They are used on the local machines for building the languages and on the build server for various build-related tasks, such as testing or packaging. This documentation guides you to following the mbeddr standards for setting up your BuildProject and integrating it into Mbeddr\u2019s build infrastructure.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#required-buildfoldermacros","title":"Required BuildFolderMacros","text":"<p>In your BuildProject (the build script\u2019s model representation in MPS) you first need a BuildFolderMacro (a folder) named mps.home (see code snippet below). If you want to run the generated ant script in your MPS, then you should specify the location of your MPS installation relatively, otherwise, you don\u2019t need a path for mps.home. At script execution time, you will redefine mps.home, to point to the folder where your MPS installation is located at.</p> <pre><code>folder mps.home = &lt;no defaultPath&gt;\n</code></pre> <p>Next, you need a BuildFolderMacro named artifacts.root that doesn\u2019t require a path (see snippet below). When executing the ant script, generated from your BuildProject, define this macro from outside to point to the folder where all your plugin dependencies (for example: <code>mbeddr.platform</code>) are located.</p> <pre><code>folder artifacts.root = &lt;no defaultPath&gt;\n</code></pre> <p>For each BuildProjectDependency (the dependency section below your folders) we need a separate BuildFolderMacro that follows the naming convention .artifacts and points to <code>$artifacts.root/&lt;BuildProject name&gt;</code>. At build script execution time, those macros will point to the folders, where your required plugins are located. In the code snippet below you can see the resulting BuildFolderMacros for a BuildProject with two dependencies: mps-sl-all and com.mbeddr.platform. <pre><code>folder sl-all.artifacts = $artifacts.root/mps-sl-all \nfolder platform.artifacts = $artifacts.root/com.mbeddr.platform\n</code></pre>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#type-system-tests","title":"Type system tests","text":"<p>When you want to build type system tests that require a specific path macro (for example: for specifying the project location inside your <code>TestInfo</code>), then you must create a BuildFolderMacro for this path macro. The name of this BuildFolderMacro should start with mps.macro, followed by the name of the respective path macro. In the example below, you instruct MPS via mps.macro.mbeddr.github.core.home to create a path macro mbeddr.github.core.home that points to the relative path location specified in the other BuildFolderMacro mbeddr.github.core.home.</p> <pre><code>folder mps.macro.mbeddr.github.core.home = $mbeddr.github.core.home\n</code></pre> <p>Furthermore, you need to mark solutions containing type system tests as content: (with sources and tests). To achieve this, please perform the following steps: </p> <ol> <li>Inside your BuildProject move your cursor to the solution that contains your type system tests.</li> <li>Open the inspector.</li> <li>Inside the Inspector select the node sources, open the context menu and select sources and tests from it.</li> </ol> <p>To get your tests executed, you first need to add the module-tests plugin to your use plugins: section (on top of your BuildProject). When you can\u2019t add the node module-tests to this section, import it from jetbrains.mps.build.mps.tests.accessories. Finally, create a BuildMpsLayout_TestModules (a test configuration) at the bottom of your BuildProject and list there all solutions that contain type system tests to be executed.</p>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#configurations-for-generator-and-compiler","title":"Configurations for generator and compiler","text":"<p>To make sure code is generated and compiled the same way as in MPS, you have to add the following configurations (BuildSource_JavaOptions and BuildMps_GeneratorOptions) to your BuildProject\u2018s project structure. Those configurations control the generator engine and the Java compiler to make sure we have the same build behavior as in the IDE.</p> <pre><code>generator options &lt;project default&gt; \n  strict mode true \n  multiple threads true \n  number of threads 4 \n  inplace transform true \n  hide warnings false \n  resort to static references true \n\njava options &lt;project default&gt; \n  generate debug info true \n  generate no warnings false \n  fork false \n  compiler &lt;default compiler&gt; \n  java compliance level 1.6 \n  java compiler options &lt;no additional options&gt; \n  copy resources false \n</code></pre>","tags":["mbeddr","guide"]},{"location":"mbeddr/development_guide/#building-a-release","title":"Building a release","text":"<p>For preparing a mbeddr release, you can modify the version number that is set for the mbeddr plugins by overwriting the values of major.version, minor.version and build(see screenshot below). However, you don\u2019t change these values inside the MPS build scripts, instead, either you change them in the global gradle script (mbeddr.core/build.gradle), or you overwrite them via the command line while spawning a new release build:</p> <p><code>-PmajorVersion=1 -PbuildVersion=0 -PminorVersion=0000 build_mbeddr publishMbeddrAllInOnePublicationToMavenRepository</code></p> <p></p>","tags":["mbeddr","guide"]},{"location":"mbeddr/misc_topics/","title":"Misc Topics","text":"","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#variants","title":"Variants","text":"","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#limitations-to-product-line-engineering-when-generating-variant-aware-code","title":"Limitations to product line engineering when generating variant-aware code","text":"<p>The current PLE approach only generates a single variant. The generated artifacts aren\u2019t variant aware. We want to enable the that generated code can contain #if statements to generate all variants at once. When we want to do this we have to limit variability to elements where we can represent this in the generated C code. The main problem is that presence conditions can\u2019t be applied to all nodes in the model.</p>","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#what-doesnt-work","title":"What doesn\u2019t work?","text":"<p>Besides elements with a cardinality of 1, some other items can\u2019t be removed from the AST with presence conditions:</p> <ul> <li>parameters of a function</li> <li>arguments from function calls</li> <li>extra declarations of for loops</li> <li>variable initializers</li> <li>expressions in array/user-defined type initializers</li> <li>arguments of function macros (global function declarations)</li> </ul>","tags":["mbeddr"]},{"location":"mbeddr/misc_topics/#code-smells","title":"Code smells","text":"<ul> <li>replacement of function call expression where the parent is an expression statement<ul> <li>replace complete statement to generate readable code</li> </ul> </li> </ul>","tags":["mbeddr"]},{"location":"mps_internal/","title":"Index","text":"<p>How do you get started using MPS\u2018 Open API?</p> <p>The simplest way to use MPS Open API(Specific Languages\u2019 blog)</p> <p>How do you get MPS core components from code?</p> <p>From the console: <pre><code>MPSProject p = ((MPSProject) #project); Platform host = (Platform) p.getPlatform();\n#print host.findComponent(MakeServiceComponent.class);\n</code></pre></p> <p>I want to change something inside a SModule such as adding a dependency but can\u2019t find the right method.</p> <p>Try casting it to AbstractModule first.</p> <p>Is there a way to start two instances of MPS, each with its own cache/state?</p> <p>You can create a copy of your MPS installation and edit the idea.properties file in the bin directory.  Changing idea.system.path should allow you to start a second instance with dedicated caches/state.  If you don\u2019t want to share any configuration also update idea.config.path.</p> <p>Where can you find built-in icons?</p> <p>IntelliJ IDEA icons are declared in the class AllIcons. MPS icons are declared in the class MPSIcons.</p> <p>How can you have settings that get saved globally?<sup>1</sup></p> <p>Preferences can be only used at the project level. Use the workaround described in this answer or save your values in the global IntelliJ IDEA Registry. More information about the Registry can be found in this Stack Overflow post. It can also be shown programmatically by calling <code>new RegistryUi().show()</code>.</p> <p>How can you call make or rebuild?</p> <p>Use the class MakeActionImpl. Example usages can be found in the same model.</p> <p>How do you add widgets to the status bar? (for example memory indicator, save transient models)</p> <p>Have a look at this answer.  Make sure to call this code from a project plugin.</p> <p>How do you display a message in the status bar? (left bottom corner)</p> <p>Note: the message might not be visible when executing the code from the console, because the rebuild of the model overrides it with a new message: <code>WindowManager.getInstance().getStatusBar(ProjectHelper.toIdeaProject(#project))</code></p> <p>How can I register an IntelliJ extension?</p> <p>Find the interface you want to add an extension on this page. The corresponding interface has a static field <code>EP_NAME</code>. If the interface is implemented in Kotlin it might have a static field <code>Companion</code> with a <code>getEP_NAME()</code> method. Extend this interface (EX) and register it through the extension point. Example: <code>Interface.EP_NAME.getPoint().registerExtension(new Ex())</code></p> <p>How can you add a status bar widget?</p> <p>Implement the interface <code>StatusBarWidgetFactory</code> and register it through the StatusBarWidgetFactory.EP_NAME extension point.</p> <p>How do you add model imports and used languages programmatically?</p> <p>Adding model imports and used languages programmatically(Specific Languages\u2019 blog)</p> <p>How can you run some MPS code from the command line/CI?</p> <ul> <li>Running MPS code from command line(Specific Languages\u2019 blog)</li> <li>Running code in MPS on CI(Specific Languages\u2019 blog)</li> </ul> <p>How can you run generated code from within MPS?</p> <p>Run generated code from within MPS(Specific Languages\u2019 blog)</p> <p>How can you render a node as a text?</p> <p>Rendering a node as text(Specific Languages\u2019 blog)</p> <p>How can you associate more information with a node?</p> <p>Associating additional information with a node(Specific Languages\u2019 blog)</p> <p>How does shrinking of absolute paths work?</p> <p>Shrinking of absolute paths(Specific Languages\u2019 blog)</p> <p>How can you retrieve nodes of other models and modules?</p> <p><code>model.nodesIncludingImported</code> returns all nodes including the ones from other models that are currently imported. </p> <p>How can you make an internal MPS editor read-only?</p> <p>Given I want to contribute to a generator the <code>j.mps.lang.editor</code>. When I download the MPS source, open the project in MPS under <code>code</code> and open <code>j.m.l.editor/SubstituteMenuPart_ReferenceScope_declare</code>, then I see the model being read-only. What can I do?</p> <p>You need to open MPS in IDEA (Community Edition is enough), compile and run it from there, then you can edit MPS sources. There are instructions in README.</p> How can you do a full-text search in the IDE? <p>I sometimes need a textual search which MPS doesn\u2019t provide out of the box.</p> <p>In that situation, I am unsure of the concept and type of what I see, so a top-down search is not an option. Instead, I would like to search for that string to have a starting point for my investigation.</p> <p>Examples:</p> <ul> <li>I want to investigate an editor in the user interface and don\u2019t want to reverse engineer what hints, editors and concepts lead to what I see.</li> <li>Behavioral view code, like custom cells, Java Swing cells, or query lists make it hard to figure out where the source logic of that is located.</li> <li>when the console shows something I don\u2019t understand, I\u2019d like to see its context source code, so that I can figure out what to do next.</li> </ul> <p>Option 0: Use language debugging facilities of MPS instead.</p> <p>For built-in languages, MPS brings a load of dedicated debugging facilities:</p> <ul> <li>Debugging editor cells and nodes: When you right-click an item in the editor, you can find a submenu Language Debug.</li> <li>Debugging menu entries: Select an item that you\u2019re curious about and press Cmd+Alt+B/Ctrl+Alt+B to open the Menu Trace of it.</li> <li>Setup IntelliJ idea and connect it to step through Java code.</li> </ul> <p>Option 1: Search for literals from the console.</p> <p>Option 2: Search through serialized Java.</p> <ol> <li>Set up IntelliJ with your project.</li> <li>Hit Cmd+Shift+F/Ctrl+Shift+F to search in the path.</li> <li>When you found a class of interest, open it in MPS via Cmd+N/Ctrl+N. The source node usually has a similar name.</li> </ol> <p>This is great for finding editor nodes, for example, if that java class is named Vehicle_EditorBuilder, your source node was an editor for the Vehicle concept.</p> <p>Last Resort: Search XML model directly.</p> <p>Use this only if you have no assembly and your project doesn\u2019t open. The serialized API is subject to change and using this should be the last barrier.</p> <p>Then use ack (or a similar tool) on the command line to find the relevant models that contain this string. The output even contains the node id though, as in this example:</p> <pre><code>$ ack \"ack com.mbeddr.mpsutil.grammarcells\"\n\u2026\n&lt;node concept=\"3bR9La\" id=\"1aL6sVX49Cb\" role=\"1SiIV1\"&gt;\n    &lt;property role=\"3bR36h\" value=\"false\" /&gt;\n    &lt;ref role=\"3bR37D\" to=\"90a9:F1NWDqq_DA\" resolve=\"com.mbeddr.mpsutil.grammarcells.runtime\" /&gt;\n&lt;/node&gt;\n\u2026\n</code></pre> <p>Use <code>new IdEncoder().parseNodeId(\"1aL6sVX49Cb\")</code> to get the node id. This will print the corresponding node to the console. Clicking it will open in MPS:</p> <pre><code>#nodes.where({~it =&gt; boolean equals = false; try { equals = it/.getNodeId().equals(new IdEncoder().parseNodeId(\"1aL6sVX49Cb\")); } catch (Exception e) { &lt;no statements&gt; } return equals; })\n</code></pre> How to get rid of the error: shall specify a repository to lock? <p>When accessing model properties in rendering code, you must encapsulate the model accessing code in a read action:</p> <p></p> <p>It always has an error \u201cError: shall specify a repository to lock\u201d. How can I get rid of it? What is a \u2018repository\u2019 and is there any documentation that explains the concept and how to use it correctly?</p> <p><sub>asked by: @cwalesch<sub> <p>The repository is what is represented as the \u201cmodules pool\u201d in the UI. It contains all the dependencies currently visible. At the moment there is only one global repository which causes several problems. MPS is slowly but steadily moving to project-specific repositories. That would mean each project (window) of MPS would have its separate repository. </p> <p>To get the repository you will need access to the project. e.g. the editor context will give you access to the repository: <code>editorContext.getRepository()</code>.</p> <p>In other cases, for instance,  when you don\u2019t have an editor context directly available you need to make sure that from UI (action) you pass the project or repository through to the place where you need it.</p> <p><sub>answered by: @coolya<sub> How can you get an identifier of a node? <p>Given I have a node myNode and I need to serialize something that identifies it. When I serialize that something and then deserialize that identifier again, then I will find exactly that node. How can I build such a thing?</p> <p>Option 1: PersistenceFacade ID</p> <p>Since the URL does not look nice, you may use this combined string of model ID and node ID that is used for the URL. For that, import the class <code>org.jetbrains.mps.openapi.persistence.PersistenceFacade</code> from the MPS.OpenApi stub and run:</p> <pre><code># serialize identifier\nstring mySerializedId = SNodePointer.serialize(node/.getReference())\n# find node based on the serialized identifier\nnode&lt;&gt; myFoundNode = SNodePointer.deserialize(mySerializedId).resolve(repository)\n# then, node == myFoundNode\n</code></pre> <p>Option 2: URL</p> <p>Import the <code>httpsupport</code> language and use <code>node.getURL</code>. This will be a URL that you can use locally to open this node. It includes the node id and the model and thus is a pretty good globally unique id.</p> <p>This id is a local URL and looks odd though: <code>http://127.0.0.1:63320/node?ref=r%3A4bc03cd1-b1e3-49da-84da-f27e7062f6f7%28integrityOfUpdate%29%2F2209769512593382448&amp;project=SecurityAnalyst</code>. Especially the code to find the node again based on this URL contains some grepping then.</p> <p>Option 3: Node Id</p> <p>Use <code>node/.getNodeId().toString()</code> it will yield the node\u2019s id. Note that a node ID is only unique within this model. If it should be globally unique, consider option 1.</p> <p><sub>contributed by: @abstraktor<sub> Where does MPS store preferences? <p>For a starting point, read Directories used by the IDE. CONFIG_DIR refers to the configuration directory. WORKSPACE_FILE refers to $PROJECT/.mps/workspace.xml:</p> <ul> <li>refactoring settings: CONFIG_DIR/options/refactoringSettings.xml</li> <li>override/implement settings: WORKSPACE_FILE/OverrideImplementMethodComponent</li> <li>additional libraries: CONFIG_DIR/options/AdditionalLibrariesManager.xml</li> <li>default search options: WORKSPACE_FILE/DefaultSearchOptions3</li> <li>make configuration: WORKSPACE_FILE/mpsMakeService</li> <li>code style settings: CONFIG_DIR/options/codeStyleSettings.xml</li> <li>breakpoint settings: WORKSPACE_FILE/BreakpointViewSettings</li> <li>migration state: WORKSPACE_FILE/MigrationProperties</li> <li>model validation settings: CONFIG_DIR/options/mpsModelValidationSettings.xml</li> <li>concept editor settings: WORKSPACE_FILE/ConceptEditorHintSettings</li> <li>node search history: WORKSPACE_FILE/NodeEditorSearchHistory</li> <li>project libraries: WORKSPACE_FOLDER/libraries.xml</li> <li>bookmarks: WORKSPACE_FILE/BookmarksTool</li> <li>project view: WORKSPACE_FILE/ProjectView</li> <li>blame dialog: CONFIG_DIR/options/charismaBlameDialog.xml</li> <li>compiler settings: WORKSPACE_FOLDER/compiler.xml</li> <li>model checker settings: CONFIG_DIR/options/modelCheckerSettings.xml</li> <li>modules: WORKSPACE_FOLDER/modules.xml</li> <li>project plugin settings: WORKSPACE_FILE/ProjectPluginManager</li> <li>generation settings: CONFIG_DIR/options/generationSettings.xml</li> <li>console history: WORKSPACE_FILE/ConsoleHistory</li> <li>breakpoints: WORKSPACE_FILE/BreakpointManager</li> <li>bookmarks: WORKSPACE_FILE/MPSBookmarkManager</li> <li>messages view tool settings: WORKSPACE_FILE/MessagesViewTool</li> <li>usages view tool settings: WORKSPACE_FILE/UsagesViewTool</li> <li>disabled intentions: CONFIG_DIR/options/intentions.xml</li> <li>editor settings: CONFIG_DIR/options/mpsEditor.xml</li> <li>migration trigger settings: WORKSPACE_FILE/MigrationTrigger</li> </ul> <p>Where can you find information about environment/JVM variables that are set in MPS?</p> <ul> <li>Advanced configuration | jetbrains.com</li> <li>Configuring JVM options and platform properties</li> <li>JVM<ul> <li>IntelliJ JVM Options Explained</li> <li>Java HotSpot VM Options</li> </ul> </li> <li>system properties<ul> <li>Java system properties</li> <li>System Properties for Java 2D for properties starting with <code>sun.java2d</code>.</li> <li>Networking System properties for properties starting with <code>java.net</code>.</li> </ul> </li> </ul> <ol> <li> <p>https://mps-support.jetbrains.com/hc/en-us/community/posts/115000568670-Create-and-access-a-single-Preference-Component-which-is-common-for-all-projects \u21a9</p> </li> </ol>","tags":["internals"]},{"location":"mps_internal/classloading/","title":"Classloading","text":"","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#classloaders","title":"Classloaders","text":"<p>Different classloaders exist: bootstrap-class-loader, IDEA plugin classloaders, and module class loaders. Loading a class into an MPS module involves the module class loader, the class of its dependencies, and the bootstrap class loader. If a class comes from a JAR in the MPS/lib folder (a bootstrap-loaded class), you practically can\u2019t load another version of it. They also have different life cycles.</p> <p>Module class loaders can reload classes after rebuilding and are resilient toward hot reloading. IDEA plugin class loaders are just for the installed plugins and don\u2019t know what to do if a class needs reloading during runtime in the past. New versions of the IntelliJ platform know how to reload classes, but now we\u2019re within the MPS\u2018 implementation.</p> <p>The IDEA plugin classloaders load JARs from the /plugins/&lt;plugin-name&gt;/lib directory. Jars from the /lib directory of the RCP are loaded from the root class loader. For your RCP, you usually don\u2019t want to put anything there. Code inside an IDEA plugin classloader may not access classes from module class loaders but vice versa is fine If you pass a module-loaded class to an IDEA plugin-loaded class and reload the module-loaded class, and then try to access the stale class, you might get a ClassNotFoundException. If you register a class in the plugin.xml, you should make sure it can be loaded from the IDEA plugin classloader. To do so, add its JAR to the /lib folder of your IntelliJ-plugin.</p> location description Java class MPS/lib root class loader,boostrap class loader com.intellij.util.lang.UrlClassLoader /plugins//lib IDEA plugin class loader com.intellij.ide.plugins.cl.PluginClassLoader any mps module with a java facet module class loader jetbrains.mps.classloading.ModuleClassLoader","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#how-to-use-java-classes-shipped-in-mps-plugins","title":"How to use Java classes shipped in MPS plugins","text":"<p>For this example, assume that you want to use classes from the git4idea plugin inside your code.</p>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#solution-old","title":"Solution (old)","text":"<ol> <li>Create a solution MySolution.</li> <li>Create a model ending with \u201c.plugin,\u201d for example MySolution.plugin.</li> <li>Add the language jetbrains.mps.lang.plugin.standalone to both the MySolution.plugin model and the MySolution solution.</li> <li>Create a StandalonePluginDescriptor in the model MySolution.plugin.</li> <li>Add the MySolution to a build model named MySolution.build.</li> <li>Create an idea plugin with id MySolution.IdeaPlugin.</li> <li>Add MySolution.build to the idea plugin MySolution.IdeaPlugin content.</li> <li>Add the dependency on git4idea to MySolution.IdeaPlugin dependencies.</li> <li>Execute the build script.</li> <li>In properties of solution MySolution, on the Facets tab, select Idea Plugin.</li> <li>In the newly appearing Idea Plugin tab, set the plugin ID to MySolution.IdeaPlugin.</li> <li>Restart MPS.</li> </ol> <p>Now the classes within git4idea are available within MySolution.</p> <p>Attention: MPS IDE won\u2019t build the code within solution MySolution anymore. Run the build script to activate any changes.</p>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#solution-new","title":"Solution (new)","text":"<p>You can find an example here.</p> <ol> <li>Create a solution git4idea.withJavaFacet.</li> <li>Edit the created .msd file and make the following modifications: <pre><code>  &lt;solution&gt;\n    ...\n  &lt;models&gt;\n&lt;modelRoot contentPath=\"${module}\" type=\"default\"&gt;\n&lt;sourceRoot location=\"models\" /&gt;\n&lt;/modelRoot&gt;\n&lt;modelRoot contentPath=\"${mps_home}/plugins/git4idea/lib\" type=\"java_classes\"&gt;\n&lt;sourceRoot location=\"git4idea-rt.jar\" /&gt;\n&lt;sourceRoot location=\"git4idea.jar\" /&gt;\n&lt;/modelRoot&gt;\n&lt;/models&gt;\n&lt;facets&gt;\n&lt;facet type=\"java\" languageLevel=\"JAVA_8\"&gt;\n&lt;classes generated=\"true\" path=\"${module}/classes_gen\" /&gt;\n&lt;/facet&gt;\n&lt;facet pluginId=\"Git4Idea\" type=\"ideaPlugin\" /&gt;\n&lt;/facets&gt;\n&lt;stubModelEntries&gt;\n&lt;stubModelEntry path=\"${mps_home}/plugins/git4idea/lib/git4idea-rt.jar\" /&gt;\n&lt;stubModelEntry path=\"${mps_home}/plugins/git4idea/lib/git4idea.jar\" /&gt;\n&lt;/stubModelEntries&gt;\n&lt;sourcePath /&gt;\n&lt;dependencies&gt;\n    ...\n  &lt;/dependencies&gt;\n    ...\n&lt;/solution&gt;\n</code></pre></li> </ol> <p>The JAR files are directly referenced from the MPS plugins folder. The JARs are then loaded as part of the Git4Idea facet.</p>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#classloading-issues","title":"Classloading issues","text":"<p>Sometimes you might get conflicts with existing libraries that MPS already ships. For instance, while using the <code>SAXBuilder</code>. In these cases, you will get a class version exception or similar. As a workaround, you can set the classloader and the current thread while instantiating such classes:</p> <pre><code>class ClassLoading {\nvoid setClassLoader() {\nClassLoader cl = Thread.currentThread().getContextClassLoader();\ntry {\nThread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\nSAXBuilder sax = new SAXBuilder();\nreturn sax.build(f);\n} finally {\nThread.currentThread().setContextClassLoader(cl);\n}\n}   }\n</code></pre>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/classloading/#questions","title":"Questions","text":"<p>How can you load resources from modules?</p> <ul> <li>Adding resources to MPS modules(Specific Languages\u2019 blog)</li> </ul> <p>This prevents the exception but make sure to set the class loader back when you finish. Calling things written in MPS like behavior methods when the class loader changes is also likely to not work and gives you all kinds of strange exceptions.</p> <ul> <li>Making Apache POI work with MPS 2020.3: solving class loader hell(Specific Languages\u2019 blog)</li> <li>A weird ClassCastException(Specific Languages\u2019 blog)</li> </ul>","tags":["internals","plugins","java_integration"]},{"location":"mps_internal/dependencies/","title":"Dependencies","text":"<p>Some sections on this page were written a few years ago where an older MPS version was used. Please report anything that isn\u2019t true anymore.</p> <p>The number of languages can be important: many small languages are hard to maintain while big languages take a long time to build in the IDE. Many dependencies can create cycles which are described later.</p> <p>By default, you can only reference nodes present in the current model. Dependencies add other models and modules that you can reference from the current model.</p> <p>Models listed as dependencies of Model \\(A\\) need to be contained within modules listed in the dependencies (including transitive entries) of the module containing this model. Example:</p> <p></p> <p>You can\u2019t mark a model internal and hide it from outside access.</p>"},{"location":"mps_internal/dependencies/#export-flag","title":"Export flag","text":"<p>It exports a Module Dependency again to be used by modules depending on this module. Example:</p> <p></p>"},{"location":"mps_internal/dependencies/#scope","title":"Scope","text":"<p>Default Scope is available for all module types.</p> <p>Extends Scope is a superset of Default Scope, for example, you never need to have both a Default Scope and an Extends Scope dependency on another module.</p>"},{"location":"mps_internal/dependencies/#extends-scope-for-languages","title":"Extends scope for languages","text":"<p>LanguageB (containing ConceptB) must extend LanguageA (containing ConceptA and ConceptInterfaceA) if and only if</p> <p></p> <p>Another case is if LanguageB defines a generator outputting ConceptA and LanguageA has a runtime solution.</p> <p>LanguageB shouldn\u2019t extend LanguageA (but needs a Default Scope dependency) if</p> <p></p> <p>LanguageB can\u2019t define</p> <p></p> <p>To be precise, it is possible to remove all errors flagged on behaviors and constraints in LanguageB. However, they aren\u2019t taken into account for ConceptA.</p>"},{"location":"mps_internal/dependencies/#extends-scope-for-generators","title":"Extends scope for generators","text":"<p>GeneratorB (inside LanguageB, and containing ConceptB) must extend GeneratorA (inside LanguageA, and containing ConceptA), if and only if GeneratorB\u2026</p> <p></p>"},{"location":"mps_internal/dependencies/#implicit-dependencies","title":"Implicit dependencies","text":"<p>MPS adds some dependencies implicitly without listing them in the corresponding dialog.</p> <p>Warning: even if the dependencies described below are established implicitly, they aren\u2019t taken into account in every aspect of MPS. So if an error occurs, make sure you didn\u2019t rely on some implicit dependency. If in doubt, make the dependency explicit.</p>"},{"location":"mps_internal/dependencies/#implicit-dependencies-inherited-by-a-generator-from-its-language","title":"Implicit dependencies inherited by a generator from its language","text":"<p>A Generator inherits some dependencies from the language where it\u2019s defined in:</p> <ul> <li>The language\u2019s runtime solutions are added to the generator module dependencies.</li> <li>The language\u2019s module is added to the generator module dependencies.</li> <li>The language is added to the generator Used languages.</li> </ul> <p>Except in the case of generating a concept of a language that has a runtime solution, there\u2019s no requirement on the language\u2019s dependencies or Used Languages stemming from the generator.</p>"},{"location":"mps_internal/dependencies/#implicit-exports-of-used-language-and-language-structure-aspect","title":"Implicit exports of used language and language structure aspect","text":"<p>Both a Used Language and the language structure aspect implicitly make it possible to access the language\u2019s behavior methods. However, they don\u2019t export the complete behavior aspect again. For example, a Base Language class contained in the behavior Aspect isn\u2019t visible.</p>"},{"location":"mps_internal/dependencies/#implicit-exports-of-runtime-language-settings","title":"Implicit exports of runtime language settings","text":"<p>Runtime solutions are</p> <ul> <li>implicitly loaded into the Java classpath of any module using this language.</li> <li>implicitly added to the Dependencies of the Generator contained in this language.</li> </ul> <p>Accessory Models are</p> <ul> <li>implicitly loaded into the dependencies of any model using this language.</li> </ul> <p>Accessory Models aren\u2019t designed to keep any classes. This is design-only information. They shouldn\u2019t affect the Java classpath anyhow.</p> <p>Neither runtime solutions nor accessory models constitute a dependency from the language to the referenced solution or model.</p>"},{"location":"mps_internal/dependencies/#cyclic-dependencies","title":"Cyclic dependencies","text":"<p>Cyclic dependencies between modules should be avoided in general. They tend to render generation orders and other behavior non-deterministic. Languages are explicitly checked not to have a cyclic Extends Scope dependency. Cycles between models in the same module are fine. Starting with MPS 2021.1, there\u2019s a higher chance that you could run into troubles with cyclic dependencies. The reason is the new Javax compiler that doesn\u2019t act as forgiving as the earlier one (ECJ).</p> <p>Distinctive cases are runtime solutions, accessory models, and utility models.</p> <p>In contrast to runtime solutions, utility models are used while accessing behavior or running a generator. Code within runtime solutions is used after the generator ran from the generated code. Thus, a runtime solution shouldn\u2019t use or reference the language it is referenced from. A utility model can use or reference the language it is referenced from.</p> <p>Accessory models can use or reference the language they\u2019re referenced from.</p> <p>For build scripts there\u2019s a flag that allows bootstrap dependencies. More information can be found in section MPS Settings of the build language documentation. </p>"},{"location":"mps_internal/editor_development/","title":"Editor development","text":"","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#terminology","title":"Terminology","text":"<ul> <li>edited node: the (root) node that the editor component was created for</li> <li>cell: the MPS editor consists of cells which themselves can contain other cells or UI elements like texts or buttons.</li> <li>root cell: the topmost cell of the editor component</li> <li>big cell: a cell is big if it\u2019s the top-most cell available in the editor for an associated node. Example: in the plus expression[left + right] the surrounding collection would be the big cell for the plus expression node.</li> </ul> <p>A few terms are also common in typography or are encountered in web development.</p> <ul> <li>padding-left/right/top/bottom: a floating point number, which specifies the padding of a text cell, that\u2019s how much space is between the cell\u2019s text and the cell\u2019s left and right sides, respectively.</li> <li>inset: the size of the elements\u2019 borders. It specifies the space that an element must leave at its edges. In some editor cells, it corresponds to the so-called padding of the editor cell.</li> <li>baseline: the line upon which most letters sit (other explanation).</li> <li>ascent: the recommended distance above the baseline for a single-spaced text (other explanation).</li> <li>descent: the recommended distance below the baseline for a single-spaced text (other explanation).</li> <li>gap: space between cells in a collection. There\u2019s a left and right gap. It is mainly influenced by the punctuation properties.</li> </ul> <p>Some tree structure terminology is explained in this graphic from towardsdatascience.com:</p> <p></p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcomponent","title":"EditorComponent","text":"<p>The MPS editor is implemented in the class EditorComponent. A few similar classes/interfaces exist: jetbrains.mps.openapi.editor.EditorComponent is the interface that provides the API for interacting with the editor component. jetbrains.mps.nodeEditor.EditorComponent contains the actual implementation. It has some subclasses where only jetbrains.mps.editor.HeadlessEditorComponent is interesting. This editor component was designed to be used in headless mode. Instances of this editor component can be created to render the node tree as a projection-specific text, render the node tree as a picture, call some editor-specific actions e.g. substitute and other use cases (source).</p> <p>When initializing an editor component, an editor configuration can be provided. The property notifies tells the editor component to send out EditorComponentCreateListener notifications. The property is set to true for MPS IDE editors and the inspector, and false for other scenarios. Some languages in  MPS-extensions need this flag to be true so that the languages get activated.</p> <p>The editor component itself extends JComponent, has antialiasing enabled and has a left margin of 15 pixels, and top margin of 10 pixels. The gap between the content and the scrollbars is 15 pixels. The editor contains objects of type EditorCell, arranged in a tree structure. You can right-click in the editor and select Language Debug \u2192 Show Cell in Explorer to show the currently selected cell in the cell explorer tool. The editor component is not only responsible for the content of the editor but also interacts with the type-checking thread, the highlighter (left highlighter column but also the message gutter on the right side).</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#left-highlighter","title":"Left highlighter","text":"<p>The left editor highlighter contains the buttons for folding editor cells and other buttons such as implements interface and overrides method. Two different ways of adding new information to the highlighter exist:</p> <ol> <li>Add a new checker to the highlighter (example). The checker can only contribute an icon and tooltip to the main column.</li> <li>Add a new column (example). It\u2019s more difficult to implement but the column can be fully customized.</li> </ol> <p></p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#updatesession","title":"UpdateSession","text":"<p>As the name already implies, the class updates the editor. It registers dependencies between nodes, registers big cells, updates child cells , and can return attributed cells. It also gives access to the EditorCellFactory through getCellFactory(). It can be accessed through Updater.getCurrentUpdateSession. Read the JavaDoc to understand how dependencies in the editor work.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcontext","title":"EditorContext","text":"<p>The editor context provides access to a few editor-related objects like the editor component, editor component state, selection manager, context assistant manager and the editor panel manager.</p> <p>The EditorContext gets destroyed on editor re-layout and can be used as a key in an editor cache.</p> <ul> <li>getRepository(): returns an object of type SRepository</li> <li>getSelectedNode(): returns the currently selected node in the editor</li> <li>selectWRTFocusPolicy sets the focus for a cell or node based on its focus policy defined in the attracts focus item in the common section in the inspector of the editor (wrt stands for \u201cwith respect to\u201d). </li> <li>select: selects the node in the editor</li> <li>getSelectedCell(): returns the selected cell in the editor component</li> <li>flushEvents(): processes all pending model events such as property changes and adding/removing children. This method is called at the start of the selectX methods and sometimes has to be called when not all changes to the model are visible.</li> <li>getContextCell(): returns the cell of runWithContextCell or the current select cell</li> <li>getSelectionManager(): returns the class that\u2019s responsible for handling editor selections</li> <li>getEditorPanelManager(): returns a class that can open MPS editors for nodes through openEditor(node)</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcell","title":"EditorCell","text":"<p>An EditorCell is a rectangle that has a position(x and y) and a dimension (width and height) that can draw anything in the editor (overwrite paintContent). To request a re-layout of the cell, call requestRelayout or call relayout to re-layout it directly. Editor cells support saving additional information (user objects) by calling the methods putUserObject(key, value) and getUserObject(). Cell actions for action maps.</p> <p>To manually set the style of a cell, call <code>cell.getStyle().set(attribute,value)</code>. Warnings, errors, and other messages are also directly attached to cells. They can be accessed through getMessages. The resulting list is sorted from less important to the most important messages, so the most important messages are appended to the end of this list. The substitution of nodes can be influenced by getSubstituteInfo and setSubstituteInfo. This can be useful, for example, in tables in  MPS-extensions where you might want to customize the behavior.</p> <p>When a node is copied to the clipboard, the node itself and a textual representation are copied. The method renderText() is used for the latter case as it renders the cell and its descendants as text.</p> <p>The EditorCellContext can be modified by calling getCellContext and setReferenceCell. The first method returns non-null values for any big cell and also for any non-big cell if the context was changed by its parent (e.g. parent collection cell pushes down some additional hints) The CellInfo instance can be used to remember the cell to find it later in (another instance of) the editor.</p> <p>When text is entered next to a cell (side transformation), a new EditorCell_StHint is added to the editor. It can be accessed through <code>EditorCell_STHint.getSTHintCell(node, editorComponent</code>). The information about the side and cell id of the hint cell is saved in a sideTransformInfo attribute.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#custom-cells","title":"Custom cells","text":"<p>Extend one of the existing EditorCell implementations like EditorCell_Collection or EditorCell_Constant to use as the basis for the new cell. Override the paintContent method, to draw custom stuff in the editor (e.g. EditorCell_DropDown in  MPS-extensions). If you need to do custom re-layouting, you can override relayoutImpl from EditorCell_Basic, for example:</p> <pre><code>@Override\nprotected void relayoutImpl() {\nmyWidth = myImages.getHeight();\nmyHeight = myImages.getWidth();\n}\n</code></pre>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#manipulationtraversal","title":"Manipulation/traversal","text":"<ul> <li>CellTraversalUtil: navigation of the editor cell tree. The method iterateTree returns an iterator, that can be used to iterate through a tree.</li> <li>CellFinderUtil</li> <li>CellFinder</li> <li>EditorUtil in  MPS-extensions.</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#folding","title":"Folding","text":"<p>Code folding mainly affects cells of type EditorCell_Collection. Call <code>collection.fold()</code> to fold the collection and <code>collection.unfold()</code> to unfold it. The position of the folded cells will stay the same in the folded state and will be recalculated when the collection is unfolded. When a cell is folded, it\u2019s in a collapsed state. To get the folded collection for a child cell, call <code>CellTraversalUtil.getFoldedParent</code>, to check if it\u2019s folded, call <code>CellTraversalUtil.isCellUnderFoldedCollection</code>.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#celllayout","title":"CellLayout","text":"<p>The celllayout language in  MPS-extensions has its own layout engine and replaces the MPS layout engine when styles of the languages are used. If you want to understand the first language, it\u2019s recommended to study the MPS implementations of the different layouts first. The different layouts are described in the MPS documentation. What are the advantages of the cell layout language concerning the MPS layouts?</p> <p>Layouting happens from the root to the leaves. That means, children are asked for their preferred/min/max size, but the parent sets the size and the child has to fit into that size.</p> <p>This gives more control over the resulting layout, such as:</p> <ul> <li>Richtext (or any indent layout) can be wrapped to fit into the size of   a table column. Indent layout always wraps at the right   margin line.</li> <li>making a horizontal line as wide as the cell above/below or as wide as the page</li> <li>having additional cells on the right of a rich text without them being   pushed over the right margin (the text wraps earlier).</li> <li>In a diagram, the content of a box can fit to the size of the box.   This is especially useful if sub-diagrams exist in the box. In the past,   this was only possible with some ugly hacks.</li> </ul> <p>A CSS-like box model can be used for setting border sizes and margins on cells and respecting them in the layout. MPS by default allows only borders of size 1.</p> <p>This framework is compatible with the existing layouts in MPS. That means, implementations for horizontal, vertical, vertical-grid, and indent layouts exist, that support this new architecture. You don\u2019t need to change anything, and you can still use the MPS editor language.</p> <p>You can also have custom layouts based on the default MPS layout architecture. This framework can handle them in a parent cell (for example margin comments) or in a child cell (e.g. math).</p> <p><sub>contributed by: @slisson<sub>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editorcellcontext","title":"EditorCellContext","text":"<p>The editor cell context contains the used editor hints, as well as optional information about the property edited by the cell. It also contains the node location in the tree. It is used to specify the location for both transformations and substitutions. Usually, the same node is transformed and substituted, but when creating a menu for an empty cell, the transformations are collected for the parent while substitutions are collected for the (non-existent) child.</p> <p>The EditorCellContext gets destroyed on editor re-layout but is recreated and can be used as a key in an editor cache.</p> <p>The class EditorCellFactory is also used to create new editor cells and manipulate the cell context. Read its JavaDoc to understand more about its methods. To access the EditorCellContext through the EditorContext call</p> <pre><code>editorContext.getEditorComponent().getUpdater().getCurrentUpdateSession().getCellFactory().getCellContext()\n</code></pre>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#selection","title":"Selection","text":"<p>The selection manager handles the selection stack. When extending the selection in the editor, a new selection object is pushed onto the stack. When shrinking the selection, the selection is removed (pop selection) from the stack. The deepest selection refers to the top of the stack. To get the current selection, call getSelection, to unselect everything call clearSelection. A few different setSelection methods exist that are explained in the JavaDoc that work with nodes or cells. A selection contains the following information and methods:</p> <ul> <li>the selection info (getSelectionInfo()) that is persisted and is used to restore the selection when the editor is reopened.</li> <li>canExecuteAction and executeAction to execute an action for the selected cells. The available actions are listed in the enum CellActionType. The different types are implemented as actions in plugin solutions, e.g., the action SelectLocalHome calls <code>editorComponent.getSelectionManager().getSelection().executeAction(CellActionType.SELECT_LOCAL_HOME)</code>.</li> </ul> <p>A few built-in selections exist:</p> <ul> <li>EditorCellLabelSelection: a selection for EditorCell_Label cells, that supports ranges. A trivial selection in this context is a selection instance where the start equals the end of the selection.</li> <li>EditorCellSelection: a selection of a single editor cell. The caret position is also saved in the selection.</li> <li>NodeRangeSelection: a selection from a first node to a second one. </li> </ul> <p>In  MPS-extensions there are some more selections:</p> <ul> <li>LinearSelection: a selection that is used for the mouse selection language </li> <li>MultilineSelection: a selection used in the multiline language</li> <li>RichtextSelection: a selection used in the richtext language</li> <li>TableRangeSelection: for table selection from a start column/row to an end column/row.</li> <li>GraphSelection: a selection used inside diagrams</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#editor-extensions","title":"Editor extensions","text":"<p>The editor can be enhanced throw editor extensions. Implement the class EditorExtensions and register it through a project plugin. An example of the mouse listener plugin:</p> <pre><code>project plugin MouseListenerPlugin {\nprivate final EditorExtension selectionListener = new EditorExtension() {\n@Override\npublic boolean isApplicable(@NotNull() EditorComponent p0) {\ntrue;\n}\n@Override\npublic void install(@NotNull() EditorComponent editorComponent) {\nDragSelectionMouseListener.getOrCreateInstance(((EditorComponent) editorComponent)).install();\n}\n@Override\npublic void uninstall(@NotNull() EditorComponent editorComponent) {\nDragSelectionMouseListener.getInstance(((EditorComponent) editorComponent)).?uninstall();\n}\n};\ninit(project)-&gt;void {\nEditorExtension extension = this.selectionListener;\nProjectHelper.toIdeaProject(project).?getComponent(EditorExtensionRegistry.class).?registerExtension(extension);\n}\ndispose(project)-&gt;void {\nDragSelectionMouseListener.uninstallAll();\nEditorExtension extension = this.selectionListener;\nProjectHelper.toIdeaProject(project).?getComponent(EditorExtensionRegistry.class).?unregisterExtension(extension);\n}\n}\n</code></pre> <p>In this example, a new mouse and mouse motion listener are registered/unregistered:</p> <pre><code>public void install() { getEditorComponent().addMouseListener(this); getEditorComponent().addMouseMotionListener(this); } public void uninstall() { getEditorComponent().removeMouseListener(this); getEditorComponent().removeMouseMotionListener(this); instances.removeKey(getEditorComponent()); }\n</code></pre>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#caching","title":"Caching","text":"<p>When possible, try to cache objects/calculations. Depending on the type of extension, the editor component, a node or EditorCellContext can be used, for example, as the keys in a map that represents the cache. You can use a weak hash map as the backing data structure (Guide to WeakHashMap in Java): <code>map&lt;EditorComponent, YourListener&gt; instances = new weakHashMap&lt;EditorComponent, YourListener&gt;;</code> To let the garbage collector delete a referenced editor component in the listener when it is not needed anymore, and store it in a weak reference: <code>myEditorComponent = new WeakReference&lt;EditorComponent&gt;(editorComponent)</code></p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#disposing-of-resources","title":"Disposing of resources","text":"<p>Register a dispose-listener for the editor component and execute your uninstall method in the body:</p> <pre><code>editorComponent.addDisposeListener(new EditorComponent.EditorDisposeListener() {\npublic void editorWillBeDisposed(EditorComponent editorComponent) {\neditorComponent.removeDisposeListener(this);\nuninstall();\n}\n})\n</code></pre> <p>Make sure to also call it in the dispose method of your application/project plugin. Failing to dispose of the allocated resources can  lead to class reloading issues and memory leaks.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#painting","title":"Painting","text":"<p>EditorCell_Basic overwrites paintComponent and calls paintCell to paint the cell itself + paintDecorations to draw borders and messages in the editor. paintCell fills the background of the cell and paints the selection if necessary. Afterwards, the method paintContent is called which is the method that gets overridden most of the time. All the paintX methods have a Graphics object that can be cast to a Graphics2D object if necessary. The old documentation at Oracle is still a good starting point to learn more about 2d Graphics in Java. To find examples in MPS, search for global usages of the Graphics class.</p> <p>Editor components support additional painting through the methods addAdditionalPainter and removeAdditionalPainter. They allow registering/unregistering objects of class AdditionalPainter. The highlighting of the currently selected line and red highlighting of the breakpoint line is implemented that way.</p>","tags":["internals","ui"]},{"location":"mps_internal/editor_development/#additional-reference","title":"Additional reference","text":"<ul> <li>Editor language generation API</li> </ul>","tags":["internals","ui"]},{"location":"mps_internal/file_format/","title":"File format","text":"<p>A few different persistence formats can be selected when creating a new model (<code>Model</code> \u2192 <code>storage format</code>):</p> <ul> <li>Pre-installed XML-based format     Models are described in an XML format. Git changes are collected per model. It is the default format. There seems to be support for saving user objects (strings, node ids, etc. but not serializable objects) but this option just doesn\u2019t seem to be activated. User objects are therefore lost when existing MPS.</li> <li>Pre-installed XML-based File-Per-Root format (.mpsr)    Models are described in an XML format. Git changes are collected per root node. Some file-per-root specific bugs exist.</li> <li>Pre-installed Binary-Format (.mpb)     Models are saved in a binary format. It can save user objects and should also be able to save serializable objects but this might not be working. The information is saved directly in the model file.</li> </ul> <p>The persistence format was improved over the years (v4 - v8). Version 9 is the current format.</p> <p>If you want to support a custom format, read the custom persistence chapter in the documentation.</p> <p>Here is a list of some other used file formats:</p> <ul> <li>languages (.mpl)</li> <li>solutions (.msd)</li> <li>models (.mps)</li> <li>devkit (.devkit)</li> <li>model headers (.model)</li> <li>java files (.java)</li> <li>kotlin files (.kt)</li> <li>kotlin modules (.kotlin)</li> <li>compile Java files (.class)</li> <li>old MPS projects (.mpr)</li> <li>old workspace format (.mws)</li> <li>standalone generators (.mpst)</li> <li>Java archives (.jar)</li> <li>IntelliJ modules (.iml)</li> <li>generation info files (trace.info)</li> </ul>"},{"location":"mps_internal/gui/","title":"IntelliJ UI","text":"<ul> <li>Fixing ugly trees(Specific Languages\u2019 blog)</li> <li>Centering dialogs(Specific Languages\u2019 blog)</li> </ul>","tags":["internals","ui","intellij"]},{"location":"mps_internal/gui/#swing-components","title":"Swing components","text":"<ul> <li>Use components from the IntelliJ platform. The   IntelliJ Platform Plugin SDK mentions some more components. Use the IntelliJ platform UI guidelines to create consistent and usable user interfaces.</li> <li>Capitalization: most of the short textual items (menus, buttons, labels, for example) should have headline capitalization. Capitalize all words except for common words with up to three letters (a, an, the, and, or, so, yet, etc.), that don\u2019t appear as the first or last word.   If the text isn\u2019t short, then you should use the capitalization used in ordinary prose (sentence capitalization) instead.</li> <li>Read the Swing tutorials to get a better understanding of the components.</li> </ul> <p>Where can you find an overview of the user interface?</p> <p>It can be found in the IntelliJ IDEA documentation. A more technical explanation can be found in the IntelliJ Platform Plugin SDK.</p> <p>What exactly is an MPS action? How do they work?</p> <p>The MPS actions compile down to IntelliJ platform actions, so you actually see actions from MPS and the IntelliJ platform (e.g. Close Floating Navigation Bar). Most icon buttons like the buttons in the upper right corner, or the image buttons in the MPS tools are also IntelliJ buttons.</p> <p>Actions that can be enabled or disabled are of type ToggleAction. They are used, for example, in KernelF in the run menu. There is a deprecated concept addJavaAction which lets you add IntelliJ actions when referencing actions in an MPS plugin.</p> <p>To disable actions, use the actionsfilter language. You can modify the shortcuts of actions locally in Preferences-&gt;Keymap.</p> <p>How can I find the source of an action?</p> <p>There are a few different things that you could try:</p> <ol> <li>Guessing. If the caption contains, for example, the text \u201cClone\u201d, search for a root node that has the name Clone in it. Alternatively, you can try searching through the console: <code>#instances&lt;scope = global&gt;(ActionDeclaration).where({~it =&gt; it.caption.contains(\"Clone\"); })</code></li> <li>Search the MPS GitHub repository: https://github.com/JetBrains/MPS/search?q=clone+solution for commits or code mentioning your keywords. In this case, the action must be called \u201cCloneModule\u201d based on the first results.</li> <li>If you find a similar action in the same context menu, check the other actions/groups in the same module. In your case, you might have found the group SolutionRefactoring through the RenameModule action which contains your action.</li> </ol> <p>If the caption is not dynamic, number 1 usually works. If the action is located in the MPS.IDEA module, you will find it in the IntelliJ community sources.</p> <p>How can you show modal dialogs for inputting text?</p> <p>Use the class com.intellij.openapi.ui.Messages.</p> <p>How do you add messages to the right side of the window?</p> <p>In IntelliJ IDEA it is called error stripe, in MPS MessagesGutter: <pre><code>jetbrains.mps.nodeEditor.EditorComponent component = ((EditorComponent) editorContext.getEditorComponent()); NodeHighlightManager highlightManager = component.getHighlightManager();\nhighlightManager.mark(message);\n</code></pre></p> <p>How can you add things to the left of the editor? (examples: breakpoints, go subclasses)</p> <p>The component is called LeftEditorHighlighter. A checker has to be implemented that can show messages in this component (example: OverrideMethodsChecker).</p> <p>How do you add an icon to the status bar?</p> <p>Have a look at the implementation of the transient models widget and its initialization in TransientModelsNotification.</p> <p>What parts of the IntelliJ Platform SDK can\u2019t be used in MPS because they are not supported?</p> <p>Everything related to text files: Documents, PSI files, Templates, QuickDoc, IDE Features Trainer, CodeSmellDetector and Custom Language Support.</p> <p>How can you have clickable icons in the left editor margin?</p> <p>Clickable icons in the left editor margin(Specific Languages\u2019 blog)</p> <p>Are there alternatives to message boxes?</p> <p>Use notification balloons instead of message boxes(Specific Languages\u2019 blog)</p> <p>What IDEA UI elements are available?</p> <p>Polished UI for free: IDEA UI components(Specific Languages\u2019 blog)</p> <p>How do you create menu items with checkboxes or combo boxes and make the actions findable?</p> <ul> <li>Extended actions: Checkboxes(Specific Languages\u2019 blog)</li> <li>Extended actions: Combo boxes(Specific Languages\u2019 blog)</li> <li>Extended actions: Making actions findable(Specific Languages\u2019 blog)</li> </ul> <p>How can you retrieve all opened windows in split screen mode?</p> <pre><code>FileEditorManagerEx.getInstanceEx(ProjectHelper.toIdeaProject(#project)).getSplitters().getWindows()\n</code></pre>","tags":["internals","ui","intellij"]},{"location":"mps_internal/intellij_integration/","title":"IntelliJ integration","text":"<p>The different plugins of MPS are declared using a plugin configuration file. The functionality is split into plugin components. <code>application-components</code> are activated when MPS starts, <code>project-components</code> are activated when a project is opened.</p> <p>MPS uses existing IntelliJ extension points. For a list of all extension points and listeners have a look at Extension Point and Listener List | IntelliJ Platform Plugin SDK. New extension points are declared in a section extensionPoints where a qualified name and the interface to implement have to be provided. The interface has to contain an extension point name declaration. Example:</p> <pre><code>public interface IntentionActionsProvider {\nExtensionPointName&lt;IntentionActionsProvider&gt; EP_NAME = new ExtensionPointName&lt;&gt;(\"com.intellij.mps.IntentionActionsProvider\");\n@NotNull\nAnAction[] getIntentionActions(@NotNull IntentionExecutable intention);\n}\n</code></pre> <p>The extensions can be registered in an extensions block in the plugin.xml. The default extension namespace has to be <code>com.intellij</code> (example). The extension can also have attributes (example).</p> <p>Link to different MPS plugin.xml files:</p> <ul> <li>Execution Api and Utility Languages</li> <li>Execution configurations</li> <li>MPS Ant Integration: Make</li> <li>MPS Build Language</li> <li>MPS Context Actions Tool</li> <li>MPS Diagram Editor</li> <li>Make</li> <li>MPS Tooltips</li> <li>JetBrains MPS Integration</li> <li>Migration Support (+plugin base)</li> <li>Debugger API for MPS</li> <li>Java Debugger for MPS</li> <li>JetPad</li> <li>Idea Integration for MPS</li> <li>MPS Java Integration(+Java platform)</li> <li>MPS console(+actions)</li> <li>Languages DevKit</li> <li>Memory Tool</li> <li>Model Checker</li> <li>MPS Version Control Support</li> <li>IDEA Core(+other files)</li> </ul> <p>Included in other plugins:</p> <ul> <li>editor actions</li> <li>editor</li> <li>Java platform actions</li> <li>MPSCore</li> <li>PlatformActions</li> </ul> <p>All the plugins use the charisma reporter for error reporting. This allows reporting errors to YouTrack. Another notable extension is the declaration of the MPS language library. For example: <pre><code>&lt;mps.LanguageLibrary dir=\"/languages\" /&gt;\n</code></pre></p> <p>It tells MPS where in the plugin folder the compiled MPS languages can be found.</p>","tags":["internals","intellij"]},{"location":"mps_internal/intellij_sdk/","title":"IntelliJ SDK","text":"","tags":["internals","intellij"]},{"location":"mps_internal/intellij_sdk/#existing-documentation","title":"Existing documentation","text":"<p>The best place to learn more about the IntelliJ platform is the IntelliJ Platform SDK documentation. Two additional resources are also helpful if you want to understand how IntelliJ plugins are written (Introduction to creating IntelliJ IDEA plugins), and how the IDEA threading model works(Advanced guide to creating IntelliJ IDEA plugins).</p> <p>Some parts of MPS are different to the IntelliJ platforms and therefore those chapters are not relevant: PSI + all text editor-specific code and custom languages support</p> <p>Where can you find a list of all IntelliJ registry entries?</p> <p>They can be found in registry.properties.</p> <p>How can I access the recent projects list more easily?</p> <ul> <li>A better \u201cRecent Projects\u201d menu(Specific Languages\u2019 blog)</li> </ul> <p>How can I create a class/component that is loaded on demand?</p> <p>Create a lightweight service using the @Service annotation. An example service MyService could then be accessed through <code>ApplicationManager.getApplication().getService(MyService.class)</code></p> <p>How do you add a custom action to a toolbar?</p> <p>It is assumed that this is a toolbar group that is populated with custom actions. There is an <code>addJavaAction</code> that can be used in the ActionGroupDeclaration (example from IETS3) which lets you add objects of type AnAction like the ToggleAction in the example. You can just circumvent the MPS ActionDeclarations this way.</p> <p>For custom swing components, it is enough to extend AnAction and implement CustomComponentAction. Before implementing this, search the IntelliJ/MPS code base for such classes. There are, for example, TextFieldAction and JButtonAction. Search for [Button|Text|..]Action in MPS to find such instances and look for existing components in the UI that look like the components that you need.</p> <p>The general documentation for IntelliJ actions is located at Actions | IntelliJ Platform Plugin SDK</p> <p>How to make messages in the messages view clickable?</p> <p>Note: technically, the messages view is unrelated to the IntelliJ platform but rather an MPS tool. The message statement has a throwable parameter that can be used to attach exceptions. In the generator, there is <code>genContext.show error &lt;messageText&gt; -&gt; &lt;node&gt;</code> which takes a message and a node. In MPS 2022.3 there is also support for a <code>hintObject</code> in the message statement so that you can jump directly to a node, model, or module.</p>","tags":["internals","intellij"]},{"location":"mps_internal/intellij_sdk/#message-bus-and-listeners-message-interface","title":"Message bus and listeners (message interface)","text":"<p>Reference:</p> <ul> <li>IntelliJ Messaging Infrastructure</li> <li>Declarative registration of Plugin Listeners</li> </ul> <p>A message bus can be used to listen for IntelliJ or custom events and also sending out events. You connect and subscribe to different topics through listeners. You don\u2019t have to store and remove each listener you added, you can just disconnect from the bus. Topics can be found on the MPS console with the following code:</p> <pre><code>#nodes&lt;scope = global&gt;.ofConcept&lt;StaticFieldDeclaration&gt;.where(\n{~it =&gt; it.type.isInstanceOf(ClassifierType) &amp;&amp; it.type:ClassifierType.?classifier.?name.?equals(\"Topic\"); }\n)\n</code></pre> <p>Example:</p> <pre><code>class MessageBusExample {\nvoid connect() {\nthis.busConnection = ideaProject.getMessageBus().connect();\nFileEditorManagerListener myListener = new FileEditorManagerListener() { // implement listener (1)\n@Override\npublic void selectionChanged(@NotNull() FileEditoManagerEvent event) {\n// code\n}\n};\nthis.busConnection.subscribe(FileEditorManagerListener.FILE_EDITOR.MANAGER, myListener);       }\n}\n</code></pre> <ol> <li>You have to implement <code>selectionChanged</code> for this listener.</li> </ol>","tags":["internals","intellij"]},{"location":"mps_internal/java_design_patterns_in_mps_sources/","title":"Java design patterns in the MPS sources","text":"<p>This page lists at most three examples per Java design pattern in the MPS source code. The headers link to explanations and examples for the corresponding design patterns in the Java world.</p>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#creational-patterns","title":"Creational Patterns","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#abstract-factory","title":"Abstract Factory","text":"<ul> <li>AbstractPluginFactory</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#builder","title":"Builder","text":"<ul> <li>Builders language</li> <li>AbstractEditorBuilder</li> <li>EditorConfigurationBuilder.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#factory-method","title":"Factory method","text":"<ul> <li>AbstractContainerTest.java</li> <li>EditorCellFactory.java</li> <li>Custom cell | MPS documentation</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#prototype","title":"Prototype","text":"<ul> <li>Copyable.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#singleton","title":"Singleton","text":"<ul> <li>EditorSettings.java</li> <li>PersistenceFacade.java</li> <li>GlobalIconManager.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#structural-patterns","title":"Structural Patterns","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#adapter","title":"Adapter","text":"<ul> <li>GenerationTaskAdapter.java</li> <li>GeneratorLoggerAdapter.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#bridge","title":"Bridge","text":"<ul> <li>NavigationSupportImpl</li> <li>UpdateSessionImpl</li> <li>TextBuilderImpl.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#composite","title":"Composite","text":"<ul> <li>CompositeScope.java</li> <li>CompositeSubstituteInfo.java</li> <li>CompositeResult.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#decorator","title":"Decorator","text":"<ul> <li>ProgressMonitorDecorator</li> <li>NodeSubstituteInfoFilterDecorator.java</li> <li>ConstraintsFilteringSubstituteMenuPartDecorator.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#facade","title":"Facade","text":"<ul> <li>GenerationFacade.java</li> <li>ModuleRepositoryFacade.java</li> <li>FindUsagesFacade.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#flyweight","title":"Flyweight","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#proxy","title":"Proxy","text":"<ul> <li>SubstituteItemProxy.java</li> <li>RunConfigurationProxy.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#behavioral-patterns","title":"Behavioral Patterns","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#chain-of-responsibility","title":"Chain of Responsibility","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#iterator","title":"Iterator","text":"<ul> <li>BreadthConceptHierarchyIterator.java</li> <li>DescendantsTreeIterator.java</li> <li>FilterIterator.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#memento","title":"Memento","text":"<ul> <li>Memento.java</li> <li>MappingsMemento.java</li> <li>BaseNodeEditor.java#BaseEditorState</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#state","title":"State","text":"<ul> <li>CaretState.java</li> <li>State.java</li> <li>CheckpointState.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#template-method","title":"Template method","text":""},{"location":"mps_internal/java_design_patterns_in_mps_sources/#command","title":"Command","text":"<ul> <li>Save and revert changes | MPS documentation </li> <li>SubstituteEquationOperation.java</li> <li>SNodeUndoableAction.java</li> <li>RestoreVirtualFileInstance.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#mediator","title":"Mediator","text":"<ul> <li>GenerationController.java</li> <li>ContextAssistantController.java</li> <li>MigrationScriptsController.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#observer","title":"Observer","text":"<ul> <li>Messaging Infrastructure | IntelliJ Platform Plugin SDK</li> <li>SModelListener.java</li> <li>ProjectManagerListener.java</li> <li>MPSTreeNodeListener.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#strategy","title":"Strategy","text":"<ul> <li>FromModulesListProjectStrategy.java</li> <li>FromProjectPathProjectStrategy.java</li> <li>FromDirWithModulesProjectStrategy.java</li> </ul>"},{"location":"mps_internal/java_design_patterns_in_mps_sources/#visitor","title":"Visitor","text":"<ul> <li>SModelEventVisitor.java</li> <li>IntentionsVisitor.java</li> <li>ModuleVisitor.java</li> </ul>"},{"location":"mps_internal/models/","title":"Model","text":"<p>UI: entry below module in the logical view. They may be nested in folders.</p> <ul> <li>Container for model contents limiting dependencies to other models.</li> <li>They are within the boundaries of the containing module.</li> </ul> <p>Models can be nested in folders. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation or any other aspect.</p>"},{"location":"mps_internal/models/#types-of-models","title":"Types of models","text":"<p>The IDE knows several types of models. They differ in their semantics and sometimes presentation. They don\u2019t differ from a technical point of view.</p>"},{"location":"mps_internal/models/#regular-models","title":"Regular models","text":"<p>UI: entry below solution in the logical view</p> <p>They contain root nodes with no specific semantics or presentation.</p>"},{"location":"mps_internal/models/#language-aspects","title":"Language aspects","text":"<p>UI: entry below language in the logical view</p> <p>Aspects are models within a language with a special meaning. They are recognized by their name.</p>"},{"location":"mps_internal/models/#plugin-aspect","title":"Plugin aspect","text":"<p>Although this aspect adheres to the plugin model naming convention, don\u2019t use it. Use it only to define MPS extension points (from language jetbrains.mps.lang.extension).</p>"},{"location":"mps_internal/models/#test-model","title":"Test model","text":"<p>UI: entry below solution in a specific folder named <code>tests</code> with a specific icon in the logical view</p> <p>A model containing tests. Defined by the @tests stereotype.</p>"},{"location":"mps_internal/models/#generator-model","title":"Generator model","text":"<p>UI: entry with a specific icon below generator in the logical view</p> <p>A model containing the generator, defined by the @generator stereotype.</p>"},{"location":"mps_internal/models/#transient-model","title":"Transient model","text":"<p>UI: last entry below project in the logical view</p> <p>Temporary models produced during generation, defined by @transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb stereotype.</p>"},{"location":"mps_internal/models/#accessories-model","title":"Accessories model","text":"<p>UI: entry below language in a specific folder named accessories in the logical view or entry below the solution in the logical view</p> <p>A model specially selected by a language. Nodes contained in these models are implicitly available on the Java classpath and the dependencies of any model using this language. A use case would be a default library of concept instances to be available at any place you use the Language.</p> <p>You can store accessory models in two places: either as an aspect of a language (recommended) or as a regular model below a solution. In both cases, the model needs to be added to the module runtime language settings.</p>"},{"location":"mps_internal/models/#utility-model","title":"Utility model","text":"<p>UI: entry below language in a special folder named util models in the logical view</p> <p>It includes code required in other parts of a language or generator. If, for example, the behavior method logic is too complex for inline implementation, or a generator needs to do complex model traversals. Create them as regular models within the language.</p>"},{"location":"mps_internal/models/#build-model","title":"Build model","text":"<p>UI: entry below a solution in the logical view</p> <p>It includes nodes from the build language.</p>"},{"location":"mps_internal/models/#mps-plugin-model","title":"MPS plugin model","text":"<p>UI: model within a solution in the logical view</p> <p>It includes MPS plugins. The model name needs to adhere to the naming convention \u00abmoduleName\u00bb.plugin.</p>"},{"location":"mps_internal/models/#model-stereotype","title":"Model stereotype","text":"<p>UI: attached to the model name, separated by @</p> <p>A model may have a stereotype. To change, add, or remove a stereotype, use Rename Model Refactoring in the context menu of a model.</p> <p>Using custom stereotypes interferes with lots of MPS internals and thus isn\u2019t advised to do.</p> <p>The IDE knows some predefined Stereotypes with specific meanings:</p> <ul> <li>@tests: Denotes test models.</li> <li>@generator: Denotes generator models.</li> <li>@transient\u00absomeNumber\u00bb or @\u00absomeNumber\u00bb: Denotes transient models.</li> </ul>"},{"location":"mps_internal/models/#model-settings","title":"Model settings","text":"<p>UI: context menu of a model, model properties</p> <p>For both dependencies and used languages, the settings of models only restrict the settings from the containing module.</p>"},{"location":"mps_internal/models/#dependencies-model-settings","title":"Dependencies model settings","text":"<p>UI: tab in the model properties dialog</p> <p>It lists other models this model contains references to.</p>"},{"location":"mps_internal/models/#used-languages-model-settings","title":"Used languages model settings","text":"<p>UI: tab in the model properties dialog</p> <p>It lists languages used in this Model. Any Used Language listed in a model, needs to be in the list of Used Languages of the containing module.</p>"},{"location":"mps_internal/models/#advanced-model-settings","title":"Advanced model settings","text":"<p>UI: tab in the model properties dialog</p> <p>It contains other settings for a model:</p> <ul> <li>languages engaged on generation: Generators contained in languages listed here execute on this model in any case.</li> </ul>"},{"location":"mps_internal/models/#build-language","title":"Build language","text":"<p>Abstracted Apache Ant files used to build and package MPS Modules outside the IDE. It\u2019s used in build models. MPS can execute them via the Run \u00abBuild Model name\u00bb context menu entry of the build model in the logical view.</p>"},{"location":"mps_internal/models/#dependencies","title":"Dependencies","text":"<p>UI: a section within the build model</p> <p>This is the scope import for all references to other build models. It provides access to resulting artifacts of other build models.</p>"},{"location":"mps_internal/models/#idea-plugin-dependencies","title":"IDEA plugin dependencies","text":"<p>UI: section project structure in Build Model, subsection idea plugin, subsection dependencies.</p> <p>It contains the contents of IDEA plugin.xml depends-tags.</p> <p>This plugin only loads if all dependencies listed here load before. The contents of dependencies are available for this IDEA plugin.</p>"},{"location":"mps_internal/models/#module-dependencies","title":"Module Dependencies","text":"<p>UI: section mps group in Build Model, subsection solution/module, inspector section dependencies</p> <p>It contains a copy of the relations of the described module.</p>"},{"location":"mps_internal/models/#runtime","title":"Runtime","text":"<p>It contains a copy of the module runtime language settings.</p>"},{"location":"mps_internal/models/#jars","title":"JARs","text":"<p>UI: section default layout in Build Model</p> <p>You have to include all jars included in any Java module settings somewhere in this section. .java files (from Java source paths) need to be compiled as Java sources inside the corresponding build script and manually included into the resulting build layout: corresponding .class files should be jared, .java files should be placed in the corresponding location if they are referenced by java_source_stub model root.</p>"},{"location":"mps_internal/mps_startup/","title":"What happens on MPS startup","text":"<p>This page looks behind the hood of the startup process of MPS 2021.1.4 and newer. For most parts, similar code will be executed for other MPS versions.</p> <p>The application starts with Launcher.java where it sets some IntelliJ-specific properties such as the file watcher path and the platform prefix, and collects the plugin paths when running MPS from sources. It then calls Main.kt where it sets some flags about the execution environment such as the headless mode or if the application is invoked from the command line. The system properties are also loaded and populated with data. The class loader is also loaded in BootstrapClassLoaderUtil#initClassLoader(). Afterwards, MainImpl.kt is looked up and executed. It mainly redirects the initialization of the application to the ApplicationLoader#initApplication method. The time from this method to <code>ApplicationLoader.run</code> is called app initialization. Here, the command line arguments are first processed: a special method looks for <code>-Dkey=value</code> program arguments and stores some of them in system properties. The GUI is also initialized in a task on the event dispatch thread and system fonts are loaded. Plugins are also initialized and loaded.</p> <p>MPS can be started from MPS itself through MPSEnvironment.java or IdeaEnvironment.java from outside. Both classes are initialized through EnvironmentConfig which lets you specify the plugins, macros, and libraries that should be loaded. In IdeaEnvironment#createIdeaApplication some IntelliJ specific properties are also set. Both environments can be used to manage MPS projects (creating, opening, and closing them).</p> <p>For the integration with the IntelliJ platform, MPSCoreComponents plays an important role: it contains references to the following core components:</p> <ul> <li>MPS platform with the base class PlatformBase</li> <li>PersistenceRegistry.java as the core component implementation of PersistenceFacade. The PersistenceFacade represents a singleton registry of models, model root factories, find usages and navigation participants.   It also provides a bunch of methods to transform strings to model refs/module refs/node ids and vice versa.</li> <li>LibraryInitializer.java which manages library contributions (loading, unloading, updating). It creates instances of SLibrary for each path RepositoryContributor#getPaths() returns. SLibrary tracks a path with modules inside. It listens to file system events and reloads modules from disk if necessary.  It is the layer between SRepository and SModule in the repository hierarchy (as well as the Project).   The repository consists of library modules, project modules, and several special modules.</li> <li>ClassLoaderManager.java which is responsible for loading classes within MPS.</li> </ul>"},{"location":"mps_internal/mps_startup/#mps-platform","title":"MPS platform","text":"<p>The MPS platform contains so-called component plugins that are registered through PlatformBase:</p> <ul> <li>MPSCore.java, the core MPS functionality layer</li> <li>MPSProjectValidation.java which provides validation code for project modules. It contains the following core checkers:<ul> <li>structure checker inspects the structure aspect for errors (e.g. missing reference, properties)</li> <li>model properties checker implemented in ModelValidator.java</li> <li>module checker which shows errors in the logical view</li> <li>constraints checker inspects parent/child, can be root/ancestor and property constraints</li> </ul> </li> <li>MPSMake.java which provides the components<ul> <li>MakeServiceComponent gives access to the active facility to perform project make</li> <li>FacetRegistry provides methods for registering/unregistering and looking up facades</li> </ul> </li> <li>MPSTypechecking which provides the components<ul> <li>TypecheckingFacadeComponent</li> <li>LanguageScopeFactory </li> <li>TypecheckingBackend.java which is used to install and uninstall TypecheckingProvider.</li> </ul> </li> <li>MPSTypesystem.java which provides the components<ul> <li>TypeChecker</li> <li>TypeContextManager, a deprecated class that shouldn\u2019t be used anymore (use TypecheckingFacade instead)</li> </ul> </li> <li>MPSGenerator which provides the components<ul> <li>ModelGenerationStatusManager which allows querying the generation status of models and listening to changes in the generated files through a ModelGenerationStatusListener.</li> <li>GenerationSettingsProvider manages the generation settings</li> <li>TraceRegistry, the entry component for the generator trace mechanism</li> </ul> </li> <li>MPSFindUsages which provides the components<ul> <li>FindUsagesFacade, an effective (usually index-based) implementation of find usages routines.</li> <li>FindersManager</li> </ul> </li> <li>MPSTextGenerator which provides the component <ul> <li>TextGenSettings, the settings that are used by text generation</li> </ul> </li> <li>MPSFeedbackPlugin which provides the component<ul> <li>FeedbackAspectRegistry which manages the descriptors of the feedback language aspect</li> </ul> </li> </ul>"},{"location":"mps_internal/mps_startup/#mpscore","title":"MPSCore","text":"<p>This class provides the following core components:</p> <ul> <li>LibraryInitializer which manages library contributions (loading, unloading, updating)</li> <li>PersistenceFacade which represents a singleton registry of models, model root factories, find usages and navigation participants</li> <li>ClassLoaderManager which is responsible for loading classes within MPS</li> <li>MPSModuleRepository is a repository with modules visible in MPS. It is used by the class ProjectRepository</li> <li>LanguageRegistry which manages languages and their generators</li> <li>ModelFactoryRegistry which   stores default associations between ModelFactory and DataSourceType (many-to-many mapping). Examples for DataSourceTypes are the bundles\u2019s data source types .mps, .model and .mpsr. The class also stores a mapping between model factory types and model factories which allows users to replace the bundled persistence we provide.</li> <li>SRepositoryRegistry which manages SRepository instances (they are storages for modules)</li> <li>FacetsFacade manages language facades</li> <li>PathMacros manages path variables and also some builtin macros such as USER_HOME, MODULE_DIR, PROJECT_DIR, APPLICATION_PLUGINS_DIR and MODULE_WORKING_DIR</li> <li>ExtensionRegistry which manages extensions populated by classes loaded from compiled and deployed modules</li> <li>ConceptRegistry manages concept descriptors</li> <li>DataSourceFactoryRuleService which is a service provider for defining own data source factories</li> <li>DescriptorIOFacade which returns DescriptorIO instances which are responsible for reading and writing descriptors to/from a file</li> <li>ModelsAutoImportsManager which manages AutoImportContributor. Classes that extend this class can automatically add languages to a model. For example: TestsModelAutoImports automatically adds the languages jetbrains.mps.lang.test and jetbrains.mps.baseLanguage.unitTest to test models</li> <li>VFSManager is an entry point to access various file system protocols available in MPS. More information about VFs can be found in Virtual File System - IntelliJ Platform Plugin SDK.</li> <li>ProjectManager manages MPS projects. Events send while opening, and closing a project can be received through a ProjectManagerListener.</li> </ul>"},{"location":"mps_internal/navigating_mps_source/","title":"Navigating the MPS sources","text":"<p>This page describes the folder structure of the MPS sources that can be checked out with Git from https://github.com/JetBrains/MPS. More information can be found in the readme of the repository.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#idea","title":".idea","text":"<p>The <code>artifacts</code> directory contains the artifact-related settings. More info can be found in Artifacts | IntelliJ IDEA. Artifacts in this project are the generated jar files such as <code>mps-core.jar</code> and <code>vcs-core.jar</code>:</p> <p></p> <p>The directory also contains settings for code styles, copyright info, and enabled inspections. The paths to the used libraries (*.jar) are also specified in the <code>libraries</code> subfolder. The run configurations, search scopes as well as many other IntelliJ-specific project settings,</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#mps","title":".mps","text":"<p>This folder also contains run configurations and scopes but also other settings:</p> <ul> <li>codeStyleSettings.xml: style settings used for Base Language (e.g. default field and parameter prefix)</li> <li>compiler.xml: the version of the Java compiler (currently: 11)</li> <li>encodings.xml: encoding of the files (should be: UTF-8)</li> <li>migration.xml: list of executed MPS migrations in the current project </li> <li>misc.xml: miscellaneous settings (e.g. settings of favorites manager)</li> <li>modules.xml: a list of modules of this project that are loaded in MPS</li> <li>vcs.xml: version control settings</li> <li>version.xml: project version (not used anymore)</li> <li>settings of different components (e.g. console history, messages view tool, project view)</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#bin","title":"bin","text":"<p>This folder contains executable files that are needed for the different operating systems (Windows, Mac, Linux). All of them use the executable fsnotifier to react to file system changes. OS-specific files:</p> <ul> <li> <p>Linux</p> <ul> <li>libdgbm: GNU dbm (\u2018gdbm\u2019) is a library of database functions that use extendible hashing and works similarly to the standard UNIX dbm function source</li> <li>restart.py: restarts MPS</li> </ul> </li> <li> <p>Mac</p> <ul> <li>libmacscreenmenu64.dylib: native access to the Apple menu bar.</li> <li>libnst64.dlib: native access to the Apple MacBook Pro Touch Bar. The library is called NST(NextStep Touch Bar).</li> <li>printenv: prints the environment variables</li> </ul> </li> <li> <p>Windows</p> <ul> <li>breakgen(64).dll: gracefully shut down a running process (not possible with Java).</li> <li>elevator.exe: sudo-like tool for windows to deal with UAC (source)</li> <li>IdeaWin32/64.dll: native file system functions</li> <li>launcher.exe: launches MPS</li> <li>restarter.exe: restarts MPS</li> <li>runnerw.exe: old library for Windows process management. Superseded by WinP.</li> <li>WinProcessListHelper.exe: lists windows processes</li> <li>WinShellIntegrationBridge.dll: integration with the Windows shell</li> <li>wslhash: hash calculation(?) for the Windows Subsystem for Linux</li> <li>wslproxy: proxy(?) for the Windows Subsystem for Linux</li> </ul> </li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#build","title":"build","text":"<p>The used dependency manager is Apache Ivy. The corresponding folder is <code>build/ivy</code>. Apache Ant is used as the build tool. The <code>artifacts</code> folder contains the generated jar files. An artifact might look like this:</p> <ul> <li>languages: contains MPS languages</li> <li>modules: contains Java classes</li> <li>lib: Jar dependencies</li> <li>META-INF: contains the plugin configuration file</li> <li>build.properties: contains the MPS version and IntelliJ plugin that this artifact belongs to.</li> </ul> <p>The <code>dependencies</code> folder contains the Gradle configuration properties.</p> <p><code>home/.ant/lib</code> contains additional Java libraries that can be used with Ant.</p> <p>The <code>resources</code> folder contains image resources as well as the following files:</p> <ul> <li>mps: executable file to start MPS</li> <li>mps-dmg.sh: create an Apple Disk image for macOS</li> <li>mps-sign.sh: signs the MPS macOS application</li> </ul> <p>The <code>tests</code> folder contains Ant scripts for executing tests. The <code>tools</code> folder contains scripts for signing and creating DMGs and also a version of the Java Runtime Environment and NSIS (Nullsoft Scriptable Install System) for creating an installer for Windows. The other XML files are also Ant scripts for different tasks (getting dependencies, building MPS languages, migration projects, etc.). The <code>run_build.sh</code> and <code>run_test.sh</code> can be used to run the build and tests on Linux/Mac respectively. <code>update.xml</code> lists all MPS versions and is used to show automatic updates for MPS.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#core","title":"core","text":"<p>The <code>aspects</code> folder contains the languages for the language aspects. The <code>baselanguage</code> folder contains the Base Language implementation and all its extensions such as extension methods, closures, or the collection language.</p> <p>The folder <code>devkit</code> contains the four main devkits:</p> <ul> <li>jetbrains.mps.devkit.bootstrap-languages: contains all the jetbrains.mps.lang languages</li> <li>jetbrains.mps.devkit.general-purpose: Base Language + smodel + text +  quotation language</li> <li>jetbrains.mps.devkit.language-design + the previous 2 devkits + an intermediate language for baselanguage (baseLanguageInternal) + a language for resources</li> <li>jetbrains.mps.devkit.templates: general-purpose + generator languages</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#kernel","title":"kernel","text":"<p>It contains core languages of MPS such as loaders for Java stubs, classes for persistence, language checkers, make classes and runtime classes for smodel such as <code>SConceptOperations.java</code> and <code>SModelOperations.java</code>.  </p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#languages","title":"languages","text":"<p>This folder contains all core languages such as smodel, quotation, access, quotations, pattern, and so forth.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#make","title":"make","text":"<p>Everything related to the make facet is situated in this folder.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#stub","title":"stub","text":"<p>This folder contains all stub models provided by MPS, e.g. stubs for annotations (like JetBrains annotations), Java core classes (JDK, e.g. <code>java.util.List</code>) and all MPS related Java classes are located in solutions that start with the naming pattern <code>MPS.*</code>(e.g. MPS.Core).</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#tool","title":"tool","text":"<p>This folder contains classes for accessing MPS from Java (e.g. `MPSEnvironment) and other tool-related classes such as accessing Ant from Java.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#platform","title":"platform","text":"<p>This folder contains languages and solutions for the following platform features:</p> <ul> <li>build language</li> <li>console</li> <li>HTTP server</li> <li>make</li> <li>migrations</li> <li>model checker</li> <li>Java to MPS parsing</li> <li>spell checker</li> <li>debugging information (traceInfo)</li> <li>version control</li> <li>integrations with the IDEA platform</li> <li>integration for MPS plugin into IntelliJ IDEA</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#samples","title":"samples","text":"<p>This folder contains the samples that are shipped with MPS. They are automatically unpacked into a folder in the home directory when first accessed through the start screen.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#tests","title":"tests","text":"<p>This folder contains classes for executing tests as well as all kinds of tests such as generator tests or tests for the constraint aspect.</p>","tags":["internals","sources"]},{"location":"mps_internal/navigating_mps_source/#workbench","title":"workbench","text":"<p>This folder contains subfolders for:</p> <ul> <li>MPS debugger</li> <li>Context actions</li> <li>editor related actions</li> <li>run configurations + execution of Base Language and other languages</li> <li>refactorings</li> <li>UI components and tools such as the dependency viewer, the new module dialog as well as different finders</li> <li>all other actions (jetbrains.mps.ide and jetbrains.mps.ide.mpsdevkit)</li> <li>editor tabs for the various language aspects</li> </ul>","tags":["internals","sources"]},{"location":"mps_internal/open_api/","title":"Open API","text":"<p>How do you get an icon for a concept?</p> <pre><code>GlobalIconManager.getInstance().getIconFor(concept)\n</code></pre> <p>How can you copy a language without the new one having duplicate model IDs?</p> <pre><code>{ =&gt;\nSModule sm = module/module1;\nSModule tm = module/module2;\nmap&lt;SNode, SNode&gt; node = new hashmap&lt;SNode, SNode&gt;;\nforeach aspect in LanguageAspect.values {\nSModel s = aspect.get((Language) sm);\nSModel t = aspect.get((Language) tm);\nif(s != null &amp;&amp; t!= null) {\nforeach r in new arraylist&lt;SNode&gt;(copy: t.getRootNodes()) {\n((node&lt;&gt;) r).detach;\n}\nforeach r in CopyUtil.copyAndPreserveId((((sequence&lt;SNode&gt;) s,getRootNodes())).toList, node) {\nt.addRootNode(r)\n}\n}\n}\n}.invoke()\n</code></pre> <p>How can you change the default project directory?</p> <p>Put the following code in an application plugin: <pre><code>// set default project location \nstring defaultProjectDir = Paths.get(System.getProperty(\"user.home\"), \"NewProjectDir\").toString();\nGeneralSettings.getInstance().setDefaultProjectDirectory(defaultProjectDir);\n</code></pre></p> <p>How can you execute an MPS action programmatically?</p> <p>Use ActionUtils to create an event and to run the action:</p> <pre><code># cast to EditorContext class\nDataContext dataContext = DataManager.getInstance().getDataContext(((EditorContext) editorContext).getNodeEditorComponent()); AnActionEvent event = ActionUtils.createEvent(ActionPlaces.EDITOR_TAB, dataContext); ActionUtils.updateAndPerformAction(action&lt;openHtmlReport&gt;, event);\n</code></pre> <p>Since this is based on IDEA components, we need to get the <code>getNodeEditorComponent</code>, which is not part of the openapi. That\u2019s why we need to downcast it to the EditorComponent class.</p> <p>Note: <code>action&lt;\u2026&gt;</code> comes from the jetbrains.mps.lang.plugin language.</p> <p>How to shut down MPS programmatically?</p> <p>In normal conditions, one can use <code>ApplicationManager.getApplication().exit()</code>. If this doesn\u2019t work, an exception  can be thrown on purpose. </p> <p>How can you react to opening and closing of projects?</p> <p>Register a ProjectManagerListener in a plugin via the class  ProjectManager.</p> <p>How do you change a model without creating an undo entry?</p> <p>Example: Setting a property (=flag) via a button.</p> <pre><code>repository.getModelAccess().executeUndoTransparentCommand()\n</code></pre> <p>How do you work with temporary models?</p> <pre><code>try { undo-transparent command with this.mpsProject.getRepository() {\ntmpModel = TemporaryModels.getInstance().createReadOnly(TempModuleOptions.forDefaultModule());\ntmpModel.addRootNode(type);\nTemporaryModels.getInstance().addMissingImports(tmpModel);\n}\n// do something with the node\n} finally {\nundo-transparent command with this.mpsProject.getRepository() {\ntmpModel.removeRootNode(type);\nTemporaryModels.getInstance().dispose(tmpModel);\n}\n}\n</code></pre> <p>How can you react to selection changes in the editor?</p> <pre><code>editorContext.getSelectionManager().addSelectionListener(new SingularSelectionListenerAdapter() { ... })\n</code></pre> <p>How can I delete a model in a module programmatically?</p> <p>Get the model-to-be-deleted as SModel (interface) and use <code>new ModelDeleteHelper(model).delete();</code> For more context see: DeleteModeHelper</p> <p>How can you add a language to the Used Languages settings of a model programmatically?</p> <ul> <li>Module level: <code>((AbstractModule) moduleA).addDependency(moduleB.getModuleReference(), false)</code></li> <li>Model level: <code>new ModelImports(model).addUsedLanguage(language)</code></li> </ul> <p>To get the language from a reference, you can call: <code>MetaAdapterFactory.getLanguage(moduleRef)</code>.</p> <p>Can a node pointer point to non-root nodes?</p> <p>Yes, for example:</p> <pre><code>node-ptr/Integer-&gt;parseInt-&gt;radix/\n</code></pre> <p>How can you create an MPS Language programmatically and add it to the current project?</p> <pre><code>NewModuleUtil.createLanguage(namespace, rootPath, project, saveProject)\n</code></pre> <p>How do I save my project(s)?</p> <p>Use <code>SRepository.saveAll()</code>.</p> <p>For a single project, e.g. <code>ProjectHelper.getProjectRepository(project).saveAll();</code></p> <p>For all opened projects, e.g.</p> <pre><code>foreach project in com.intellij.openapi.project.ProjectManager.getInstance().getOpenProjects() { jetbrains.mps.ide.project.ProjectHelper.getProjectRepository(project).saveAll(); }\n</code></pre> <p><sub>contributed by: @AlexeiQ<sub> <p>How can you convert a quotation to an expression?</p> <pre><code>new QuotationConverter(quotation).convert()\n</code></pre>","tags":["openapi"]},{"location":"mps_internal/platform_ui_inspector/","title":"Platform UI inspector","text":"<p>The following example shows the internal structure of MPS in regard to the Swing components. Most of the structure is predetermined by the IntelliJ platform. There is a UI inspector  in IntelliJ products for debugging purposes that is disabled by default in MPS. It can be enabled on the MPS console through the following code:</p> <pre><code>DataContext dataContext = DataManager.getInstance().getDataContext(); AnActionEvent event = ActionUtils.createEvent(ActionPlaces.UNKNOWN, dataContext); ActionUtils.updateAndPerformAction(new UiInspectorAction(), event);\n</code></pre> <p></p> <p>The following tree shows how the IDE is structured internally, starting from the main frame down to the light bulb menu. Some entries like menus or tabs can occur more than once. The structure might be slightly different in another MPS version because a different version of the IntelliJ platform is used.</p> StructureExplanation <p></p> <ol> <li>IntelliJ-specific implementation of JFrame</li> <li>IntelliJ-specific implementation of JRootPane. It also contains the toolbar and status bar.</li> <li>RootPane/How to Use Root Panes: The glass pane is often used to intercept input events occurring over the top-level container, and can also be used to paint over multiple components.</li> <li>RootPane/How to Use Root Panes: The layered pane contains the menu bar and content pane, and enables Z-ordering of other components</li> <li>IntelliJ-specific implementation of JMenuBar</li> <li>IntelliJ-specific implementation of JPanel</li> <li>an entry in the main menu</li> <li>the navigation bar</li> <li>the pane that contains the tool window stripes</li> <li>the status bar</li> <li>the stripes that contain the tool window buttons</li> <li>the button that opens a tool window</li> <li>the pane that contains the main content</li> <li>three components that are split by two dividers horizontally or vertically</li> <li>the window of the opened bottom tool</li> <li>the header and divider of 15</li> <li>the opened bottom tool window</li> <li>a tab in a tool window</li> <li>a panel that contains the editor</li> <li>the opened left tool window</li> <li>the document tabs that enable navigating between opened editors</li> <li>the editor window</li> <li>This class hides the internal structure of a UI component which represents a set of opened editors</li> <li>MPS version of an IntelliJ document editor</li> <li>the panel that contains the MPS editor</li> <li>the editor component itself</li> <li>a pane that supports zooming with the mouse wheel and scrolling</li> <li>the vertical scrollbar of the editor component</li> <li>the horizontal scrollbar of the editor component</li> <li>the left editor highlighter (left gutter)</li> <li>an editor component for editing nodes</li> <li>the intentions menu</li> <li>validation sidebar/marker bar</li> </ol>"},{"location":"mps_internal/recipes/","title":"Recipes","text":"<p>This section lists all relations required for a specific task.</p> <p>If not specified otherwise, you should add all dependencies.</p> <ul> <li>If no dependency exists: with default scope and no export flag.</li> <li>If a dependency (no matter which scope and export flag) exists: no change</li> </ul> <p>The IDE often creates the required relations on the module level automatically if we add a relation on the model level. However, this doesn\u2019t work always, so double-check if the module level relation was created correctly if errors exist.</p>"},{"location":"mps_internal/recipes/#use-a-java-type","title":"Use a Java type","text":"<p>ClassB inside ModelB inside ModuleB wants to create a variable of type ClassA inside ModelA inside ModuleA.</p> <ul> <li>To ModelB, add dependency to ModelA.   Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from ModuleB to ModuleA.</li> </ul>"},{"location":"mps_internal/recipes/#reuse-aka-extend-reference-an-external-java-type","title":"Reuse (aka extend, reference) an external Java type","text":"<p>ClassB inside ModelB inside ModuleB extends ClassA inside ModelA inside ModuleA. ClassC inside ModelC inside ModuleC wants to use ClassB as simple as possible.</p> <ul> <li>To ModuleB, add the export flag to the dependency on ModuleA.</li> <li>To ModelC, add dependency to ModelB.   Even if the IDE complains about the Dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from ModuleC to ModuleB.</li> </ul> <p>Remark: not sure if we should add the export flag to the dependency on ModuleA here.</p>"},{"location":"mps_internal/recipes/#create-a-concept-instance","title":"Create a concept instance","text":"<p>Directly (aka root node) or indirectly (aka child node) within ModelB inside ModuleB, we want to create an instance of ConceptA inside LanguageA.</p> <ul> <li>To ModelB, add Used Language to LanguageA.   Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically add a Used Language from ModuleB to LanguageA.</li> </ul>"},{"location":"mps_internal/recipes/#use-an-intention","title":"Use an intention","text":"<p>Make IntentionC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB.</p> <ul> <li>To ModelB, add Used Language to LanguageC.   Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a Used Language from ModuleB to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#use-a-type-system-rule","title":"Use a type system rule","text":"<p>Make TypesystemRuleC defined in LanguageC for ConceptA inside LanguageA available in ModelB inside ModuleB.</p> <ul> <li>To ModelB, add Used Language to LanguageC.   Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a Used Language from ModuleB to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#use-an-alternate-editor-with-a-hint","title":"Use an alternate editor with a hint","text":"<p>Make EditorC defined in LanguageC for ConceptA inside LanguageA using HintD defined in LanguageD available in ModelB inside ModuleB.</p> <ul> <li>To ModelB, add Used Language to LanguageC.   Even if the IDE complains about the Used Language being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a Used Language from ModuleB to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#make-sure-that-a-generator-is-executed-for-a-model","title":"Make sure that a generator is executed for a model","text":"<p>Make sure that GeneratorC defined in LanguageC for ConceptA inside LanguageA is executed for ModelB inside ModuleB.</p> <ul> <li>To ModelB, add LanguageC to Languages engaged on generation.</li> <li>To ModuleB, add Used Language to LanguageC.</li> </ul>"},{"location":"mps_internal/recipes/#use-node-type","title":"Use node type <p>ClassB inside ModelB inside ModuleB wants to create a variable of type node inside LanguageA. <ul> <li>To ModelB, add Dependency to LanguageA.structure. Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from ModuleB to LanguageA.</li> </ul>","text":""},{"location":"mps_internal/recipes/#call-a-behavior-method","title":"Call a behavior method <p>ClassB inside ModelB inside ModuleB wants to call behavior method opA inside ConceptA inside LanguageA.</p> <ul> <li>To ModelB, add dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from ModuleB to LanguageA.</li> </ul> <p>Note: We could also add a dependency from ModelB to LanguageA.behavior. However, as we need to depend on LanguageA.structure anyway (to be able to access the type), the preceding recipe presented is preferred.</p>","text":""},{"location":"mps_internal/recipes/#use-a-concept-as-a-child-or-reference","title":"Use a concept as a child or reference <p>ConceptB inside LanguageB wants to have a child or reference of type ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.structure, add dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a Used Language from LanguageB to LanguageA.</li> </ul>","text":""},{"location":"mps_internal/recipes/#extend-a-concept-or-implement-a-conceptinterface","title":"Extend a concept or implement a ConceptInterface <p>ConceptB inside LanguageB wants to extend/implement ConceptA/ConceptInterfaceA inside LanguageA.</p> <ul> <li>To LanguageB.structure, add dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB to LanguageA has extends Scope, either by   setting it manually or by using the intention on the error appearing on ConceptB.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-an-editor","title":"Create an editor <p>LanguageB wants to define a new editor for EditorHintC defined in LanguageC for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.editor, add dependency to LanguageC.editor.</li> <li>To LanguageB.editor, add dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageC.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageA has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-an-editor-component","title":"Create an editor component <p>LanguageB wants to define a new editor component for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.editor, add dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageA has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#use-an-editor-component","title":"Use an editor component <p>LanguageB wants to use EditorComponentC defined in LanguageC for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.editor, add dependency to LanguageC.editor.</li> <li>To LanguageB.editor, add dependency to LanguageA.structure.   Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageC.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageC has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-a-type-system-rule","title":"Create a type system rule <p>LanguageB wants to define a new type system rule for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.typesystem, add dependency to LanguageA.structure.   Even if MPS complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> <li>Make sure the dependency from LanguageB*to *LanguageA has Extends Scope.</li> </ul> <p>Note: The overrides flag in type system rules isn\u2019t related to dependencies. This flag specifies if type system rules of concepts extended by the applicable concept are evaluated.</p> <p>Example:</p> <ul> <li>ConceptX extends ConceptY extends ConceptZ</li> <li>ConceptZ defines type system rule ConceptZTypeRule</li> <li>ConceptY defines type system rule ConceptYTypeRule1[override=true] and ConceptYTypeRule2[override=false]</li> <li>ConceptX defines type system rule ConceptXTypeRule[override=false]</li> </ul> <p>Then:</p> <ul> <li>For ConceptZ, type system rule ConceptZTypeRule gets evaluated.</li> <li>For ConceptY, type system rules ConceptYTypeRule1 and ConceptYTypeRule2 get evaluated. ConceptZTypeRule is not evaluated, as at least one rule for ConceptY defines:[override=true].</li> <li>For ConceptX, type system rules ConceptYTypeRule1, ConceptYTypeRule2 and ConceptXTypeRule gets evaluated. ConceptYTypeRule1 and ConceptYTypeRule2 get included because no rule for ConceptX   defines:[override=true]. ConceptZTypeRule is not evaluated because the search for rules in extended Concepts   stops at the first concept having at least one rule defining:[override=true].</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-an-intention","title":"Create an intention <p>LanguageB wants to define a new intention for ConceptA inside LanguageA.</p> <ul> <li>To LanguageB.intentions, add dependency to LanguageA.structure.   Even if the IDE complains about the dependency being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from LanguageB to LanguageA.</li> </ul>","text":""},{"location":"mps_internal/recipes/#create-a-generator","title":"Create a Generator <p>Create Generator includes</p> <ul> <li>creating new root mappings</li> <li>creating new reduction rules</li> <li>creating new switches</li> </ul> <p>GeneratorB inside LanguageB wants to create a generator transforming ConceptA inside LanguageA into ConceptC inside LanguageC.</p> <ul> <li>To GeneratorB.main@generator, add dependency to LanguageA.structure.</li> <li>To GeneratorB.main@generator, add Used Language to LanguageC.   Even if the IDE complains about the dependency or used language being \u201cout of scope,\u201d click ok.</li> <li>Don\u2019t forget to sort your generator into the generation process by defining some mapping priorities.</li> <li>MPS automatically adds a dependency from GeneratorB to LanguageA.</li> <li>MPS automatically adds a Used Language from GeneratorB to GeneratorA.</li> <li>If LanguageC defines a runtime solution: To LanguageB, add Extends Scope dependency to LanguageC.</li> </ul>","text":""},{"location":"mps_internal/recipes/#extend-a-generator","title":"Extend a generator <p>Extend Generator includes</p> <ul> <li>Making sure that another generator is always executed if this generator gets executed.</li> <li>Creating new reduction rules to be used in another generator.</li> <li>Creating a new switch entry for a switch in another generator.</li> </ul> <p>GeneratorB inside LanguageB wants to extend GeneratorA inside LanguageA. GeneratorA transforms ConceptC inside LanguageC into ConceptD inside LanguageD. GeneratorB transforms ConceptE inside LanguageE into ConceptF inside LanguageF.</p> <ul> <li>To #GeneratorB.main@generator, add dependency to GeneratorA.main@generator.   Even if the IDE complains about the dependency being out of scope, click ok.</li> <li>MPS automatically adds a dependency from GeneratorB to GeneratorA.</li> <li>Make sure the dependency from GeneratorB*to *GeneratorA has Extends Scope.</li> </ul>","text":""},{"location":"mps_internal/recipes/#generate-a-java-class-extending-a-base-class","title":"Generate a Java class extending a base class <p>GeneratorB inside LanguageB wants to transform ConceptA inside LanguageA into a ConceptAJavaClass extending ConceptAJavaClassBase inside ModelC inside SolutionC.</p> <ul> <li>To #!java GeneratorB.main@generator, add dependency to LanguageA.structure.</li> <li>To #!java GeneratorB.main@generator, add dependency to ModelC.</li> <li>To #!java GeneratorB.main@generator, add Used Language to BaseLanguage.   Even if the IDE complains about the dependency or Used Language being \u201cout of scope,\u201d click ok.</li> <li>MPS automatically adds a dependency from GeneratorB to LanguageA.</li> <li>MPS automatically adds a dependency from GeneratorB to SolutionC.</li> <li>MPS automatically adds a Used Language from GeneratorB to BaseLanguage.</li> <li>To LanguageB, add Extends Scope dependency to BaseLanguage (because BaseLanguage defines a runtime solution).</li> <li>To LanguageB, add runtime solution to SolutionC.</li> </ul>","text":""},{"location":"mps_internal/recipes/#define-a-runtime-solution","title":"Define a runtime solution <p>LanguageB wants to use SolutionA as a runtime solution.</p> <ul> <li>To LanguageB, add a runtime solution to SolutionA.</li> </ul> <p>Note: We don\u2019t need any other relation, specifically, no dependency from LanguageB to SolutionA.</p>","text":""},{"location":"mps_internal/recipes/#define-an-accessories-model-aka-make-concept-instances-available-everywhere-a-language-is-used","title":"Define an accessories model (aka make concept instances available everywhere a language is used) <p>BuiltInNodeA as instance of BuiltInConcept inside LanguageA should be available to be referenced anywhere LanguageA is a Used Language.</p> <ul> <li>Create AccessoryModel as aspect in LanguageA</li> <li>To AccessoryModel, add Used Language to LanguageA.</li> <li>Create BuiltInNodeA inside AccessoryModel.</li> <li>To LanguageA, add an accessory Model to AccessoryModel (if not present already).</li> </ul> <p>Note: We don\u2019t need any other relation, specifically, no dependency from LanguageA to AccessorySolution.</p>","text":""},{"location":"mps_internal/recipes/#create-a-utility-model-aka-create-complex-implementations-for-behavior-methods-or-generators","title":"Create a utility Model (aka create complex implementations for Behavior Methods or Generators) <p>complexBehavior() defined for ConceptA inside LanguageA needs ComplexBehaviorInternalJavaClass for its implementation or GeneratorA inside LanguageA needs ComplexGeneratorInternalJavaClass for its execution (e.g. for a complex condition or macro).</p> <ul> <li>Create BehaviorUtilityModel / GeneratorUtilityModel as regular Model within LanguageA.</li> <li>To BehaviorUtilityModel / GeneratorUtilityModel, add Used Language to BaseLanguage.</li> <li>Create ComplexBehaviorInternalJavaClass / ComplexBehaviorInternalJavaClass within BehaviorUtilityModel / GeneratorUtilityModel.</li> <li>To LanguageA.behavior / GeneratorA.main@generator add dependency to BehaviorUtilityModel / GeneratorUtilityModel</li> </ul>","text":""},{"location":"mps_internal/terminology_and_ui_for_access/","title":"Terminology and user interface for access","text":"<p>This section lists terms that aren\u2019t mentioned in the MPS guide or aren\u2019t explained well. MPS project structure should give an overview of the most important terms.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#settings","title":"Settings","text":"<p>UI: File menu</p> <p>All global and project settings.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#ide-settings-aka-global-settings","title":"IDE settings (aka global settings)","text":"<p>Settings applied to all projects opened with this MPS installation (official documentation).</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#idea-plugins","title":"(IDEA) Plugins","text":"<p>UI: entry in the settings dialog</p> <p>A packaged set of contributions to the IntelliJ IDEA platform, on which MPS is based upon.</p> <p>Contained in one of the following places:</p> <ul> <li>${mps_home}/plugins</li> <li>\u00abGlobalSettingsDir\u00bb/plugins</li> </ul> <p>MPS plugins bear no relationship to IDEA Plugins. However, you can package MPS plugins into IDEA plugins, just as any other content of MPS.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#project-settings","title":"Project settings","text":"<p>UI: Entry in the settings dialog</p> <p>Settings applied to one project. Stored in ${project}/.mps/.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#modules-pool","title":"Modules pool","text":"<p>UI: second root entry in the logical view</p> <p>All content known to MPS is contained in its modules pool. This modules pool is shared between all windows of the same MPS installation. In some future MPS version, every window should have its independent modules pool.</p> <p>If a module is contained more than once in the modules pool (e.g. present both in the current project and in a global Library), the behavior is undefined (i.e. will mess up badly, don\u2019t do this).</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#mps-window","title":"MPS window","text":"<p>UI: If already open: Window menu, New File* menu: Open\u2026 \u2192 New Window</p> <p>Every Project is contained in its own window.</p>"},{"location":"mps_internal/terminology_and_ui_for_access/#project","title":"Project","text":"<p>UI: first root entry in the logical view</p> <p>A project is a collection of modules. A module can be part of more than one project. They can be added via the Project Paths context menu entry of the project.</p> <p>Modules can be nested in folders. These folders are stored in the project, i.e. the same module can be in different folders inside different Projects. Folders are only for visual organization, they don\u2019t have any effect on storage location, generation, or anything else.</p> <p>What are some known predefined path variables?</p> <ul> <li>${module}: the containing module</li> <li>${user.home}: the user home directory</li> <li>${language_descriptor}: the descriptor file of the  current language</li> <li>${solution_descriptor}: the descriptor file of the current solution</li> <li>${project}: the directory containing the project</li> <li>${mps_home}: the directory of th MPS installation</li> </ul> <p>Don\u2019t point path variables to a subpath of another path variable. MPS always applies the first (predefined before user-defined, user-defined in order of definition) one matching.</p> <p>INVALID example:</p> <ul> <li>Path Variable a \u2192 /some/dir</li> <li>Path Variable b \u2192 /some/dir/below</li> </ul>"},{"location":"mps_internal/utility_classes/","title":"Utility classes","text":"Class Description DirUtil directory related utilities MatchingUtil tests if two nodes match SubtypingUtil subtyping related utilities CopyUtil utility for copying models, nodes etc. FileUtil related utilities JavaNameUtil utilities related to java naming NameUtil related utilities such as pluralizing or escaping strings CopyPasteUtil/TextPasteUtil copy paste related utilities ActionUtils action related utilities; these methods can execute actions programmatically. NewModuleUtil utilities related to creating new modules such as creating solutions or languages TemporaryModels utilities for creating temporary models UIUtil utilities related to the Intellij UI such as checking for dark mode (<code>isUnderDarcula()</code>). PathManager/PathManager classes for getting all kinds of paths such as the plugins folder or the log folder. ClassLoaderManager class responsible for loading (MPS) classes FindUsagesManager class that has methods for invoking the find usage UI CloneUtil utility method for cloning a model ModelDigestUtil class that contains hash methods FindUtils class for finding nodes in MPS MatchingUtil method for checking if two nodes structurally match SubTypingManagerNew subtyping related methods such as <code>isSubTypeOf</code>  and  <code>collectImmediateSupertypes</code>. SubtypingUtil subtyping related methods such as <code>leastCommonSuperTypes</code>. PersistenceUtil methods for saving and loading models ModelsAutoImportsManager utility methods related to auto importing models ProjectManager project-related methods such as creating projects and attaching listeners to projects CopyUtil methods for copying models and nodes ModelAccessHelper methods for running code as a command/read/write action","tags":["internals","reference","utility"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/","title":"Writing an MPS plugin with Kotlin","text":"<p>When you are using Kotlin to write an MPS plugin, the guidelines for the IntelliJ Platform SDK apply.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#folder-structure","title":"Folder structure","text":"<p>The folder structure should look like this:</p> <pre>\n\u251c\u2500\u2500 build.gradle.kts\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u251c\u2500\u2500 kotlin\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 META-INF\n                \u251c\u2500\u2500 plugin.xml\n                \u2514\u2500\u2500 pluginIcon.svg\n</pre>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#buildgradlekts","title":"build.gradle.kts","text":"<p>The file build.gradle.kts should look something like this:</p> <pre><code>plugins {\nid(\"org.jetbrains.intellij\")\nid(\"org.jetbrains.kotlin.jvm\")\n}\nrepositories {\nmavenCentral()\nmaven { url = uri(\"https://projects.itemis.de/nexus/content/repositories/mbeddr\") }\n}\nval intellijVersion = \"2021.1\"\nval mpsVersion = \"2021.1.4\"\nval targetJvm = \"11\" // the target Java version\nversion = \"$intellijVersion.4\"\ndependencies {\nimplementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.0\")\nimplementation(\"org.jetbrains.kotlin:kotlin-reflect:1.4.0\")\ncompileOnly(\"com.jetbrains:mps-workbench:$mpsVersion\")\ncompileOnly(\"com.jetbrains:mps-core:$mpsVersion\")\ncompileOnly(\"com.jetbrains:mps-platform:$mpsVersion\")\ncompileOnly(\"com.jetbrains:mps-openapi:$mpsVersion\")\ncompileOnly(\"com.jetbrains:mps-editor:$mpsVersion\")\ncompileOnly(\"com.jetbrains:mps-editor-api:$mpsVersion\")\n}\nintellij {\nversion.set(intellijVersion)\n}\njava {\ntoolchain.languageVersion.set(JavaLanguageVersion.of(11))\n}\ntasks.withType&lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile&gt;().configureEach {\nkotlinOptions.jvmTarget = targetJvm\nkotlinOptions.apiVersion = \"1.4\"\n}\ntasks.getByName(\"buildSearchableOptions\").enabled = false\n</code></pre> <p>The Gradle plugin org.jetbrains.intellij is needed for the IntelliJ plugin development, org.jetbrains.kotlin.jvm is needed for Kotlin support. We also add the itemis repository for the MPS dependencies. The dependency section contains dependencies for Kotlin and MPS. The available MPS dependencies can be found in the group JetBrains on mvnrepository.com. The rest of the code is boilerplate code for setting the right versions.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#pluginxml","title":"plugin.xml","text":"<p>The file plugin.xml is the plugin configuration file and is normally automatically generated by the MPS build language. In this file, you have to register, for example, tool windows, settings, and actions. Have a look at existing plugin.xml files to figure out how they work.</p> <p>Don\u2019t forget to add dependencies to the MPS plugins in this file: <pre><code>&lt;idea-plugin&gt;\n...\n&lt;depends&gt;com.intellij.modules.platform&lt;/depends&gt;\n&lt;depends&gt;com.intellij.modules.mps&lt;/depends&gt;\n&lt;depends&gt;jetbrains.mps.core&lt;/depends&gt;\n...\n&lt;/idea-plugin&gt;\n</code></pre></p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#links-to-sections-in-the-documentation","title":"Links to sections in the documentation","text":"<ul> <li>Actions: extend the class AnAction</li> <li>Tool window</li> <li>Preferences</li> <li>Application plugin</li> <li>Running tasks once</li> <li>Project plugin</li> </ul> <p>For everything else, have a look at the extension point and listener list.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#building-the-plugin","title":"Building the plugin","text":"<p>When you are ready, you can build the plugin by executing <code>./gradlew buildPlugin</code>. All the other tasks are explained on the page Gradle IntelliJ plugin. Now there should be a folder <code>build/distributions</code> which contains the zipped plugin that can be installed through the MPS plugin manager.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/writing_mps_plugin_with_kotlin/#running-the-plugin","title":"Running the plugin","text":"<p>Open the file <code>build.gradle.kts</code> in the <code>ide-plugin</code> folder and change the <code>intellij</code> block to use a local path and disable instrumentation of the code, e.g.: <pre><code>intellij {\n    localPath.set(PATH_TO_MPS_FOLDER)\n    instrumentCode.set(false)\n}\n</code></pre></p> <p>Then you have to make sure that the system variable <code>idea.platform.prefix</code> is set to \u2018Idea\u2019. Workaround: create a file with extension .sh or .bat in the bin folder of the MPS installation with the following content: <code>-Didea.platform.prefix=Idea</code>.</p> <p>You can now open MPS with the plugin installed by calling <code>./gradlew runIde</code>.</p>","tags":["internals","intellij","plugins","java_integration"]},{"location":"mps_internal/deps_and_classpath/","title":"Dependencies and classpath in MPS","text":"<p>This page describes the meaning and effect of different types of dependencies within MPS, including the effects on the applicable Java classpath. It describes both the expected state and all bugs deviating from the expectations.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#overview","title":"Overview","text":"<p>The module pool has all content known to MPS. The modules pool is filled from modules in the current project and all non-project sources. MPS in general cares about dependencies between modules. The dependencies on models only constrain further the dependencies of the modules. Two main types of relations exist: dependencies are needed for any reference to something in another module. Used Languages are needed to use something defined in a language. We refer to relations if we address both types. Other types of dependencies on modules include: Java stubs (in combination with Java libraries), Java source stubs (in combination with Java source paths), runtime solutions and accessory models (only available for languages), and languages engaged on generation. Build models abstract Ant files to build and package modules and IDEA plugins. They contain a copy of the relations defined in the modules, and dependencies to other build models and IDEA plugins.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#mps-plugins","title":"MPS Plugins","text":"<p>MPS Plugins are automatically loaded according to the solution Kind set in Java module settings. MPS Plugins need to be contained in MPS plugin models.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#standaloneplugindescriptor","title":"StandalonePluginDescriptor","text":"<p>We need to add a StandalonePluginDescriptor (defined in Language jetbrains.mps.lang.plugin.standalone) as a root node if an MPS plugin model uses any concept from the language jetbrains.mps.lang.plugin. Other concepts from the language jetbrains.mps.lang.plugin.standalone don\u2019t need a StandalonePluginDescriptor.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#plugin-disambiguation","title":"Plugin disambiguation","text":"<p>The term \u201cplugin\u201d is used at various places throughout MPS. It describes different things:</p> <ul> <li>IDEA plugins: a packaged set of contributions to the IntelliJ IDEA platform, which MPS is based upon</li> <li>MPS plugins: automatically loaded models</li> <li>plugin language aspect: model inside a language defining extension points</li> <li>build model plugins: part of the build model language providing new entries for build models.</li> </ul>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#non-project-sources","title":"Non-project sources","text":"<p>Non-project sources are</p> <ul> <li>global libraries</li> <li>IDEA plugins</li> <li>project libraries</li> <li>common and Java module settings regarding Java classes and Java source files</li> <li>IDEA plugins referenced by a module</li> </ul> <p>These directories or JAR files are recursively scanned for .mpl (languages), .msd (solutions), and .devkit (devkit) files. If found, the corresponding content is added to the modules pool.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#java-classpath-versus-relations","title":"Java classpath versus relations","text":"<p>The various settings on models and modules specify both the Java classpath and the relations of a model. However, these settings affect classpath and relations differently. As a rule of thumb, the classpath has all Java classes reachable through any kind of relation. The Classpath is populated generously.</p> <p>On the contrary, the relations are populated reluctantly, for example, they need to be specified explicitly. The dependency relations on modules and models are completely separated from the used language relations on modules and models. Thus, no dependency requires a Used Language or vice versa.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#used-languages","title":"Used languages","text":"<p>No implicitly Used Languages are available except described for generators. Specifically, if LanguageB has an Extends Scope dependency on LanguageA and ModuleC uses LanguageB, LanguageA isn\u2019t a Used Language within ModuleC.</p> <p>You must add LanguageA (containing ConceptA) to ModuleB\u2019s and contained ModelB\u2019s used languages if and only if</p> <ul> <li>ModelB instantiates ConceptA within the IDE.</li> <li>ModelB executes intentions from LanguageA.</li> <li>ModelB requires type checks from LanguageA.</li> <li>ModelB uses editors from LanguageA by selecting an editor hint but not if LanguageA only defines the editor hint.</li> <li>ModuleB is a generator and outputs instance of ConceptA.</li> </ul>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#executed-generators","title":"Executed generators","text":"<p>GeneratorA contained in LanguageA (containing ConceptA) will be executed for ModelS (contained in ModuleS) if and only if</p> <ul> <li>ModelS uses LanguageA and contains an instance of ConceptA.</li> <li>ModelS lists LanguageA in Languages engaged on generation.</li> <li>The preceding conditions match LanguageB containing GeneratorB extending GeneratorA.</li> </ul> <p>For discussion, we establish a continued scenario:</p> <p>(The Relations listed here are not complete to reduce clutter. The complete example is available.)</p> <p></p> <p>SolutionBase doesn\u2019t change during generation, as LanguageBase doesn\u2019t define any generators.</p> <p></p> <p>SolutionBaseGen doesn\u2019t change during generation either, as it doesn\u2019t contain any instances from LanguageBaseGen, thus removing LanguageBaseGen from the list of applicable generators, ending up with no generators at all.</p> <p></p> <p>SolutionBaseGen2 ends up with a transformed NodeBase, as Languages engaged in generation are never removed.</p> <p></p> <p>SolutionBaseGenExtends ends up with an unchanged NodeBase, but a transformed NodeBase2. GeneratorBaseExtends gets executed, because LanguageBaseGenExtends is listed in Languages engaged in generation. However, the Dependencies of the Language aren\u2019t considered for selecting the running Generators.</p> <p></p> <p>In SolutionBaseGenExtends2 both NodeBase and NodeBase2 will be transformed, as LanguageBaseGenExtends2 is listed in Languages engaged in generation and GeneratorBaseExtends2 extends GeneratorBase.</p> <p></p> <p>Only NodeExtendsGen will be transformed in SolutionExtendsGen, as the only active Generator is GeneratorExtendsGen. The reason is that we found an instance of ConceptExtendsGen contained in the same language as the generator. The Generator doesn\u2019t extend any other applicable Generator.</p> <p></p> <p>All nodes within SolutionExtendsGen2 get transformed, as an instance of ConceptExtendsGen2 was found, and the generator GeneratorExtendsGen2 contained in the same language extends GeneratorBase.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#generated-relations","title":"Generated relations","text":"<p>Relations on the output model are defined only by the contents of the output model that was created by the generator. Thus,</p> <ul> <li>all languages providing the concepts of generated instances are listed in Used Languages</li> <li>all models referenced from the output model are listed in the dependencies</li> </ul> <p>Extra relations on anything else (source module, source model, dependencies of the source model, languages used in the source model, dependencies of applied generators, languages used in applied Generators) are not added to the output model. Implicit dependencies apply as described.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/deps_and_classpath/#tests","title":"Tests","text":"<p>Tests are regular or extended JUnit tests that can be executed within MPS or stand-alone.</p> <p>Test models contain tests, defined by the @tests stereotype.</p> <p>The Stereotype enables</p> <ul> <li>the Run Tests entry in the solution and test model context menu.</li> <li>Build language test instructions to search the model for tests.</li> </ul> <p>As soon as you are using any concepts from language jetbrains.mps.lang.test, you need to have a TestInfo root node in the same model. The TestInfo node needs to refer to a project to be used to execute the tests. This reference may not use a ${module}, ${language_descriptor}, ${solution_descriptor}, or ${project} builtin path variables. It needs to refer to a project containing the test.</p>","tags":["dependencies","classpath","plugins","generator","solution"]},{"location":"mps_internal/intellij_sdk/jcef/","title":"Java Chromium Embedded Framework","text":"<p>Start with the page JCEF - Java Chromium Embedded Framework of the IntelliJ platform plugin SDK.</p> <p>JCEF should work with MPS 2021.1.4 and higher. Although it was introduced in IntelliJ IDEA 2020.1 it might not work in older MPS versions because of classloading issues. The browser itself (<code>JBCefBrowser</code>) can be embedded in the MPS editor with a Java Swing component cell. For simple use cases, it is enough to call <code>browser.loadHTML</code> to load some HTML code. The content can be created by Java or by calling the MPS generator or TextGen.</p> <p>Existing Java documentation and examples on the web:</p> <ul> <li>Java JCEF example that showcases all kinds of handlers and dialogs</li> <li>IntelliJ Markdown preview</li> <li>How do I use JCEF with Intellij?</li> <li>CEF documentation (non Java version)</li> </ul> <p>The third link contains an answer on how to do bidirectional communication between the embedded browser and Java (MPS): You have to create a browser pipe between Java (implementation) and JS (implementation). The communication is done through JS. You then have a <code>subscribe</code> method that you can use to listen to events posted through a specific tag or create an event using the <code>post</code> method. These methods are available in Java and JS.</p> <p>Warning: MPS and the IntelliJ IDEA use Swing to create all the UI components. They are considered lightweight because they  are drawn by Java itself. JCEF uses native code, it is a heavyweight component. Especially with MPS\u2018 reloading capabilities, it is important to correctly dispose of the browser when it isn\u2019t needed anymore. The following code registers a listener for the editor component dispose event and also closes the browser:</p> <pre><code>class SwingComponent {\nvoid create() {\n// ...\nEditorComponent editorComponent = (EditorComponent) editorContext.getEditorComponent();\neditorComponent.addDisposeListener(new EditorComponent.EditorDisposeListener() {\n@Override\npublic void editorWillBeDisposed(@NotNull() EditorComponent p1) {\nbrowser.getCefBrowser().close(true);\n}\n});\n// ...\n}   }\n</code></pre> <p>When the browser is not correctly disposed of, it might be drawn in different components or on top of MPS editors. Some issues are known where JCEF makes the IDE crash (JBR-4667 + linked related issues, JBR-2206 + linked related issues).  </p>","tags":["internals","intellij","java"]},{"location":"mps_internal/intellij_sdk/jcef/#demo-websockets","title":"Demo + WebSockets","text":"<p>A demo for the JCEF integration can be found in the repository mps_jcef_minimal. Read the readme for more information. The demo contains two branches, one shows the internal communication via JS, and the other branch uses WebSocket for the communication. The WebSocket server is modeled after this tutorial and uses the existing IntelliJ libraries of Netty. The handling of web socket frames is described in more detail in Chapter 12. WebSocket - Netty in Action.</p>","tags":["internals","intellij","java"]},{"location":"mps_internal/threads/","title":"Threading","text":"<p>Regardless of the calling thread, writing and reading MPS models always need to be performed holding an appropriate lock. IntelliJ IDEA also needs read and write locks in its platform. Multiple reads can be done at the same time. When writing should be done, all reads have to be finished. The IDEA platform\u2019s lock is acquired first and only then the MPS\u2018s lock is acquired.</p> <p>The MPS locks are described in Managing concurrent access | MPS and are only necessary if you are accessing the model or specific features of the IntelliJ platform from a different thread. All aspects in your language and declared actions have the necessary lock by default (command access). You most likely only need locking when accessing MPS models from a Swing event handler such as in the <code>actionPerformed</code> method of a button. The locks are of type ReentrantReadWriteLock (read the JavaDoc for more info).</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#awt-event-dispatch-thread-edt","title":"AWT event dispatch thread (EDT)","text":"<p>Drawing of components in MPS/IntelliJ IDEA is done through Java Swing. The event dispatch thread or Swing thread is used for handling events in Swing because it is not thread-safe, so most of the Swing code runs in this thread. It also handles events from the Abstract Window Toolkit and has the thread name AWT-EventQueue-0. In the IntelliJ platform/MPS it is also called the UI thread or editor thread. Any writes to the IntelliJ IDE data model (PSI, VFS, project root model) must also happen on the write thread, which can be the same as EDT in IntelliJ products. In MPS, it is the same thread.</p> <p>Depending on the access type, you need different locks from the language jetbrains.mps.lang.access:</p> <ul> <li>synchronously read MPS model: <code>read action with</code></li> <li>synchronously write MPS model: <code>write action with</code></li> <li>synchronously write MPS model with undo: <code>command with</code></li> </ul> <p>In older MPS versions (&lt; 2021.1.5) it was always necessary to use <code>command with</code> when writing a model. While it is not necessary anymore it is still recommended to use it instead of the <code>write action with</code> statement.  As a tribute to legacy code, access to constant and meta info objects of a node is allowed without read access. It\u2019s not encouraged for new code though and might change in the future.</p> <p>If you are not already in the EDT, you need one of the following methods:</p> <ul> <li>Asynchronously write MPS model: <code>execute command in EDT with</code>.</li> <li>Asynchronously read MPS model: <code>execute in EDT with</code>.</li> </ul> <p>The in EDT commands allow to read/write the MPS model and perform EDT-related UI activities and update models of the IntelliJ platform. To check if the current thread is the EDT, call <code>ApplicationManager.getApplication().assertIsDispatchThread()</code> or <code>ThreadUtils.isInEDT()</code></p> <p>To modify the UI, the code must also be run on the UI thread. Normally, you would call <code>SwingUtilities.invokeLater</code>. When you are changing the IDE model in the IntelliJ platform (see: write-safe context) or an MPS model, you should use one of the following methods:</p> <ul> <li><code>ApplicationManager.getApplication.invokeLater</code> (asynchronous) </li> <li><code>ApplicationManager.getApplication.invokeAndWait</code> (synchronously)</li> </ul> <p>If you don\u2019t know exactly what you are doing when calling it synchronously, the IDE will freeze. The reason for those methods is that the so-called modality state should be taken into account i.e., the stack of modal dialogs under which the call is allowed to execute. Alternatively, there is also the class <code>ThreadUtils</code> which contains the method <code>runInUIThreadAndWait</code> which takes a <code>Runnable</code> instance as a parameter and uses the right method based on the calling context.</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#background-threads","title":"Background threads","text":"<p>Every code that is executed on the EDT should finish quickly. Long-running code blocks the thread and the UI becomes unresponsive. Run long-running tasks in the background: Progress indicators | MPS The class Task can be extended and run in a modal dialog or in the background. When many tasks should be executed, pooled threads can be used: Introduction to Thread Pools in Java | baeldung.com. There\u2019s also a method for that: <code>ApplicationManager.getApplication().executeOnPooledThread</code>.</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#examples","title":"Examples","text":"<p>In the following examples, a node is accessed from a background thread or the EDT.</p>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#reading-the-model","title":"Reading the model","text":"Different thread with lock Different thread without lock EDT with read lock <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; read action with #project.getRepository() {\nstring name = myNode.name;\n}\n})\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\nApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; string name = myNode.name; })\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\nbutton.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nread action with #project.getRepository() {\nstring name = myNode.name;\n}\n} }\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#writing-the-model-different-thread","title":"Writing the model (different thread)","text":"command in EDT lock command in wrong thread no lock only write lock <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; execute command in EDT with #project.getRepository() {\nmyNode.name = \"newName\";\n}}\n)\n</code></pre> <pre><code>// Access is allowed from write thread only.\n```java\nApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; command with #project.getRepository() {\nmyNode.name = \"newName\";\n}}\n)\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\nApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; myNode.name = \"newName\"; }\n)\n</code></pre> <pre><code>// &lt; 2021.1.5: jetbrains.mps.smodel.IllegalModelChangeError: registered node can be modified only inside a command or during model loading process\nApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; write action with #project.getRepository() {\nmyNode.name = \"newName\";\n}}\n)\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#writing-the-model-edt","title":"Writing the model (EDT)","text":"command lock no lock only write lock <pre><code>ApplicationManager.getApplication().invokeLater(\n{ =&gt; command in EDT with #project.getRepository() {\nmyNode.name = \"newName\";\n}}\n)\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessError: You can read model only inside read actions\nApplicationManager.getApplication().invokeLater(\n{ =&gt; myNode.name = \"newName\"; }\n)\n</code></pre> <pre><code>// &lt; 2021.1.5: jetbrains.mps.smodel.IllegalModelChangeError: registered node can be modified only inside a command or during model loading process\nApplicationManager.getApplication().invokeLater(\n{ =&gt; write action with #project.getRepository() {\nmyNode.name = \"newName\";\n}}\n)\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#modifying-the-ui","title":"Modifying the UI","text":"using Application#invokeLater using SwingUtilities#invokeLater called from thread with IntelliJ write access (e.g. normal MPS code) called from within MPS read action <pre><code>ApplicationManager.getApplication().invokeLater({ =&gt; JOptionPane.showInputDialog(\"Input\"); });\n</code></pre> <pre><code>// okay if no MPS/IDE model is accessed\nSwingUtilities.invokeLater({ =&gt; JOptionPane.showInputDialog(\"Input\"); });\n</code></pre> <pre><code>// java.lang.Throwable: AWT events are not allowed inside write action\nOptionPane.showInputDialog(\"Input\")\n</code></pre> <pre><code>// java.lang.Throwable: AWT events are not allowed inside write action\nread action with #project.getRepository() { JOptionPane.showInputDialog(\"Input\");\n}\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#showing-a-notification-with-information-from-the-model","title":"Showing a notification with information from the model","text":"<p>In this example, additional information is shown to the user through a top-level notification (balloon).</p>  using a read lock synchronously using a read lock asynchronously call synchronously on EDT with read lock <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; string name;\nread action with #project.getRepository() {\nname = myNode.name;\n}\nNotifications.Bus.notify(new Notification(\"test\", \"Name\", name, NotificationType.INFORMATION));\n}\n);\n</code></pre> <pre><code>// name is null because the following block is executed on the EDT thread which doesn't return the result immediately\nApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt; string name;\nexecute in EDT #project.getRepository() {\nname = myNode.name;\n}\nNotifications.Bus.notify(new Notification(\"test\", \"Name\", name, NotificationType.INFORMATION));\n}\n);\n</code></pre> <pre><code>ApplicationManager.getApplication().executeOnPooledThread(\n{ =&gt;\nStringBuilder builder = new StringBuilder();\nApplicationManager.getApplication().invokeAndWait(\n{ =&gt; read action with #project.getRepository() {\nbuilder.append(myNode.name);\n}\n}\n);\nNotifications.Bus.notify(new Notification(\"test\", \"Name\", builder.toString(), NotificationType.INFORMATION));\n}\n)\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#elevating-model-access","title":"Elevating model access","text":"<p>It depends on the current thread and active locks but most of the time, read locks can\u2019t be upgraded. A lock that is higher in the hierarchy, also has the permissions of the lower locks: read &lt; write &lt; command.</p>  elevating write to command access elevating read to write access elevating read to command access elevating read to command access (write available) <pre><code>// no previous write lock\nApplicationManager.getApplication().invokeLater(\n{ =&gt; write action with #project.getRepository() { command with #project.getRepository() { myNode.name = \"myName\"; } }\n}\n)\n</code></pre> <pre><code>// java.lang.IllegalStateException: deadlock prevention: do not start write action from read\nApplicationManager.getApplication().invokeLater(\n{ =&gt; read action with #project.getRepository() { write with #project.getRepository() { myNode.name = \"myName\"; } }\n}\n)\n</code></pre> <pre><code>// jetbrains.mps.smodel.IllegalModelAccessException: deadlock prevention: can not elevate model read to a command\nApplicationManager.getApplication().invokeLater(\n{ =&gt; read action with #project.getRepository() { write with #project.getRepository() { myNode.name = \"myName\"; } }\n}\n)\n</code></pre> <pre><code>// previous write lock available\nread action with #project.getRepository() { command with #project.getRepository() { myNode.name = \"myName\"; } }\n</code></pre>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/#additional-references","title":"Additional references","text":"<ul> <li>IDEA threading model | developerlife.com</li> <li>Common Concurrency Pitfalls in Java</li> </ul>","tags":["internals","intellij","ui"]},{"location":"mps_internal/threads/named_threads/","title":"Reference: Named threads","text":"<p>These lists contain named threads from Java, the IntelliJ platform, and MPS.</p>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#java-threads","title":"Java Threads","text":"<ul> <li>AWT threads<ul> <li>AWT-AppKit: macOS-specific Thread</li> <li>AWT-EventQueue: = EDT</li> <li>AWT-Windows</li> <li>AWT-Shutdown</li> </ul> </li> <li>Image Fetch/Image Animator(sun.awt.image.ImageFetch)</li> <li>Get All running JVM Threads | baeldung.com<ul> <li>Finalizer</li> <li>Reference handler: a high-priority thread to enqueue pending references (References).</li> <li>Signal Dispatcher: handles signals sent by the operating system to the JVM.</li> </ul> </li> <li>Java2D<ul> <li>Java2D Disposer</li> <li>Java2D Queue flusher</li> </ul> </li> <li>TimerQueue(java.swing.TimerQueue)</li> <li>Timer(java.util.Timer)</li> <li>Common-Cleaner(java.lang.ref.Cleaner)</li> <li>Attach Listener</li> <li>GC Thread: garbage collector thread</li> <li>CMS Thread and CMD Main Thread: Thread of the concurrent mark sweep collector.</li> <li>VM Thread</li> <li>Service Thread</li> <li>C1/C2 CompilerThread</li> <li>Sweeper thread</li> <li>JPWP</li> <li>VM Periodic Task Thread</li> <li>JDI (Java Debug Interface)<ul> <li>Debug Events Processor Thread</li> <li>JDI Internal Event Handler</li> <li>JDI Target VM Interface</li> </ul> </li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#intellij-platform-threads","title":"IntelliJ platform threads","text":"<ul> <li>Alarm Pool (Alarm)</li> <li>Flushing Daemon (FlushingDaemon)</li> <li>ApplicationImpl (ApplicationImpl)</li> <li>Periodic tasks thread (AppDelayQueue)</li> <li>BaseDataReader (com.intellij.util.io.BaseDataReader)<ul> <li>error stream of X</li> <li>output stream of X</li> <li>setsid stream of X</li> </ul> </li> <li>I/O pool (ProcessIOExecutorService)</li> <li>JobScheduler FJ pool (IdeaForkJoinWorkerThreadFactory)</li> <li>Document Committing Pool (DocumentCommitThread)</li> <li>FileBasedIndex Vfs Event Processor (ChangedFilesCollector)</li> <li>Indexing (IndexUpdateRunner)</li> <li>ForkJoinPool (ForkJoinPool)</li> <li>Action Updater (ActionUpdater)</li> <li>fsnotifier: native file system notifier</li> <li>DestroyJavaVM</li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#mps-threads","title":"MPS threads","text":"<ul> <li>Highlighter: performs model checks in update sessions and updates the editor. Checking rules are run for example inside this thread (Highlighter).</li> <li>HighlightUsages: highlights references to the node at the cursor position in the editor (HighlightUsagesSupport).</li> <li>CompletionHelper: automatically opens the code completion menu that was introduced in MPS 2021.2 (CompletionHelper).</li> <li>MPS EDT Executor: invokes read/write/command task asynchronously on the EDT thread (EDTExecutorInternal).</li> <li>MPS interrupting thread: augments the IDEA Platform write action with functionality essential for MPS ().</li> <li>ChangesManager command queue: queue for tasks of the VCS changes manager (CurrentDifferenceRegistry)</li> <li>Intentions: Shows or hides intentions</li> <li>MPS Make Thread: Thread that executes a make task (MakeTask)</li> <li>generation-thread: generator thread (GenerationTaskPool)</li> <li>TextGen-thread: text generator thread (TextGeneratorEngine)</li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/named_threads/#other-threads","title":"Other threads","text":"<ul> <li>AnimatorThread (removed class of com.intellij.util.ui.Timer)</li> <li>Poller SunPKCS11-Darwin (macOS-specific thread)</li> <li>process reaper (Linux/macOS specific thread)</li> <li>Batik CleanerThread (org.apache.batik.util.CleanerThread)</li> <li>Netty Builtin Server</li> <li>kotlinx.coroutines.DefaultExecutor</li> </ul>","tags":["internals","reference"]},{"location":"mps_internal/threads/read_write_action_examples/","title":"Example actions using locks","text":"<p>These actions use the IntelliJ platform or access MPS models and need additional locks because they are running on a different thread. Especially MPS read and write locks should be available in every language aspect and manually locking isn\u2019t necessary.</p>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#example-of-actions-that-require-mps-locks","title":"Example of actions that require MPS locks","text":"","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#write-actions","title":"Write actions","text":"<ul> <li>reload/add/remove/modify<ul> <li>projects</li> <li>modules</li> <li>models</li> </ul> </li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#read-actions","title":"Read actions","text":"<ul> <li>resolve node references</li> <li>read nodes/models/modules</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#read-actions-in-edt","title":"Read actions in EDT","text":"<ul> <li>select a node in the tree view</li> <li>clear the marks in the highlight manager</li> <li>move nodes refactoring</li> <li>resolve node references and open them in the editor</li> <li>run the model checker</li> <li>rebuild editor components</li> <li>paste nodes</li> <li>select nodes in the editor</li> <li>recreate opened MPS editors</li> <li>show the completion menu</li> <li>re-highlight nodes</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#examples-of-actions-that-require-idea-locks","title":"Examples of actions that require IDEA locks","text":"<p>Useful methods:</p> <ul> <li>Read action: <code>Applicationmanager.getApplication.runReadAction()</code></li> <li>Read action allowed: <code>ApplicationManager.getApplication().assertReadAccessAllowed()</code></li> <li>Write action: <code>Applicationmanager.getApplication.runWriteAction()</code></li> <li>Write action allowed: <code>ApplicationManager.getApplication().assertWriteAccessAllowed()</code></li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#write-actions_1","title":"Write actions","text":"<ul> <li>VFS-related actions<ul> <li>refresh files</li> <li>create/remove directories</li> <li>create/modify/delete/copy files</li> </ul> </li> <li>paste data</li> <li>create facets</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#read-actions_1","title":"Read actions","text":"<ul> <li>find files</li> <li>get a list of file editors</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#actions-executed-on-edt","title":"Actions executed on EDT","text":"<p>They are executed in the lambda of <code>ApplicationManager.getApplication().invokeLater/invokeAndWait)</code>.</p> <ul> <li>update tools</li> <li>show progress bars for long-running actions</li> <li>update text in Java Swing components</li> <li>dispose of UI components</li> <li>rebuild components</li> <li>start a make process</li> <li>save projects/modules</li> <li>update toolbars</li> <li>show dialogs</li> <li>update the project pane</li> <li>perform refactorings</li> <li>unload models</li> </ul>","tags":["internals","examples"]},{"location":"mps_internal/threads/read_write_action_examples/#actions-that-are-executed-on-a-pooled-thread","title":"Actions that are executed on a pooled thread","text":"<p>They are executed in the lambda of <code>ApplicationManager.getApplication().executeOnPooledThread</code></p> <ul> <li>set breakpoints on startup</li> <li>preview the generated text for nodes</li> </ul>","tags":["internals","examples"]},{"location":"patterns/language_design/","title":"Language design","text":"","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#patterns","title":"Patterns","text":"<ul> <li>Inline Definitions(Specific Languages\u2019 blog)</li> <li>Escape hatch(Specific Languages\u2019 blog)</li> <li>Another form of escape hatch(Specific Languages\u2019 blog)</li> <li>Externalized names(Specific Languages\u2019 blog)</li> <li>Empty lines(Specific Languages\u2019 blog)</li> <li>Externalized names (and other common attributes)(F1RE\u2019s blog)</li> <li>Multiple generators for same language)(F1RE\u2019s blog)</li> <li>High-Level Structure of DSLs: Three Patterns)(Markus Voelter\u2019s blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#general","title":"General","text":"<ul> <li>On language design(Specific Languages\u2019 blog)</li> <li>My DSL development process(Specific Languages\u2019 blog)</li> <li>Evolving your language gracefully(Specific Languages\u2019 blog)</li> <li>Making distinctions(Specific Languages\u2019 blog)</li> <li>DSLs vs business rules(Specific Languages\u2019 blog)</li> <li>The Philosophy behind Language Engineering with MPS(Markus Voelter\u2019s blog)</li> <li>Thoughts on Declarativeness(Markus Voelter\u2019s blog)</li> <li>Why an Agile Process is not Enough(languageengineering.io\u2019s blog)</li> <li>What makes a good Business DSL(languageengineering.io\u2019s blog)</li> <li>What goes into Language Design \u2026 Beyond the Domain(languageengineering.io\u2019s blog)</li> <li>Categorising the Complexities in Programming(languageengineering.io\u2019s blog)</li> <li>Fusing Modeling and Programming into Language-Oriented Programming(Markus Voelter\u2019s blog)</li> <li>Context Boundaries in Language Engineering Projects(log verbose\u2019s blog)</li> <li>Why documents shouldn\u2019t be the basis of a domain analysis(Markus Voelter\u2019s blog)</li> <li>When is something a (domain-specific) language?(Markus Voelter\u2019s blog)</li> <li>What is Model Driven Engineering(F1RE\u2019s blog)</li> <li>Domain-driven design vs. language engineering(Specific Languages\u2019 blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#introducing-dsls","title":"Introducing DSLs","text":"<ul> <li>Why it is so hard to change established processes in organizations(Markus Voelter\u2019s blog)</li> <li>Introducing a tool successfully(Markus Voelter\u2019s blog)</li> <li>The minimum infrastructure for running languages and models(Markus Voelter\u2019s blog)</li> <li>Why I emphasize DSLs for Domain Experts(Markus Voelter\u2019s blog)</li> <li>The split brain of DSLs(Markus Voelter\u2019s blog)</li> <li>How to run a technical workshop</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#perspectives-on-dsl","title":"Perspectives on DSL","text":"<ul> <li>Knowledge Management(Markus Voelter\u2019s blog)</li> <li>Production Knowledge(Markus Voelter\u2019s blog)</li> <li>Software Architecture(Markus Voelter\u2019s blog)</li> <li>Software Quality(Markus Voelter\u2019s blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#comparisons","title":"Comparisons","text":"<ul> <li>DSLs vs. \u201cLearning Languages\u201d(Markus Voelter\u2019s blog)</li> <li>Low Code or Domain Specific Languages?(log verbose\u2019s blog)</li> <li>Tool Lock-in vs. Semantic Lock-in(Markus Voelter\u2019s blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#fachlichkeit","title":"Fachlichkeit","text":"<ul> <li>An Argument for the Isolation of \u201cFachlichkeit\u201d(Markus Voelter\u2019s blog)</li> <li>The Hidden Complexities in Fachlichkeit(Markus Voelter\u2019s blog)</li> <li>The hidden layer between the Fachlichkeit and the -ilities(Markus Voelter\u2019s blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#programming","title":"Programming","text":"<ul> <li>Teaching the Basics of Programming to Domain Experts(Markus Voelter\u2019s blog)</li> <li>Thinking vs. Coding(Markus Voelter\u2019s blog)</li> <li>ProgrammingBasics - How to think like a programmer</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#safety","title":"Safety","text":"<ul> <li>Safety and Security from a Language Engineering Perspective(languageengineering.io\u2019s blog)</li> <li>Testing Languages, Generators and Runtimes in a Safety-Critical System(Markus Voelter\u2019s blog)</li> <li>Using Language Workbenches and Domain-Specific Languages   for Safety-Critical Software Development(Markus Voelter\u2019s blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#formal-methods","title":"Formal methods","text":"<ul> <li>An Overview of Program Analysis using Formal Methods</li> <li>Thoughts on Formal Verification and DSLs(Markus Voelter\u2019s blog)</li> <li>Thoughts on X-by-Construction(Markus Voelter\u2019s blog)</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/language_design/#z3-theorem-prover","title":"Z3 theorem prover","text":"<ul> <li>Programming Z3 (tutorial)</li> <li>Program verification with Z3 (course slides)</li> <li>JavaSMT</li> <li>Z3Py Guide</li> <li>SMT-Lib</li> </ul>","tags":["best_practise","dsl","safety","z3","theory"]},{"location":"patterns/ui_patterns/","title":"UI Patterns and Anti patterns","text":"<p>Go through your editors and check the following list.</p> Texts are readable. <p>The contrast ratio between the background color and the foreground text color should be at least 4.5:1 article. Contrast checkers can also help you. Here are some colors with high contrast:</p> <p></p> <p>When using a grayscale color, make sure that the text color doesn\u2019t exceed 48% brightness (source). Make also sure to provide different colors for different color schemes (e.g. Darcula theme vs light theme).</p> <p>Bad example #1</p> <p></p> <p>Bad example #2</p> <p></p> Bold and underline aren\u2019t used together. <p>This is an anti-pattern. More information can be found in this article. MPS-related summary:</p> <ul> <li>Bold<ul> <li>important phrases</li> <li>highlighting keywords</li> <li>Italic/Emphasis</li> <li>Used to highlight quotes (some use blockquotes).</li> <li>Foreign words. </li> </ul> </li> <li>Underline<ul> <li>Used for links</li> </ul> </li> <li>CAPS<ul> <li>Used for acronyms</li> </ul> </li> </ul> You use buttons correctly. <p>(Swing) Buttons use appropriate symbols/text to make clear what they do. Buttons can also be used as up and down keys. Buttons can also be hidden to not disrupt the text editing: </p> <p>Add an option to hide buttons (checkbox, editor hint, action, etc.).</p> Clickable elements appear clickable. <p>When elements are clickable, they should appear clickable: They should use an indicator or different style (e.g. underlines and blue or styled like a button).</p> You align collections when possible. <p>Alignment is an important aspect of design (introduction). Use vertical grids instead of vertical collections to align cells nicely. It is also very important for readability.</p> You use color for emphasis and to convey information. <p>Not only bold font can be used to emphasize words but also color. Make sure that the used color is correctly associated by the user.</p> <p>Bad example</p> <p>Greyscale editor + grey is associated with disabled content/meta information such as comments. </p> <p>Good example</p> <p></p> <p>Color is used to distinguish different language features: BLUE for numbers, lila/green for CONSTANTS.</p> You consistently use labels. <p>Labels should be used consistently in the design (e.g. always bold, colon after label), the same goes for key-value pairs. There is no best practice for the separation between label and text. Some ideas and common guidelines can be found here.</p> <p></p> The context of UI elements is consistent. <p>Counterexample: There are 3 buttons next to each other that look similar: One opens external documentation, the other navigates to a root node and the third one reverts a change. This could be confusing and frustrating for the user.</p> A default empty statement exists. <p>There should always be a default concept that acts as an empty line or empty text. It should be editable and support auto-completion. They should have an indicator that they are editable. The easiest way is to provide a placeholder value.</p> <p>Bad example</p> <p></p> Different groups are distinguishable from each other. <p>Groups can be separated for example by whitespace, by drawing a border (box), or by drawing brackets around the content.</p> You emphasize non-standard operations/literals. <p>Emphasize special operations or literals to make it clear that they are not. Other good examples in Base Language are extension methods.</p> <p></p> Enough paddings surround elements. <p>Make sure there is enough space between the content and its border (padding) otherwise the editor looks too packed. More information from a design perspective can be found here.</p> You use existing stylesheets. <p>For Base Language there is BaseLanguageStyle. You can search globally for instances of Stylesheet to find more styles.</p> The font size conveys hierarchy. <p>More information can be found in this beginner\u2019s guide to typographic hierarchy.</p> <p>Example hierarchy (source: Font Size And Weight Matters) : </p> You use the full window width for your editor. <p>Often the space in editor components is not well used and a lot of space is left empty on the right side of the window.  This can be improved by using multiple groups next to each other or using the right-hand side of the screen for some sort of legend for graphics or meta-information about the (root) node (e.g. code review).</p> Headers follow general UI principles. <p>The following principles should be followed:</p> <ul> <li>the hierarchical relationship of ideas</li> <li>consistency</li> <li>readability</li> <li>specificity</li> </ul> <p>More information can be found in Technical writing essentials - Headings.</p> Headers are distinguishable from content. <p>Bad example</p> <p></p> <p>The header and the start of the child concepts use bold font and the same text. In this example the text \u201cOutput\u201d is redundant. The header should be larger.</p> <p>A common layout is header-input-output: At the top is the header, then there are the inputs/declarations, followed by the output/body. Make sure to separate these three groups in some ways (such as horizontal lines or empty lines).</p> <p>Mixed example</p> <p></p> Lines aren\u2019t too thick and not textual. <p>A good maximum width for borders and other lines is 3 pixels. This is just a rough guideline but with thicker lines the design becomes overwhelming.</p> <p>Bad example</p> <p></p> You don\u2019t emphasize meta/not important information. <p>Good example</p> <p></p> <p>A smaller font, light gray color, or maybe a different font seems to work well. Inherited values can also be shown this way: display them as placeholder values in a light gray color. Don\u2019t emphasize comments by making them bold or stand out in any way.</p> <p>Bad example</p> <p></p> The reflective editor is never shown. <p>The reflective editor provides a default editor for nodes. The editor is only read-only and should only be used for debugging purposes.</p> <p>Bad example</p> <p></p> You use The right form of projection for the task in the editor. <p>The right projections are used (text, tables, diagrams..) and different kinds of projections are provided when necessary (switchable by menu or editor hints).</p> <p>Example: multiple projections</p> <p></p> You didn\u2019t forget to enable anti-aliasing for custom Java Swing components. <p>When you create a custom component and have a paint-Method, call EditorComponent.turnOnAliasingIfPossible to enable anti-aliasing. More information can be found in the Java documentation.</p> All usages of symbols are clear. <p>When using symbols, make sure that the user understands what it means.  A Plus symbol might be easy to understand (add, increase), but a complex shape that is not usable used might be not. Common icons can be found for example in the fontawesome icon pack.</p> You abbreviate often-used words and symbols. <p>Abbreviate words that are often used in the editor or use symbols. Examples:</p> <ul> <li>The Letter \u201cm\u201d or a red star * is often used to mark a field as mandatory.</li> <li>The plus sign \u2295 is used to indicate an \u201cadd\u201d action.</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/","title":"User experience and user interfaces","text":"<p>How can I start learning about user experience?</p> <p>The articles of the Nielsen Norman Group are good. There are study guides consisting of articles and videos that deal with different topics such as UX basics, psychology for UX, visual design and UX writing.</p>  Why do my users ignore certain tools such as the context action tool? <p>According to Fitt\u2019s law, the time required to move to a target area is a function of the distance to the target divided by the width of the target. The target area in our case is the button that opens the tool window. In addition, the movement with the mouse can be split into 2 phases:</p> <ul> <li>initial movement: fast, imprecise</li> <li>final movement: slow, precise</li> </ul> <p>The corners of the screen are sometimes called magic corners. At these points, two edges collide and form a theoretically infinitely big button. As a result, they are easy to hit (e.g. Windows start button, MacOS close button). </p> <p>In this explanation, it is assumed that the MPS window takes up most of the screen\u2019s size. In MPS, the project tool is located in the upper left corner, the Git tool in the lower left corner, the inspector in the lower right corner, and the context actions tool in the upper right corner. All tools are near the magic corners and therefore should be easier to hit. The initial movement should be already quite precise. </p> <p>Due to the location of the editor and sometimes the width of the screen (e.g. wide-screen monitors) the mouse cursor is more often placed on the left side of the screen even if the logical view is opened on the left side. Therefore the tools on the left side are easier to reach because of the smaller distance.</p> <p>For Windows users, it might also play a role that in older Windows versions, the start menu button was located in a similar position as the Git tool which makes it easier to hit. The same can be said for the inspector which is located near the old Windows notification area.</p> <p>If a button is not located near the magic corners such as the terminal, it takes the users even longer to find the button and press it. This additional effort makes it more unlikely that the button is pressed at all.</p> <p>Opening a tool also disrupts the workflow. In the editor itself, there is less jumping around involved, the mouse is often not needed at all. Ideally, the cursor just moves from one line to the next.</p> How do deal with many choices in the UI? <p>The drop-down list page in the IntelliJ Platform UI Guidelines recommend using a dropdown when there are more than four choices. Not only the number of items can be decisive. The context assistant handles this a bit differently though: it switches between buttons and a dropdown depending on the total width of the choices.</p> <p>Therefore the number of choices is important but also the ordering of the items plays a big role: according to Hick\u2019s law the average reaction time \\(T\\) to make a choice is \\(T = b*log_2(n+1)\\) where \\(b\\) is a constant factor and \\(n\\) the number of items. When the items are in order, users perform a binary search to find the item. When there is no order, the search time is linear instead.</p> <p>When there are many choices, a search functionality should be provided that works similarly to the code completion menu when a custom UI component is used. Similar choices can also be grouped (e.g. intentions menu for grouping intentions).</p>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#basics","title":"Basics","text":"<ul> <li>7 Graphic Design Principles to Up-Level your Graphics</li> <li>7 Gestalt Principles of Design</li> <li>10 Graphic Design Rules You Should Never Break</li> <li>20 Most Important UI Design Principles for UI Designer</li> <li>First Principles of Interaction Design</li> <li>What are the basic rules of user interface design? (quora)</li> <li>Understanding layout | Material Design</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#text","title":"Text","text":"<ul> <li>UX Writing: Handy Tips on Text Improving User Experience</li> <li>The Punctuation Guide</li> <li>Technical Writing Essentials \u2013 Document Design</li> <li>Word Choices and Language in UX, Part Three: User Interface Labels &amp; Messages</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#ui","title":"UI","text":"<ul> <li>Design Better Forms</li> <li>IntelliJ Platform UI Guidelines</li> <li>When to use checkboxes</li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#uxusability","title":"UX/Usability","text":"<ul> <li>Ten Usability Heuristics for User Interface Design</li> <li>UX Design: How to Make User Interface Readable</li> </ul> <p>The following items are cited from different UX guidelines from the web:</p> <p>Windows Design Techniques:</p> <ul> <li> <p>Determine the features your users need. Understand your users\u2019 needs through goal, scenario, and task analysis. Determine a set of features that realizes these objectives.</p> </li> <li> <p>Remove unnecessary elements. Remove elements that aren\u2019t likely to be used or have preferable alternatives.</p> </li> <li> <p>Remove unnecessary redundancy. There might be several effective ways to perform a task. To achieve simplicity, make the hard decision and choose the best one for your target users instead of providing all of them and making the choice an option.</p> </li> <li> <p>Make it \u201cjust work\u201d automatically. The element is necessary, but any user interaction to get it to work is not because an acceptable default behavior or configuration exists. To achieve simplicity, make it work automatically and either hide it from the user completely or reduce its exposure significantly.</p> </li> <li> <p>Combine what should be combined. Put the essential features that support a task together so that a task can be performed in one place. The task\u2019s steps should have a unified, streamlined flow. Break down complex tasks into a set of easy, clear steps, so that \u201cone\u201d place might consist of several UI surfaces, such as a wizard.</p> </li> <li> <p>Separate what should be separated. Not everything can be presented in one place, so always have clear, well-chosen boundaries. Make features that support core scenarios central and obvious, and hide optional functionality or make it peripheral. Separate individual tasks and provide links to related tasks. For example, tasks related to manipulating photos should be separated from tasks related to managing collections of photos, but they should be readily accessible from each other.</p> </li> <li> <p>Eliminate what can be eliminated. Take a printout of your design and highlight the elements used to perform the most important tasks. Even highlight the individual words in the UI text that communicate useful information. Now review what isn\u2019t highlighted and consider removing it from the design. If you remove the item, would anything bad happen? If not, remove it!   Consistency, configurability, and generalization are often desirable qualities, but they can lead to unnecessary complexity. Review your design for misguided efforts in consistency (such as having redundant text), generalization (such as having several time zones when two is enough), and configurability (such as options that users aren\u2019t likely to change), and eliminate what can be eliminated.</p> </li> <li> <p>Put the elements in the right place. Within a window, an element\u2019s location should follow its utility. Essential controls, instructions, and explanations should all be in context in logical order. If more options are needed, expose them in context by clicking a chevron or similar mechanism; if more information is needed, display an info-tip on mouse hover. Place less important tasks, options, and Help information outside the main flow in a separate window or page. The technique of displaying additional detail as needed is called progressive disclosure.</p> </li> <li> <p>Use meaningful high-level combinations. It is often simpler and more scalable to select and manipulate groups of related elements than individual elements. Examples of high-level combinations include folders, themes, styles, and user groups. Such combinations often map to a user goal or intention that isn\u2019t apparent from the individual elements. For example, the intention behind the High Contrast Black color scheme is far more apparent than that of a black window background.</p> </li> <li> <p>Select the right controls. Design elements are embodied by the controls you use to represent them, so selecting the right control is crucial to efficient presentation. For example, the font selection box used by Microsoft Word shows both a preview of the font and also the most recently used fonts. Similarly, the way Word shows potential spelling and grammar errors in place is much simpler than the dialog box alternative.</p> </li> <li> <p>Make tasks discoverable and visible. All tasks, but especially frequent tasks, should be readily discoverable within the user interface. The steps required to perform tasks should be visible and should not rely on memorization.</p> </li> <li> <p>Present tasks in the user\u2019s domain. Complex software requires users to map their problems to the technology. Simple software does that mapping for them by presenting what is natural. For example, a red-eye reduction feature maps directly to the problem space and doesn\u2019t require users to think in terms of details like hues and gradients.</p> </li> <li> <p>Put domain knowledge into the program. Users shouldn\u2019t be required to access external information to use your application successfully. Domain knowledge can range from complex data and algorithms to simply making it clear what type of input is valid.</p> </li> <li> <p>Use text that users understand. Well-crafted text is crucial to effective communication with users. Use concepts and terms familiar to your users. Fully explain what is being asked in plain language so that users can make intelligent, informed decisions.</p> </li> <li> <p>Use safe, secure, probable defaults. If a setting has a value that applies to most users in most circumstances, and that setting is both safe and secure, use it as the default value. Make users specify values only when necessary.</p> </li> <li> <p>Use constraints. If many ways to perform a task exist, but only some are correct, constrain the task to those correct ways. Users should not be allowed to make readily preventable mistakes.</p> </li> </ul> <p>Window UX Top Violations:</p> <ul> <li> <p>Use ordinary, conversational terms when you can. Focus on the user goals, not technology. This is especially effective if you are explaining a complex technical concept or action. Imagine yourself looking over the user\u2019s shoulder and explaining how to do the task. IN CONFLICT WITH Domain</p> </li> <li> <p>Be polite, supportive, and encouraging. The user should never feel condescended to, blamed, or intimidated.</p> </li> <li> <p>Remove redundant text. Look for redundant text in window titles, main instructions, supplemental instructions, content areas, command links, and commit buttons. Generally, leave the full text in main instructions and interactive controls, and remove any redundancy from the other places.</p> </li> <li> <p>Use title-style capitalization for titles and sentence-style capitalization for all other UI elements.</p> </li> <li> <p>For feature and technology names, be conservative in capitalizing. Typically, only major components should be capitalized (using title-style capitalization).</p> </li> <li> <p>For feature and technology names, be consistent in capitalizing. If the name appears more than once on a UI screen, it should always appear the same way. Likewise, across all UI screens in the program, the name should be consistently presented.</p> </li> <li> <p>Don\u2019t capitalize the names of generic user interface elements, such as toolbars, menus, scroll bars, buttons, and icons. Exceptions: Address bar, Links bar, ribbon.</p> </li> <li> <p>Don\u2019t use blue text that isn\u2019t a link, because users may assume that it is a link. Use bold or a shade of gray where you\u2019d otherwise use colored text.</p> </li> <li> <p>Use bold sparingly to draw attention to text users must read.</p> </li> <li> <p>Don\u2019t place periods at the end of control labels or main instructions.</p> </li> <li> <p>Use one space between sentences. Not two.</p> </li> <li> <p>Label every control or group of control</p> </li> <li> <p>For all controls, select the safest (to prevent loss of data or system access), and most secure value by default. If safety and security aren\u2019t factors, select the most likely or convenient value.</p> </li> <li> <p>Use notifications for events that are unrelated to the current user activity, don\u2019t require immediate user action, and users can freely ignore.</p> </li> <li> <p>Don\u2019t abuse notifications: Use notifications only if you need to. When you display a notification, you are potentially interrupting users or even annoying them. Make sure that interruption is justified. Use notifications for non-critical events or situations that don\u2019t require immediate user action. For critical events or situations that require immediate user action, use an alternative UI element (such as a modal dialog box). Don\u2019t use notifications for feature advertisements!</p> </li> <li> <p>Never require users to click an object to determine if it is clickable. Users must be able to determine clickability by visual inspection alone.</p> </li> <li> <p>Whenever possible, propose a solution so users can fix the problem. However, make sure the proposed solution is likely to solve the problem. Don\u2019t waste users\u2019 time by suggesting possible, but improbable, solutions.</p> </li> <li> <p>Be specific. Avoid vague wording, such as syntax errors and illegal operations. Provide specific names, locations, and values of the objects involved.</p> </li> <li> <p>Don\u2019t use phrasing that blames the user or implies user error. Avoid using you and your in the phrasing. While the active voice is generally preferred, use the passive voice when the user is the subject and might feel blamed for the error if the active voice were used.</p> </li> <li> <p>Don\u2019t use OK for error messages. Users don\u2019t view errors as being OK. If the error message has no direct action, use Close instead.</p> </li> <li> <p>Don\u2019t use the following words: Error, failure (use problem instead) Failed to (use unable to instead) Illegal, invalid, bad (use incorrect or not valid instead) Abort, kill, terminate (use stop instead) Catastrophic, fatal (use serious instead)</p> </li> </ul>","tags":["best_practise","ui"]},{"location":"patterns/user_experience/#dark-theme","title":"Dark theme","text":"<p>Use the predefined colors in MPS or define your colors using the class JBColor with the constructor <code>JBColor(light theme color, dark theme color)</code>. By using this class, it shouldn\u2019t be necessary to verify if the user is using the Darcula theme. The MPS colors already support the light and dark theme because they inherit from <code>JBColor</code>. As seen in the screenshot below, the colors can be different when using the dark theme (for example the white and black colors). Don\u2019t use hard-coded hex colors or the class Color.</p> <p> </p> Light theme <p> </p> Dark theme <p>Make sure that the foreground color is readable for the chosen background (see preceding screenshots). You can use an online contrast checker tool to verify that the color combination is readable.</p> <p>Example for colors with a good contrast ratio (foreground: black, the ratio can be found after the hex code):</p> <p></p> <p>If this change isn\u2019t feasible, you can switch to the default theme (useful for RCPs):</p> <pre><code>class LookAndFeel {\nvoid set() {\nLafManager lafManager = LafManager.getInstance();\nQuickChangeLookAndFeel.switchLafAndUpdateUI(lafManager, LafManagerImpl.getTestInstance().getDefaultLightLaf(), false);\n}\n}\n</code></pre> <p>Additional useful resources:</p> <ul> <li> <p>ColorUtil (fromHex, darker, brighter, withAlpha, saturate, desaturate\u2026)</p> </li> <li> <p>MPS color definitions: MPSColors.java</p> </li> <li> <p>JBColor.brighter() + JBColor.darker() e.g. <code>new JBColor(JBColor.PINK, JBColor.PINK.darker().darker())</code></p> </li> <li> <p>IntelliJ IDEA color definitions: JBColor</p> </li> <li> <p>IntelliJ IDEA platform colors + explanation: JBUI + Platform theme colors</p> </li> <li> <p>Apple color Guidelines</p> </li> </ul>","tags":["best_practise","ui"]},{"location":"platform_essentials/","title":"Platform essentials","text":"<p>The following pages give an introduction to the most important languages of the platforms. Additionally, make sure to check out sandboxes and test cases in the corresponding languages.</p> <p>If you aren\u2019t sure how to use a specific concept, right-click it \u2192 Find Usage Settings \u2192 Concept Instances/Node usages + Global Scope. You can also use the console to search for instances:  <code>#instances&lt;scope = global&gt;(ClassConcept)</code></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/accessing_the_project/","title":"Accessing the project","text":"<p>There are a lot of of different ways to get the MPS/IntelliJ project, some of them are hacks that should be avoided. This page only lists the recommended approaches on purpose. There are only a few useful methods in the project class. Namely, access to scope, repository, and core components. The idea is that user-triggered actions take what\u2019s necessary (e.g. a command lock) and then the code down the execution path shall not care to take one.</p>"},{"location":"platform_essentials/accessing_the_project/#what-are-the-different-project-classes","title":"What are the different project classes?","text":"<ul> <li>com.intellij.openapi.project.Project: a project in the IntelliJ platform. There are different ways to access the project instance, most of them are not available in MPS. Every time you interact with the IntelliJ platform, you need this class.</li> <li>org.jetbrains.mps.openapi.project.Project: the MPS equivalent of a project. It provides access to the repository, its name and modules, and to the model access class for reading and writing models</li> <li>jetbrains.mps.project.Project:  MPS Project abstraction. The project may rely on the idea Project or not. It has a scope and a corresponding project repository to store modules in it.</li> <li>jetbrains.mps.project.ProjectBase: MPS Project basic implementation. This project is tied to the MPS platform and gives access to the MPS core platform and components it comprises.</li> <li>jetbrains.mps.project.MPSProject: represents a project based on the idea platform project. It is in use in MPS as an IDEA plugin. The method <code>getProject()</code> returns the IntelliJ project.</li> <li>jetbrains.mps.project.StandaloneMPSProject: this class is for MPS as a standalone IDE. <code>#project</code> on the MPS console returns an instance of this class.</li> </ul>"},{"location":"platform_essentials/accessing_the_project/#places","title":"Places","text":"<p>There are a few different places where you might need access to a project. Not all of them can access it.</p>"},{"location":"platform_essentials/accessing_the_project/#actions","title":"Actions","text":"<p>Actions provide access to the MPS/IntelliJ project, the project frame, her information via action context parameters. The official documentation also explains the classes that  need to be imported to access those. The available actions can be found on the page Actions | Reference. There is no need to convert between different project classes because all parameters are available.</p>"},{"location":"platform_essentials/accessing_the_project/#editor","title":"Editor","text":"<p>This is also explained on the Specific Languages blog: How to get the current MPS project from within the editor. Components in the IntelliJ platform can implement the interface DataProvider to provide data that can be accessed through the DataManager class. A common data provider is the editor component, actions also support the DataManager:</p> <p><pre><code>Component editorComponent = (Component) editorContext.getEditorComponent();\nMPSProject project = MPSDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext(component));\n</code></pre> This is the recommended way to access the project in the editor or in Java Swing component cells. The following simpler approach also works but depends on implementation details that might change in the future:</p> <pre><code>Project project = ProjectHelper.getProject(editorContext.getRepository());\n</code></pre> <p>For most features like transformation menus, style sheets, and action maps, the editor context is available.</p>"},{"location":"platform_essentials/accessing_the_project/#intentions","title":"Intentions","text":"<p>Intentions always have the <code>editorContext</code> available and can access the project the same way as the editor. If you need to access the project or other context information, you might also want to consider using an action instead. Actions can be shown in the right-click menu of the editor if you need them closer to the editor.</p>"},{"location":"platform_essentials/accessing_the_project/#tests","title":"Tests","text":"<p>In tests, the <code>project</code> expression is available, although it should be rarely needed except when invoking the generator or resolving nodes through the global repository.</p>"},{"location":"platform_essentials/accessing_the_project/#plugin-solutionplugin-aspect","title":"Plugin solution/plugin aspect","text":"<p>If you need access the project object, you can use a project plugin where an <code>MPSProject</code> instance is available in the init and dispose block. The instance can be passed to other classes as well. To get the IntelliJ project use <code>ProjectHelper.toIdeaProject(project)</code>.</p>"},{"location":"platform_essentials/accessing_the_project/#other-places","title":"Other places","text":"<p>Some low-level code, like behaviors, are not supposed to start a command or interact with the UI (where some dialogs require the project/IDE frame). There\u2019s always a project for user-triggered actions, and this is the moment proper command access gets started, and various UI stuff happens. It\u2019s wrong to invoke some behavior that would try to guess the project down the road. Normally, there also should not be a need to access the project in the generator.</p>"},{"location":"platform_essentials/accessing_the_project/#code-to-avoid","title":"Code to avoid","text":"<ul> <li>guessing the project through <code>ProjectManager.getInstance().getOpenedProjects()</code></li> <li>guessing the project through the owners of <code>(MPSModuleRepository) (model/.getRepository())</code></li> <li>accessing the project in an application plugin</li> <li>guessing the IntelliJ project through the WindowManager class</li> </ul> <p>When you need to access the model from a different thread (concurrent access) it might be tempting to write the following code that doesn\u2019t work:</p> <pre><code>command with node.model/.getRepository() {\n}\n</code></pre> <p>It will fail with the following exception: <code>GlobalModelAccess does not support actions that require a command to run. One needs a project to run such actions</code>. In those cases, it is possible to access the project and write <code>project.getRepository()</code>. Use one of the mentioned methods and don\u2019t guess the project. Ask yourself: do I need to invoke the code here or is there a better place to invoke it?</p>"},{"location":"platform_essentials/accessing_the_project/#exceptions","title":"Exceptions","text":"<ul> <li>Model listeners don\u2019t have access to the project.</li> <li>The project is necessary for project-wide find usage/project scope.</li> <li>The class ProjectHelper can be used to convert between different projects, SRepository instances, and frames.</li> </ul>"},{"location":"platform_essentials/build_folder/","title":"Build folder","text":"<p>This page describes the build folder of the different platforms that are located in the root folder of the corresponding project. The folder contains files that are checked into Git such as Gradle files as well as generated Ant build files and other temporary files.</p> <p>Some folders that are described in the IETS3 section, are located at the root level in the other repository. They are also described because they belong to the build process.</p>","tags":["infrastructure"]},{"location":"platform_essentials/build_folder/#mps-extensions","title":"MPS-extensions","text":"<ul> <li>The generated folder contains the generated build scripts such as the scripts for building the languages and tests.</li> <li>The mps folder contains the MPS installation. The task resolveMps resolves the MPS dependency from the mps configuration and copies it to this folder which also serves as the mpsHomeDir.</li> </ul>","tags":["infrastructure"]},{"location":"platform_essentials/build_folder/#mbeddr","title":"mbeddr","text":"<ul> <li>The com.mbeddr.allScripts contains the generated Ant script that includes all other build scripts. It is checked into version control.</li> <li>The com.mbeddr.analyses.cbmc folder contains old shell scripts for building CBMC on Window, macOS, and Linux.</li> <li>The com.mbeddr.release folder contains a shell script for publishing mbeddr on GitHub.</li> <li>The com.mbeddr folder contains the general build script (build.gradle) as well as all the build scripts for all subprojects.</li> <li>The publishing folder contains a Gradle script for publishing mbeddr.</li> <li>The thirdparty folder contains build scripts for third-party tools used by mbeddr (Graphviz).</li> <li>The com.mbeddr.x folders contain the generated build scripts for building the languages and tests.</li> </ul>","tags":["infrastructure"]},{"location":"platform_essentials/build_folder/#iets3","title":"IETS3","text":"<ul> <li>The artifacts folder contains the generated files of the Ant scripts. This includes the compiled MPS plugins as well as the build-all script and the plugin for the tests.</li> <li>The config folder contains nothing except an empty ssl folder (TODO: where does this folder come from?)</li> <li>The dependencies folder contains the downloaded dependencies of the project. In this case, it contains the mbeddr platform + MPS-extensions.</li> <li>The distributions folder contains the generated artifacts of the languages and tests as zip folders.</li> <li>The junitreport folder contains the results of the test execution as an HTML report (index.html).</li> <li>See: mps folder in MPS-extensions.</li> <li>The scripts folder contains the Ant scripts that were generated from the MPS build language. (TODO: why is there a nested build folder?)</li> <li>The system folder is the temporary system directory for the test execution.</li> <li>The tmp folder contains temporary files generated by the Java compiler.</li> <li>The jbrDownload folder contains the downloaded JBR version that is used for the build. The downloadJbr Gradle task comes from the mps-gradle-plugin.</li> </ul>","tags":["infrastructure"]},{"location":"platform_essentials/common_concepts_and_interfaces/","title":"Common concepts and interfaces","text":"<p>This list explains some common abstract concepts and interfaces that you can use to extend or use the functionality of the platforms. Identifiers starting with a capital \u201cI\u201d refer to interfaces.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#mbeddr","title":"Mbeddr","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#base","title":"Base","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#assessment","title":"Assessment","text":"<p>To extend assessments, extend the class AssessmentQuery to create a new query. The result of the query has to extend the class AssessmentResult. The interface AssessmentSummary must also be extended to provide a summary of the results.</p> <p>Example:</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#chunk","title":"Chunk","text":"<p>A node of the class Chunk has several properties: it has a name, acts as a scope provider for elements, can import other elements or vice versa. It also integrates with the tree view and provides a graph of all the chunk hierarchy including imports. It also detects dependency cycles.</p> <p>Example:</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icommentable","title":"ICommentable","text":"<p>Concepts or interfaces that implement ICommentable can be commented out by typing <code>//</code> or <code>/*</code> as long as it is not triggered by a node that implements IEmpty.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#idocumentable","title":"IDocumentable","text":"<p>Add support for documenting nodes when implementing the IDocumentable interface. The text node is using the language <code>de.slisson.mps.richtext</code> and supported text and embedded nodes.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#itreeviewable","title":"ITreeViewable","text":"<p>Implement ITreeViewRoot to use the Tree tool. It is a tool that can show a tree structure when this interface is implemented.</p> <p>Example: IETS3 call tree of functions</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icontainerofuniquenames","title":"IContainerOfUniqueNames","text":"<p>IContainerOfUniqueNames checks that the provided names are indeed unique and shows an error otherwise. For qualified names, implement the interface IHasQualifiedName.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#idetectcycle","title":"IDetectCycle","text":"<p>IDetectCycle can be implemented to detect cyclic dependencies. This feature is used, for example, with chunks that import other chunks.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iempty","title":"IEmpty","text":"<p>IEmpty can be implemented to support empty lines. Error messages are automatically suppressed and the node is also not shown in the outline.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#name-related-interfaces","title":"Name related interfaces","text":"<p>IIdentifierNamedConcept can be used for concepts that should have valid identifiers. Check the property constraint to understand how it works.</p> <p>INameAllUpperCase, INameFirstCharLowerCase and INameFirstCharUpperCase can be used to further constraint the identifier name.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#imbeddrideroot","title":"IMbeddrIDERoot","text":"<p>Concepts that implement the interface IMbeddrIDERoot show up in the New Roots menu that\u2019s shown above the normal new menu of the context menu. It adds the following features: a custom name for the menu entry, root concept sorting, and custom categories for the root concepts.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iets3","title":"IETS3","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#general","title":"General","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#isolvable","title":"ISolvable","text":"<p>ISolvable can be implemented to create solver tasks that could be executed by a solver such as Z3. To enable the solver for a node, implement the interface IUseSolver. A solver task must extend the concept AbstractSolverTask. The concept that can be mapped to the solver must implement ICanBeMappedToSolver.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icanruncheckmanually","title":"ICanRunCheckManually","text":"<p>ICanRunCheckManually can be implemented to support running checks that are executed through one of the actions (runAllManuallyOnModel, runAllManuallyOnRoot, runManuallyOnContainer) or are executed through intentions. The result of a check can be stored as a user object of a node. The interface also supports updating the editor with the test results, for example, highlighting the background of a test with color and refreshing the editor.</p> <p>Example:</p> <p></p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#ioptionallynamed","title":"IOptionallyNamed","text":"<p>Use the interface IOptionallyNamed for concepts that should support an optional name. You can also use this name in smart references.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#ivalidnamedconcept","title":"IValidNamedConcept","text":"<p>As an alternative to the mbeddr interfaces, you can use the interface IValidNamedConcept for valid identifiers that are valid in KernelF.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#expressions","title":"Expressions","text":"<p>To add a new expression, extend the concept Expression. The new concept can be commented out and documented by default.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#icanbelvalue","title":"ICanBeLValue","text":"<p>Implement the interface ICanBeLValue when the concept can be used as the left value of expressions such as assignments. Variable references, paths, and dot expressions can be left values.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#idottarget","title":"IDotTarget","text":"<p>Implement IDotTarget to support custom operations for the dot expression. It can be used, for example, to add new operations for collections, enumerations, math, state machines, and many more.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iemptyliteral","title":"IEmptyLiteral","text":"<p>IEmptyLiteral is a marker interface used to mark literals that at runtime evaluate to an empty value.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iliteral","title":"ILiteral","text":"<p>Implement ILiteral to add support for a new literal. For primitive types such as integers and strings, extend the concept PrimitiveLiteral instead. Register an extension for the primitiveTypeMapper extension point when using custom primitive literals. The standard implementation is the SimpleTypesPrimitiveTypeMapper.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#effects","title":"Effects","text":"<p>Since KernelF is by default immutable, some language extensions allow side effects such as the language org.iets3.core.expr.mutable. To add custom concepts that have effects, implement the interfaces IMayAllowEffect and IMayHaveEffect.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#ioptionallytyped","title":"IOptionallyTyped","text":"<p>Use the interface IOptionallyTyped to add an optional type to an expression. The expression automatically used the provided type as its type.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#itraceroot","title":"ITraceRoot","text":"<p>Nodes that want to be the root of tracing, should implement the interface ITraceRoot</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#custom-types","title":"Custom types","text":"<p>Custom types must extend the concept Type. If the type supports a default value (e.g. <code>false</code> for the boolean type and <code>0</code> for a numeric type), also implement the interface ITypeSupportsDefaultValue.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iwantnewline","title":"IWantNewLine","text":"<p>The concepts of expressions that need to be on a new line such as try expressions, block expressions, and sometimes tables, need to implement the interface IWantNewLine. This interface affects the layout of some expressions such as if expressions and function bodies.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#tests","title":"Tests","text":"<p>To add a new test statement, extend the concept AbstractTestItem. If the editor needs to be updated after the test item was executed, override the method performAdditionalEditorUpdate.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#top-level","title":"Top-level","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#itoplevelexprcontent","title":"IToplevelExprContent","text":"<p>Implement the interface IToplevelExprContent to allow an expression to be used at the topmost level like the ExpressionStatement in Base Language.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#collections","title":"Collections","text":"<p>When implementing custom operations for collections such as maps, lists and sets, use one of the provided concepts as the base concept (for example NoArgCollectionOp and OneArgCollectionOp). If no suitable concept is available, implement one of the interfaces such as ICollectionOp and IMapOneArgOp. If this is still not possible, you can still implement IDotTarget directly.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#mps-extensions","title":"MPS-extensions","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#richtext","title":"Richtext","text":"","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/common_concepts_and_interfaces/#iword","title":"IWord","text":"<p>Implement IWord to add new embeddable nodes to the text.</p>","tags":["mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/contributing/","title":"Contributing","text":"<p>This guide shows how to make a contribution to one of the platforms. It takes  IETS3 as an example. It mostly uses the MPS GUI for Git. If you want to do everything on the command line, check out An introduction to Git or one of the Git cheatsheets.</p> <ol> <li>Make sure that you have Git installed.</li> <li>Clone the repository: <code>git clone https://github.com/IETS3/iets3.opensource.git</code> or Check out a project from a remote host for the GUI way.</li> <li>Decide which branch you want to use as the template for the contribution. The supported MPS version should be listed in the README. Older branches are named maintenance/mpsX, e.g. maintenance/mps20203, the main branch is the master branch.</li> <li>If you have already checked out the repository before, make sure to fetch all the changes from the remote repository.</li> <li>Create a new branch from the selected branch. Some common names are feature/X, bugfix/X, and refactoring/X where X stands for a description of the branch and maybe the targeted MPS version such as feature/my_feature_20211.</li> <li>Push the changes to the repository. Editing the repository history is only allowed on your on branch.</li> <li>Create a new pull request in the remote repository. </li> <li>Optionally, request a pull request review if the repository requires reviewing. Make sure that the build runs on https://build.mbeddr.com. The status can be viewed in the PR.</li> <li>If the reviewer requires a change, make the change and click the re-request review button.</li> <li>If the reviewer approves the change, you can merge the changes (or he has already merged your changes). If you have a lot of commits, that you want to merge into one commit or several commits, you can either use interactive rebase in MPS or squash your commits into one single commit when merging the pull request.</li> </ol> <p>Some more tips:</p> <ul> <li>Enable GitHub notifications to receive mail notifications about events on GitHub such as comments, or approved pull requests.</li> <li>The browser extension Refined GitHub provides some additional features for GitHub that you might find useful.</li> </ul>","tags":["iets3"]},{"location":"platform_essentials/how_everything_is_connected/","title":"How everything is connected","text":"<p>This page describes the connections between MPS, IntelliJ Community, JBR, TeamCity, and all open-source repositories.</p> <p>JetBrains MPS is based on IntelliJ IDEA. It doesn\u2019t use all the plugins but rather extends it through the IntelliJ platform SDK to add support for tools that can be used to design domain-specific languages. The projectional editor of MPS is a custom editor implementation instead of the standard text editor therefore many text-based features of IntelliJ won\u2019t work (such as syntax language injections or code templates). Some features are unused or disabled such as the Program Structure Interface which is normally used as the layer responsible for parsing files and creating the syntactic and semantic code model.</p> <p>MPS/IntelliJ IDEA requires a Java Runtime. Both use the JetBrains Runtime, a fork of OpenJDK. It includes several enhancements in font rendering, ligatures, HiDPI support, windowing/focus subsystems, performance improvements, and bug fixes. The repository mbeddr/build.publish.jdk publishes the needed runtimes for the different MPS versions on the itemis nexus server.</p> <p>A zipped version of all MPS versions, as well as the most import components of MPS (jar files) such as the editor API or the model checker, are also published through the repository mbeddr/build.publish.mps to the itemis nexus server.</p> <p>Custom RCP version of MPS can be created which are customized versions of MPS. The first big RCP was mbeddr with its repository located at mbeddr/mbeddr.core. The old homepage is located at mbeddr/mbeddr.github.io. Useful plugins were extracted into the subproject com.mbeddr.mpsutil with its old documentation hosted at mbeddr.com/platform.html. Some plugins and languages were later moved to a new repository JetBrains/MPS-extensions, especially the editor-related languages. The repository is hosted by JetBrains. A list of all extensions in this repository can be found here. Many extensions were contributed by itemis, a few of them by DSLFoundry. The documentation for both platforms is hosted on GitHub and on the current website respectively. Mbeddr.core has a dependency on MPS-Extensions.</p> <p>The mbeddr organization also hosts mbeddr.formal: FASTEN (FormAl SpecificaTion ENvironment) which is a set of DSLs to experiment with rigorous systems and safety engineering and mps-qa which is a quality assurance tooling for MPS (blog post).</p> <p>A further platform that builds on the other two is IETS3/iets3.opensource which mostly consists of KernelF, an extensible and functional language that can be used in MPS as the core language of DSls and can be generated into Java code.</p> <p>To build MPS projects, the MPS build language is used which generates Ant scripts that can be executed on the command line. The Ant scripts can be called directly. Other projects use Maven instead. The most popular build automation tool is Gradle. Mbeddr/mps-gradle-plugin is a Gradle plugin that helps build MPS-based projects with Gradle. This plugin is used by all MPS platforms as well as many other MPS projects. It also contains a task download-jbr which can use the JBR artifacts that were published by the build.publish.mps repository. Some plugins were extracted into the repository mbeddr/mps-build-backends which allows executing the plugin through the command line instead of using them via Gradle.</p> <p>To publish the generated artifacts, the platforms use the Maven publish plugin, a Gradle plugin that provides the ability to publish build artifacts to Apache Maven repositories. The artifacts are published to artifacts.itemis.cloud which is a so-called nexus repository and the Apache Maven registry of the corresponding GitHub project (example).</p> <p>To run the build and execute the tests, two different tools can be used: for smaller repositories GitHub Actions are used. They can be configured through the Actions tab in the corresponding repository (example) and are saved in the .github/workflows directory of the repository.</p> <p>Bigger repositories use the TeamCity server located at build.mbeddr.com. TeamCity is a build management and continuous integration server. When a new branch is pushed to any of the mentioned repositories, a build is triggered and the tests are executed. Some projects require a code review and a successful build before a branch can be merged. Build configurations for the different projects are saved on the server. The actual build is executed by a build agent. The TeamCity server and the agents (which are sometimes not located on the same server) are run inside Docker containers. The source for the agent docker image is located at mbeddr/mbeddr.build.docker.</p>"},{"location":"platform_essentials/interpreter/","title":"Interpreter, coverage and tracing","text":"<p>The interpreter lets you interpret code on the fly. You can use it instead of the normal approach by writing an MPS generator and executing the code this way (e.g. executing Base Language code). The result of invoking the interpreter is a Java object.</p> <p></p> <p>In the GIF you can see the interpreter executing a test case that contains assertions written with KernelF. The MPS generator isn\u2019t involved in the execution at all.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#creating-an-interpreter","title":"Creating an interpreter","text":"<p>To create a new interpreter, create a new solution that contains the interpreter and import the language <code>com.mbeddr.mpsutil.interpreter</code>. Make sure to set the solution kind to <code>Other</code> in the module properties.</p> <p></p> <p>Now create a new model inside your new solution, create the new interpreter, and give it a name. The category should be <code>arithmetic</code> so that other interpreters of this category can also use this interpreter, but you can also use other categories. A demo Java interpreter exists in mpsutils (mbeddr) that uses its own category <code>java</code>. You don\u2019t have to set the evaluated languages: they are automatically calculated based on the declared evaluators.</p> <p>In the related interpreter section, you can define that the current interpreter should run before or after another interpreter. An example from KernelF: the collections operations should be interpreted first because they are reduced to simpler statements. The lambda and base interpreter should be run afterward.</p> <p>The type mappings section can declare mappings from types that implement the IType interface to either a java type or another custom type that implements the IType interface.</p> <p></p> <p>An evaluator consists of a left and right side: the left side is a concept that should be interpreted. In the inspector, you can set cacheValues to true to enable caching. When the same value is accessed again, the cached value is returned instead of recalculation a value. The interpreter cache can be disabled by unchecking Tools \u2192 Enable Interpreter Cache in the main menu.</p> <p></p> <p>The right side contains an expression or a block and must return a value. The node expression refers to the currently evaluated expression. A few expressions start with #, which are explained in their corresponding short descriptions. The #-&gt; expression is used to call functions (search for usages globally). The right side can return a Java object (including null) or call another interpreter with one of the #-expressions. Another interesting expression is the env expression. It\u2019s an array that can be used to save values for other evaluators. The key must be a node. If you don\u2019t have a node available, you can also use a helper class with static dummy nodes as keys. An example could be a dot expression where the operation needs to access the operand e.g. <code>\"hello\".startswith(\"he\")</code>. <code>startswith()</code> is the operation, <code>\"hello\"</code> is the operand:</p> <p></p> <p>When the current interpreter is not suitable for interpreting the current node, the expression tryOtherInterpreter can be used to use the next interpreter to interpret the current node:</p> <p></p> <p>The castUp expression can be used to cast a Java (Base Language) expression to a type. For example, if the expression is of type Number (numberInput) and the target type is float, <code>numberInput.floatValue()</code> would be called. The $ expression returns the concept\u2019s type. It can be used for type mappings but also for child-type constraints that can be entered in the middle of evaluators. For example: the evaluator of a modulo operator might require that the left and right expressions are of type integer otherwise the evaluator shouldn\u2019t be used:</p> <p></p> <p>The context expression can be used to access the interpreter configurations, the cache, and the root interpreter, and contains some other useful. It can, for example, be used to access the environment from a Java class by executing a method with the context as a parameter. Then the environment can be accessed by calling <code>context.getEnvironment()</code>. The environment can be nested by calling <code>push</code> and <code>pop</code>. The topmost environment in the stack is used. The is-evaluable expression (#?) can be used to check if an evaluator for a specific node is available.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#code-coverage","title":"Code coverage","text":"<p>There\u2019s also support for coverage that\u2019s displayed inside the editor. Code coverage checks which part of the code was executed by the interpreter. For more information, consult the Wikipedia page. This way you can, for example, find out which parts of the code aren\u2019t covered by tests:</p> <p></p> <p>There\u2019s support for coverage of single nodes but also branches. An example for branches would be, for example, the if and else blocks of an if statement. To register branches use the register branches statement. To visit a branch, use the branch statement. When visiting a node, the node, the node\u2019s concept , and the evaluator are automatically marked as covered. For the children of the node, there\u2019s the list coverage statement which visits a list of nodes and there\u2019s also the simple cover statement. The former is, for example, used for the elements of a map literal. The coverage information can be accessed and set through the coverage variable.</p> <p></p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#calling-the-interpreter","title":"Calling the interpreter","text":"<p>For IETS3 use the class <code>IETS3ExprEvalHelper</code>. If you can\u2019t use this class, use the following code: <pre><code>class Coverage {\nvoid test() {\nICoverage coverage = null; // your implementation\nContextImpl ctx = new ContextImpl();\nInterpreterEvaluationHelper helper = new InterpreterEvaluationHelper(INTERPRETER_CATEGORY);\nreturn helper.evaluateWithContextAndCoverage(expr, getInterpreter(), ctx, coverage);\n}\n}\n</code></pre></p> <p>Other methods don\u2019t need coverage, a context object, and so forth. The easiest method is <code>helper.evaluate</code> which returns a Java expression.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#final-notes","title":"Final notes","text":"<p>The interpreter doesn\u2019t support multithreading. It can also be slow when called too many times.</p> <p>It\u2019s also recommended to not call the interpreter from the generator because when searching for interpreters. MPS might deadlock because it starts indexing. You might get away with it by calling the interpreter inside the runnable of <code>DumbService.getInstance(project).suspendIndexingAndRun()</code>. You can\u2019t return the value from the runnable, but you can assign it in a method of an object that\u2019s outside the runnable.</p>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/interpreter/#examples","title":"Examples","text":"<ul> <li>KernelF: ExprBaseInterpreter</li> <li>Mbeddr: JavaInterpreterBase</li> </ul>","tags":["mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/","title":"Platform build scripts","text":"<p>This page describes the  MPS-extensions and  IETS3 build scripts. They might look different in the future but this guide should still be helpful. The build scripts from  mbeddr work similar but there\u2019s more than just one, so let\u2019s focus on the other two platforms.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/#mps-extensionsbuildgradle","title":"MPS-extensions/build.gradle","text":"<p>Let\u2019s ignore Modelix related stuff. The script uses the mps-gradle-plugin which already contains some useful tasks for Gradle-based builds with MPS.</p> <p>Line 2: the build script block lists the used dependency repositories: the new itemis nexus server (https://artifacts.itemis.cloud) and also the old one (projects.itemis.de).</p> <p>Line 8: The dependency block contains the reference to the mps-gradle-plugin.</p> <p>Line 15: for publishing artifacts to GitHub, the plugin gradle-github-plugin can be used. It\u2019s important to import the classes from the mps-gradle-plugin: <code>import de.itemis.mps.gradle.*.</code></p> <p>Line 28: the gradle wrapper can be used to specify the Gradle version that  should be downloaded: it must be compatible with the used Java version (compatibility matrix)</p> <p>Line 34: the variable ciBuild can affect the build, for example, by using a different version identifier for the artifacts.</p> <p>Line 47: The path to the Java installation must be set. For the build it isn\u2019t important if it\u2019s a normal JDK or a JBR, only the Java version must be correct.</p> <p>Line 71: a few different ways exist to specify properties for the build. This guide explains them.</p> <p>Line 77: This list contains the Nexus repositories that are used for fetching the dependencies. The actual declaration is done on line 138.</p> <p>Line 83-109: the logic for deciding the version identifier. It uses hardcoded values, the branch name and ciBuild and the class GitBasedVersioning to create a suitable identifier. A local build gets the version 1.0-SNAPSHOT as described in the Maven guide. More information can be found in this StackOverflow question.</p> <p>Line 112-123: the plugins directory varies depending on the operating system (Plugins directory | MPS).</p> <p>Line 125: The following variables contain the Nexus repositories that are used for publishing the artifacts.</p> <p>Line 130-136: a new configuration named mps is declared. It\u2019s used for declaring the dependency on MPS. The dependencies block declares the dependency. The dependency isn\u2019t automatically resolved because a custom configuration is used. The resolution task is created on line 150 and the following lines. <code>configurations.mps.resolve()</code> downloads the zip file, <code>zipTree</code>unzips it into the MPS home directory.</p> <p>Line 168-174: This dependency is needed to support Junit ant tasks. Line 183-199: Some system variables are set by prepending <code>-D</code> in front of the key-value pairs. These variables are declared in the build solution in the build script of the MPS project. They can be overridden from the command line this way.</p> <p>Line 204-219: The all script is a special MPS build script that calls all other build scripts. This task has the type BuildLanguages as described in the Gradle plugin documentation and executes the xml file that was created by the MPS build language. The next lines also declare tasks for building the languages and running the tests. They call the corresponding build scripts from the build module of this project (de.itemis.mps.extensions.build).</p> <p>Line 221: this task installs the nativelibs.loader plugin which can be used for loading native code(e.g. C code) that is needed for a Java library (e.g. C debugger). A special plugin is needed because special methods for loading native code in Java exist. Normal MPS solutions shouldn\u2019t be used for this task because they can be reloaded in MPS which isn\u2019t possible with native libraries. This plugin is implemented as an IntelliJ plugin which is not affected by the MPS reloading mechanism.</p> <p>Line 250: This block declares the Junit ant dependency.</p> <p>Line 260-270: These two tasks create zip files from the artifacts.</p> <p>Line 272: the clean tasks removes the generated MPS files, cleans the temporary folder and remove the content of the artifact folder.</p> <p>Line 279-317: This block uses the Maven publishing plugin to publish the generated artifacts to different repositories such as Nexus and GitHub maven repositories. The credentials can be stored on the build server (e.g. TeamCity) or in the GitHub project itself, when the project is built with GitHub actions.</p> <p>Line 319-339: This block defines one single publication de.itemis.mps:extensions. It also publishes a Maven pom file that lists all the dependencies of this artifact (in this case: only MPS).</p> <p>Line 376: This block declares the publication for GitHub. Warning: it\u2019s not possible to publish an artifact with the same name on GitHub, it won\u2019t be overridden.</p> <p>The rest of the build script uses modelix/mpsbuild, a replacement for the MPS build language. Visit Exploring modelix/mpsbuild - Specific Languages for some initial information on this project.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/#iets3opensourcebuildgradle","title":"iets3.opensource/build.gradle","text":"<p>The build script looks like the script from MPS-extensions, so let\u2019s focus only on the differences.</p> <p>Line 68-112: The project has a dependency on mbeddr which can be overridden with a local dependency by setting the project variable forceLocalDependencies.</p> <p>Line 134-139: A few configurations are declared in this block. The dependencies of these configurations are resolved in different Gradle tasks, for example in the task resolvePcollections on line 179.</p> <p>Line 259-264: Additional to exporting the languages and solutions, the project also creates a standalone IDE (RCP)</p> <p>Line 332-406: This time there a multiple publications. Not only the languages and tests are published but also some runtime Java libraries that are needed  by KernelF (e.g. org.iets3.core.expr.datetime.runtime for the datetime language).</p> <p>Line 409-421: This task reads project libraries from projectlibraries.properties and generates libraries.xml in the .mps directory. Libraries are loaded in MPS during the start. A library is, for example, mbeddr. The task is used by the setup tasks which should be executed when cloning the project.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/platform_build_scripts/#mbeddr-build-scripts","title":"Mbeddr build scripts","text":"<p>The main build.gradle can be found in the root directory. A build subfolder exists. The most important build files are com.mbeddr/build.gradle which build mbeddr itself and com.mbeddr/platform/build.gradle which builds the mbeddr platform.</p>","tags":["infrastructure","mps_extensions","mbeddr","iets3"]},{"location":"platform_essentials/testing/","title":"Testing","text":"<p>This page explains some testing ideas in MPS according to general ideas in software testing. For a specific MPS testing introduction, visit Testing language | MPS documentation.</p>"},{"location":"platform_essentials/testing/#testing-techniques","title":"Testing techniques","text":"<p>The following techniques are considered typical black-box design techniques which means you examine the functionality of an application without peering into its internal structures or workings.</p> <ul> <li>Equivalence partitioning: An equivalence class or equivalence partition is a set of test cases that tests the same thing or reveals the same bug. Often nearly unlimited combinations of input data exist. The idea is to reduce the necessary test cases  by dividing the input data into partitions of equivalent data from which test cases can be derived. Test cases are designed to cover each partition at least once. KernelF has support for equivalence partitions in test cases.<ul> <li>Example: a number with exactly 6 digits is allowed. Partitions: &gt;6 (invalid), &lt;= 5 (invalid), = 5 </li> </ul> </li> <li>Boundary-value analysis: It is based on testing the boundary values of valid and invalid partitions. Values at the edge of partitions are more likely to be overlooked and force errors. Off-by-one errors or boundary condition errors can   also be detected with this technique. The example for the previous technique also shows a case of boundary-value analysis.</li> <li>Decision tables: They are used to test different input combinations/conditions in a tabular form. They are directly supported in KernelF.</li> </ul>"},{"location":"platform_essentials/testing/#what-is-a-bug-and-what-should-be-tested","title":"What is a bug and what should be tested","text":"<p>A software bug is an error, flaw, or fault in the design, development, or operation of computer software that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. software bug | Wikipedia</p> <p>A good approach to finding bugs is to check if one of the following 5 rules is true which were first defined in the book Ron Patton - Software Testing from 2006:</p> <ol> <li>The software doesn\u2019t do something that the product specification says it should do.</li> <li>The software does something that the product specification says it shouldn\u2019t do.</li> <li>The software does something that the product specification doesn\u2019t mention.</li> <li>The software doesn\u2019t do something that the product specification doesn\u2019t mention but    should.</li> <li>The software is difficult to understand, hard to use, slow, or \u2013 in the software tester\u2019s    eyes \u2013 will be viewed by the end user as just plain not right.</li> </ol>"},{"location":"platform_essentials/testing/#automatic-testing","title":"Automatic testing","text":"<p>Have a look at the quick navigation table | MPS documentation first. In addition, type-system errors should be tested with \u201chas error\u201d annotations in node test cases.</p> <p>While the generator can be tested with generator tests as explained in the documentation, they are often not fine-grained enough to test exactly what you want to test. You might also want to exclude certain nodes or properties or show the result in a diff tool. An alternative approach is to invoke the generator yourself through com.mbeddr.mpsutil.generatorfacade.GeneratorFacade#runGenerator and compare the expected and actual output yourself with <code>com.mbeddr.mpsutil.compare.structure.AssertNodeEquals</code>.</p>"},{"location":"platform_essentials/testing/#manually-testing","title":"Manually testing","text":"<ul> <li>Is there documentation for a new feature/change?</li> <li>Is the change mentioned in the changelog?</li> <li>Is the sandbox/tutorial updated to showcase the feature?</li> <li>Are there visual problems with editor-related languages such as tables and diagrams?</li> <li>Is the reflective editor shown anywhere caused by an exception?</li> <li>Does the editor freezes?</li> <li>Do any actions throw exceptions?</li> <li>Are there any exceptions in the log file?</li> </ul>"},{"location":"platform_essentials/testing/#testing-approaches","title":"Testing approaches","text":"<ul> <li>Functional review (black-box-testing): The tester doesn\u2019t look at the code but rather checks the functionality of an application and if it meets the specification.</li> <li>Code review (white-box testing): a different developer (e.g. from the same team) checks the code for   logical errors, code standard violations, and other issues. If, for example, GitHub is used for hosting the project and reviews are required before a branch can be merged, a reviewer can comment on a PR, approve it or request changes.</li> </ul>"},{"location":"platform_essentials/testing/#continuous-testing","title":"Continuous testing","text":"<p>MPS tests such as unit, nodes, and editor tests can be executed on the command line and as part of the CI pipeline. To execute tests with the mps-gradle-plugin, use the TestLanguages task (example). To run the model checker, use the Model Check task. It can be configured to make the build fail when there is a model check error and also show the failures as normal JUnit test fails. The model checking can be combined with the linters from the mps-qa project to further improve the code quality.</p>"},{"location":"platform_essentials/testing/#usability-testing","title":"Usability testing","text":"<p>Start by looking through the UI patterns list. To get started with testing with users, read Usability Testing 101.</p>"},{"location":"platform_essentials/testing/#expert-review","title":"Expert review","text":"<p>This is another general method of usability testing. Check the Nielsen\u2019s usability heuristics:</p> <ul> <li>Visibility of system status: The design should always keep users informed about what is going on, through appropriate feedback within a reasonable amount of time.<ul> <li>Does the editor show feedback by show model-checking messages, error cells, and other type of feedback?</li> <li>Are some kind of notifications from the IntelliJ platform (e.g. dialogs, banners) used for other information? What about the message view?</li> </ul> </li> <li>Match between system and the real world: The design should speak the users\u2019 language. Use words, phrases, and concepts familiar to the user, rather than internal jargon. Follow real-world conventions, making information appear in a natural and logical order.<ul> <li>Are the terms and concepts from the target domain used? If they are unclear they should be declared in a glossary and be referencable from other places such as the documentation.</li> </ul> </li> <li>User control and freedom: Users often perform actions by mistake. They need an obvious marked \u201cemergency exit\u201d to leave the unwanted action without having to go through an extended process.<ul> <li>While MPS supports undoing and redoing changes out of the box   and confirmation dialogs are used for asking for confirmation before taking an action, another option is described in the Google Material Design Guidelines. Successful actions can also be acknowledged through a got it notification or reverted through a custom action that is attached to a balloon.</li> <li>Are mistakes by the user caught by the model checker and displayed in the editor? </li> </ul> </li> <li>Consistency and standards: Users should not have to wonder whether different words, situations, or actions mean the same thing. Follow platform and industry conventions.<ul> <li>Is the format of error messages consistent? (e.g. trailing dot at the end of a message)</li> <li>Are the colors, fonts, and spacings consistent?</li> <li>Does the hierarchy of headers make sense?</li> <li>Do labels always look the same way? (e.g. bold, not editable)</li> <li>Do keywords, comments, and editable fields always look the same way so that they are recognizable?</li> </ul> </li> <li>Error prevention: Good error messages are important, but the best designs carefully prevent problems from occurring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action.<ul> <li>Are constraints used to restrict certain node relationships to avoid users making errors in the first place?</li> </ul> </li> <li>Recognition rather than recall: Minimize the user\u2019s memory load by making elements, actions, and options visible. The user should not have to remember information from one part of the interface to another. Information required to use the design (e.g. field labels or menu items) should be visible or easily retrievable when needed.<ul> <li>Does the user know where he can find certain actions? (inspector, context actions tool, context assistant, right-click context menu, main menu)</li> </ul> </li> <li>Flexibility and efficiency of use: Shortcuts \u2014 hidden from novice users \u2014 may speed up the interaction for the expert user so that the design can cater to both inexperienced and experienced users. Allow users to tailor frequent actions.<ul> <li>Do custom actions have default shortcuts assigned?</li> <li>Can the editor be navigated only by the keyboard?</li> <li>Can certain features be customized through preference components<ul> <li>at the project level?</li> <li>at the application level?</li> </ul> </li> </ul> </li> <li>Aesthetic and minimalist design: Interfaces should not contain information that is irrelevant or rarely needed. Every extra unit of information in an interface competes with the relevant units of information and diminishes their relative visibility.<ul> <li>Are editor cells collapsed by default that clutter the editor?</li> <li>Are optional parts hidden in the editor? (e.g. by using optional cells from the grammar cells language)</li> <li>Is the grouping of content made recognizable without great impact on the layout and design? (only spacing, borders, background color, and not everything together)</li> <li>Are colors, font weight, underlining text, and other forms of emphasizing content done in moderation?</li> </ul> </li> <li>Help users recognize, diagnose, and recover from errors: Error messages should be expressed in plain language (no error codes), precisely indicate the problem, and constructively suggest a solution.<ul> <li>Read Writing short and clear | IntelliJ Platform UI Guidelines and Punctuation</li> <li>Use the model checker to show error messages in the editor</li> <li>Use quick fixes or error intentions to provide solutions for the error</li> </ul> </li> <li>Help and documentation: It\u2019s best if the system doesn\u2019t need any additional explanation. However, it may be necessary to provide documentation to help users understand how to complete their tasks.<ul> <li>Do the users have help available? (e.g. Show Help for X in right-click context menu, external documentation, a tooltip that shows additional information or text in the inspector, or a dedicated documentation tool such as com.mbeddr.doc.aspect)</li> </ul> </li> </ul>"},{"location":"platform_essentials/testing/#performance-testing","title":"Performance testing","text":""},{"location":"platform_essentials/testing/#load-testing","title":"Load testing","text":"<ul> <li>Do bigger models still generate fast enough? Are there any timeouts while generating?</li> <li>Do bigger root nodes still render fast enough in the editor?</li> <li>When you are using an importer to create nodes: is it fast enough for big input files? Where is the limit? Is a progress bar necessary?</li> <li>Does the application load fast enough on startup for many, and big models/modules?</li> </ul>"},{"location":"platform_essentials/testing/#stress-testing","title":"Stress testing","text":"<ul> <li>Does the application still works when there is no internet connection? </li> <li>What is the maximal size of a model that generates in a timely fashion? Is model pruning needed?</li> <li>What happens when you enter the power save mode? Do things like the automatic type-system checks and background threads work again when you leave the mode?</li> </ul>"},{"location":"platform_essentials/testing/#soak-testing","title":"Soak testing","text":"<ul> <li>Does the memory consumption rises after longer use? (memory indicator in the lower right corner) Is there maybe a memory leak?</li> <li>Are all models loaded into memory after some time? (memory indicator). Models are lazily loaded which means that they are only loaded when they are needed. When all models are loaded this indicates that the models are probably accessed by accident e.g. through a global find usage search.</li> <li>Do any suspicious messages appear in the log file such as warnings about memory leaks or broken models?</li> <li>Is memory released after some time or are not needed objects never garbage collected? If not, read about Java JVM options on this page.</li> </ul>"},{"location":"platform_essentials/testing/#spike-testing","title":"Spike testing","text":"<ul> <li>Does the action <code>Reload all</code> cause any issues such as memory leaks or freezes?</li> <li>Are there any issues when clicking the memory indicator to unload all models?</li> <li>Does the main project still has good performance when you open other projects in the background?</li> </ul>"},{"location":"platform_essentials/testing/#configuration-testing","title":"Configuration testing","text":"<ul> <li>Does the application work on all supported operating systems? (e.g. Windows, Linux, Mac + M1 chip)</li> <li>Does the application works if a non-bundled Java Runtime is used? (e.g. JDK 11 instead of JBR 11 which might be needed for JCEF support)</li> <li>Can the application be started with insufficient initial memory specific in the custom VM options? (<code>Xms</code>)</li> <li>Does the editor still work when switching between different editor themes? (e.g. Light Theme, Darcula Theme, Mac Theme)</li> </ul>"},{"location":"platform_essentials/testing/#final-words","title":"Final words","text":"<p>Given enough eyeballs, all bugs are shallow.</p> <p>Eric S. Raymond (Linus\u2019s law)</p> <p>While it is possible to find many bugs with one or a handful of developers and users, it helps to have a large enough beta-tester and co-developer base to get bugs reported and fixed quickly. Sometimes it is good enough when somebody just finds a workaround.</p> <p>Other times, like in the MPS platforms, some bugs would have never been identified, were there not that many users and developers that use them daily. There are always new unexplored use cases when the platforms are included in a new project and more edge cases are detected when more users test features. While this quote was originally referring to open-source projects, this also applies to closed-source projects.</p>"},{"location":"platform_essentials/testing/#stackexchange-software-quality-assurance-testing","title":"Stackexchange: Software Quality Assurance &amp; Testing","text":"<p>These are some questions on the site Stack Exchange that are relevant for MPS projects where there are dedicated testers or testing is done by the developers themselves or another member of the team.</p> Tests and testingBugsFor developersFor testers <ul> <li>What\u2019s the difference between a good test and a bad test?</li> <li>Testing using real data of the customer</li> <li>How do you know if you are writing high quality tests?</li> <li>What would be the strategy when too many bugs are found in the final round of testing?</li> </ul> <ul> <li>What is your approach to low-priority bugs?</li> <li>Best guidelines for bug reporting?</li> <li>What is common practice for labels of the bug severity?</li> <li>How to isolate a bug?</li> <li>Who is ultimately responsible for issues that are found after software is released?</li> <li>How should a Software Tester deal with missed Defects/bugs in Production?</li> <li>Should tester fix bugs?</li> </ul> <ul> <li>Actual data for why developers shouldn\u2019t be the only ones testing their code?</li> <li>What kind of testing should a developer do before passing a build to the QA team?</li> <li>How can developers be assured that their software is fault free?</li> <li>How to deal with flaky tests that have intermittent failures?</li> <li>Is it normal to spend as much, if not more, time writing tests than actual code?</li> <li>How do I review my own code? </li> </ul> <ul> <li>Why is a dedicated QA team member necessary?</li> <li>Should a tester feel bad about finding too many defects/bugs in the product?</li> <li>What should be reported when a bug only happens 50% of the time?</li> <li>Should Testers first discuss a bug with the developers before writing a bug report?</li> <li>Should QA report bugs on features before they are fully implemented?</li> <li>How does a tester decide how much debugging/investigation to do before handing an issue over to development?</li> <li>How can a Software Tester use \u201cOut of the Box\u201d thinking approach to find more bugs?</li> <li>Can knowing too much about the tested code be a disadvantage?</li> <li>Should QA or tester mention the root cause for a bug?</li> </ul>"},{"location":"platform_essentials/mpsutils/","title":"Mbeddr MPS utilities","text":"<p>This documentation gives an introduction to the subproject com.mbeddr.mpsutil of  mbeddr.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/#incremental-computation","title":"Incremental computation","text":"<p>com.mbeddr.mpsutil.incrementalcomputation</p> <p>The language provides a single interface IncrementallyComputedValueHolder that can be implemented to support values that are automatically recomputed when a dependent value changes. The methods are documented in the behavior aspect. If a full model should be derived from an existing model, you have to use shadow models from  MPS-extensions.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/#interpreter","title":"Interpreter","text":"<p>com.mbeddr.mpsutil.interpreter</p> <p>The interpreter is described on the interpreter page.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/#stubs","title":"Stubs","text":"<p>Stub models for the following Java libraries exist:</p> <ul> <li>Mockito: a framework for unit tests</li> <li>Open CSVjav: a CSV (comma-separated values) parser library</li> <li>Batik: a toolkit for applications that want to use images in the Scalable Vector Graphics (SVG) format for various purposes, such as display, generation, or manipulation</li> <li>XML: the following jars are included:<ul> <li>XML Commons External Components XML APIs Extensions</li> <li>XML Commons Resolver Component</li> <li>Xerces2 J</li> </ul> </li> </ul> <p>The included versions might be old.</p>","tags":["mbeddr"]},{"location":"platform_essentials/mpsutils/actions/","title":"Actions","text":""},{"location":"platform_essentials/mpsutils/actions/#build-assistant","title":"Build assistant","text":"<p>com.mbeddr.mpsutil.buildassistant</p> <p>This language adds actions to make or rebuild models/modules or projects and also includes their dependencies.</p> <p>TODO: Do the official actions already provide the same functionality?</p>"},{"location":"platform_essentials/mpsutils/actions/#generic-actions","title":"Generic actions","text":"<p>com.mbeddr.mpsutil.genericactions</p> <p>As the name already implies, this language adds some new generic actions:</p> <ul> <li>Decrease MPS Editor Font Size: decreases the font size in the editor settings and updates all editors (ctrl + -)</li> <li>Increase MPS Editor Font Size: increases the font size in the editor settings and updates all editors (ctrl + +)</li> <li>Reset MPS Editor Font Size:: reset the font size to the default size (ctrl + 0, 13 pixels)</li> <li>File Manager in Output Folder: a new action in the context menu of models that opens the path of the generated files.   This action won\u2019t work if the model does not generate output files.</li> <li>File Manager in Module Folder: a new action in the context menu of modules that opens the path of the module.</li> </ul>"},{"location":"platform_essentials/mpsutils/actions/#node-access","title":"Node access","text":"<p>com.mbeddr.mpsutil.nodeaccess</p> <p>This language adds a new group of actions called Copy/Paste Special to the editor popup that opens when right-clicking in the editor:</p> <ul> <li>Copy Node as XML: serializes the selected node to XML and copies it to the system clipboard.</li> <li>Paste XML Node: deserializes a previously copied node and inserst it next to the currently selected node.</li> <li>Copy Node Info to Clipboard: copies some information (project, module, model, node, URL) about a node to the system   clipboard.</li> </ul>"},{"location":"platform_essentials/mpsutils/actions/#print","title":"Print","text":"<p>com.mbeddr.mpsutil.print.pluginSolution</p> <p>This language adds a new action to the general MPS File menu. The action Print Editor can be used to print the current editor with a printer. If the operating system permits it, this action can also be used to create a PDF from the editor.</p>"},{"location":"platform_essentials/mpsutils/actions/#refactoring","title":"Refactoring","text":"<p>com.mbeddr.mpsutil.refactoring</p> <p>This language adds support for a projection mode switcher and refactoring actions.</p>"},{"location":"platform_essentials/mpsutils/actions/#projection-mode-switcher","title":"Projection mode switcher","text":"<p>The mbeddr platform has a group Projection which is a top-level menu in MPS:</p> <p></p> <p>A projection mode switcher can be declared containing push hint options where the hints are referenced from an existing ConceptEditor context hints container. The action can be added in the Add to Menu/Button Group section editor.</p> <p>This adds a toggle to this menu/button group that toggles the referenced editor hint in the editors. When it should only be enabled for a specific concept, add a concept to only in editor with instance of.</p> <p></p>"},{"location":"platform_essentials/mpsutils/actions/#refactoring-action","title":"Refactoring action","text":"<p>The concept RefactoringAction can create an action for a simple refactoring. The title of the action can be specified with caption, and the keyboard shortcut can be defined in shortcut. Refactoring parameters can be specified in parameters. A few different choosers will be shown in the refactoring dialog for the value of the parameters:</p> <ul> <li>string: chooser for selecting a text</li> <li>+node*: chooser for selecting a node using a filter. The filter is a function that has a list of nodes to refactor as a parameter and   should return a new filtered sequence of nodes.</li> <li>project tree node: chooser for selecting a node from the project tree</li> </ul>"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/","title":"Baselanguage extensions","text":""},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#bldoc","title":"BLDoc","text":"<p>com.mbeddr.mpsutil.bldoc</p> <p>This language can be used to attach documentation via the intention <code>Attach Documentation</code> to any node. The rich text language provides the concept <code>Text</code> for writing the documentation. Two interfaces implement IWord so that any node can be referenced in the com.mbeddr.doc language: @child and @root for referencing any child nodes and named nodes respectively.</p>"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#richstring","title":"Richstring","text":"<p>com.mbeddr.mpsutil.richstring</p> <p>This BaseLanguage extension simplifies the usage of variables and Java String#format inside BaseLanguage Strings. Just add the language com.mbeddr.mpsutil.richstring to your model.</p> <p>The following example shows referencing a simple variable, embedding an expression inside a string, and the equivalent of calling <code>String.format()</code>:</p> <p></p>"},{"location":"platform_essentials/mpsutils/baselanguage_extensions/#smodule","title":"SModule","text":"<p>com.mbeddr.mpsutil.smodule</p> <p>This language adds new operations to modules:</p> <ul> <li>add dependencies: adds dependencies to one or more models to the module</li> <li>add DevKits: adds devkits to the modules</li> <li>add languages to the module: adds used languages to the module</li> <li>add model: adds a new model with the specified name to the module. The repository has to be specified as the second   parameter. If you press enter after the name, you can also add devkits, references to models, and languages to the newly created   model. In the inspector, the storage type has to be declared: it can be per root or single file persistence.</li> <li>add solution: adds a new solution to the module. The virtual package can be specified (subfolder).</li> </ul>"},{"location":"platform_essentials/mpsutils/common/","title":"Common","text":"<p>com.mbeddr.mpsutil.common</p>"},{"location":"platform_essentials/mpsutils/common/#graph","title":"Graph","text":"<p>The graph model contains classes for working with graphs as well as an implementation for the AVL tree data structure, which is a self-balancing binary search tree. The Graph class can be used together with GraphUtil, which provides the following methods:</p> <ul> <li>computeSCC(Graph): computes the strongly connected components of the given graph</li> <li>isConnected(Graph, T initial): determines whether the given directed graph corresponds to a connected graph</li> <li>computeSCCSingle(T sought, Graph): returns the set of nodes in the strongly connected component that the node to find is in</li> <li>computeTopologicalSorting(Graph, boolean silent): returns the topological sorting of the nodes of the given graph.</li> </ul>"},{"location":"platform_essentials/mpsutils/common/#model","title":"Model","text":"<p>The class ConceptInstanceFinder contains a few methods for finding instances (= nodes) of a concept:</p> <ul> <li> <p>findAllVisibleInstances(context, conceptToFind): find instances of a concept in the used languages of the model. context node\u2019s model is the starting point.</p> </li> <li> <p>findAllInstances(conceptToFind): searches for nodes of the given concept in all user models from the global scope (not including transient and temporary models)</p> </li> </ul>"},{"location":"platform_essentials/mpsutils/common/#util","title":"Util","text":"<p>The class ApplicationHelper contains a method for running a Runnable object inside a progress window that optionally can be canceled. The class ModelComparator can compare two models programmatically and report the mismatches between them. SNodeIdentityWrapper This Class is used to preserve node identity across model boundaries. This is useful in generator scenarios where nodes are copied between the different phases.</p>"},{"location":"platform_essentials/mpsutils/common/#comparator","title":"Comparator","text":"<p>com.mbeddr.mpsutil.comparator</p> <p>The class MPSNodeComparator can be used to compare two nodes programmatically. Overloaded methods for ignoring properties, ignored references and some more settings exist. The returned object of class MPSNodeComparison contains the list of differences and can also pre pretty printed by called the method <code>getDescription()</code>.</p>"},{"location":"platform_essentials/mpsutils/deprecated/","title":"Deprecated languages and solutions","text":""},{"location":"platform_essentials/mpsutils/deprecated/#build-utilities","title":"Build utilities","text":"<p>com.mbeddr.mpsutil.buildutil</p> <p>This language was an attempt to automatically update build scripts during the build. It will be removed in the future.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#code-completion-menu","title":"Code completion menu","text":"<p>com.mbeddr.mpsutil.ccmenu</p> <p>This language isn\u2019t used anymore and is disabled.</p> <p>This language added support for customizing the code completion menu with tabs and a special tab for creating reference targets. The contributions were made in a plugin solution by creating a CCMenuExtensions root node.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#forms","title":"Forms","text":"<p>com.mbeddr.mpsutil.forms</p> <p>This is an unfinished language that was probably intended to be used in com.mbeddr.mpsutil.process. This language will be removed soon.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#gradle-support","title":"Gradle support","text":"<p>com.mbeddr.mpsutil.gradlesupport</p> <p>This language was an attempt to create Gradle files from MPS. It has concepts for text files, single lines, and multiple lines. If you want to generate text files, use one of the text generator plugins from  MPS-extensions.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#http-support","title":"HTTP support","text":"<p>com.mbeddr.mpsutil.httpsupport</p> <p>This was the old HTTP support plugin. Please use the language jetbrains.mps.ide.httpsupport instead.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#icon-char","title":"Icon char","text":"<p>com.mbeddr.mpsutil.iconchar</p> <p>This language was used to programmatically create icons but is deprecated. Please use the official Icon description language instead.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#language-stats","title":"Language stats","text":"<p>com.mbeddr.mpsutil.langstats</p> <p>This language contains a concept Counter that can be populated by invoking the intention <code>Count</code> after creating a new instance in any model. It will search the current model and all imported models and will fill it with some general stats like the number of concepts, properties, or number of type system rules. The formula for the lines of code (LOC) property can be found in the editor. Most of the stats can be easily replicated with the MPS console.</p> <pre><code>Counter                  \n-----------------------  \nconcepts: 266            \nproperties: 95           \nlinks: 204               \ncells: 0                 \nnodeRefConstraints 0     \nnodePropConstraints 0    \nbehaviorMethods 0        \ntype system rules 0      \nmapping rules 0          \nstatements 721           \nintentions 0             \ntestgens 0               \n-------------------------\nLOC: 1962.1999999999998  \n</code></pre>"},{"location":"platform_essentials/mpsutils/deprecated/#license-manager","title":"License manager","text":"<p>com.mbeddr.mpsutil.licensemanager.common</p> <p>This language contains some classes of an old mbeddr license manager and will probably be removed in the future.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#make","title":"Make","text":"<p>com.mbeddr.mpsutil.make</p> <p>This plugin contains old fixes for rebuilding models/modules and projects that are already included in MPS. The plugin will be removed soon.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#multilingual","title":"Multilingual","text":"<p>This language might be removed in the future.</p> <p>com.mbeddr.mpsutil.multilingual</p> <p>The idea behind this language was to store text translations in properties files and load the through the Java ResourceBundle class. The documentation for the language can be found here as a PDF and is located in the virtual package doc.com.mbeddr.mpsutil.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#node-difference","title":"Node difference","text":"<p>com.mbeddr.mpsutil.nodediff</p> <p>These actions were used to structurally compare two nodes and are deprecated. Please use the official action Compare Two Nodes instead.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#rcp-configuration","title":"RCP configuration","text":"<p>com.mbeddr.mpsutil.rcpconfig</p> <p>This solution contains an old build script for the mbeddr RCP. It is deprecated and will be removed soon.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#run-configuration","title":"Run configuration","text":"<p>com.mbeddr.mpsutil.runconfiguration</p> <p>This language was used as a workaround for accessing the debugged node in breakpoint creators. The expression is now officially supported, this language is deprecated and will be removed soon.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#test-scope","title":"Test scope","text":"<p>com.mbeddr.mpsutil.testScope</p> <p>This language is deprecated. Please use the official testing scopes instead.</p>"},{"location":"platform_essentials/mpsutils/deprecated/#var-scope","title":"Var scope","text":"<p>com.mbeddr.mpsutil.varscope</p> <p>This language used to provide the interfaces <code>IScopeElement</code> and <code>IScopeProvider</code> to provide scopes for nodes but is now deprecated. Please use the official scopes instead.</p>"},{"location":"platform_essentials/mpsutils/generator/","title":"Generator","text":""},{"location":"platform_essentials/mpsutils/generator/#generator-facade","title":"Generator facade","text":"<p>com.mbeddr.mpsutil.generatorfacade</p> <p>This language contains a class GeneratorFacade that helps with running the generator. It contains a method <code>runGenerator</code> with different signatures that can run the generator with a specific generation plan for a defined model with a custom handler for generator messages and custom generation parameters such as save transient models (default: false) or generate in parallel (default: yes, 4 threads).</p>"},{"location":"platform_essentials/mpsutils/generator/#genutil","title":"GenUtil","text":"<p>com.mbeddr.mpsutil.genutil</p> <p>This language helps with managing user objects and creating temporary nodes for them:</p> <pre><code>createTempNode{hello -&gt; \"world\"};\n</code></pre> <p>This expression creates a new node and assigns Base Language expressions to keys of it. The keys are set internally with the setref statement which takes a key, a context node (here: the newly created node), and a target expression, and creates a new user object for this node. For normal values, setref and getref should be used to set and retrieve values from the user object respectively. For int values, setint and getint can be used.</p>"},{"location":"platform_essentials/mpsutils/generator/#mapping-labels","title":"Mapping labels","text":"<p>com.mbeddr.mpsutil.mappingLabels</p> <p>This language provides intentions for automatically creating mapping labels. One of the use cases is to migrate reference macros that use strings to identify target nodes to resolve the target by mapping labels instead.</p>"},{"location":"platform_essentials/mpsutils/generator/#postprocessgeneratedfiles","title":"postprocessGeneratedFiles","text":"<p>com.mbeddr.mpsutil.postprocessGeneratedFiles</p> <p>Add a new node generated files postprocessor facet to the plugin aspect of a language to declare a new facet that is executed after files are generated (textGen). It supports post-processor functions that have a node parameter and a path parameter that contains the path of the generated file. This method can be, for example, used to copy the generated files to a different folder:</p> <pre><code>generated files postprocessor facet testGen\n(node, path)-&gt;void {\nPath target = Paths.get(\"/var/tmp/testGen\").resolve(path.getFileName());\nmessage info \"Copying \" + path + \" to \" + target, &lt;no project&gt;, &lt;no throwable&gt;;\ntry {\nFiles.createDirectories(target.getParent());\nFiles.copy(path, target, StandardCopyOption.REPLACE_EXISTING);\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n</code></pre> <p>For simple duplicating the TextGen outcome, There\u2019s also the built-in JetBrains annotation CopyOutcome.</p>"},{"location":"platform_essentials/mpsutils/generator/#xmodel-actions","title":"XModel actions","text":"<p>com.mbeddr.mpsutil.xmodel.actions</p> <p>This language adds actions for automatically deriving generation plans. For a single or list of modules, there\u2019s the action <code>Generation Plan for Languages</code> which can be found in the context menu that opens when you right-click the modules in the logical view. There\u2019s also an action Derive Generation Plan which derives a generation plan for a model that has to be selected in a dialog that opens when executing this action. It can be found in the same places as the text preview action (for example, in the context menu of models).</p>"},{"location":"platform_essentials/mpsutils/importer_and_exporter/","title":"Importer and exporter","text":""},{"location":"platform_essentials/mpsutils/importer_and_exporter/#ecore","title":"ECore","text":"<p>com.mbeddr.mpsutil.ecore</p> <p>This is an importer and exporter of the metamodel(ECore) of the Eclipse Modelling Framework. The conversion is between an XML file and an MPS model. The importer can import Ecore and Ecore model files.</p> <p>Access the action by right-clicking a model and opening the Ecore Transformation tools group.</p>"},{"location":"platform_essentials/mpsutils/importer_and_exporter/#xml-import","title":"XML import","text":"<p>com.mbeddr.mpsutil.xmlImport.plugin</p> <p>This plugin adds two actions for importing XML files into MPS:</p> <ul> <li>Paste as XML Content: this action is located in the editor context menu and parses XML code   and adds it to the next XML node or root node.</li> <li>Import XML File(s): this action parses on or multiple XML files and creates XML root nodes for them in the current   selected model.</li> </ul>"},{"location":"platform_essentials/mpsutils/language_extensions/","title":"Language extensions","text":""},{"location":"platform_essentials/mpsutils/language_extensions/#dataflow","title":"Dataflow","text":"<p>com.mbeddr.mpsutil.dataflow</p> <p>MPS-DF is a data-flow extension for MPS. Part of the code was included in MPS itself. Please visit the following page for more information:</p> <p>An Extensible Framework for Variable-precision Data-flow Analyses in MPS | Tam\u00e1s Szab\u00f3</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#default-values-for-properties","title":"Default values for properties","text":"<p>com.mbeddr.mpsutil.propertydefault</p> <p>This language allows setting a default value for properties when they\u2019re initialized. The default value can be set by invoking the code completion on an existing property constraint inside the concept constraints of a concept and using one of the completion items with the \u201cdefault\u201d suffix:</p> <pre><code>concepts constraints TestPropertyDefault {\n...\nproperty {bool}\ndefault: true\nproperty {int}\ndefault: 42\nproperty {string}\ndefault: \"empty\"\n...\n}\n</code></pre>"},{"location":"platform_essentials/mpsutils/language_extensions/#extension-class","title":"Extension class","text":"<p>com.mbeddr.mpsutil.extensionclass</p> <p>MPS already provides a language for defining extension methods, for example, methods to be called on an object without being part of the Object\u2019s class. This language extends this mechanism to provide all static methods of a class as extension methods. They can be invoked on the type of the method\u2019s first parameter.</p> <p>Import the language and create a new ExtensionClass root node. Reference the Java class containing the static methods. Method annotations can be added to overwrite parameter names so that they\u2019re more elaborate than \u201cp0\u201d or \u201cp2\u201d.</p> <p>As a starting point, create a dependency to the model com.mbeddr.mpsutil.extensionclass.annotation.apache.commons.lang3 which provides extension methods with useful parameter names for Apache Commons StringUtils, ObjectUtils, and StringEscapeUtils.</p> <p></p>"},{"location":"platform_essentials/mpsutils/language_extensions/#language-plugin-extensions","title":"Language plugin extensions","text":"<p>com.mbeddr.mpsutil.lang.plugin.extensions</p> <p>This language contains extensions for jetbrains.mps.lang.plugin. It mainly adds support for adding actions not only at a specific position but also supports the anchors first, last, before, and after. Example: <code>add to NewProjectOrModuleGroup after position NewProject</code></p>"},{"location":"platform_essentials/mpsutils/language_extensions/#parameterized-menu","title":"Parameterized menu","text":"<p>com.mbeddr.mpsutil.parameterizedMenu</p> <p>This language is an extension of the parameterized transformation language part. When used as a menu part of it, it allows iterating over the parameter object (parameterizable parameterized menu part) or creating a dynamic submenu based on the parameter object (parameterized submenu).</p> <p></p> <p>For completion styling and item priorities, use completion styling instead</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#resources","title":"Resources","text":"<p>com.mbeddr.mpsutil.resources</p> <p>This language extends the language jetbrains.mps.lang.resources by providing more customizations. CircleCustomizable adds support for drawing the circle with a different thickness. TextCustomizable adds support for specifying the font style (plain, bold, italic), font family and offsets for the text.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#suppress-warning","title":"Suppress warning","text":"<p>com.mbeddr.mpsutil.suppresswarning</p> <p>This language allows attaching an annotation to nodes to disable all or certain type system warnings by invoking the intention <code>Toggle Suppress Warnings</code>. Different kinds of warnings can be suppressed:</p> <ul> <li>all: suppress all warnings</li> </ul> <p>In com.mbeddr.core.modules, two more data flow-related kinds exist:</p> <ul> <li>liveness: suppress dataflow liveness warning</li> <li>dataflow: suppress dataflow warning</li> </ul>"},{"location":"platform_essentials/mpsutils/language_extensions/#type-system-trace","title":"Type system trace","text":"<p>com.mbeddr.mpsutil.typesystem.trace</p> <p>This language doesn\u2019t work anymore.</p> <p>This language modifies the different type-system concepts such as comparison rule or non-type-system rules to collect information about the runtime execution time. To use it, place an instance of TraceTypesystem into a type-system aspect to include the generator of this language and set the enabled flag to true. The model contains a new action <code>Benchmark Typesystem</code> that opens a tool named <code>Type System Performance Data</code> that shows the collected information.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#xml-fix","title":"XML fix","text":"<p>com.mbeddr.mpsutil.xml.fix</p> <p>This language contains fixes for the XML language. It escapes XMl values for XML 1.0/1.1.</p>"},{"location":"platform_essentials/mpsutils/language_extensions/#unique-names","title":"Unique names","text":"<p>com.mbeddr.mpsutil.uniquenames</p> <p>MPS references all nodes by their id, not their name. Still, as humans, we see only the name, and this might be ambiguous. The Unique Names hint can be activated in MPS Preferences, Editor Hints. It shows as much of the full qualified name as required rendering a name unique.</p> <p>Example concept:</p> <p></p> <p>Example Base Language:</p> <p></p>"},{"location":"platform_essentials/mpsutils/languages/","title":"Languages","text":""},{"location":"platform_essentials/mpsutils/languages/#json","title":"JSON","text":"<p>com.mbeddr.mpsutil.json</p> <p>This language implements a simple JSON language that can be used as a generator target. The JSON file root node supports an additional package name which is used as the folder inside the generation folder where the file is generated into.</p> <p>An example of a file that can be generated:</p> <pre><code>{ \"description\" : \"This is a json file\", \"name\" : \"my json file\", \"this is an object\" : { \"And another object\" : { \"With a description\" : \"object description\", \"An array\" : [ \"valu1\", \"value2\" ], \"withANumber\" : 1.232E+231231, \"empty array\" : [ ], \"empty object\" : { }, \"empty string\" : \"\" } } }\n</code></pre> <p>An importer also exist for the language. It can import all JSON files in a folder or just single files.</p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/","title":"Plugin and RCP","text":""},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#actions-filter","title":"Actions filter","text":"<p>com.mbeddr.mpsutil.actionsfilter</p> <p>MPS contains a lot of actions that might be not needed by end users such as actions for language development and actions of the IDE platform. This language allows disabling actions inside an MPS plugin solution by defining an actions profile. Active by default can be set including an activation condition to make this profile the active profile when opening the project or RCP. All actions are disabled in a tree view and can be selected to disable them. To allow actions instead of filtering them use the intention <code>Use allow actions</code> on the actions profile. Actions in the section <code>specify toolbar</code> are displayed in the main toolbar that\u2019s located at the top left of the window.</p> <p></p> <p>To use the language, not only the language has to be installed but also the corresponding IntelliJ plugin. <code>./gradlew install</code> can install this plugin. Without the plugin, the language won\u2019t load at all.</p> <p>Development tip: when making changes to the language, make sure to disable the plugin in the preferences, so that the model is not read-only. Execute <code>./gradlew install</code> to install the plugin after making a change and restart MPS to test it.</p> <p>The predefined actions profiles can be customized by the user in preferences \u2192 Appearance &amp; Behavior \u2192 Actions. New profiles can be created by clicking the + button and deleted by clicking the - button.</p> <p></p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#preference-form","title":"Preference form","text":"<p>com.mbeddr.mpsutil.preferenceform</p> <p>This language allows adding new preference pages to Preferences\u2192Other Settings. The language uses the IntelliJ platform mechanism for adding preference pages (documentation).</p> <p>Example:</p> <p></p> <p>It supports the following options:</p> <ul> <li>scope: save the preferences on the application or project level</li> <li>help topic: The help topic is an internal identifier that can link a page in the MPS documentation.   Example: <code>preferences.intentionPowerPack</code> links to https://www.jetbrains.com/mps/webhelp/?preferences.intentionPowerPack which redirects to https://www.jetbrains.com/help/mps/intentions-settings.html. The base URL in MPS is defined as the XML configuration of a few plugins. To get the other internal names, search for <code>getHelpTopic</code> in the MPS repository and/or the IntelliJ Community repository.</li> </ul> <p>The preference form supports a few different input elements:</p> <ul> <li>password field</li> <li>checkbox</li> <li>dynamic combo box</li> <li>integer field</li> <li>predefined combo box</li> <li>text field</li> </ul> <p>The before write method is called, when the button Apply or OK is pressed. This method should update all tools or classes that reference the values of the preference form. The input fields can be accessed through this. Example:</p> <pre><code>final HttpServerConfig config = new HttpServerConfig(((int) this.port), this.enabled); HttpServerConfig.setCurrentConfig(config); extensionPoint/HttpServerConfigChangeListener/.objects.forEach({~it =&gt; it.serverChanged(config); });\n</code></pre> <p>The after read method is called after the state is loaded (for example: when the preference form is opened).</p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#wizard-process","title":"Wizard (process)","text":"<p>com.mbeddr.mpsutil.process</p> <p>This language allows creating wizards with multiple steps:</p> <p></p> <p>Create a new node of instance Process. The wizard can have input parameters and produces one output. After defining the wizard it can be invoked from an action. Example:</p> <pre><code>wizard&lt;theProcess&gt; wiz = createWizard&lt;theProcess&gt;(\"This is my testdata\");\nboolean b = wiz.show;\nSystem.out.println(\"show == \" + b);\nwiz.finish;\n</code></pre> <p>The show method shows the modal dialog and checks if it was closed with the exit code OK. The finish method executed the onFinish callback of every step. For more information, have at look the example.</p>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#new-model-rcp","title":"New Model (RCP)","text":"<p>com.mbeddr.mpsutil.rcp</p> <p>This language allows creating a new action for creating models like the action New model of mbeddr. Create an instance of NewModelDialogConfig. The following settings are supported:</p> <ul> <li>name: the name of the new action</li> <li>caption: the text that\u2019s shown for the action</li> <li>user can change persistence: a boolean flag that decides if the user can change the model\u2019s persistence type.</li> <li>default persistence: the type of model persistence that\u2019s used when the model is created</li> <li>optional devkits: devkits that are automatically added when the model is created</li> <li>show model properties: open the model properties after the model was created</li> </ul>"},{"location":"platform_essentials/mpsutils/plugin_and_rcp/#spreferences","title":"SPreferences","text":"<p>com.mbeddr.mpsutil.spreferences</p> <p>This extension allows the definition of preference pages by using MPS models. In the preference page you get a normal MPS editor, as exemplified by the mbeddr platform templates preference page:</p> <p></p> <p>Such pages are defined using an instance of PreferencePageDescription (check out the root \u201cPlatform Templates\u201d as an example). This instance must reside in a plugin solution. The data, i.e., the respective MPS model, is stored as part of the respective project or in MPS globally (this is configurable). It is possible to access the model that contains the preferences via code:</p> <p></p>"},{"location":"platform_essentials/mpsutils/testing/","title":"Testing","text":""},{"location":"platform_essentials/mpsutils/testing/#lantest","title":"Lantest","text":"<p>This language isn\u2019t working anymore.</p> <p>com.mbeddr.mpsutil.lantest</p> <p>This language was an attempt to automatically test languages, for example, check if the generation of files finished successfully or check that existing models can be instantiated again via the editor (for example: discover bugs in constraints).</p>"},{"location":"platform_essentials/mpsutils/testing/#test-utils","title":"Test utils","text":"<p>com.mbeddr.mpsutil.test.util</p> <p>The class ModelAsserter can be used to compare models inside a test case. When the two models don\u2019t match, it shows the difference between the models.</p>"},{"location":"platform_essentials/mpsutils/testing/#wait-for","title":"Wait for","text":"<p>com.mbeddr.mpsutil.blutil.test.waitfor</p> <p>For tests, this language contains an assert item wait for the waits for an expression to become true. If the condition evaluates to false, the check is repeated every m millisecond until the timeout of n milliseconds is reached. Both m and n can be set in the inspector of the statement.</p> <p>A use case for this statement could be a multithreaded code, where you have to wait for the result of a different thread:</p> <pre><code>boolean enoughTimeHasElapsed; \nApplicationManager.getApplication().executeOnPooledThread({ =&gt; \n  try { \n    Thread.sleep(50); \n  } catch (InterruptedException e) { \n    e.printStackTrace(); \n  } \n  enoughTimeHasElapsed = true; \n}); \nwait for enoughTimeHasElapsed;\n</code></pre>"},{"location":"platform_essentials/mpsutils/tools/","title":"Tools","text":"","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#context-actions","title":"Context actions","text":"<p>com.mbeddr.mpsutil.contextactions</p> <p>There\u2019s a Context Actions (JetBrains) and Context Actions 2 (mbeddr) tool. Please use the one from JetBrains instead of this language.</p> <p>This language adds a tool with context-specific editor actions that can be navigated by the mouse. For more information about the JetBrains implementation, visit the page Context actions tool | MPS</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#editing-guide","title":"Editing guide","text":"<p>com.mbeddr.mpsutil.editingGuide</p> <p>This language can create interactive exercises for end users that can be checked on the fly. An exercise contains several tasks and contains a reference to the following exercise. A single task contains a name, a description as well as the code block that should be shown in the exercise. The monitor function checks the completion status of the task. The variable <code>program</code> refers to the code section, the <code>editorContext</code> can be used, for example, to get the selected cell by calling <code>editorContext.getSelectedCell()</code>. The following objects can be returned:</p> <ul> <li>MonitorResultDone: the task was completed successfully, and the explanation is shown.</li> <li>MonitorResultError: the task was completed with an error.</li> <li>MonitorResultHint: the task was not completed successfully, and a hint is shown.</li> </ul> <p></p> <p>The task can be started by clicking the play button next to the name of a task. A new temporary model is created which contains the editable task.</p> <p></p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#favourites-plugin","title":"Favourites plugin","text":"<p>com.mbeddr.mpsutil.favourites.plugin</p> <p>The favourites view is implemented using the language com.mbeddr.mpsutil.projectview from MPS-extensions.</p> <p></p> <p>There\u2019s an action <code>Add to Favourites</code> to add a node to this view. The node can be removed by executing the action <code>Remove from Favourites</code>. Internally, the plugin is implemented using node annotations.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#generated-artifacts-review","title":"Generated artifacts review","text":"<p>com.mbeddr.mpsutil.genreview</p> <p>This language might not work correctly anymore.</p> <p>This tool can be used to view artifacts that were generated by a generator. It has a special color mapping for Java files. The button <code>Highlight lines not linked</code> should highlight the lines which aren\u2019t related to any node. When multiple original nodes can be traced to a certain file and line, and the previous and next buttons can be used to navigate to these nodes.</p> <p></p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#graphstream","title":"Graphstream","text":"<p>com.mbeddr.mpsutil.graphstream</p> <p>This language adds support for GraphStream, a dynamic Java graph library. It can show a graph inside a tool called Graphing. Have a look at the language com.mbeddr.mpsutil.graphstream.example to see how a graph can be loaded. A concept has to implement the interface GraphingElement. When the currently selected node implements the interface, a new menu View Graph appears in the editor context menu.</p> <p>The tool itself has support for history, zooming, fitting the view, and rendering the graph as a GraphViz SVG.</p> <p></p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#jung-framework","title":"JUNG framework","text":"<p>com.mbeddr.mpsutil.jung</p> <p>As an additional means of displaying relationships between nodes (next to PlantUML and the tree views) the JUNG framework was integrated for displaying graphs. As a language developer, you can implement an interface IJGraphProvider and implement a method that creates the graph:</p> <ul> <li>programmable with high-level API</li> <li>specify the initial layout</li> <li>configurable node size, color, line style, and color, fill color, shape, and label</li> <li>configurable edge width, style, color, and label</li> <li>configurable tooltip text for nodes and edges</li> <li>extensibility to plug in your layouters (such as the one from yWorks)</li> </ul> <p>Once you have created a graph, your users have many options for viewing the graph in an MPS tool window:</p> <ul> <li>double-click selects node or edge in the editor</li> <li>zoom and pan</li> <li>tooltips</li> <li>selectable layouts</li> <li>selection and highlighting of outgoing and incoming nodes and edges</li> <li>filtering based on node and edge type</li> <li>filtering along a continuous axis (for example, time)</li> <li>incremental, node-based collapsing and expansion</li> </ul> <p></p> <p>The JUNG integration is available as part of mbeddr, but also as part of the mbeddr.platform, so you can use it for your languages. Check out the Chunk node for an example of how to use it.</p> <p>A demo video of the viewer can be found here.</p> <p>To use it in your language, implement the IJGraphProvider interface. Return a JNGraph from the getGraph() method. Check out the existing implementations, and in particular, the DepGraphHelper (called from Chunk.getGraph()) to learn the details. In short, a graph is built in two steps: the first step actually adds the nodes and edges. The second step uses closures to style the graph. Examples can be seen from DepGraphHelper.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#plantuml","title":"PlantUML","text":"<p>com.mbeddr.mpsutil.plantuml.node</p> <p>This provides an integration of PlantUML with MPS. Watch this old video to get an overview.</p> <p>To use it in your languages, implement the IVisualizable interface in your language concept. Each concept can have several visualizations, called categories. The <code>getCategories()</code> method returns the list (just strings). The <code>getVisualization()</code> method then returns the actual visualization. It gets the user-requested category as an argument, as well as an empty VisGraph object. The <code>getVisualization()</code> method then has to fill the VisGraph with the actual visualization. This is done simply by using the <code>add()</code> method to build a native, textual PlantUML visualization. Check out the existing implementations of the interface to learn the details; in particular, There\u2019s a helper method on VisGraph that creates a URL for users to click in the graph: <code>createUrl(node)</code>.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#tool-runner","title":"Tool runner","text":"<p>com.mbeddr.mpsutil.toolrunner.plugin</p> <p>This solution provides an extension point ToolsSanityCheckerProvider that allows registering instances of ToolsAvailabilityChecker This interface checks the availability of external tools and their proper configuration and can be called through <code>ToolsInstallationSanityChecker.check</code>. There\u2019s also a class ToolRunnerBase, a base class for running external tools. It supports running the tool with a progress indicator, a customizable timeout, and reading the (error) output.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/tools/#trace-explorer","title":"Trace explorer","text":"<p>com.mbeddr.mpsutil.traceExplorer</p> <p>This language contributes a new tool Trace Explorer than can show and navigate traces of a model e.g. from the interpreter.</p> <p>An example can be seen in the KernelF paper. The IETS3 tracing is explained on the interpreter page.</p>","tags":["reference"]},{"location":"platform_essentials/mpsutils/ui/","title":"UI","text":""},{"location":"platform_essentials/mpsutils/ui/#cells","title":"Cells","text":""},{"location":"platform_essentials/mpsutils/ui/#asynccell","title":"AsyncCell","text":"<p>The async cell allows displaying a text-based loading indicator as long as the return string is null.</p> <p>Create a new <code>$custom cell$</code> editor cell and return a new AsyncCellProvider:</p> <pre><code>return new AsyncCellProvider(node, { =&gt;\nstring value = calculateValue(); // calculate or query your value here\nif (value.isEmpty) { return null; }\nStyle style = editorContext.?getContextCell().?getStyle();\nreturn new AsyncCellValue(value, style);\n});\n</code></pre> <p></p>"},{"location":"platform_essentials/mpsutils/ui/#framecell","title":"FrameCell","text":"<p>com.mbeddr.mpsutil.framecell</p> <p>The frame cell is a special editor cell collection that draws a top and bottom border around its contained cell. It supports the following style attributes:</p> <ul> <li>frame-color: the color of the frame (default: black)</li> <li>frame-width: the thickness of the frame (default: 1 pixel)</li> <li>frame-padding: the space between the containing cell and the frame (default: 3 pixels)</li> </ul> <p>An example can be seen in the documentation language:</p> <p></p> <p>In most cases, the language de.itemis.mps.editor.celllayout from  MPS-extensions can also be used for customizing the border and margins around a cell. Its documentation can be found here.</p>"},{"location":"platform_essentials/mpsutils/ui/#margin-cellreview","title":"Margin cell/review","text":"<p>com.mbeddr.mpsutil.margincell and com.mbeddr.mpsutil.review</p> <p>Margin cells are editor cells that are shown beyond the right editor margin, a bit like comments in Word. The ReviewNote cell implements exactly Word\u2019s comment facility as an example of the margin cell. Here is a screenshot:</p> <p></p> <p>To use the review notes, just include the respective language com.mbeddr.mpsutil.review; intentions are available to attach review notes to editor cells.</p> <p>To put your cells into the right margin, your cell must implement the IMarginCellContent interface. The editor of your cell may use the margincell-cell-width and margincell-dashed-line-interval style attributes to design the width and line style. You also have to have the actual margin cell on the root element of the editor. However, as illustrated by the CommentAnnotationContainer from the review language, you can use an annotation for this. Hence, margin comments can essentially be added to every model, without the model\u2019s language being aware of it.</p>"},{"location":"platform_essentials/mpsutils/ui/#placeholder-text-list","title":"Placeholder text list","text":"<p>com.mbeddr.mpsutil.placeholderTextList</p> <p>This language adds a new cell model that supports multiple aggregations with a custom placeholder text.</p> <p>The placeholder can be specified in the inspector by creating a query function for the placeholder text.</p>"},{"location":"platform_essentials/mpsutils/ui/#diagrams","title":"Diagrams","text":""},{"location":"platform_essentials/mpsutils/ui/#concept-diagram","title":"Concept diagram","text":"<p>com.mbeddr.mpsutil.conceptdiagram</p> <p></p> <p>Create a new root node of type ConceptDiagram. The editor should now contain an empty editor. Nodes can be dragged from the Diagram Palette to the diagram. If nodes from other languages are needed, add the language to the languages section.</p>"},{"location":"platform_essentials/mpsutils/ui/#dependencies-diagram","title":"Dependencies diagram","text":"<p>com.mbeddr.mpsutil.dependenciesdiagram</p> <p>This language contains a concept DependenciesDiagram</p> <p>Drag a model or module reference from the diagram palette to the diagram. Dependencies to other models/modules will be automatically added. The dependencies are visualized by the line between the two boxes, and its label is named after the scope of the dependency (e.g. uses if the language is imported).</p> <p></p>"},{"location":"platform_essentials/mpsutils/ui/#date-picker","title":"Date picker","text":"<p>com.mbeddr.mpsutil.datepicker</p> <p>A classic widget to select a date from a pop-up calendar.</p> <p></p> <p>There\u2019s a known issue where the date picker doesn\u2019t work when the theme is set to macOS light.</p> <p>This is only the control, i.e. the developer handles synchronizing the control with the source of the shown date. We provide hooks executed before showing the calendar, for determining whether a date is valid, and to process a selected date.</p>"},{"location":"platform_essentials/mpsutils/ui/#editor-utils","title":"Editor utils","text":"<p>com.mbeddr.mpsutil.editor.utils</p> <p>The class EditorRuntimeUtil contains a few helpful editor utility methods:</p> <ul> <li>getErrorText(EditorContext): returns the error text of the currently selected cell in the editor</li> <li>collectAllOpenEditors(Project): returns all opened MPS editors</li> <li>collectAllOpenEditorComponents(Project): return all opened editor components</li> </ul>"},{"location":"platform_essentials/mpsutils/ui/#file-picker","title":"File picker","text":"<p>com.mbeddr.mpsutil.filepicker</p> <p>This language contains the text-based files and folder pickers. The paths can be directly entered in the editor. There\u2019s also an intention <code>Open File Chooser Dialog</code> that shows a file chooser dialog. The following file pickers are supported:</p> <ul> <li>file system dir picker</li> <li>file system file picker</li> <li>macro file picker</li> <li>macro folder picker</li> <li>solution relative dir picker</li> <li>solution relative file picker</li> </ul> <p>The macro pickers can contain path variables.</p>"},{"location":"platform_essentials/mpsutils/ui/#hyperlink","title":"Hyperlink","text":"<p>com.mbeddr.mpsutil.hyperlink</p> <p>Hyperlink cells can be used for references in MPS. In contrast to normal reference cells they automatically become blue and underlined if the mouse hovers over them (no Ctrl is necessary). The following style attributes are supported:</p> <ul> <li>hyperlink-reference: create a link for a node reference</li> <li>hyperlink-handler: a function that\u2019s called when the link is clicked. The util parameter object contains a method   openInBrowser for opening a URL with the default web browser.</li> <li>hyperlink-style: can be URl or reference. The reference style forces the usage of the key ctrl to activate the hyperlink.</li> <li>hyperlink-node: the node that should be displayed after the link was clicked</li> <li>hyperlink-focus: set the focus on the target node of the hyperlink after navigating to it.</li> <li>hyperlink-select: select the target node of the hyperlink after navigating to it.</li> </ul>"},{"location":"platform_essentials/mpsutils/ui/#jfreechart","title":"JFreeChart","text":"<p>com.mbeddr.mpsutil.jfreechart</p> <p>This module contains stubs for the JFreeChart library. The charts can be viewed in an extra tool Chart by calling the following code:</p> <pre><code>ChartManager.getInstance(editorContext).setChart(node.createChart())\n</code></pre> <p>where <code>createChart</code> returns an instance of JFreeChart.</p> <p></p>"},{"location":"platform_essentials/mpsutils/ui/#target-chooser","title":"Target chooser","text":"<p>com.mbeddr.mpsutil.targetchooser</p> <p>The target chooser language provides a modal dialog for choosing nodes based on a predefined scope:</p> <p></p> <p>Example code:</p> <pre><code>TargetChooserOptions options = new TargetChooserOptions(); project.getModelAccess().runReadAction({ =&gt; options.setScope(new arraylist&lt;node&lt;&gt;&gt;{node/TargetChooser/, node/TargetChooserDialog/, node/DefaultModuleScope/}); }); TargetChooser chooser = new TargetChooser(ProjectHelper.toIdeaProject(project), options);\nTargetChooserDialog.chooseTarget(#project, options)\n</code></pre> <p>The options object has the following setters:</p> <ul> <li>setInitial: set the initially selected item. This can be a node or a model.</li> <li>setSelectionValidator: the selection validator checks if the selected target is valid or shows an error message when it\u2019s invalid. By default, no validation takes place (an empty validator is used).</li> <li>setSNodeFilter: this filter decides which nodes should be visible in the dialog (within the selected scope).   To show a node, you also have to return true for the root node, but not for all ancestors.</li> <li>setModuleScope: this scope defines the available modules that will be the sources for the nodes that will be displayed.</li> <li>addModuleFilter: an additional boolean filter for the modules of the module scope.</li> <li>showModulesPool: a flag that decides if the modules pool (last entry in logical view) should also be displayed in the dialog.</li> <li>setModelFilter: only keep the models of the specified scope where the filter returns true</li> <li>setScope: sets the scope for the items that should be displayed in the dialog. This can be an instance of   TargetChooserScope or a sequence of nodes (+ ancestor filter). By default, the specified modules scope   with the specified model and node filers applied is used.</li> </ul>"},{"location":"platform_essentials/mpsutils/ui/#user-styles","title":"User styles","text":"<p>com.mbeddr.mpsutil.userstyles</p> <p>This language provides a new annotation @userConfigurable, that can be added to a style class in a style sheet (intention:Make User Configurable). After defining a name, the user can change the style in the preferences (Preferences\u2192Editor\u2192Color Scheme\u2192Code). The following style-class items are supported:</p> <ul> <li>Foreground: equivalent to text-foreground-color</li> <li>Background: equivalent to text-background-color</li> <li>Bold: equivalent to font-style: bold</li> <li>Italic: equivalent to font-style: italic</li> <li>Effects: Dotted lines, bold underscored, underscored, underwaved: equivalent to underlined</li> <li>Effects: strikeout: equivalent to strike-out</li> </ul> <p>Further useful links for developers:</p> <ul> <li>Export IntelliJ editor themes as plugin | JetBrains blog</li> <li>UI Themes \u2014 Editor Schemes and Background Images | IntelliJ Platform Plugin SDK</li> </ul>"},{"location":"reference/abbreviations/","title":"Abbreviations","text":"<p>AI: Artificial Intelligence</p> <p>API: Application Programming Interface</p> <p>AST: Abstract Syntax Tree</p> <p>ACK: Acknowledgment</p> <p>BaseLanguage: a projectional clone of Java 6 (with optional extensions for Java 7 and 8)</p> <p>CI: Continuous Integration</p> <p>CD: Continuous Delivery</p> <p>COW: Copy On Write</p> <p>CBMC: Bounded Model Checker for C and C++ programs</p> <p>DoD: Definition of Done</p> <p>DoR: Definition of Ready</p> <p>DOM: Document Object Model</p> <p>DSL: Domain-Specific Language</p> <p>EDT: Event Dispatch Thread</p> <p>EP: Extension Point</p> <p>ES: External System</p> <p>FBI: File-Based Index</p> <p>FO: Functional Owner</p> <p>FJ: ForkJoin</p> <p>GP: Generation Plan</p> <p>HTTP: Hypertext Transfer Protocol</p> <p>HTTPS: Hypertext Transfer Protocol Secure</p> <p>HW: Hardware</p> <p>IP: Internet Protocol</p> <p>IDE: Integrated Development Environment</p> <p>IETS3: Integrated Specification Environment for the Specification of Technical Software Systems</p> <p>IoT: Internet of Things</p> <p>JAR: Java Archive</p> <p>JBR: JetBrains Runtime</p> <p>JCEF: Java Chromium Embedded Framework</p> <p>JDK: Java Development Kit</p> <p>JPS: JetBrains Project System</p> <p>JSON: Javascript Object Notation</p> <p>JRE: Java Runtime Environment</p> <p>JVM: Java Virtual Machine</p> <p>LOP: Language-oriented Programming</p> <p>LSP: Language Server Protocol</p> <p>LVCS: Local History</p> <p>LaF: Look and Feel</p> <p>MBSE: Model-Based System Engineering</p> <p>M2M: Model to Model</p> <p>M2T: Model to Text</p> <p>MDD: Model-Driven Development</p> <p>MDSD: Model-Driven Software Development</p> <p>MPS: Meta Programming System</p> <p>MR: Merge Request</p> <p>NDA: Non-Disclosure Agreement</p> <p>NPE: NullPointerException</p> <p>OS: Open Source / Operating System</p> <p>PI: Product Increment</p> <p>PM: Product Manager</p> <p>PO: Product Owner</p> <p>PR: Pull Request or Public Relations</p> <p>PSI: Program Structure Interface</p> <p>RPC: Remote Procedure Call</p> <p>RCP: Rich Client Platform</p> <p>RC: Run Configuration</p> <p>REST: Representational State Transfer</p> <p>SM: Scrum Master</p> <p>SSH: Secure Shell</p> <p>SSL: Secure Socket Layer</p> <p>SSO: Single Sign-On</p> <p>SNode: Semantic Node</p> <p>SRepository: Semantic Repository</p> <p>SSH: Secure Shell</p> <p>SSR: Structural Search and Replace</p> <p>SW: Software</p> <p>TCP: Transmission Control Protocol</p> <p>TMC: Template Mapping Configuration</p> <p>UAST: Unified Abstract Syntax Tree</p> <p>UDP: User Datagram Protocol</p> <p>UI: User Interface</p> <p>UML: Unified Markup Language</p> <p>UUID: Universally Unique Identifier</p> <p>UX: User Experience</p> <p>VCS: Version Control System</p> <p>VFS: Virtual File System</p> <p>VF: Virtual File</p> <p>VI: Virtual Interface</p> <p>VM: Virtual Machine</p> <p>VU: virtual environment (virtuelles Umfeld)</p> <p>WIP: Work in progress</p>"},{"location":"reference/actions/","title":"Actions","text":"","tags":["reference","intellij"]},{"location":"reference/actions/#commondatakeys","title":"CommonDataKeys","text":"name description Available in MPS CARET Returns a caret instance (in host or injected editor, depending on context). EDITOR Returns the currently focused editor instance. EDITOR_EVEN_IF_INACTIVE Returns an editor even if focus currently is in find bar. EDITOR_VIRTUAL_SPACE Returns whether the current location relates to a virtual space in an editor. HOST_EDITOR Returns a reference to host an editor instance, in case EDITOR key is referring to an injected editor. NAVIGATABLE Returns a <code>Navigatable</code> instance. NAVIGATABLE_ARRAY Returns several navigatables, e.g. PROJECT Returns a project if a project node is selected (in project view) PSI_ELEMENT Returns a <code>PsiElement</code> instance. PSI_FILE Returns the currently selected <code>PsiFile</code> instance. VIRTUAL_FILE Returns a <code>VirtualFile</code> instance. VIRTUAL_FILE_ARRAY Returns several <code>VirtualFile</code> instances","tags":["reference","intellij"]},{"location":"reference/actions/#platformdatakeys","title":"PlatformDataKeys","text":"name description Available in MPS ACTIONS_SORTER Deprecated. use ActionPromoter CONTENT_MANAGER Returns the managing class that\u2019s responsible for the current component\u2019s content CONTEXT_COMPONENT Returns the component that\u2019s currently in focus. CONTEXT_MENU_POINT Returns a point to guess where to show the context menu invoked by a key. COPY_PROVIDER Returns the copy provider responsible for copying data. CUT_PROVIDER Returns the cut provider responsible for cutting data. DELETE_ELEMENT_PROVIDER DOMINANT_HINT_AREA_RECTANGLE Returns the position and dimension of a hint. EXPORTER_TO_TEXT_FILE FILE_EDITOR Returns the file FILE_TEXT Returns the text of the currently selected file/file revision HELP_ID Returns help id. IS_MODAL_CONTEXT Returns Boolean. TRUE if action is executed in modal context and Boolean. FALSE if action is executed not in modal context. MODALITY_STATE See: Modality and invokeLater() - IntelliJ Platform Plugin SDK NONEMPTY_CONTENT_MANAGER Returns a non-empty managing class that\u2019s responsible for the current component\u2019s content PASTE_PROVIDER Returns the paste provider responsible for pasting data. PREDEFINED_TEXT Returns a predefined text value. PROJECT_CONTEXT Returns a project if a project node is selected (in the project view). PROJECT_FILE_DIRECTORY SEARCH_INPUT_TEXT SELECTED_ITEM Returns a single selected item. SELECTED_ITEMS Returns multiple selected items. SOURCE_NAVIGATION_LOCKED SPEED_SEARCH_COMPONENT Returns the speed search component STATUS_BAR Returns the status bar class TOOL_WINDOW Returns the current tool window TREE_EXPANDER UI_DISPOSABLE Returns the class responsible for disposing of an UI component","tags":["reference","intellij"]},{"location":"reference/being_a_good_developer/","title":"Being a good developer","text":"<p>The following sections list some topics from popular GitHub repositories and StackOverflow that deal with being a good developer. The selection is tailored to MPS developers.</p>"},{"location":"reference/being_a_good_developer/#every-programmer-should-knowprofessional-programming","title":"Every Programmer Should Know/Professional Programming","text":"BasicsAdvanced <ul> <li>40 Key Computer Science Concepts Explained In Layman\u2019s Terms</li> <li>Big-O Cheat Sheet<ul> <li>average and worst case time/space complexity of common data structures/algorithms</li> </ul> </li> <li>Learn regex the easy way + regex101 for testing regular expressions</li> <li>Command Line for Beginners</li> <li>Learn how to use Git and GitHub</li> </ul> <ul> <li>Programming Principles</li> <li>hacker-laws: Laws, Theories, Principles and Patterns that developers will find useful.</li> <li>Lessons Learned in Software Development</li> <li>Things I Learnt The Hard Way</li> <li>50 ideas that changed my life</li> <li>20 Things I\u2019ve Learned in my 20 Years as a Software Engineer</li> </ul>"},{"location":"reference/being_a_good_developer/#falsehoods-programmers-believe-in","title":"Falsehoods Programmers Believe in","text":"<p>A falsehood is an idea that you initially believed was true, but in reality, it is proven to be false.</p> <p>You might have to deal with one of the following topics when you develop a new feature or language:</p> <ul> <li>dates and time (applicable to date- and time-related languages)</li> <li>internationalization (applicable to languages that should support English and/or a second language)</li> <li>system of measurement (applicable to units-related languages)</li> <li>software engineering (versioning, paths, usernames, identifiers)</li> <li>uppercase and lowercase text</li> <li>URLs</li> </ul>"},{"location":"reference/being_a_good_developer/#questions","title":"Questions","text":""},{"location":"reference/being_a_good_developer/#self-improvement","title":"Self-improvement","text":"GeneralCognitive topicsWorkflow <ul> <li>What is the single most effective thing you did to improve your programming skills?</li> <li>How Can I Know Whether I Am a Good Programmer?</li> <li>What are non-programming mistakes that a programmer should avoid?</li> <li>How important is self-teaching in the programming field?</li> <li>Which algorithms/data structures should I \u201crecognize\u201d and know by name?</li> <li>When would someone be considered a bad programmer?</li> </ul> <ul> <li>How do I improve my memory and recall?</li> <li>How do you keep from running into the same problems over and over?</li> <li>What is the most productive way to handle development-related failures?</li> <li>Is there such a thing as Programmer\u2019s block?</li> <li>Stuck due to \u201cknowing too much\u201d</li> </ul> <ul> <li>What is the most effective work rhythm for a programmer?</li> <li>What are your initial three steps when you are first presented with a software problem?</li> <li>Programmer / Developer Personal Organization</li> <li>How can I improve my problem-solving ability?</li> <li>How to write efficient code despite heavy deadlines</li> <li>Writing robust code vs. overengineering</li> </ul>"},{"location":"reference/being_a_good_developer/#interpersonal-skills","title":"Interpersonal skills","text":"CommunicationCustomersCoworkersProgrammers <ul> <li>How should I explain technical things to non-technical people?</li> <li>How do I become better on the phone?</li> <li>Anxious during conference calls</li> <li>When is it okay to ask \u201cstupid\u201d questions in the workplace?</li> <li>Knowing when you should send message instead of asking in person</li> <li>How to make sure I understood a work assignment correctly?</li> <li>How to respond when you are asked for an estimate?</li> </ul> <ul> <li>How do I deal with a client who doesn\u2019t respect me?</li> <li>How do I tell certain customers they\u2019re not my number one priority?</li> </ul> <ul> <li>How can I avoid coming across as condescending when telling a coworker I can\u2019t work on an issue right now?</li> <li>How can I tactfully suggest improvements to others\u2019 badly designed code during review?</li> <li>Dealing with a person who continuously needs help</li> <li>Best way to tell colleague that chat is not a channel for direct response?</li> <li>How to stop someone from helping you?</li> </ul> <ul> <li>How to ask a programmer a question without getting \u201cWhy\u201d as the answer</li> <li>How to apologize when you have broken the nightly build</li> <li>I\u2019m a manager. How can I improve work relationships and communication with programmers?</li> </ul>"},{"location":"reference/code_abbreviations/","title":"Code abbreviations","text":"<p>abbr: abbreviation</p> <p>abs: absolute</p> <p>acc: accumulator</p> <p>acd: abstract concept declaration</p> <p>act: actual/action/active</p> <p>ad: aspect descriptor</p> <p>addr: address</p> <p>agg: aggregation</p> <p>algo: algorithm</p> <p>alloc: allocation</p> <p>alt: alternative</p> <p>am: abstract module</p> <p>anc: ancestor</p> <p>anno: annotation</p> <p>app: application</p> <p>arch: architecture</p> <p>arg: argument</p> <p>arr: array</p> <p>art: artifact</p> <p>ass: assessment</p> <p>ast: abstract syntax tree</p> <p>async: asynchronous</p> <p>attr: attribute</p> <p>auth: authentication</p> <p>aux: auxiliary</p> <p>avg: average</p> <p>bais: byte array input stream</p> <p>baos: byte array output stream</p> <p>bb: byte buffer</p> <p>bc: build configuration</p> <p>bd: big decimal</p> <p>bg: background/button group</p> <p>bhvr: behavior</p> <p>bim: buffered image</p> <p>bis: buffered input stream</p> <p>bl: base language/baseline</p> <p>bos: byte array output stream</p> <p>bool: boolean</p> <p>bp: breakpoint/binary persistence</p> <p>bin: binary</p> <p>br: buffered reader/break</p> <p>bt: base type</p> <p>btn: button</p> <p>buf: buffer</p> <p>buff: buffer</p> <p>ca: concept argument/child adopter</p> <p>calc: calculator/calculation</p> <p>cat: category</p> <p>cb: callback</p> <p>cc: class concept</p> <p>cd: concept declaration</p> <p>ced: concept editor declaration</p> <p>cert: certificate</p> <p>cfg: configuration</p> <p>ch: character/channel</p> <p>char: character</p> <p>chk: check</p> <p>csum: checksum</p> <p>ci: config item</p> <p>circ: circle</p> <p>cl: classloader</p> <p>clm: classloader manager</p> <p>clr: clear</p> <p>cls: class</p> <p>cmd: command</p> <p>cme: cross-model environment</p> <p>cmp: compare/comparison</p> <p>com: commercial/common/communication</p> <p>comm: common</p> <p>cos: cosine</p> <p>cot: cotangent</p> <p>cn: context node</p> <p>cncpt: concept</p> <p>cnt: count/counter</p> <p>col: column</p> <p>coll: collection</p> <p>comp: component</p> <p>concat: concatenation</p> <p>conf: configuration</p> <p>config: configuration</p> <p>cond: condition</p> <p>conn: connection</p> <p>cons: constructor</p> <p>const: constant</p> <p>conv: conversation</p> <p>coord: coordinate</p> <p>cp: checkpoint (state)/copy/current process</p> <p>cpb: concept presentation builder</p> <p>cr: concept reference/registry</p> <p>cs: change set/collection sequence</p> <p>ct: classifier/current type</p> <p>ctrl: control</p> <p>ctx: context</p> <p>cpy: copy</p> <p>cur: current</p> <p>curr: current</p> <p>db: database</p> <p>dbg: debug</p> <p>dbgr: debugger</p> <p>dcl: declaration</p> <p>dec: decimal/decrease</p> <p>decl: declaration</p> <p>def: definition/default</p> <p>del: deletion</p> <p>dep: dependency</p> <p>desc: description</p> <p>descr: description</p> <p>dest: destination</p> <p>dev: developer/development/device</p> <p>df: decimal format</p> <p>di: debug info</p> <p>dir: direction/directory</p> <p>diff: difference</p> <p>dim: dimension</p> <p>dis: disable</p> <p>disp: display</p> <p>dir: directory</p> <p>div: division</p> <p>dk: delta key/devkit</p> <p>doc: document/documentation</p> <p>drv: driver</p> <p>dr: dynamic reference</p> <p>ds: data source</p> <p>dsm: default semantic model</p> <p>dst: destination</p> <p>dt: delta time</p> <p>dx: difference x</p> <p>dy: difference y</p> <p>dyn: dynamic</p> <p>ec: editor component</p> <p>ec: editor context</p> <p>ecf: editor cell factory</p> <p>ed: enumeration declaration/extension descriptor</p> <p>eg: engaged generator/example given</p> <p>el: element</p> <p>en: enable</p> <p>env: environment</p> <p>eof: end of file</p> <p>ep: else part/element provider/extension point</p> <p>eq: equal/equation</p> <p>err: error</p> <p>et: element type</p> <p>evt: event</p> <p>ex: exception/executor</p> <p>exe: executable/execution</p> <p>expr: expression</p> <p>ext: extension</p> <p>fac: factory</p> <p>fc: file chooser/first child</p> <p>fct: facet</p> <p>fd: file description</p> <p>fdc: file delta collector</p> <p>fig: figure</p> <p>fmt: format</p> <p>fn: function</p> <p>fp: file processor/function pointer</p> <p>fqn: full qualified name</p> <p>fr: file reader</p> <p>frac: fraction</p> <p>freq: frequence</p> <p>fs: file system</p> <p>fsm: file status manager</p> <p>ft: float type/file tracker</p> <p>fun: function</p> <p>fw: file writer</p> <p>fwiw: for whomever is wondering</p> <p>fyi: for your information</p> <p>gd: graphics device/generator descriptor</p> <p>ge: graphics environment/greater or equal</p> <p>gen: generation</p> <p>gm: generator module/generator mappings</p> <p>gms: generator module scanner/model generation status manager</p> <p>gp: generation plan/partitioner</p> <p>gr: generator</p> <p>gt: greater than</p> <p>gtf: generation target facet</p> <p>gvd: global variable declaration</p> <p>hdr: header</p> <p>hex: hexadecimal</p> <p>hm: hashmap</p> <p>hor: horizontal</p> <p>horz: horizontal</p> <p>href: hyper-reference</p> <p>hs: hashset</p> <p>hsb: hue/saturation/brightness</p> <p>id: identification/identifier</p> <p>idx: index</p> <p>img: image</p> <p>imp: import</p> <p>impl: implementation</p> <p>inc: increase/inclusion</p> <p>info: information</p> <p>init: initialization</p> <p>ins: insertion</p> <p>inst: instance</p> <p>int: integer</p> <p>intf: interface</p> <p>intfc: interface concept</p> <p>ir: icon resource</p> <p>isr: input stream reader</p> <p>iter: iterator</p> <p>qec: query execution context</p> <p>jftr: just for the record</p> <p>jc: Java compiler</p> <p>js: JavaScript</p> <p>jmf: Java module facet</p> <p>km: keymap</p> <p>kv: key value</p> <p>kwd: keyword</p> <p>la: line annotation</p> <p>lang: language</p> <p>lat: latitude</p> <p>lca: lowest common ancestor</p> <p>lcv: lower-case value</p> <p>ld: link declaration/descriptor</p> <p>le: less or equal</p> <p>len: length</p> <p>lf: line feed</p> <p>lhs: left-hand side</p> <p>lib: library</p> <p>ll: linked list</p> <p>lm: labeled mappings</p> <p>lnk: link</p> <p>loc: location</p> <p>lon: longitude</p> <p>lr: language registry/runtime</p> <p>ls: list of strings</p> <p>ls: list sequence</p> <p>lt: left type</p> <p>lvd: local variable declaration</p> <p>lvl: level</p> <p>ma: model access</p> <p>mac: macOS</p> <p>mat: matrix</p> <p>mah: model access helper</p> <p>max: maximum</p> <p>mc: mapping configuration</p> <p>md: model</p> <p>mdm: model dependencies manager</p> <p>mdr: model dependency resolver</p> <p>mem: member/memory</p> <p>meta: metadata</p> <p>meth: method</p> <p>mf: manifest</p> <p>mf: model factory</p> <p>mg: models generator</p> <p>mgr: manager</p> <p>mgsm: module generation status manager</p> <p>mi: model imports/internal model</p> <p>mid: middle</p> <p>min: minimum</p> <p>mis: model input stream</p> <p>misc: miscellaneous</p> <p>ml: module loader/model</p> <p>mm: modules miner</p> <p>mn: model name</p> <p>mng: manager</p> <p>mo: module options</p> <p>mod: modulo</p> <p>mos: model output stream</p> <p>mp: model persistence</p> <p>mplr: multiplier</p> <p>mr: model/module reference/model root/model/module repository</p> <p>mrd: model root descriptor</p> <p>mrf: module repository facade</p> <p>msg: message</p> <p>mul: multiplication</p> <p>mut: mutable</p> <p>mv: module dependency versions</p> <p>nav: navigation</p> <p>nb: node builder</p> <p>nbn: node builder node</p> <p>nc: named concept</p> <p>ne: not equal/expression</p> <p>net: network</p> <p>nl: new line/number literal</p> <p>nm: nodes matcher</p> <p>np: null pointer/node pointer</p> <p>nr: number/node reference</p> <p>ns: name source/space</p> <p>nuli: number literal</p> <p>num: number (of)</p> <p>nut: node under test</p> <p>nwf: node weave support</p> <p>obj: object</p> <p>oct: octal</p> <p>ord: order</p> <p>ois: object input stream</p> <p>oos: object output stream</p> <p>op: operation/operator</p> <p>opt: option/optional</p> <p>org: organization</p> <p>orig: origin</p> <p>os: operation system</p> <p>otoh: on the other hand</p> <p>out: output</p> <p>pa: property attribute</p> <p>param: parameter</p> <p>pb: popup builder</p> <p>pd: parameter declaration/property descriptor</p> <p>perf: performance</p> <p>pf: persistence facade</p> <p>ph: phase</p> <p>pic: picture</p> <p>pkg: package</p> <p>pm: project manager</p> <p>pma: project model access</p> <p>pol: polygon</p> <p>pred: predication/predicate</p> <p>pos: position</p> <p>pwr: power</p> <p>pp: project pane</p> <p>pq: priority queue</p> <p>pref: preference</p> <p>priv: private</p> <p>prev: previous</p> <p>proc: process</p> <p>prod: production</p> <p>prof: profiler</p> <p>prog: program</p> <p>proj: project</p> <p>prop: property</p> <p>psc: package scope control</p> <p>pt: primitive type/pointer type/performance tracer</p> <p>ptg: parallel template generator</p> <p>ptr: pointer</p> <p>pub: public</p> <p>pw: print writer</p> <p>px: pixel/position x</p> <p>py: position y</p> <p>qry: query</p> <p>ra: read action</p> <p>rand: random</p> <p>rc: rule consequence</p> <p>rd: reference descriptor</p> <p>rec: rectangle/record</p> <p>ref: reference</p> <p>rel: relative</p> <p>repo: repository</p> <p>req: requirement</p> <p>res: result</p> <p>ret: return</p> <p>rgb: red/blue/green</p> <p>rhs: right-hand side</p> <p>rl: reference link</p> <p>rm: remove/root model</p> <p>rnd: random</p> <p>rng: range</p> <p>rect: rectangle</p> <p>recv: receive</p> <p>regex: regular expression</p> <p>rem: remote</p> <p>req: request</p> <p>res: response/result</p> <p>ret: return</p> <p>rev: revision</p> <p>rm: remove</p> <p>rt: right type/runtime/result type/result type</p> <p>rv: result value</p> <p>sa: style attribute</p> <p>sb: string builder/buffer</p> <p>sc: script</p> <p>sca: smart completion action</p> <p>scb: script builder</p> <p>scs: subconcepts</p> <p>sd: solution descriptor</p> <p>sdk: software development kit</p> <p>sdmd: semantic model model descriptor</p> <p>sec: section</p> <p>sel: selector/selection</p> <p>sem: semaphore</p> <p>sep: separator</p> <p>seq: sequence</p> <p>sess: session</p> <p>sfr: static field reference</p> <p>si: substitute info</p> <p>sin: sine</p> <p>sl: selection/statement list</p> <p>sln: solution</p> <p>sm: semantic model/state machine</p> <p>smc: static method call</p> <p>sn: semantic node</p> <p>snt: snode type</p> <p>sol: solver</p> <p>sp: settings provider</p> <p>spec: specification</p> <p>sqrt: square root</p> <p>sr: search results/source root</p> <p>src: source</p> <p>st: solver task/string tokenizer</p> <p>stat: statistic</p> <p>std: standard</p> <p>stmt: statement</p> <p>str: string</p> <p>sub: subtraction</p> <p>sum: addition</p> <p>sync: synchronization</p> <p>sw: string writer</p> <p>ta: text area</p> <p>tc: TeamCity/template context/template call</p> <p>td: table data/type definition/target declaration</p> <p>tee: template execution environment</p> <p>teei: template execution environment implementation</p> <p>temp: temporary</p> <p>tf: template fragment</p> <p>tg: template generator/thread group</p> <p>tgl: toggle</p> <p>tgs: text generation support</p> <p>tgt: target</p> <p>th: throwable</p> <p>ti: test item</p> <p>tm: table model</p> <p>tm: template module</p> <p>tmp: temporary/temperature</p> <p>tmr: timer</p> <p>tn: target node/tree node</p> <p>tpe: type</p> <p>tqc: template query context</p> <p>tr: table row/trigger</p> <p>trd: thread</p> <p>trf: transferable</p> <p>tsc: type size configuration</p> <p>tt: transition trace</p> <p>tv: text value</p> <p>tvr: type variable reference</p> <p>tx: transaction</p> <p>txt: text</p> <p>ud: used dependency</p> <p>ui: user interface</p> <p>ul: used language</p> <p>util: utilities</p> <p>usr: user</p> <p>uo: user object</p> <p>val: value</p> <p>var: variable</p> <p>vc: value container</p> <p>vd: variable declaration</p> <p>vep: visible element provider</p> <p>ver: version/vertical</p> <p>vert: vertical</p> <p>vf: virtual file</p> <p>vfs: virtual file system</p> <p>vp: view port/virtual package</p> <p>wa: write action</p> <p>win: window/Windows</p> <p>wiz: wizard</p> <p>wrk: worker</p> <p>wrt: with reference to</p> <p>ws: white space</p> <p>zf: zip file </p>"},{"location":"reference/core_languages/","title":"Core languages","text":"<p>This table contains all languages shipped with MPS. Languages in gray color are test languages that are only used internally by MPS. Languages that are crossed out, are deprecated or unused.</p> jetbrains.mps.baselanguage classifiers javadoc closures unitTest logging collections collections.trove builders checkedDots overloadedOperators lightweightdsl regexp tuples varVariable extensionMethods doubleDispatch constructors blTypes baselanguageInternal jdk7 jdk8 jetbrains.mps.build mps mps.runner mps.testManifest mps.tests startup tips workflow jetbrains.mps.console base ideCommands internalCommands scripts jetbrains.mps.core properties xml xml.sax jetbrains.mps.debugger api.lang java.customViewers java.evaluation java.privateMembers jetbrains.mps.editor contextActionsTool.lang.menus jetbrains.mps.execution commands common  configurations settings util jetbrains.mps.ide httpsupport vcs.modelmetadata jetbrains.mps.lang access checkedName context context.defs aspect core descriptor extension actions behavior dataFlow dataFlow.analyzers editor findUsages intentions makeup messages migration migration.util modelapi pattern refactoring project quotation resources rulesAndMessages scopes script sharedConcepts slanguage smodel smodel.query smodelTests structure test test.generator text textGen traceable typesystem util.order jetbrains.mps.make facet reduced script jetbrains.mps.lang.plugin plugin standalone jetbrains.mps.lang.feedback messages problem problem.childAndProp problem.failingRule problem.scopes problem.structural skeleton jetbrains.mps.lang.editor diagram figures forms imageGen menu.extras table tooltips jetbrains.mps.lang.constraints msg.specification rules rules.kinds rules.skeleton jetbrains.mps.generator generationContext generationParameters plan misc jetbrains.mps.refactoring.participant jetbrains.mps.tool.gentest jetbrains.mps.vcs.mergehints","tags":["reference","mps_language"]},{"location":"reference/exceptions/","title":"Exceptions","text":"<p>What does the dollar sign in error messages mean?</p> <p>This indicates an anonymous class (more information).</p> <p>For a list of common Java exceptions have a look at The Exception Hierarchy and Types of Exception in Java with Examples. This list includes documentation for all kinds of exceptions.</p> <p>Here is some more information for exceptions that often occur in MPS:</p> <ul> <li>java.util.ConcurrentModificationException</li> <li>java.lang.NullPointerException</li> </ul>","tags":["reference"]},{"location":"reference/exceptions/#mps","title":"MPS","text":"","tags":["reference"]},{"location":"reference/exceptions/#module-validation","title":"Module validation","text":"<p>Can\u2019t find / couldn\u2019t load X (language, devkit\u2026).</p> <p>X couldn\u2019t be loaded. The plugin containing X was not installed / the dependency was not fetched and added as a library. Install the plugin/open the project containing the language/fetch the dependency.</p> <p>Could not find generation plan associated with the devkit</p> <p>\u201cThe generation plan couldn\u2019t be loaded. The plugin containing X was not installed / the dependency was not fetched and added as a library. Install the plugin/open the project containing the language/fetch the dependency.</p> <p>No generation plan in the model X</p> <p>The referenced model for the generation plan in the properties doesn\u2019t contain a generation plan.</p> <p>Cycle in extended language hierarchy.</p> <p>The languages extend each other in a way that creates a cycle hierarchy e.g. two languages extend each other. Read the documentation section about dependencies. Use the dependency analyzer to better understand the cycle.</p> <p>Subconcepts for language x found, missing extends dependency.</p> <p>One or multiple concepts extend concepts from another language but don\u2019t have an extends dependency on the other language.  Add a extends dependency to the other language in the dependency section of the module properties.</p> <p>Superfluous extended module x, not referenced from structure aspect.</p> <p>The dependency was accidentally added or is needed for a custom aspect and not the structure or editor aspect. Remove the dependency in the first case, and keep it for the second case.</p> <p>Missing runtime module x.</p> <p>A runtime solution couldn\u2019t be loaded. The plugin containing the solution was not installed / the dependency was not fetched and added as a library.                                                                                       </p> <p>Runtime module x is not a solution.</p> <p>The added runtime module is a language or other type of module. Add a module of type solution instead.</p> <p>Missing accessory model x.</p> <p>The accessory model couldn\u2019t be loaded. The plugin containing the model was not installed / the dependency was not fetched and added as a library.    | Install the plugin/open the project containing the language/fetch the dependency.</p> <p>Accessory model x is not visible in the module.</p> <p>All modules visible from given modules include modules from dependencies, transitive, respecting reexports, including initial modules.  Make sure to only refer to one of those modules.                            |</p> <p>Accessory model x uses language it\u2019s part of.</p> <p>Mark the model as \u2018do not generate\u2019 to avoid unnecessary bootstrap dependency. </p> <p>Accessory models are deemed design-time facility </p> <p>The models are used to generate some code, this is not the best way to utilize accessory models. The models shall be marked as \u2018do not generate\u2019.</p>","tags":["reference"]},{"location":"reference/exceptions/#type-of-exceptions","title":"Type of exceptions","text":"name example description ModuleLoaderException none Deprecated exception that is not thrown anymore since 2017. ModelReadException *.mps file is corrupt Indicates failure to read model. Is not specific to \u2018default\u2019 persistence. IllegalModelAccessException Accessing a model from a Java Swing button handler (e.g. you can read model only inside read actions). Indicates forbidden operations over a SModel/SNode (official documentation). AssertionError: Taking target node of dynamic referencewhose source node is not in a model a node is in detached state The source of a dynamic reference doesn\u2019t belong to a model. Position n is not allowed for X The caret is the first position but the first position was disabled in the style. The caret is in a position that is not allowed. ModuleClassLoaderIsDisposedException A module couldn\u2019t be disposed and it is loaded again. The classloader of a module is disposed. ClassLoader of module could not be found A module can\u2019t be loaded because the classloader can\u2019t be found.","tags":["reference"]},{"location":"reference/exceptions/#intellij-platform","title":"IntelliJ Platform","text":"name example description PluginException Usage of deprecated Intellij SDK methods Represents an internal error caused by a plugin. It may happen if the plugin\u2019s code fails with an exception, or if the plugin violates some contract of IntelliJ Platform. AlreadyDisposedException An already disposed objects gets disposed again (e.g. a Project) Exception from class SlowOperations MPS-34029 If you get an exception from this method, then you need to move the computation to the background while also trying to avoid blocking the UI thread as well. Argument for @NotNull parameter must not be null method with @NotNull Annotation is called with null A null check failed (official documentation). Action dispatch failed. The execution of an action failed. ExtensionInstantiationException This exception is thrown if some extension (service, extension point) failed to initialize.","tags":["reference"]},{"location":"reference/extension_points/","title":"Extension Points","text":"<p>For a list of IntelliJ extensions, have a look at Extension Point and Listener List | IntelliJ SDK. The following table lists MPS extension points that use the IntelliJ mechanism.</p> Qualified name Interface Description com.intellij.mps.VisibleModuleMask VisibleModuleMask controls the visibility of MPS modules com.intellij.mps.modelRootFactory ModelRootFactory factory which creates model roots jetbrains.mps.nodeStructureViewProvider NodeStructureViewProvider provider for the structure tool in the lower left corner com.intellij.mps.editorWarningsProvider EditorWarningsProvider provider for warnings that are shown above the editor (e.g. the node is in a read-only model) mps.CodeNavigationProvider CodeNavigationProvider opener for generated code files mps.ModelValidator ModelValidator validate a list of models com.intellij.mps.modelRootEntry ModelRootEntry UI entry in the module properties dialog corresponding to the specific model root com.intellij.mps.facetTabFactory FacetTabEP custom facets (e.g. ideaPlugin facet) com.intellij.mps.modelTemplateProvider ModelTemplateProvider create new models using a template com.intellij.mps.renameRefactoringContributor RenameRefactoringContributor contribution to the rename refactoring action jetbrains.mps.debugger.PositionProvider PositionProvider source position of current debugger line <p>The following sections are about MPS extension points.</p>","tags":["reference"]},{"location":"reference/extension_points/#mps","title":"MPS","text":"Name Interface Description GeneratorCache GenerationCacheContainer cache container for the generator NodeRenamer lambda rename node action HttpRequestHandlerEP IHttpRequestHandlerFactory handle requests to the HTTP server MoveModelParticipantEP MoveModelRefactoringParticipant move model refactoring action MoveNodeParticipantEP MoveNodeRefactoringParticipant move node refactoring action PersistentRefactoringParticipantsEP Iterable refactoring action RenameNodeParticipantEP RenameNodeRefactoringParticipant rename node action MoveNodesActionEP MoveNodesAction move nodes action customContainers lambda custom collection container ActionIDs List action IDs for tests LanguageAspectsEP LanguageAspectDescriptor automatic gen. language descriptors","tags":["reference"]},{"location":"reference/extension_points/#mbeddr","title":"Mbeddr","text":"Name Interface Description CustomLayouts LayoutFactory custom layouts for the Java JUNG diagram language ToolsSanityCheckerProvider ToolsAvailabilityChecker check if external tools are available HttpRequestHandlers IRequestHandler handle requests to the HTTP server ServletProvider IServletProvider the provider of the servlet CCMenuExtensionsDescriptors ICCMenuExtensionsDescriptor code completion menu extension customValueRenderer CustomValueRenderer renderer for custom values in the trace explorer MULTILINGUAL_PROVIDERS ILanguageProvider language provider for multilingual InterpreterExtensionPoint IInterpreter custom interpreter implementation HttpServerConfigChangeListener IHttpServerConfigChangeListener listener for config changes of the HTTP server TargetModifiers ITargetCreationActionModifier modify the target creation in the code completion menu TargetSetupExtensions ITargetSetupExtension modify the target setup in the code completion menu wizardExtensions ExtensionProvider add a step to a wizard RichstringEvaluator IRichstringEvaluator evaluate a richstring","tags":["reference"]},{"location":"reference/extension_points/#mps-extensions","title":"MPS-extensions","text":"Name Interface Description IdentityCalculators IdentityCalculator identity calculators for the model merger GlobalDiagramMouseListener MouseListener mouse listeners for diagrams diagramPaletteEntryProvider IPaletteEntryExtensionProvider entry provider for diagrams diagramConnectionTypesProvider IConnectionTypesExtensionProvider connection types provider for diagrams DragSelectionHandlerEP IDragSelectionHandler drag selection handler ModelMergeExt MergePolicySpec merge policy specifications for model merger","tags":["reference"]},{"location":"reference/extension_points/#iets3","title":"IETS3","text":"Name Interface Description recordIsComparable RecordIsComparable custom comparator for records solverfactories SolverTaskFactory factory for creating solver tasks primitiveTypeMapper PrimitiveTypeMapper basic methods of primitive KernelF types constraintViolationHandler ConstraintViolationHandler handler for KernelF constraint violations mutatorContributions MutatorFactory factory for creating mutators runtimeResolverConfig RuntimeResolverConfig configuration for runtime resolver (e.g. functions resolving) nameCompletionProvider NameCompletionProvider name completion provider for nodes of type <code>INamedConcept</code> + a prefix identifierConfigurator IdentifierConfigurator configuration for identifiers (allow umlauts/paragraphs) nixHandler NixHandler handler for empty (\u2018nothing\u2019) values mandatoryAttributesProviderEP IMandatoryAttributesProvider provider for mandatory attributes","tags":["reference"]},{"location":"reference/gitignore/","title":"Gitignore file","text":"<p>More than one correct .gitignore file exists for MPS. It\u2019s recommended to ignore generated files but there can also be cases where you can\u2019t execute your generated files, so you have to add them to version control and check the difference manually. This isn\u2019t a complete list.</p>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#generated-files-mps","title":"Generated files (MPS)","text":"<ul> <li>source_gen: the generated Java files</li> <li>source_gen.caches:<ul> <li>dependencies: cache files that list dependencies between used classes and interfaces</li> <li>generated: a list of generated files</li> </ul> </li> <li>classes_gen: the generated Java class files</li> <li>test_gen: the generated JUnit Java test files</li> <li>doc_gen: generated files of the mbeddr documentation language (optional)</li> <li>result_gen: </li> <li>*.iws: old MPS project setting files</li> <li>.mps/shelf: local user commits</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#testing","title":"Testing","text":"<ul> <li>JUnit<ul> <li>junitvmwatcher*.properties</li> <li>build.properties</li> <li>TEST*.xml: test results</li> <li>junit*.properties</li> </ul> </li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#mps-gradle-plugin","title":"MPS-Gradle-Plugin","text":"<ul> <li>build/mps: the downloaded MPS version</li> <li>artifacts: the downloaded dependencies</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#temporary-filesfolders","title":"Temporary files/folders","text":"<ul> <li>tmp: temporary files by the Java compiler</li> <li>build/generated</li> <li>.mps-caches</li> <li>/system/: the system directory</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#build-tools","title":"Build tools","text":"<ul> <li>Gradle<ul> <li>.gradle: Project-specific cache directory generated by Gradle</li> <li>.gradletasknamecache</li> <li>**/build/repo/</li> <li>**/build/distributions</li> <li>**/build/classes</li> <li>Gradle.gitignore</li> </ul> </li> <li>Maven<ul> <li>Maven.gitignore </li> </ul> </li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#intellij-files","title":"IntelliJ files","text":"<ul> <li>.idea: the folder of an IntelliJ project </li> <li>workspace.xml: a file that saves project specific settings</li> <li>JetBrains.gitignore</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#intellij-plugins","title":"IntelliJ plugins","text":"<ul> <li>Markdown Navigator plugin (optional)<ul> <li>.idea/**/markdown-navigator.xml</li> <li>.idea/**/markdown-navigator-enh.xml</li> <li>.idea/**/markdown-navigator/</li> </ul> </li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/gitignore/#macos","title":"MacOS","text":"<ul> <li>.DS_Store: short for Desktop Service Store; it stores custom attributes of its containing folder, such as folder view options, icon positions, and other visual information (reference).</li> <li>macOS.gitignore(optional)</li> </ul>","tags":["reference","infrastructure"]},{"location":"reference/icons/","title":"Icons","text":"","tags":["reference","ui"]},{"location":"reference/icons/#actions","title":"Actions","text":"<p>The icons can be used in this repository by inserting the corresponding code in a markdown file.</p> Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-actions-addToVcs:</code> <code>:mps-actions-groupByCategory:</code> <code>:mps-actions-groupByModel:</code> <code>:mps-actions-groupByModule:</code> <code>:mps-actions-groupByRoot:</code> <code>:mps-actions-groupSearched:</code> <code>:mps-actions-importModulesFromFolder:</code> <code>:mps-actions-migrationBulb:</code> <code>:mps-actions-searchedNodes:</code> <code>:mps-actions-showCellInExplorer:</code> <code>:mps-actions-showOnlyStrongSubtypes:</code>","tags":["reference","ui"]},{"location":"reference/icons/#ant","title":"Ant","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-ant-build:</code>","tags":["reference","ui"]},{"location":"reference/icons/#cell-explorer","title":"Cell explorer","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-cellExplorer-cellActionKey:</code> <code>:mps-cellExplorer-cellComponent:</code> <code>:mps-cellExplorer-cellConst:</code> <code>:mps-cellExplorer-cellDefault:</code> <code>:mps-cellExplorer-cellError:</code> <code>:mps-cellExplorer-cellExplorer:</code> <code>:mps-cellExplorer-cellKeyMap:</code> <code>:mps-cellExplorer-cellProperty:</code> <code>:mps-cellExplorer-cells:</code>","tags":["reference","ui"]},{"location":"reference/icons/#ant_1","title":"Ant","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-debugger-addBreakpoint:</code> <code>:mps-debugger-deleteBreakpoint:</code> <code>:mps-debugger-goToSource:</code>","tags":["reference","ui"]},{"location":"reference/icons/#general","title":"General","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-general-dependencies:</code> <code>:mps-general-generatorsPriorities:</code> <code>:mps-general-java:</code> <code>:mps-general-modelChecker:</code> <code>:mps-general-runtime:</code> <code>:mps-general-usedLanguages:</code>","tags":["reference","ui"]},{"location":"reference/icons/#generator","title":"Generator","text":"Code Icon <code>:mps-generator-copy-operation:</code> <code>:mps-generator-input:</code> <code>:mps-generator-macro:</code> <code>:mps-generator-mapping-script:</code> <code>:mps-generator-output:</code> <code>:mps-generator-rule:</code> <code>:mps-generator-rule-consequence:</code> <code>:mps-generator-switch:</code> <code>:mps-generator-template:</code>","tags":["reference","ui"]},{"location":"reference/icons/#idea-integration","title":"Idea Integration","text":"Code Icon <code>:mps-ideaIntegration-connected:</code> <code>:mps-ideaIntegration-connected_with_errors:</code> <code>:mps-ideaIntegration-disconnected:</code> <code>:mps-ideaIntegration-trying:</code>","tags":["reference","ui"]},{"location":"reference/icons/#nodesmodels","title":"Nodes/Models","text":"","tags":["reference","ui"]},{"location":"reference/icons/#models","title":"Models","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-nodes-models-accessoryModel:</code> <code>:mps-nodes-models-aspect:</code> <code>:mps-nodes-models-templatesModel:</code> <code>:mps-nodes-models-tests:</code>","tags":["reference","ui"]},{"location":"reference/icons/#nodes","title":"Nodes","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-nodes-action:</code> <code>:mps-nodes-behavior:</code> <code>:mps-nodes-constraint:</code> <code>:mps-nodes-dataFlow:</code> <code>:mps-nodes-default:</code> <code>:mps-nodes-devkit:</code> <code>:mps-nodes-editor:</code> <code>:mps-nodes-generator:</code> <code>:mps-nodes-language:</code> <code>:mps-nodes-mappingConf:</code> <code>:mps-nodes-model:</code> <code>:mps-nodes-node:</code> <code>:mps-nodes-projectModels:</code> <code>:mps-nodes-reduction:</code> <code>:mps-nodes-refactoring:</code> <code>:mps-nodes-rootNode:</code> <code>:mps-nodes-rule:</code> <code>:mps-nodes-solution:</code> <code>:mps-nodes-structure:</code> <code>:mps-nodes-textGen:</code> <code>:mps-nodes-transient:</code> <code>:mps-nodes-transientDisable:</code> <code>:mps-nodes-action:</code> <code>:mps-nodes-action:</code> <code>:mps-nodes-action:</code>","tags":["reference","ui"]},{"location":"reference/icons/#project-pane","title":"Project Pane","text":"Code Icon Icon_2x <code>:mps-projectPane-logicalView:</code>","tags":["reference","ui"]},{"location":"reference/icons/#public","title":"Public","text":"Code Icon Icon_2x <code>:mps-public-about:</code> <code>:mps-public-error:</code> <code>:mps-public-mps:</code> MPS2 <code>:mps-public-mps_16:</code> <code>:mps-public-MPS_welcomeScreen:</code> <code>:mps-public-splash:</code>","tags":["reference","ui"]},{"location":"reference/icons/#tool-windows","title":"Tool Windows","text":"Code Icon Icon_2x Icon_dark Icon_2x_dark <code>:mps-toolWindows-cellExplorer:</code> <code>:mps-toolWindows-default:</code> <code>:mps-toolWindows-modelChecker:</code> <code>:mps-toolWindows-OpenTerminal_13x13:</code> <code>:mps-toolWindows-typeTraceView:</code>","tags":["reference","ui"]},{"location":"reference/included_libraries/","title":"Included Java libraries","text":"<p>The following list contains the Java libraries in the lib folder that are installed in MPS 2021.1 and later by default:</p>"},{"location":"reference/included_libraries/#mps-runtime-classes","title":"MPS runtime classes","text":"<ul> <li>mps-tuples.jar</li> <li>mps-closures.jar</li> <li>mps-references.jar</li> <li>mps-collections.jar</li> <li>mps-behavior-runtime.jar</li> <li>mps-constraints-runtime.jar</li> <li>mps-editor-runtime.jar</li> </ul>"},{"location":"reference/included_libraries/#intellij","title":"IntelliJ","text":""},{"location":"reference/included_libraries/#lib-folder","title":"Lib folder","text":"<ul> <li>ant/lib<ul> <li>ant.jar: Ant</li> <li>ant-launcher.jar Ant launcher</li> </ul> </li> <li>ecj.jar: Eclipse compiler for java</li> <li>jdom.jar JDOM (XML manipulation)</li> <li>log4j.jar: Log4j 1.2 (logging library)</li> <li>trove4j.jar: GNU Trove (primitive type support for Java collections API)</li> <li>xstream.jar: XStream (XML (de)serializing)</li> <li>annotations.jar: JetBrains Java annotations (useful Java annotations such as @NotNull and @ScheduledForRemoval)</li> <li>junit4.jar: JUnit 4 (unit test framework)</li> <li>asm-all.jar: ASM (Java bytecode manipulation and analysis framework)</li> <li>icons.jar: IntelliJ icons</li> <li>util.jar: Utility classes from the IntelliJ platform</li> <li>openapi.jar: API to interact with the IntelliJ platform</li> <li>platform.jar: IntelliJ platform SDK </li> <li>platform-api.jar: public API of the IntelliJ platform SDK</li> <li>platform-impl.jar: implementation classes of the IntelliJ platform SDK</li> <li>platform-objectSerializer-annotations.jar: annotations of the object serializer library (code)</li> <li>platform-statistics-devkit.jar: statistics plugin of the IntelliJ platform (source)</li> <li>jaxb-api.jar: Jakarta XML API</li> <li>jaxb-runtime.jar: JAXB (JSR 222) reference implementation (maven)</li> <li>javax.activation.jar: JavaBeans(TM) Activation Framework (used by the JavaMail(TM) API to manage MIME data)</li> <li>ext/diffutils.jar: text-based diff tools of the IntelliJ platform</li> <li>netty-buffer.jar: abstraction of a byte buffer, the fundamental data structure to represent a low-level binary and text message JavaDoc</li> <li>netty-codec-http: encoder, decoder and their related message types for HTTP (JavaDoc)</li> <li>nanoxml.jar: nanoxml (non-validating XML parser)</li> <li>microba.jar: Microba controls (set of Java Swing components)</li> <li>miglayout-swing.jar: MigLayout (Java layout manager)</li> </ul>"},{"location":"reference/included_libraries/#plugins-folder","title":"plugins folder","text":"<ul> <li>devkit/lib/devkit-jps.jar</li> <li>git4idea/lib<ul> <li>git4idea.jar: Java classes for interacting with Git</li> <li>git4idea-rt.jar: runtime classes of the plugin</li> <li>resources_en.jar: resource bundles of the plugin</li> </ul> </li> <li>svn4idea/lib<ul> <li>svn4idea.jar: Java classes for interacting with SVN</li> <li>sqlite-jdbc.jar: SQLite JDBC Driver</li> <li>resources_en.jar: resource bundles of the plugin</li> </ul> </li> <li>java/lib<ul> <li>ecj.jar: Eclipse compiler for Java</li> <li>java-api.jar: API for interacting with ECJ</li> <li>java-impl.jar runtime classes of the plugin</li> </ul> </li> </ul>"},{"location":"reference/included_libraries/#changes-in-20212x","title":"Changes in 2021.2.x","text":"<p>TODO</p>"},{"location":"reference/included_libraries/#changes-in-20213x","title":"Changes in 2021.3.x","text":"<p>TODO</p>"},{"location":"reference/included_libraries/#changes-in-20222","title":"Changes in 2022.2","text":"<p>TODO</p>"},{"location":"reference/issue_trackers/","title":"Issue trackers","text":"","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#reporting-bugs","title":"Reporting bugs","text":"<p>Before reporting bugs, you might want to read: How to Report Bugs Effectively This page should then help you find existing issues for MPS and the MPS platforms and help you decide which issue tracker an issue belongs to. Most of the time, the package name tells you the correct project. Nearly all editor-related languages (diagrams, tables, tree notations\u2026) are located in  MPS-extensions. The following list gives a rough overview:</p> <ul> <li> MPS2 MPS<ul> <li>jetbrains.*</li> <li>MPS.*</li> <li>collections.runtime.*</li> <li>collections_trove.runtime.*</li> <li>closures.runtime.*</li> </ul> </li> <li> mbeddr platform<ul> <li>com.mbeddr.core.*</li> <li>com.mbeddr.mpsutil.*</li> <li>com.mbeddr.doc.*</li> </ul> </li> <li> mbeddr<ul> <li>com.mbeddr.core.*</li> </ul> </li> <li> IETS3<ul> <li>org.iets3.*</li> </ul> </li> <li> MPS-extensions<ul> <li>com.mbeddr.*</li> <li>de.itemis.*</li> <li>de.slisson.*</li> <li>de.q60.*</li> <li>com.dslfoundry.* (DSLFoundry)</li> <li>org.modelix.model* (if it is related to the API, otherwise go to modelix itself)</li> </ul> </li> <li>JetBrains Runtime Environment or OpenJDK<ul> <li>com.sun.*</li> <li>java.*</li> <li>javax.*</li> <li>jdk.*</li> <li>org.w3c.*</li> <li>org.xml.sax.*</li> </ul> </li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#mps-youtrack","title":"MPS (YouTrack)","text":"<p>This is the public issue tracker of JetBrains MPS itself. Consult the documentation for instructions on how to report an issue. YouTrack follows the CommonMark specification with extensions that support key features like autolinks and tables: YouTrack Markdown Reference</p> <ul> <li>open critical/show-stopper issues</li> <li>open critical/major issues</li> <li>open issues sorted by votes</li> <li>open issues sorted by comments</li> <li>search query reference | jetbrains.com</li> <li>MPS X Release Notes (example)</li> <li>tickets which encourage contributions</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#mps-extensions","title":"MPS-extensions","text":"<p>If you are unsure which languages are part of this platform, please consult the full extension list page.</p> <ul> <li>open issues</li> <li>reference: search issues and pull requests | github.com</li> <li>diagram:meta issue</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#mbeddr","title":"Mbeddr","text":"<p>This is the issue tracker related to mbeddr.core. You can find there issues related to the mbeddr platform which is used, for example, by IETS3.OS. Please note that nearly all editor-related languages were moved to  MPS-extensions, so please submit those tickets in the corresponding issue tracker.</p> <ul> <li>open issues</li> <li>open platform issues</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#iets3os","title":"IETS3.OS","text":"<p>This issue tracker is most of the time needed for tickets related to KernelF.</p> <ul> <li>open issue</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#intellij-platform","title":"IntelliJ platform","text":"<p>This issue tracker contains issues for IntelliJ IDEA/the IntelliJ platform SDK which MPS is based on. The used IntelliJ platform can be found on the  MPS download page or through MPS \u2192 About MPS. The build number consists of three parts. Example: <code>MPS 2021.3.1 Build: 213.7172.958</code>. 213 stands for 2021.3, and the IntelliJ platform version is 213.7172 which can be checked by visiting the IntelliJ IDEA download page. If an MPS issue is related to the platform, it is forwarded by the MPS team to the platform team.</p> <ul> <li>open IntelliJ IDEA issues</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#jetbrains-runtime","title":"JetBrains Runtime","text":"<p>JetBrains Runtime is a fork of OpenJDK available for Windows, Mac OS X, and Linux. It includes several enhancements in font rendering, HiDPI support, windowing/focus subsystems, performance improvements and general bugfixes.</p> <p>It\u2019s highly unlikely that you have to submit an issue to this tracker yourself.</p> <p>This issue tracker is relevant for JCEF, UI-related glitches and complete Java crashes as MPS is using the JetBrains Runtime instead of the normal JRE. The JetBrains runtime is installed in the jbr folder of the MPS installation. The corresponding JBR version for an IntelliJ platform release can be found in the JetBrainsRuntime readme.</p> <ul> <li>open issues</li> <li>open JCEF issues</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/issue_trackers/#openjdk","title":"OpenJDK","text":"<p>It\u2019s highly unlikely that you have to submit an issue to this tracker yourself.</p> <p>This issue tracker is only listed for reference purposes. If there\u2019s an OpenJDK issue that affects JetBrains products, it will likely be fixed in the JetBrains Runtime.</p> <ul> <li>open issues</li> </ul>","tags":["reference","troubleshooting"]},{"location":"reference/standard_plugins/","title":"Standard plugins in MPS","text":"<p>The following list contains the plugins that are installed in MPS 2021.1 and later by default:</p>"},{"location":"reference/standard_plugins/#mps","title":"MPS","text":"<ul> <li>mps-build: Build languages (jetbrains.mps.build)</li> <li>jetpad: JetPad Projectional Editing Framework (jetbrains.jetpad)</li> <li>mps-console: console (jetbrains.mps.console)</li> <li>mps-context-actions: context actions tool (jetbrains.mps.editor.contextActions)</li> <li>mps-core: MPS Core which includes core stubs, aspects, Ant related code, the MPS Kernel, editor, devkits, baselanguage, the languages for langue design, the make framework, XML language etc.</li> <li>mps-debugger-api: Debugger API (jetbrains.mps.debugger.api)</li> <li>mps-debugger-java: Java debugger for MPS (jetbrains.mps.debugger.java)</li> <li>mps-devkit: plugin that contains all IDE related functionality of the language design plugins and baselanguage</li> <li>mps-diagram-editor: diagramming editor (deprecated) (jetbrains.mps.lang.editor.diagram)</li> <li>mps-execution-api: Execution Api and Utility Languages (jetbrains.mps.execution.api)</li> <li>mps-execution-configurations: Execution configuration (jetbrains.mps.execution.configurations)</li> <li>mps-execution-languages: Execution languages (jetbrains.mps.execution.configurations)</li> <li>mps-git4idea: MPS Git integration - stubs (jetbrains.mps.git4idea.stubs)</li> <li>mps-httpsupport: HTTP support plugin (jetbrains.mps.ide.httpsupport)</li> <li>mps-java: MPS Java IDE integrations (jetbrains.mps.ide.java)</li> <li>mps-make: Make framework (jetbrains.mps.ide.make)</li> <li>mps-memtool: Memory tool (jetbrains.mps.ide.memtool)</li> <li>mps-migration: Migration support (jetbrains.mps.ide.migration.workbench)</li> <li>mps-modelchecker: Model checker (jetbrains.mps.ide.modelchecker)</li> <li>mps-project-migrations: Migrations from the previous MPS version (jetbrains.mps.ide.mpsmigration)</li> <li>mps-samples: Shipped samples for MPS (Samples to tutorials, other sample projects)</li> <li>mps-testing: languages for unit-testing java code and MPS aspects such as editors and the type system</li> <li>mps-tooltips: Tooltips for MPS editors; they are showcased in the Tooltip Sample (jetbrains.mps.lang.editor.tooltips)</li> <li>mps-trove: Custom containers designed to work with primitive data types (trove4j Java library)</li> <li>mps-vcs: version control integration (jetbrains.mps.vcs)</li> </ul>"},{"location":"reference/standard_plugins/#intellij-plugins","title":"IntelliJ plugins","text":"<p>The sources for most of the plugins can be found in the plugins folder of the IntelliJ community repository.</p> <ul> <li>copyright: copyright (com.intellij.copyright)</li> <li>github: GitHub (org.jetbrains.plugins.github)</li> <li>java: Java related libraries such as an Ant Javac2 Task, the eclipse standalone compiler, JetBrains annotations and libraries for the Java Virtual Machine Process Status Tool (jps.)</li> <li>laf-macos/laf-windows10 Mac/Windows-specific theme (laf=look and feel)</li> <li>markdown: Markdown (org.intellij.plugins.markdown)</li> <li>properties: properties (com.intellij.properties)</li> <li>properties-resource-bundle-editor: resource bundle editor (com.intellij.properties.bundle.editor)</li> <li>settings-repository: settings repository (org.jetbrains.settingsRepository)</li> <li>sh: shell script (com.jetbrains.sh)</li> <li>svn4idea: subversion (Subversion)</li> <li>tasks: task management (com.intellij.tasks)</li> <li>terminal: terminal (org.jetbrains.plugins.terminal)</li> <li>platform-images: image-related functionality (com.intellij.platform.images)</li> <li>vcs-changeReminder: ChangeReminder (com.jetbrains.changeReminder)</li> </ul>"},{"location":"reference/standard_plugins/#changes-in-20212x","title":"Changes in 2021.2.x","text":"<ul> <li>mps-build-ui: MPS build wizard (jetbrains.mps.build.ui)</li> <li>mps-spellcheck: Spellcheck integration for MPS using the IntelliJ plugin Grazie (jetbrains.mps.editor.spellcheck)</li> </ul>"},{"location":"reference/standard_plugins/#changes-in-20213x","title":"Changes in 2021.3.x","text":"<ul> <li>mps-ant-make: make execution code (jetbrains.mps.tool.make)</li> <li>mps-kotlin: MPS Kotlin implementation (jetbrains.mps.kotlin)</li> <li>mps-navbar: navigation bar that supports the MPS model hierarchy (jetbrains.mps.navbar)</li> </ul>"},{"location":"reference/tips_for_os_maintainers/","title":"Tips for open source maintainers","text":"<p>Best practices:</p> <ul> <li>Best practices for maintainers | opensource.guide</li> <li>Seven ways to be an effective Open Source Maintainer</li> </ul> <p>Code reviews:</p> <ul> <li>The Code Reviewer\u2019s Guide | google.github.io</li> <li>The Change Author\u2019s Guide | google.github.io</li> <li>How to find positive things in a code review?</li> </ul> <p>Tools (general):</p> <ul> <li>mps-gradle-plugin: Gradle plugin to build &amp; test languages and to support various tasks related to custom RCP packaging.</li> <li>Material for MkDocs: static documentation generator which uses Markdown</li> <li>Badges for your repository</li> </ul> <p>Tools (GitHub):</p> <ul> <li>GitHub Actions/Awesome Actions</li> <li>GitHub Pages</li> <li>Find (almost) any GitHub user\u2019s email address!: find out more information about a contributor</li> <li>Publishing Java packages with Maven</li> </ul> <p>Licenses</p> <ul> <li>Choose an open source license</li> <li>How open source licenses work</li> </ul> <p>Reference:</p> <ul> <li>Github vs Gitlab vs Bitbucket</li> <li>Why do programmers write closed source applications and then make them free?</li> </ul>","tags":["reference"]},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#aspect","title":"aspect","text":"<ul> <li>Accessory models</li> <li>Action aspect</li> <li>Behavior aspect</li> <li>Constraints aspect</li> <li>Dataflow aspect</li> <li>Documentation aspect</li> <li>Editor aspect</li> <li>Feedback aspect</li> <li>FindUsages aspect</li> <li>Generator aspect</li> <li>Intentions aspect</li> <li>Listener aspect</li> <li>Migration aspect</li> <li>Plugin aspect</li> <li>polymorphic functions aspect</li> <li>Refactorings aspect</li> <li>Scripts aspect</li> <li>Structure aspect</li> <li>Test aspect</li> <li>TextGen aspect</li> <li>Transformations aspect</li> <li>Typ system aspect</li> <li>VCS aspect</li> <li>Virtual Interfaces aspect</li> </ul>"},{"location":"tags/#baselanguage","title":"baselanguage","text":"<ul> <li>Index</li> <li>Deprecation</li> <li>Readability/maintainability</li> <li>Baselanguage and extensions</li> <li>Double dispatch</li> </ul>"},{"location":"tags/#baselanguage-extension","title":"baselanguage-extension","text":"<ul> <li>Baselanguage and extensions</li> <li>Double dispatch</li> </ul>"},{"location":"tags/#beginner","title":"beginner","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#best_practise","title":"best_practise","text":"<ul> <li>Java (Base language)</li> <li>Java style guide</li> <li>Programming principles</li> <li>Index</li> <li>Deprecation</li> <li>Readability/maintainability</li> <li>Language design</li> <li>UI patterns</li> <li>User experience</li> </ul>"},{"location":"tags/#bugs","title":"bugs","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#build","title":"build","text":"<ul> <li>Build</li> </ul>"},{"location":"tags/#classpath","title":"classpath","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#customization","title":"customization","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#dependencies","title":"dependencies","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#dsl","title":"dsl","text":"<ul> <li>Language design</li> </ul>"},{"location":"tags/#examples","title":"examples","text":"<ul> <li>Example actions using locks</li> </ul>"},{"location":"tags/#files","title":"files","text":"<ul> <li>External files and tools</li> </ul>"},{"location":"tags/#general","title":"general","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#generator","title":"generator","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#guide","title":"guide","text":"<ul> <li>Editing this guide</li> <li>Creating a command line tool</li> <li>Development guide</li> </ul>"},{"location":"tags/#iets3","title":"iets3","text":"<ul> <li>KernelF</li> <li>Platform essentials</li> <li>Common concepts and interfaces</li> <li>Contributing</li> <li>Interpreter, coverage and tracing</li> <li>Platform build scripts</li> </ul>"},{"location":"tags/#infrastructure","title":"infrastructure","text":"<ul> <li>CI</li> <li>Git</li> <li>Gradle</li> <li>Building Mbeddr locally</li> <li>Build folder</li> <li>Platform build scripts</li> <li>Gitignore file</li> </ul>"},{"location":"tags/#intellij","title":"intellij","text":"<ul> <li>IntelliJ UI</li> <li>IntelliJ integration</li> <li>IntelliJ SDK</li> <li>Writing an MPS plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Index</li> <li>Actions</li> </ul>"},{"location":"tags/#interactive","title":"interactive","text":"<ul> <li>Console</li> </ul>"},{"location":"tags/#internals","title":"internals","text":"<ul> <li>Index</li> <li>Classloading</li> <li>Editor development</li> <li>IntelliJ UI</li> <li>IntelliJ integration</li> <li>IntelliJ SDK</li> <li>Navigating the MPS sources</li> <li>Utility classes</li> <li>Writing an MPS plugin with Kotlin</li> <li>Java Chromium Embedded Framework</li> <li>Index</li> <li>Named threads</li> <li>Example actions using locks</li> </ul>"},{"location":"tags/#java","title":"java","text":"<ul> <li>Java (Base language)</li> <li>Java style guide</li> <li>Java Chromium Embedded Framework</li> </ul>"},{"location":"tags/#java_integration","title":"java_integration","text":"<ul> <li>Creating a command line tool</li> <li>Classloading</li> <li>Writing an MPS plugin with Kotlin</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#mac","title":"mac","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#mbeddr","title":"mbeddr","text":"<ul> <li>General</li> <li>BigProject</li> <li>Building Mbeddr locally</li> <li>Development guide</li> <li>Miscellaneous topics</li> <li>Platform essentials</li> <li>Common concepts and interfaces</li> <li>Interpreter, coverage and tracing</li> <li>Platform build scripts</li> <li>Mbeddr MPS utilities</li> </ul>"},{"location":"tags/#mps-extensions","title":"mps-extensions","text":"<ul> <li>Cell Layout</li> <li>General</li> </ul>"},{"location":"tags/#mps_extensions","title":"mps_extensions","text":"<ul> <li>Platform essentials</li> <li>Common concepts and interfaces</li> <li>Platform build scripts</li> </ul>"},{"location":"tags/#mps_language","title":"mps_language","text":"<ul> <li>Build</li> <li>Core languages</li> </ul>"},{"location":"tags/#native","title":"native","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#openapi","title":"openapi","text":"<ul> <li>Open API</li> </ul>"},{"location":"tags/#plugins","title":"plugins","text":"<ul> <li>Plugins</li> <li>Classloading</li> <li>Writing an MPS plugin with Kotlin</li> <li>General</li> </ul>"},{"location":"tags/#reference","title":"reference","text":"<ul> <li>New pages</li> <li>Original authors</li> <li>Utility classes</li> <li>Named threads</li> <li>Tools</li> <li>Actions</li> <li>Core languages</li> <li>Exceptions</li> <li>Extension points</li> <li>Gitignore file</li> <li>Icons</li> <li>Issue trackers</li> <li>Tips for open source maintainers</li> </ul>"},{"location":"tags/#safety","title":"safety","text":"<ul> <li>Language design</li> </ul>"},{"location":"tags/#settings","title":"settings","text":"<ul> <li>Trouble shooting guide</li> </ul>"},{"location":"tags/#solution","title":"solution","text":"<ul> <li>General</li> </ul>"},{"location":"tags/#sources","title":"sources","text":"<ul> <li>Navigating the MPS sources</li> </ul>"},{"location":"tags/#standalone","title":"standalone","text":"<ul> <li>RCP</li> </ul>"},{"location":"tags/#theory","title":"theory","text":"<ul> <li>Language design</li> </ul>"},{"location":"tags/#tools","title":"tools","text":"<ul> <li>External files and tools</li> </ul>"},{"location":"tags/#troubleshooting","title":"troubleshooting","text":"<ul> <li>Console</li> <li>Debugging</li> <li>General</li> <li>Trouble shooting guide</li> <li>Issue trackers</li> </ul>"},{"location":"tags/#ui","title":"ui","text":"<ul> <li>Index</li> <li>Visual guide</li> <li>Editor development</li> <li>IntelliJ UI</li> <li>Index</li> <li>UI patterns</li> <li>User experience</li> <li>Icons</li> </ul>"},{"location":"tags/#utility","title":"utility","text":"<ul> <li>BigProject</li> <li>Utility classes</li> </ul>"},{"location":"tags/#windows","title":"windows","text":"<ul> <li>OS-specific bugs</li> </ul>"},{"location":"tags/#z3","title":"z3","text":"<ul> <li>Language design</li> </ul>"}]}